using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SubiektGTModels.Models;

public partial class TestowyContext : DbContext
{
    public TestowyContext()
    {
    }

    public TestowyContext(DbContextOptions<TestowyContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AbAktualizacjeBiznesowe> AbAktualizacjeBiznesowes { get; set; }

    public virtual DbSet<AbLicznik> AbLiczniks { get; set; }

    public virtual DbSet<AdrEmail> AdrEmails { get; set; }

    public virtual DbSet<AdrEwid> AdrEwids { get; set; }

    public virtual DbSet<AdrHistorium> AdrHistoria { get; set; }

    public virtual DbSet<ApAp> ApAps { get; set; }

    public virtual DbSet<ApLog> ApLogs { get; set; }

    public virtual DbSet<ApLogOpi> ApLogOpis { get; set; }

    public virtual DbSet<ApZapisy> ApZapisies { get; set; }

    public virtual DbSet<BeforeDropOldTable> BeforeDropOldTables { get; set; }

    public virtual DbSet<BibDokument> BibDokuments { get; set; }

    public virtual DbSet<BibZawartoscPliku> BibZawartoscPlikus { get; set; }

    public virtual DbSet<CaClientAccountParam> CaClientAccountParams { get; set; }

    public virtual DbSet<CenCennikCecha> CenCennikCechas { get; set; }

    public virtual DbSet<CenCennikDokument> CenCennikDokuments { get; set; }

    public virtual DbSet<CenCennikElement> CenCennikElements { get; set; }

    public virtual DbSet<CenCennikGrupa> CenCennikGrupas { get; set; }

    public virtual DbSet<CenCennikKolumna> CenCennikKolumnas { get; set; }

    public virtual DbSet<CenCennikSzablon> CenCennikSzablons { get; set; }

    public virtual DbSet<CentParametr> CentParametrs { get; set; }

    public virtual DbSet<CpCelPrzetwarzanium> CpCelPrzetwarzania { get; set; }

    public virtual DbSet<CrmParametr> CrmParametrs { get; set; }

    public virtual DbSet<CsSkrypt> CsSkrypts { get; set; }

    public virtual DbSet<CtxGrupa> CtxGrupas { get; set; }

    public virtual DbSet<CtxKonfiguracja> CtxKonfiguracjas { get; set; }

    public virtual DbSet<DeklCukierDokument> DeklCukierDokuments { get; set; }

    public virtual DbSet<DeklCukierDokumentTow> DeklCukierDokumentTows { get; set; }

    public virtual DbSet<DeklDeklViudo> DeklDeklViudos { get; set; }

    public virtual DbSet<DeklEDekl> DeklEDekls { get; set; }

    public virtual DbSet<DeklEDeklLog> DeklEDeklLogs { get; set; }

    public virtual DbSet<DeklEwid> DeklEwids { get; set; }

    public virtual DbSet<DeklIntrastatPole> DeklIntrastatPoles { get; set; }

    public virtual DbSet<DeklJpkV7pole> DeklJpkV7poles { get; set; }

    public virtual DbSet<DeklParametr> DeklParametrs { get; set; }

    public virtual DbSet<DeklPfron> DeklPfrons { get; set; }

    public virtual DbSet<DeklPitZdPole> DeklPitZdPoles { get; set; }

    public virtual DbSet<DeklPlik> DeklPliks { get; set; }

    public virtual DbSet<DeklPole> DeklPoles { get; set; }

    public virtual DbSet<DeklPoleViudo> DeklPoleViudos { get; set; }

    public virtual DbSet<DeklVatUePole> DeklVatUePoles { get; set; }

    public virtual DbSet<DeklVatZdPole> DeklVatZdPoles { get; set; }

    public virtual DbSet<DeklWersja> DeklWersjas { get; set; }

    public virtual DbSet<DeklWersjaLatest> DeklWersjaLatests { get; set; }

    public virtual DbSet<DeklWersjaOld1> DeklWersjaOld1s { get; set; }

    public virtual DbSet<DeklZu> DeklZus { get; set; }

    public virtual DbSet<DekpNaliczenie> DekpNaliczenies { get; set; }

    public virtual DbSet<DekzDeklaracja> DekzDeklaracjas { get; set; }

    public virtual DbSet<DekzNaliczenie> DekzNaliczenies { get; set; }

    public virtual DbSet<DekzPozycja> DekzPozycjas { get; set; }

    public virtual DbSet<DekzPozycjaOpi> DekzPozycjaOpis { get; set; }

    public virtual DbSet<DfwFakturyWewnetrzne> DfwFakturyWewnetrznes { get; set; }

    public virtual DbSet<DfwPozycja> DfwPozycjas { get; set; }

    public virtual DbSet<DfwVat> DfwVats { get; set; }

    public virtual DbSet<DkrAutomat> DkrAutomats { get; set; }

    public virtual DbSet<DkrAutomatPozycja> DkrAutomatPozycjas { get; set; }

    public virtual DbSet<DkrBilansOtwarciaDostawy> DkrBilansOtwarciaDostawies { get; set; }

    public virtual DbSet<DkrBilansOtwarciaZmiana> DkrBilansOtwarciaZmianas { get; set; }

    public virtual DbSet<DkrBilansOtwarciaZmianaSzczegoly> DkrBilansOtwarciaZmianaSzczegolies { get; set; }

    public virtual DbSet<DkrBilansOtwarcium> DkrBilansOtwarcia { get; set; }

    public virtual DbSet<DkrDokImportowany> DkrDokImportowanies { get; set; }

    public virtual DbSet<DkrDokument> DkrDokuments { get; set; }

    public virtual DbSet<DkrParametr> DkrParametrs { get; set; }

    public virtual DbSet<DkrParametrDokDoDekretacji> DkrParametrDokDoDekretacjis { get; set; }

    public virtual DbSet<DkrParametrDziennika> DkrParametrDziennikas { get; set; }

    public virtual DbSet<DkrPieczecKsiegowa> DkrPieczecKsiegowas { get; set; }

    public virtual DbSet<DkrPieczecKsiegowaPozycja> DkrPieczecKsiegowaPozycjas { get; set; }

    public virtual DbSet<DkrPozycja> DkrPozycjas { get; set; }

    public virtual DbSet<DkrPozycjaWydatekNaPojazd> DkrPozycjaWydatekNaPojazds { get; set; }

    public virtual DbSet<DkrRoznicaKursowa> DkrRoznicaKursowas { get; set; }

    public virtual DbSet<DkrRoznicaKursowaPozycja> DkrRoznicaKursowaPozycjas { get; set; }

    public virtual DbSet<DkrSladRewizyjny> DkrSladRewizyjnies { get; set; }

    public virtual DbSet<DkrWydatekNaPojazd> DkrWydatekNaPojazds { get; set; }

    public virtual DbSet<DkrWzorzec> DkrWzorzecs { get; set; }

    public virtual DbSet<DkrWzorzecPozycja> DkrWzorzecPozycjas { get; set; }

    public virtual DbSet<DksHomeBanking> DksHomeBankings { get; set; }

    public virtual DbSet<DksKasa> DksKasas { get; set; }

    public virtual DbSet<DksKasaBo> DksKasaBos { get; set; }

    public virtual DbSet<DksParametrCesja> DksParametrCesjas { get; set; }

    public virtual DbSet<DksParametrFinansowy> DksParametrFinansowies { get; set; }

    public virtual DbSet<DnkNotaDokKorygowane> DnkNotaDokKorygowanes { get; set; }

    public virtual DbSet<DnkNotaKorygujaca> DnkNotaKorygujacas { get; set; }

    public virtual DbSet<DokDokBiblioteka> DokDokBibliotekas { get; set; }

    public virtual DbSet<DokDokCza> DokDokCzas { get; set; }

    public virtual DbSet<DokDokument> DokDokuments { get; set; }

    public virtual DbSet<DokDokumentDefiniowalny> DokDokumentDefiniowalnies { get; set; }

    public virtual DbSet<DokDokumentDefiniowalnyOperacja> DokDokumentDefiniowalnyOperacjas { get; set; }

    public virtual DbSet<DokDokumentDefiniowalnyWzw> DokDokumentDefiniowalnyWzws { get; set; }

    public virtual DbSet<DokDokumentKonwersja131Sp2> DokDokumentKonwersja131Sp2s { get; set; }

    public virtual DbSet<DokDokumentTechniczny> DokDokumentTechnicznies { get; set; }

    public virtual DbSet<DokFunduszPromocji> DokFunduszPromocjis { get; set; }

    public virtual DbSet<DokMagDysp> DokMagDysps { get; set; }

    public virtual DbSet<DokMagRuch> DokMagRuches { get; set; }

    public virtual DbSet<DokMagWart> DokMagWarts { get; set; }

    public virtual DbSet<DokMagWartKkdr> DokMagWartKkdrs { get; set; }

    public virtual DbSet<DokOznaczeniaJpkVat> DokOznaczeniaJpkVats { get; set; }

    public virtual DbSet<DokParametr> DokParametrs { get; set; }

    public virtual DbSet<DokParametrDf> DokParametrDfs { get; set; }

    public virtual DbSet<DokParametrTp> DokParametrTps { get; set; }

    public virtual DbSet<DokPowiazanieFsdPa> DokPowiazanieFsdPas { get; set; }

    public virtual DbSet<DokPozycja> DokPozycjas { get; set; }

    public virtual DbSet<DokPromocja> DokPromocjas { get; set; }

    public virtual DbSet<DokPromocjaKontrahent> DokPromocjaKontrahents { get; set; }

    public virtual DbSet<DokPromocjaTowar> DokPromocjaTowars { get; set; }

    public virtual DbSet<DokStatusWydruku> DokStatusWydrukus { get; set; }

    public virtual DbSet<DokSzczegolyTransportu> DokSzczegolyTransportus { get; set; }

    public virtual DbSet<DokUzytePromocje> DokUzytePromocjes { get; set; }

    public virtual DbSet<DokVat> DokVats { get; set; }

    public virtual DbSet<DpDokument> DpDokuments { get; set; }

    public virtual DbSet<DpParametr> DpParametrs { get; set; }

    public virtual DbSet<DpPlik> DpPliks { get; set; }

    public virtual DbSet<DwDokument> DwDokuments { get; set; }

    public virtual DbSet<DwParametr> DwParametrs { get; set; }

    public virtual DbSet<DwPozycja> DwPozycjas { get; set; }

    public virtual DbSet<EcpAbsencja> EcpAbsencjas { get; set; }

    public virtual DbSet<EcpAbsencjaPrzedKorektum> EcpAbsencjaPrzedKorekta { get; set; }

    public virtual DbSet<EcpBlokadum> EcpBlokada { get; set; }

    public virtual DbSet<EcpEkwiwalent> EcpEkwiwalents { get; set; }

    public virtual DbSet<EcpGodzina> EcpGodzinas { get; set; }

    public virtual DbSet<EcpGodzinaPrzedKorektum> EcpGodzinaPrzedKorekta { get; set; }

    public virtual DbSet<EcpObecnosc> EcpObecnoscs { get; set; }

    public virtual DbSet<EcpObecnoscPrzedKorektum> EcpObecnoscPrzedKorekta { get; set; }

    public virtual DbSet<EcpOdprawaEmerytalna> EcpOdprawaEmerytalnas { get; set; }

    public virtual DbSet<EcpZapi> EcpZapis { get; set; }

    public virtual DbSet<EdZfss> EdZfsses { get; set; }

    public virtual DbSet<EddEdokDostawy> EddEdokDostawies { get; set; }

    public virtual DbSet<EddParametr> EddParametrs { get; set; }

    public virtual DbSet<EddReceivedStatusUpdate> EddReceivedStatusUpdates { get; set; }

    public virtual DbSet<EmAccVisibleTo> EmAccVisibleTos { get; set; }

    public virtual DbSet<EmAccount> EmAccounts { get; set; }

    public virtual DbSet<EmAccountFolder> EmAccountFolders { get; set; }

    public virtual DbSet<EmArchive> EmArchives { get; set; }

    public virtual DbSet<EmAttachment> EmAttachments { get; set; }

    public virtual DbSet<EmEmail> EmEmails { get; set; }

    public virtual DbSet<EmProperty> EmProperties { get; set; }

    public virtual DbSet<EmRule> EmRules { get; set; }

    public virtual DbSet<EmRuleWord> EmRuleWords { get; set; }

    public virtual DbSet<EmSearchContent> EmSearchContents { get; set; }

    public virtual DbSet<EmSendersList> EmSendersLists { get; set; }

    public virtual DbSet<EmSignature> EmSignatures { get; set; }

    public virtual DbSet<EmSource> EmSources { get; set; }

    public virtual DbSet<EmTemplate> EmTemplates { get; set; }

    public virtual DbSet<EsSprawozdanieFinElement> EsSprawozdanieFinElements { get; set; }

    public virtual DbSet<EsSprawozdanieFinNaglowek> EsSprawozdanieFinNagloweks { get; set; }

    public virtual DbSet<EsWysylkaElektroniczna> EsWysylkaElektronicznas { get; set; }

    public virtual DbSet<EsWysylkaElektronicznaLog> EsWysylkaElektronicznaLogs { get; set; }

    public virtual DbSet<EwaEwidencjeAkcyzowe> EwaEwidencjeAkcyzowes { get; set; }

    public virtual DbSet<ExSciezkaDomyslna> ExSciezkaDomyslnas { get; set; }

    public virtual DbSet<FlFlagi> FlFlagis { get; set; }

    public virtual DbSet<FlGrupy> FlGrupies { get; set; }

    public virtual DbSet<FlWartosc> FlWartoscs { get; set; }

    public virtual DbSet<FnxCechaTwSynch> FnxCechaTwSynches { get; set; }

    public virtual DbSet<FnxCenaTwSynch> FnxCenaTwSynches { get; set; }

    public virtual DbSet<FnxDocSynch> FnxDocSynches { get; set; }

    public virtual DbSet<FnxFenik> FnxFeniks { get; set; }

    public virtual DbSet<FnxFirmaSynch> FnxFirmaSynches { get; set; }

    public virtual DbSet<FnxGrupaTwSynch> FnxGrupaTwSynches { get; set; }

    public virtual DbSet<FnxJednostkaMiaryTwSynch> FnxJednostkaMiaryTwSynches { get; set; }

    public virtual DbSet<FnxKategoriaSynch> FnxKategoriaSynches { get; set; }

    public virtual DbSet<FnxKlientSynch> FnxKlientSynches { get; set; }

    public virtual DbSet<FnxKontrahentSklepuSynch> FnxKontrahentSklepuSynches { get; set; }

    public virtual DbSet<FnxKontrahentSynch> FnxKontrahentSynches { get; set; }

    public virtual DbSet<FnxMagazynSynch> FnxMagazynSynches { get; set; }

    public virtual DbSet<FnxNewsletter> FnxNewsletters { get; set; }

    public virtual DbSet<FnxParametrSynch> FnxParametrSynches { get; set; }

    public virtual DbSet<FnxPlatnoscSynch> FnxPlatnoscSynches { get; set; }

    public virtual DbSet<FnxPoleWlasneSynch> FnxPoleWlasneSynches { get; set; }

    public virtual DbSet<FnxPromocjaPoziomCenSynch> FnxPromocjaPoziomCenSynches { get; set; }

    public virtual DbSet<FnxPromocjaSynch> FnxPromocjaSynches { get; set; }

    public virtual DbSet<FnxPromocjaTowarSynch> FnxPromocjaTowarSynches { get; set; }

    public virtual DbSet<FnxSlCechaTwSynch> FnxSlCechaTwSynches { get; set; }

    public virtual DbSet<FnxSlModelTwSynch> FnxSlModelTwSynches { get; set; }

    public virtual DbSet<FnxSlRabatSynch> FnxSlRabatSynches { get; set; }

    public virtual DbSet<FnxSlWalutaSynch> FnxSlWalutaSynches { get; set; }

    public virtual DbSet<FnxSlWlasciwoscCechaTwSynch> FnxSlWlasciwoscCechaTwSynches { get; set; }

    public virtual DbSet<FnxSlWlasciwoscTwSynch> FnxSlWlasciwoscTwSynches { get; set; }

    public virtual DbSet<FnxStanSynch> FnxStanSynches { get; set; }

    public virtual DbSet<FnxStawkaVatSynch> FnxStawkaVatSynches { get; set; }

    public virtual DbSet<FnxTowarKodySynch> FnxTowarKodySynches { get; set; }

    public virtual DbSet<FnxTowarSynch> FnxTowarSynches { get; set; }

    public virtual DbSet<FnxZdjecieTwSynch> FnxZdjecieTwSynches { get; set; }

    public virtual DbSet<FoObiektDefinicja> FoObiektDefinicjas { get; set; }

    public virtual DbSet<FoObiektPole> FoObiektPoles { get; set; }

    public virtual DbSet<FoObiektZakladka> FoObiektZakladkas { get; set; }

    public virtual DbSet<FoZakladkaWlasnaPowiazanie> FoZakladkaWlasnaPowiazanies { get; set; }

    public virtual DbSet<GrFiltrWartosc> GrFiltrWartoscs { get; set; }

    public virtual DbSet<GrFiltrWlasny> GrFiltrWlasnies { get; set; }

    public virtual DbSet<GrFormatowanie> GrFormatowanies { get; set; }

    public virtual DbSet<GrFormatowanieUzytkownik> GrFormatowanieUzytkowniks { get; set; }

    public virtual DbSet<GrFormatowanieWarunek> GrFormatowanieWaruneks { get; set; }

    public virtual DbSet<GrGrid> GrGrids { get; set; }

    public virtual DbSet<GrGridWlasny> GrGridWlasnies { get; set; }

    public virtual DbSet<GrKomponentKalendarzowyGodzinyPracy> GrKomponentKalendarzowyGodzinyPracies { get; set; }

    public virtual DbSet<GrKonfiguracja> GrKonfiguracjas { get; set; }

    public virtual DbSet<GrKonfiguracjaEx> GrKonfiguracjaExes { get; set; }

    public virtual DbSet<GrMiniaturka> GrMiniaturkas { get; set; }

    public virtual DbSet<GrNazwa> GrNazwas { get; set; }

    public virtual DbSet<GrWyszukiwanieWlasne> GrWyszukiwanieWlasnes { get; set; }

    public virtual DbSet<GtAtrybut> GtAtrybuts { get; set; }

    public virtual DbSet<GtDefinicja> GtDefinicjas { get; set; }

    public virtual DbSet<GtObiekt> GtObiekts { get; set; }

    public virtual DbSet<GtPlik> GtPliks { get; set; }

    public virtual DbSet<GtTransObiekt> GtTransObiekts { get; set; }

    public virtual DbSet<GtTransRodzaj> GtTransRodzajs { get; set; }

    public virtual DbSet<GtTransformacja> GtTransformacjas { get; set; }

    public virtual DbSet<HbEbankParam> HbEbankParams { get; set; }

    public virtual DbSet<HbIdent> HbIdents { get; set; }

    public virtual DbSet<HbLogin> HbLogins { get; set; }

    public virtual DbSet<HbNaglowekIstopka> HbNaglowekIstopkas { get; set; }

    public virtual DbSet<HbParser> HbParsers { get; set; }

    public virtual DbSet<HbPowiazanieTransakcji> HbPowiazanieTransakcjis { get; set; }

    public virtual DbSet<HbPrzedrostekHist> HbPrzedrostekHists { get; set; }

    public virtual DbSet<HbRaport> HbRaports { get; set; }

    public virtual DbSet<HbSynchronizacjaRachunkuBankowego> HbSynchronizacjaRachunkuBankowegos { get; set; }

    public virtual DbSet<HbToParamZnakSpecjalny> HbToParamZnakSpecjalnies { get; set; }

    public virtual DbSet<HbTransakcja> HbTransakcjas { get; set; }

    public virtual DbSet<HbTransakcjaElektroniczna> HbTransakcjaElektronicznas { get; set; }

    public virtual DbSet<HbTransakcjaOczekujaca> HbTransakcjaOczekujacas { get; set; }

    public virtual DbSet<HbTransakcjaOczekujacaObiekt> HbTransakcjaOczekujacaObiekts { get; set; }

    public virtual DbSet<HbTransakcjaOczekujacaParam> HbTransakcjaOczekujacaParams { get; set; }

    public virtual DbSet<HbUsluga> HbUslugas { get; set; }

    public virtual DbSet<IcenCennikCechaKh> IcenCennikCechaKhs { get; set; }

    public virtual DbSet<IcenCennikGrupaKh> IcenCennikGrupaKhs { get; set; }

    public virtual DbSet<IcenCennikKontrahent> IcenCennikKontrahents { get; set; }

    public virtual DbSet<IcenCennikMagazyn> IcenCennikMagazyns { get; set; }

    public virtual DbSet<IcenCennikTowar> IcenCennikTowars { get; set; }

    public virtual DbSet<IcenCennikiIndywidualne> IcenCennikiIndywidualnes { get; set; }

    public virtual DbSet<IcenCennikiParametr> IcenCennikiParametrs { get; set; }

    public virtual DbSet<IcenCennikiParametrTyp> IcenCennikiParametrTyps { get; set; }

    public virtual DbSet<IdxTwTowar> IdxTwTowars { get; set; }

    public virtual DbSet<ImImportLog> ImImportLogs { get; set; }

    public virtual DbSet<ImImportPrzeprowadzony> ImImportPrzeprowadzonies { get; set; }

    public virtual DbSet<ImSchematImportu> ImSchematImportus { get; set; }

    public virtual DbSet<ImSchematImportuAnalitykiKp> ImSchematImportuAnalitykiKps { get; set; }

    public virtual DbSet<ImSchematImportuCechaKontrahentum> ImSchematImportuCechaKontrahenta { get; set; }

    public virtual DbSet<ImSchematImportuGrupaKontrahentum> ImSchematImportuGrupaKontrahenta { get; set; }

    public virtual DbSet<ImSchematImportuKategorium> ImSchematImportuKategoria { get; set; }

    public virtual DbSet<ImSchematImportuKontrahent> ImSchematImportuKontrahents { get; set; }

    public virtual DbSet<ImSchematImportuKwotyUzytkownika> ImSchematImportuKwotyUzytkownikas { get; set; }

    public virtual DbSet<ImSchematImportuOpisy> ImSchematImportuOpisies { get; set; }

    public virtual DbSet<ImSchematImportuOznaczeniaJpkVat> ImSchematImportuOznaczeniaJpkVats { get; set; }

    public virtual DbSet<ImSchematImportuPozDekretu> ImSchematImportuPozDekretus { get; set; }

    public virtual DbSet<ImSchematImportuPozycjaRach> ImSchematImportuPozycjaRaches { get; set; }

    public virtual DbSet<ImSchematImportuRodzajFaktury> ImSchematImportuRodzajFakturies { get; set; }

    public virtual DbSet<ImSchematImportuTypTransakcji> ImSchematImportuTypTransakcjis { get; set; }

    public virtual DbSet<ImSchematImportuZpiK> ImSchematImportuZpiKs { get; set; }

    public virtual DbSet<InkZlecenieWindykacji> InkZlecenieWindykacjis { get; set; }

    public virtual DbSet<InsBlokadum> InsBlokada { get; set; }

    public virtual DbSet<InsIdent> InsIdents { get; set; }

    public virtual DbSet<InsSlad> InsSlads { get; set; }

    public virtual DbSet<InsSzpieg> InsSzpiegs { get; set; }

    public virtual DbSet<InsSzpiegParametr> InsSzpiegParametrs { get; set; }

    public virtual DbSet<InsSzpiegParametrTyp> InsSzpiegParametrTyps { get; set; }

    public virtual DbSet<InsxParametr> InsxParametrs { get; set; }

    public virtual DbSet<IntParametryIntrastat> IntParametryIntrastats { get; set; }

    public virtual DbSet<IsInstytucja> IsInstytucjas { get; set; }

    public virtual DbSet<IsRodzajInstytucji> IsRodzajInstytucjis { get; set; }

    public virtual DbSet<IwCechy> IwCechies { get; set; }

    public virtual DbSet<IwDokument> IwDokuments { get; set; }

    public virtual DbSet<IwDyspozycja> IwDyspozycjas { get; set; }

    public virtual DbSet<IwFlagi> IwFlagis { get; set; }

    public virtual DbSet<IwGrupy> IwGrupies { get; set; }

    public virtual DbSet<IwPowiazanium> IwPowiazania { get; set; }

    public virtual DbSet<IwPozycja> IwPozycjas { get; set; }

    public virtual DbSet<IwRozbicie> IwRozbicies { get; set; }

    public virtual DbSet<JpkPaczka> JpkPaczkas { get; set; }

    public virtual DbSet<JpkParametr> JpkParametrs { get; set; }

    public virtual DbSet<JpkPlik> JpkPliks { get; set; }

    public virtual DbSet<JpkPolaNiestandardowe> JpkPolaNiestandardowes { get; set; }

    public virtual DbSet<JpkTyp> JpkTyps { get; set; }

    public virtual DbSet<JpkWersja> JpkWersjas { get; set; }

    public virtual DbSet<JpkWysylkaElektroniczna> JpkWysylkaElektronicznas { get; set; }

    public virtual DbSet<JpkWysylkaElektronicznaLog> JpkWysylkaElektronicznaLogs { get; set; }

    public virtual DbSet<KhAdresyDostawy> KhAdresyDostawies { get; set; }

    public virtual DbSet<KhCechaKh> KhCechaKhs { get; set; }

    public virtual DbSet<KhCechaPrac> KhCechaPracs { get; set; }

    public virtual DbSet<KhDokument> KhDokuments { get; set; }

    public virtual DbSet<KhKategoriaDokumentu> KhKategoriaDokumentus { get; set; }

    public virtual DbSet<KhKontrahent> KhKontrahents { get; set; }

    public virtual DbSet<KhListaFiltr> KhListaFiltrs { get; set; }

    public virtual DbSet<KhListaKh> KhListaKhs { get; set; }

    public virtual DbSet<KhListum> KhLista { get; set; }

    public virtual DbSet<KhOznaczeniaJpkVat> KhOznaczeniaJpkVats { get; set; }

    public virtual DbSet<KhParametr> KhParametrs { get; set; }

    public virtual DbSet<KhParametrG> KhParametrGs { get; set; }

    public virtual DbSet<KhPracownik> KhPracowniks { get; set; }

    public virtual DbSet<KhRachunkiBankoweHistoriaWeryfikacjiBialaListum> KhRachunkiBankoweHistoriaWeryfikacjiBialaLista { get; set; }

    public virtual DbSet<KhTransakcjaJednolitum> KhTransakcjaJednolita { get; set; }

    public virtual DbSet<KhVy> KhVies { get; set; }

    public virtual DbSet<KhWeryfikacjaNip> KhWeryfikacjaNips { get; set; }

    public virtual DbSet<KhWeryfikacjaWykazPodatnikowVat> KhWeryfikacjaWykazPodatnikowVats { get; set; }

    public virtual DbSet<KhZgody> KhZgodies { get; set; }

    public virtual DbSet<KkKodKreskowyParam> KkKodKreskowyParams { get; set; }

    public virtual DbSet<KomFrParametr> KomFrParametrs { get; set; }

    public virtual DbSet<KomKomPrzeprowadzona> KomKomPrzeprowadzonas { get; set; }

    public virtual DbSet<KomKomunikacjaLog> KomKomunikacjaLogs { get; set; }

    public virtual DbSet<KomParametr> KomParametrs { get; set; }

    public virtual DbSet<KorKorektaKosztow> KorKorektaKosztows { get; set; }

    public virtual DbSet<KorPozycja> KorPozycjas { get; set; }

    public virtual DbSet<KpAkord> KpAkords { get; set; }

    public virtual DbSet<KpKomornikPozyczkaDefinicja> KpKomornikPozyczkaDefinicjas { get; set; }

    public virtual DbSet<KpNaliczeniePotracenie> KpNaliczeniePotracenies { get; set; }

    public virtual DbSet<KpPozycjaDefinicji> KpPozycjaDefinicjis { get; set; }

    public virtual DbSet<KpProwizja> KpProwizjas { get; set; }

    public virtual DbSet<KprKsiega> KprKsiegas { get; set; }

    public virtual DbSet<KprParametr> KprParametrs { get; set; }

    public virtual DbSet<KsKlasyfikatory> KsKlasyfikatories { get; set; }

    public virtual DbSet<KsKlasyfikatoryUklad> KsKlasyfikatoryUklads { get; set; }

    public virtual DbSet<KsPrzypisaniaWlasne> KsPrzypisaniaWlasnes { get; set; }

    public virtual DbSet<KsefFaktury> KsefFakturies { get; set; }

    public virtual DbSet<KsefFakturyHandel> KsefFakturyHandels { get; set; }

    public virtual DbSet<KsefFakturyKsiegowosc> KsefFakturyKsiegowoscs { get; set; }

    public virtual DbSet<KsefParametry> KsefParametries { get; set; }

    public virtual DbSet<KsefParametryAlgorytmyMapowaniaTw> KsefParametryAlgorytmyMapowaniaTws { get; set; }

    public virtual DbSet<KsefPliki> KsefPlikis { get; set; }

    public virtual DbSet<KsefSesja> KsefSesjas { get; set; }

    public virtual DbSet<KsefUpo> KsefUpos { get; set; }

    public virtual DbSet<KwKartum> KwKarta { get; set; }

    public virtual DbSet<KwParametr> KwParametrs { get; set; }

    public virtual DbSet<KwPozycja> KwPozycjas { get; set; }

    public virtual DbSet<LabParam> LabParams { get; set; }

    public virtual DbSet<LenTwTowar> LenTwTowars { get; set; }

    public virtual DbSet<LogLogowanie> LogLogowanies { get; set; }

    public virtual DbSet<LogOdrzLicencje> LogOdrzLicencjes { get; set; }

    public virtual DbSet<LspLinkDoSzybkiejPlatnosci> LspLinkDoSzybkiejPlatnoscis { get; set; }

    public virtual DbSet<MiKhPomijany> MiKhPomijanies { get; set; }

    public virtual DbSet<MiMapaAsortyment> MiMapaAsortyments { get; set; }

    public virtual DbSet<MiSprzedaz> MiSprzedazs { get; set; }

    public virtual DbSet<MiSprzedazAdre> MiSprzedazAdres { get; set; }

    public virtual DbSet<MiSprzedazParametr> MiSprzedazParametrs { get; set; }

    public virtual DbSet<MiSprzedazPozycja> MiSprzedazPozycjas { get; set; }

    public virtual DbSet<MjMapowanieJednostek> MjMapowanieJednosteks { get; set; }

    public virtual DbSet<MkKorektum> MkKorekta { get; set; }

    public virtual DbSet<MkKoszt> MkKoszts { get; set; }

    public virtual DbSet<MkPrzesuniecie> MkPrzesuniecies { get; set; }

    public virtual DbSet<MkRatum> MkRata { get; set; }

    public virtual DbSet<Modyfikacja> Modyfikacjas { get; set; }

    public virtual DbSet<NavParametry> NavParametries { get; set; }

    public virtual DbSet<NetInfo> NetInfos { get; set; }

    public virtual DbSet<NetParametr> NetParametrs { get; set; }

    public virtual DbSet<NetParametrInd> NetParametrInds { get; set; }

    public virtual DbSet<NetParametrInst> NetParametrInsts { get; set; }

    public virtual DbSet<NetParametrInstKomputer> NetParametrInstKomputers { get; set; }

    public virtual DbSet<NetParametrKomputer> NetParametrKomputers { get; set; }

    public virtual DbSet<NetWiadomosc> NetWiadomoscs { get; set; }

    public virtual DbSet<NetWiadomoscBufor> NetWiadomoscBufors { get; set; }

    public virtual DbSet<NetWiadomoscCache> NetWiadomoscCaches { get; set; }

    public virtual DbSet<NetWiadomoscFlaga> NetWiadomoscFlagas { get; set; }

    public virtual DbSet<NetWiadomoscWersja> NetWiadomoscWersjas { get; set; }

    public virtual DbSet<NetWiadomoscZalacznik> NetWiadomoscZalaczniks { get; set; }

    public virtual DbSet<NkPoleSzablonu> NkPoleSzablonus { get; set; }

    public virtual DbSet<NkSzablon> NkSzablons { get; set; }

    public virtual DbSet<NkUkladWzorcowy> NkUkladWzorcowies { get; set; }

    public virtual DbSet<NkZestawDanych> NkZestawDanyches { get; set; }

    public virtual DbSet<NkZrodloDanych> NkZrodloDanyches { get; set; }

    public virtual DbSet<NoCheckAddConstraint> NoCheckAddConstraints { get; set; }

    public virtual DbSet<NotNotatka> NotNotatkas { get; set; }

    public virtual DbSet<NrNrRez> NrNrRezs { get; set; }

    public virtual DbSet<NrNrStart> NrNrStarts { get; set; }

    public virtual DbSet<NrNrStartDkr> NrNrStartDkrs { get; set; }

    public virtual DbSet<NrNrStartRk> NrNrStartRks { get; set; }

    public virtual DbSet<NrParametr> NrParametrs { get; set; }

    public virtual DbSet<NrParametrDkr> NrParametrDkrs { get; set; }

    public virtual DbSet<NzCesja> NzCesjas { get; set; }

    public virtual DbSet<NzCesjaParametr> NzCesjaParametrs { get; set; }

    public virtual DbSet<NzCesjaParametrTp> NzCesjaParametrTps { get; set; }

    public virtual DbSet<NzCesjaParametrySzybkiePlatnosci> NzCesjaParametrySzybkiePlatnoscis { get; set; }

    public virtual DbSet<NzFinanse> NzFinanses { get; set; }

    public virtual DbSet<NzFinanseHistoriaWindykacji> NzFinanseHistoriaWindykacjis { get; set; }

    public virtual DbSet<NzFinanseNotaPozycja> NzFinanseNotaPozycjas { get; set; }

    public virtual DbSet<NzFinanseNotum> NzFinanseNota { get; set; }

    public virtual DbSet<NzFinanseSplataVat> NzFinanseSplataVats { get; set; }

    public virtual DbSet<NzFinanseSplatum> NzFinanseSplata { get; set; }

    public virtual DbSet<NzKompensataPozycja> NzKompensataPozycjas { get; set; }

    public virtual DbSet<NzKompensatum> NzKompensata { get; set; }

    public virtual DbSet<NzKorektaPit> NzKorektaPits { get; set; }

    public virtual DbSet<NzKorektaZaliczenie> NzKorektaZaliczenies { get; set; }

    public virtual DbSet<NzOdsetkiKarne> NzOdsetkiKarnes { get; set; }

    public virtual DbSet<NzPowiaznaniePp> NzPowiaznaniePps { get; set; }

    public virtual DbSet<NzRaportKasowy> NzRaportKasowies { get; set; }

    public virtual DbSet<NzRaportKasowyDokumentKasowy> NzRaportKasowyDokumentKasowies { get; set; }

    public virtual DbSet<NzRaportKasowyStan> NzRaportKasowyStans { get; set; }

    public virtual DbSet<NzRozDekret> NzRozDekrets { get; set; }

    public virtual DbSet<NzRozniceLog> NzRozniceLogs { get; set; }

    public virtual DbSet<NzSposobNaliczeniaOdsetek> NzSposobNaliczeniaOdseteks { get; set; }

    public virtual DbSet<NzSyncHistoriaRozliczeniaPozostalo> NzSyncHistoriaRozliczeniaPozostalos { get; set; }

    public virtual DbSet<NzSyncHistoriaRozliczenium> NzSyncHistoriaRozliczenia { get; set; }

    public virtual DbSet<NzSyncHistoriaWiarygodnoscPlatnicza> NzSyncHistoriaWiarygodnoscPlatniczas { get; set; }

    public virtual DbSet<NzSyncRozrachunkiKontrahentaRazem> NzSyncRozrachunkiKontrahentaRazems { get; set; }

    public virtual DbSet<NzSyncRozrachunkiKontrahentum> NzSyncRozrachunkiKontrahenta { get; set; }

    public virtual DbSet<NzTypZdarzeniaWindykacyjnego> NzTypZdarzeniaWindykacyjnegos { get; set; }

    public virtual DbSet<NzWizardPp> NzWizardPps { get; set; }

    public virtual DbSet<NzWyciagBankowy> NzWyciagBankowies { get; set; }

    public virtual DbSet<NzWyciagBankowyOperacjaBankowa> NzWyciagBankowyOperacjaBankowas { get; set; }

    public virtual DbSet<ObPowiazane> ObPowiazanes { get; set; }

    public virtual DbSet<OdwOdWykSzablon> OdwOdWykSzablons { get; set; }

    public virtual DbSet<OdwOdWykTemp> OdwOdWykTemps { get; set; }

    public virtual DbSet<OssDaneVat> OssDaneVats { get; set; }

    public virtual DbSet<OssEwid> OssEwids { get; set; }

    public virtual DbSet<OssParametr> OssParametrs { get; set; }

    public virtual DbSet<OssPozycja> OssPozycjas { get; set; }

    public virtual DbSet<ParEwid> ParEwids { get; set; }

    public virtual DbSet<ParTyp> ParTyps { get; set; }

    public virtual DbSet<PbDokument> PbDokuments { get; set; }

    public virtual DbSet<PbKatalogBlokadum> PbKatalogBlokada { get; set; }

    public virtual DbSet<PbParametr> PbParametrs { get; set; }

    public virtual DbSet<PbPlik> PbPliks { get; set; }

    public virtual DbSet<PdBlokadaObiekt> PdBlokadaObiekts { get; set; }

    public virtual DbSet<PdBlokadaObiektGrupa> PdBlokadaObiektGrupas { get; set; }

    public virtual DbSet<PdBlokadum> PdBlokada { get; set; }

    public virtual DbSet<PdDokument> PdDokuments { get; set; }

    public virtual DbSet<PdFobo> PdFobos { get; set; }

    public virtual DbSet<PdKonwersjaInfo> PdKonwersjaInfos { get; set; }

    public virtual DbSet<PdKonwersjaOdlaczanie> PdKonwersjaOdlaczanies { get; set; }

    public virtual DbSet<PdOdlaczanie> PdOdlaczanies { get; set; }

    public virtual DbSet<PdOkre> PdOkres { get; set; }

    public virtual DbSet<PdOstrzezenium> PdOstrzezenia { get; set; }

    public virtual DbSet<PdParametr> PdParametrs { get; set; }

    public virtual DbSet<PdParametrHaslo> PdParametrHaslos { get; set; }

    public virtual DbSet<PdParametrHist> PdParametrHists { get; set; }

    public virtual DbSet<PdPodmiot> PdPodmiots { get; set; }

    public virtual DbSet<PdProdukt> PdProdukts { get; set; }

    public virtual DbSet<PdRokObrotowy> PdRokObrotowies { get; set; }

    public virtual DbSet<PdRozszerzeniaUzytkownika> PdRozszerzeniaUzytkownikas { get; set; }

    public virtual DbSet<PdSesja> PdSesjas { get; set; }

    public virtual DbSet<PdStatystyka> PdStatystykas { get; set; }

    public virtual DbSet<PdUlubione> PdUlubiones { get; set; }

    public virtual DbSet<PdUprawnienie> PdUprawnienies { get; set; }

    public virtual DbSet<PdUzytkMagazyn> PdUzytkMagazyns { get; set; }

    public virtual DbSet<PdUzytkModulHist> PdUzytkModulHists { get; set; }

    public virtual DbSet<PdUzytkOkre> PdUzytkOkres { get; set; }

    public virtual DbSet<PdUzytkParam> PdUzytkParams { get; set; }

    public virtual DbSet<PdUzytkRok> PdUzytkRoks { get; set; }

    public virtual DbSet<PdUzytkUpraw> PdUzytkUpraws { get; set; }

    public virtual DbSet<PdUzytkUprawMag> PdUzytkUprawMags { get; set; }

    public virtual DbSet<PdUzytkownik> PdUzytkowniks { get; set; }

    public virtual DbSet<PdUzytkownikOddzial> PdUzytkownikOddzials { get; set; }

    public virtual DbSet<PdWspolnik> PdWspolniks { get; set; }

    public virtual DbSet<PdWspolnikPodatek> PdWspolnikPodateks { get; set; }

    public virtual DbSet<PdWspolnikPodstawa> PdWspolnikPodstawas { get; set; }

    public virtual DbSet<PdWspolnikSkladka> PdWspolnikSkladkas { get; set; }

    public virtual DbSet<PdWspolnikSposobSkladka> PdWspolnikSposobSkladkas { get; set; }

    public virtual DbSet<PdWspolnikSwiadczenie> PdWspolnikSwiadczenies { get; set; }

    public virtual DbSet<PdWspolnikUlgiPit0> PdWspolnikUlgiPit0s { get; set; }

    public virtual DbSet<PgnPluginSql> PgnPluginSqls { get; set; }

    public virtual DbSet<PkDomyslnaKlasyfikacjaKont> PkDomyslnaKlasyfikacjaKonts { get; set; }

    public virtual DbSet<PkKartoteka> PkKartotekas { get; set; }

    public virtual DbSet<PkKartotekaPozycja> PkKartotekaPozycjas { get; set; }

    public virtual DbSet<PkKlasyfikacjaKont> PkKlasyfikacjaKonts { get; set; }

    public virtual DbSet<PkParametry> PkParametries { get; set; }

    public virtual DbSet<PkPlanKont> PkPlanKonts { get; set; }

    public virtual DbSet<PkWzorzec> PkWzorzecs { get; set; }

    public virtual DbSet<PlListaPlac> PlListaPlacs { get; set; }

    public virtual DbSet<PlParametrUmowyCp> PlParametrUmowyCps { get; set; }

    public virtual DbSet<PlParametrUmowyOprace> PlParametrUmowyOpraces { get; set; }

    public virtual DbSet<PlRachunekDoUmowyCp> PlRachunekDoUmowyCps { get; set; }

    public virtual DbSet<PlTag> PlTags { get; set; }

    public virtual DbSet<PlUmowaCp> PlUmowaCps { get; set; }

    public virtual DbSet<PlUmowaOprace> PlUmowaOpraces { get; set; }

    public virtual DbSet<PlUmowaOpraceSkladnik> PlUmowaOpraceSkladniks { get; set; }

    public virtual DbSet<PlWyplataDataZaliczki> PlWyplataDataZaliczkis { get; set; }

    public virtual DbSet<PlWyplataSkladnik> PlWyplataSkladniks { get; set; }

    public virtual DbSet<PlWyplatum> PlWyplata { get; set; }

    public virtual DbSet<PlbEcpParametr> PlbEcpParametrs { get; set; }

    public virtual DbSet<PlbGodzinyNormatywne> PlbGodzinyNormatywnes { get; set; }

    public virtual DbSet<PlbListaPlac> PlbListaPlacs { get; set; }

    public virtual DbSet<PlbParametr> PlbParametrs { get; set; }

    public virtual DbSet<PlbParametrWyplaty> PlbParametrWyplaties { get; set; }

    public virtual DbSet<PlbPracownikZespol> PlbPracownikZespols { get; set; }

    public virtual DbSet<PlbRachunekDoUmowyCp> PlbRachunekDoUmowyCps { get; set; }

    public virtual DbSet<PlbSkladnik> PlbSkladniks { get; set; }

    public virtual DbSet<PlbSkladnikAbsencja> PlbSkladnikAbsencjas { get; set; }

    public virtual DbSet<PlbSkladnikDefinicja> PlbSkladnikDefinicjas { get; set; }

    public virtual DbSet<PlbSkladnikDefinicjaKlocek> PlbSkladnikDefinicjaKloceks { get; set; }

    public virtual DbSet<PlbSkryptParametr> PlbSkryptParametrs { get; set; }

    public virtual DbSet<PlbSzablonLp> PlbSzablonLps { get; set; }

    public virtual DbSet<PlbSzablonZp> PlbSzablonZps { get; set; }

    public virtual DbSet<PlbSzablonZpskladnik> PlbSzablonZpskladniks { get; set; }

    public virtual DbSet<PlbUmowa> PlbUmowas { get; set; }

    public virtual DbSet<PlbUmowaCp> PlbUmowaCps { get; set; }

    public virtual DbSet<PlbUmowaCpParametry> PlbUmowaCpParametries { get; set; }

    public virtual DbSet<PlbUmowaCpParametryZestaw> PlbUmowaCpParametryZestaws { get; set; }

    public virtual DbSet<PlbUmowaCpgodzPrzepr> PlbUmowaCpgodzPrzeprs { get; set; }

    public virtual DbSet<PlbUmowaCpharmonogram> PlbUmowaCpharmonograms { get; set; }

    public virtual DbSet<PlbUmowaCpprzelewy> PlbUmowaCpprzelewies { get; set; }

    public virtual DbSet<PlbUmowaDzialStanowisko> PlbUmowaDzialStanowiskos { get; set; }

    public virtual DbSet<PlbUmowaKalendarz> PlbUmowaKalendarzs { get; set; }

    public virtual DbSet<PlbUmowaParametr> PlbUmowaParametrs { get; set; }

    public virtual DbSet<PlbUmowaPrzelewy> PlbUmowaPrzelewies { get; set; }

    public virtual DbSet<PlbUmowaSkladnik> PlbUmowaSkladniks { get; set; }

    public virtual DbSet<PlbUmowaWyjatekCzasuPracy> PlbUmowaWyjatekCzasuPracies { get; set; }

    public virtual DbSet<PlbUmowaWyjatekCzasuPracyOkre> PlbUmowaWyjatekCzasuPracyOkres { get; set; }

    public virtual DbSet<PlbUmowaZestaw> PlbUmowaZestaws { get; set; }

    public virtual DbSet<PlbUmowaZestawSkladnik> PlbUmowaZestawSkladniks { get; set; }

    public virtual DbSet<PlbWyplataSkladnik> PlbWyplataSkladniks { get; set; }

    public virtual DbSet<PlbWyplatum> PlbWyplata { get; set; }

    public virtual DbSet<PlbWyrokTrybunalu> PlbWyrokTrybunalus { get; set; }

    public virtual DbSet<PoParametryOnline> PoParametryOnlines { get; set; }

    public virtual DbSet<PojEksploatacja> PojEksploatacjas { get; set; }

    public virtual DbSet<PojKosztyEksploatacji> PojKosztyEksploatacjis { get; set; }

    public virtual DbSet<PojKosztyEksploatacjiWpi> PojKosztyEksploatacjiWpis { get; set; }

    public virtual DbSet<PojKsiegowanie> PojKsiegowanies { get; set; }

    public virtual DbSet<PojParametr> PojParametrs { get; set; }

    public virtual DbSet<PojPojazd> PojPojazds { get; set; }

    public virtual DbSet<PosParam> PosParams { get; set; }

    public virtual DbSet<PostUpdate> PostUpdates { get; set; }

    public virtual DbSet<PpkParametry> PpkParametries { get; set; }

    public virtual DbSet<PprAbsencja> PprAbsencjas { get; set; }

    public virtual DbSet<PprBlokadum> PprBlokada { get; set; }

    public virtual DbSet<PprObecnosc> PprObecnoscs { get; set; }

    public virtual DbSet<PprParametry> PprParametries { get; set; }

    public virtual DbSet<PprPlanPracy> PprPlanPracies { get; set; }

    public virtual DbSet<PrBadaniaOkresowe> PrBadaniaOkresowes { get; set; }

    public virtual DbSet<PrBo> PrBos { get; set; }

    public virtual DbSet<PrCechaPr> PrCechaPrs { get; set; }

    public virtual DbSet<PrDokument> PrDokuments { get; set; }

    public virtual DbSet<PrGiodo> PrGiodos { get; set; }

    public virtual DbSet<PrInneDochody> PrInneDochodies { get; set; }

    public virtual DbSet<PrJezyki> PrJezykis { get; set; }

    public virtual DbSet<PrKosztyZprawAutorskich> PrKosztyZprawAutorskiches { get; set; }

    public virtual DbSet<PrKursy> PrKursies { get; set; }

    public virtual DbSet<PrKursyBhp> PrKursyBhps { get; set; }

    public virtual DbSet<PrMotywacja> PrMotywacjas { get; set; }

    public virtual DbSet<PrOkresyUrlopowBezplatnych> PrOkresyUrlopowBezplatnyches { get; set; }

    public virtual DbSet<PrOrganizacje> PrOrganizacjes { get; set; }

    public virtual DbSet<PrParametry> PrParametries { get; set; }

    public virtual DbSet<PrParametryWplatPpk> PrParametryWplatPpks { get; set; }

    public virtual DbSet<PrPpk> PrPpks { get; set; }

    public virtual DbSet<PrPracownik> PrPracowniks { get; set; }

    public virtual DbSet<PrRezygnacjaPpk> PrRezygnacjaPpks { get; set; }

    public virtual DbSet<PrRodzina> PrRodzinas { get; set; }

    public virtual DbSet<PrUlgi> PrUlgis { get; set; }

    public virtual DbSet<PrUprawnienium> PrUprawnienia { get; set; }

    public virtual DbSet<PrUrlopy> PrUrlopies { get; set; }

    public virtual DbSet<PrZatrudnienie> PrZatrudnienies { get; set; }

    public virtual DbSet<PrZdjecie> PrZdjecies { get; set; }

    public virtual DbSet<PrZwolnienieZpodatku> PrZwolnienieZpodatkus { get; set; }

    public virtual DbSet<PrmPromocje> PrmPromocjes { get; set; }

    public virtual DbSet<PrmPromocjeAkcja> PrmPromocjeAkcjas { get; set; }

    public virtual DbSet<PrmPromocjeKontrahent> PrmPromocjeKontrahents { get; set; }

    public virtual DbSet<PrmPromocjeMagazyn> PrmPromocjeMagazyns { get; set; }

    public virtual DbSet<PrmPromocjeParametr> PrmPromocjeParametrs { get; set; }

    public virtual DbSet<PrmPromocjeParametrTyp> PrmPromocjeParametrTyps { get; set; }

    public virtual DbSet<PrmPromocjeTowar> PrmPromocjeTowars { get; set; }

    public virtual DbSet<PrzDanePrzychodu> PrzDanePrzychodus { get; set; }

    public virtual DbSet<PrzObnizkaPodatku> PrzObnizkaPodatkus { get; set; }

    public virtual DbSet<PrzOdliczenieDoliczenie> PrzOdliczenieDoliczenies { get; set; }

    public virtual DbSet<PrzParametr> PrzParametrs { get; set; }

    public virtual DbSet<PrzPrzychod> PrzPrzychods { get; set; }

    public virtual DbSet<PrzStawkaRyczaltu> PrzStawkaRyczaltus { get; set; }

    public virtual DbSet<PwDane> PwDanes { get; set; }

    public virtual DbSet<PwPole> PwPoles { get; set; }

    public virtual DbSet<PwRelacjaDokDef> PwRelacjaDokDefs { get; set; }

    public virtual DbSet<RbRachBankowy> RbRachBankowies { get; set; }

    public virtual DbSet<RbRachBankowyHistorium> RbRachBankowyHistoria { get; set; }

    public virtual DbSet<RbRachBankowyPersonel> RbRachBankowyPersonels { get; set; }

    public virtual DbSet<RbRachBankowySynchDomyslne> RbRachBankowySynchDomyslnes { get; set; }

    public virtual DbSet<RbRachBankowySynchronizacja> RbRachBankowySynchronizacjas { get; set; }

    public virtual DbSet<RbRachBankowyWirtualny> RbRachBankowyWirtualnies { get; set; }

    public virtual DbSet<RbRachBankowyWirtualnyInstytucji> RbRachBankowyWirtualnyInstytucjis { get; set; }

    public virtual DbSet<RbRachBankowyWirtualnyKontrahentum> RbRachBankowyWirtualnyKontrahenta { get; set; }

    public virtual DbSet<RbRachBankowyWirtualnyPracownika> RbRachBankowyWirtualnyPracownikas { get; set; }

    public virtual DbSet<RbRachBankowyWirtualnyWspolnika> RbRachBankowyWirtualnyWspolnikas { get; set; }

    public virtual DbSet<RcpRejestrCzynnosciPrzetwarzaniaCele> RcpRejestrCzynnosciPrzetwarzaniaCeles { get; set; }

    public virtual DbSet<RcpRejestrCzynnosciPrzetwarzanium> RcpRejestrCzynnosciPrzetwarzania { get; set; }

    public virtual DbSet<RemEwid> RemEwids { get; set; }

    public virtual DbSet<RemPozycja> RemPozycjas { get; set; }

    public virtual DbSet<RewParametr> RewParametrs { get; set; }

    public virtual DbSet<RfPozycja> RfPozycjas { get; set; }

    public virtual DbSet<RfRaportyFiskalne> RfRaportyFiskalnes { get; set; }

    public virtual DbSet<RfVat> RfVats { get; set; }

    public virtual DbSet<RodoOchronaDanychParametr> RodoOchronaDanychParametrs { get; set; }

    public virtual DbSet<RozPlikRozszerzenium> RozPlikRozszerzenia { get; set; }

    public virtual DbSet<RozRozszerzenie> RozRozszerzenies { get; set; }

    public virtual DbSet<RozRozszerzenieSql> RozRozszerzenieSqls { get; set; }

    public virtual DbSet<RozZestKontekstowe> RozZestKontekstowes { get; set; }

    public virtual DbSet<RozZestKontekstoweZakladka> RozZestKontekstoweZakladkas { get; set; }

    public virtual DbSet<Sf2KomponentSferyczny> Sf2KomponentSferycznies { get; set; }

    public virtual DbSet<Sf2KontrolaRozszerzen> Sf2KontrolaRozszerzens { get; set; }

    public virtual DbSet<Sf2OperacjaSferyczna> Sf2OperacjaSferycznas { get; set; }

    public virtual DbSet<Sf2RozszerzenieGridum> Sf2RozszerzenieGrida { get; set; }

    public virtual DbSet<Sf2Skrypt> Sf2Skrypts { get; set; }

    public virtual DbSet<SfDefinicja> SfDefinicjas { get; set; }

    public virtual DbSet<SfDefinicjaWzorzec> SfDefinicjaWzorzecs { get; set; }

    public virtual DbSet<SfPole> SfPoles { get; set; }

    public virtual DbSet<SfPoleNiewidoczne> SfPoleNiewidocznes { get; set; }

    public virtual DbSet<SfPozycjaRz> SfPozycjaRzs { get; set; }

    public virtual DbSet<SfRz> SfRzs { get; set; }

    public virtual DbSet<SfSprawozdanie> SfSprawozdanies { get; set; }

    public virtual DbSet<SfSprawozdanieZmiany> SfSprawozdanieZmianies { get; set; }

    public virtual DbSet<SkParametr> SkParametrs { get; set; }

    public virtual DbSet<SkParametrSesjaDla> SkParametrSesjaDlas { get; set; }

    public virtual DbSet<SkSesja> SkSesjas { get; set; }

    public virtual DbSet<SkStan> SkStans { get; set; }

    public virtual DbSet<SlAtrybutGodzinowy> SlAtrybutGodzinowies { get; set; }

    public virtual DbSet<SlBadanieOkresowe> SlBadanieOkresowes { get; set; }

    public virtual DbSet<SlBank> SlBanks { get; set; }

    public virtual DbSet<SlBibObiekt> SlBibObiekts { get; set; }

    public virtual DbSet<SlCechaKh> SlCechaKhs { get; set; }

    public virtual DbSet<SlCechaPr> SlCechaPrs { get; set; }

    public virtual DbSet<SlCechaTw> SlCechaTws { get; set; }

    public virtual DbSet<SlCechaZ> SlCechaZs { get; set; }

    public virtual DbSet<SlCrKolor> SlCrKolors { get; set; }

    public virtual DbSet<SlCrmBranza> SlCrmBranzas { get; set; }

    public virtual DbSet<SlCrmDzial> SlCrmDzials { get; set; }

    public virtual DbSet<SlCrmEtap> SlCrmEtaps { get; set; }

    public virtual DbSet<SlCrmGrupaTransakcji> SlCrmGrupaTransakcjis { get; set; }

    public virtual DbSet<SlCrmGrupaWiadomosci> SlCrmGrupaWiadomoscis { get; set; }

    public virtual DbSet<SlCrmPowitanie> SlCrmPowitanies { get; set; }

    public virtual DbSet<SlCrmRegion> SlCrmRegions { get; set; }

    public virtual DbSet<SlCrmScenariusz> SlCrmScenariuszs { get; set; }

    public virtual DbSet<SlCrmTransakcjaNieudana> SlCrmTransakcjaNieudanas { get; set; }

    public virtual DbSet<SlCrmTransakcjaPozyskana> SlCrmTransakcjaPozyskanas { get; set; }

    public virtual DbSet<SlCrmZrodloPozyskanium> SlCrmZrodloPozyskania { get; set; }

    public virtual DbSet<SlCrmpodTypZadanium> SlCrmpodTypZadania { get; set; }

    public virtual DbSet<SlCropi> SlCropis { get; set; }

    public virtual DbSet<SlDystrybutor> SlDystrybutors { get; set; }

    public virtual DbSet<SlDzial> SlDzials { get; set; }

    public virtual DbSet<SlEtykietum> SlEtykieta { get; set; }

    public virtual DbSet<SlEwidVatOss> SlEwidVatOsses { get; set; }

    public virtual DbSet<SlFormaDzialaniaWindykacyjnego> SlFormaDzialaniaWindykacyjnegos { get; set; }

    public virtual DbSet<SlFormaPlatnosci> SlFormaPlatnoscis { get; set; }

    public virtual DbSet<SlFormatNumeracji> SlFormatNumeracjis { get; set; }

    public virtual DbSet<SlFormatNumeracjiElement> SlFormatNumeracjiElements { get; set; }

    public virtual DbSet<SlGmina> SlGminas { get; set; }

    public virtual DbSet<SlGratAtrybutGodzinDni> SlGratAtrybutGodzinDnis { get; set; }

    public virtual DbSet<SlGratPrzyczynaRozwUmowy> SlGratPrzyczynaRozwUmowies { get; set; }

    public virtual DbSet<SlGratTrescDok> SlGratTrescDoks { get; set; }

    public virtual DbSet<SlGrupaBlokadyObiektu> SlGrupaBlokadyObiektus { get; set; }

    public virtual DbSet<SlGrupaDokumentow> SlGrupaDokumentows { get; set; }

    public virtual DbSet<SlGrupaKh> SlGrupaKhs { get; set; }

    public virtual DbSet<SlGrupaPrac> SlGrupaPracs { get; set; }

    public virtual DbSet<SlGrupaTw> SlGrupaTws { get; set; }

    public virtual DbSet<SlGrupaUz> SlGrupaUzs { get; set; }

    public virtual DbSet<SlHarmonogramUmowyCp> SlHarmonogramUmowyCps { get; set; }

    public virtual DbSet<SlInformacjeOpodatkuAkcyzowym> SlInformacjeOpodatkuAkcyzowyms { get; set; }

    public virtual DbSet<SlKalendCykl> SlKalendCykls { get; set; }

    public virtual DbSet<SlKalendDzien> SlKalendDziens { get; set; }

    public virtual DbSet<SlKalendGodzina> SlKalendGodzinas { get; set; }

    public virtual DbSet<SlKalendWyjGodzina> SlKalendWyjGodzinas { get; set; }

    public virtual DbSet<SlKalendWyjatek> SlKalendWyjateks { get; set; }

    public virtual DbSet<SlKalendarz> SlKalendarzs { get; set; }

    public virtual DbSet<SlKategoriaDokumentu> SlKategoriaDokumentus { get; set; }

    public virtual DbSet<SlKategoriaPozycjiDekretu> SlKategoriaPozycjiDekretus { get; set; }

    public virtual DbSet<SlKategoriaZestawien> SlKategoriaZestawiens { get; set; }

    public virtual DbSet<SlKategorieSm> SlKategorieSms { get; set; }

    public virtual DbSet<SlKategorium> SlKategoria { get; set; }

    public virtual DbSet<SlKodCn> SlKodCns { get; set; }

    public virtual DbSet<SlKodJednostkiTransportowejEdd> SlKodJednostkiTransportowejEdds { get; set; }

    public virtual DbSet<SlKodPkd> SlKodPkds { get; set; }

    public virtual DbSet<SlKodPocztowy> SlKodPocztowies { get; set; }

    public virtual DbSet<SlKodPodstawyPrawnejRozwiazaniaStosunkuPracy> SlKodPodstawyPrawnejRozwiazaniaStosunkuPracies { get; set; }

    public virtual DbSet<SlKodPrzyczynyWyrejestrowanium> SlKodPrzyczynyWyrejestrowania { get; set; }

    public virtual DbSet<SlKodRodzajuOpakowanTwAkcyzowych> SlKodRodzajuOpakowanTwAkcyzowyches { get; set; }

    public virtual DbSet<SlKodRodzajuTransakcji> SlKodRodzajuTransakcjis { get; set; }

    public virtual DbSet<SlKodRodzajuTransportuEdd> SlKodRodzajuTransportuEdds { get; set; }

    public virtual DbSet<SlKodSwiadczenium> SlKodSwiadczenia { get; set; }

    public virtual DbSet<SlKodWygasnieciaStosunkuPracy> SlKodWygasnieciaStosunkuPracies { get; set; }

    public virtual DbSet<SlKodWyrobuAkcyzowego> SlKodWyrobuAkcyzowegos { get; set; }

    public virtual DbSet<SlKrajPochodzenium> SlKrajPochodzenia { get; set; }

    public virtual DbSet<SlKursBhp> SlKursBhps { get; set; }

    public virtual DbSet<SlLicznikNumeracji> SlLicznikNumeracjis { get; set; }

    public virtual DbSet<SlLicznikNumeracjiRok> SlLicznikNumeracjiRoks { get; set; }

    public virtual DbSet<SlMagazyn> SlMagazyns { get; set; }

    public virtual DbSet<SlModelTowar> SlModelTowars { get; set; }

    public virtual DbSet<SlModelTw> SlModelTws { get; set; }

    public virtual DbSet<SlObywatelstwo> SlObywatelstwos { get; set; }

    public virtual DbSet<SlOddzialKasa> SlOddzialKasas { get; set; }

    public virtual DbSet<SlOddzialMagazyn> SlOddzialMagazyns { get; set; }

    public virtual DbSet<SlOddzialNfz> SlOddzialNfzs { get; set; }

    public virtual DbSet<SlOddzialy> SlOddzialies { get; set; }

    public virtual DbSet<SlOpi> SlOpis { get; set; }

    public virtual DbSet<SlOpisAbsencji> SlOpisAbsencjis { get; set; }

    public virtual DbSet<SlPanstwaMiejscaProwadzeniaDzialalnosci> SlPanstwaMiejscaProwadzeniaDzialalnoscis { get; set; }

    public virtual DbSet<SlPanstwo> SlPanstwos { get; set; }

    public virtual DbSet<SlPkwiU> SlPkwiUs { get; set; }

    public virtual DbSet<SlPojCel> SlPojCels { get; set; }

    public virtual DbSet<SlPojTrasa> SlPojTrasas { get; set; }

    public virtual DbSet<SlPojTypStawka> SlPojTypStawkas { get; set; }

    public virtual DbSet<SlPokrewienstwo> SlPokrewienstwos { get; set; }

    public virtual DbSet<SlPowodRozwiazaniaUmowy> SlPowodRozwiazaniaUmowies { get; set; }

    public virtual DbSet<SlPracaSzczegolnyCharakter> SlPracaSzczegolnyCharakters { get; set; }

    public virtual DbSet<SlPrawoDoEmerytury> SlPrawoDoEmeryturies { get; set; }

    public virtual DbSet<SlPrzyczynaKorekty> SlPrzyczynaKorekties { get; set; }

    public virtual DbSet<SlRabat> SlRabats { get; set; }

    public virtual DbSet<SlRejestrKsiegowy> SlRejestrKsiegowies { get; set; }

    public virtual DbSet<SlRodzajDowoduKsiegowego> SlRodzajDowoduKsiegowegos { get; set; }

    public virtual DbSet<SlRodzajKontaktu> SlRodzajKontaktus { get; set; }

    public virtual DbSet<SlRodzajObnizki> SlRodzajObnizkis { get; set; }

    public virtual DbSet<SlRodzajOdliczenium> SlRodzajOdliczenia { get; set; }

    public virtual DbSet<SlRodzajZasobu> SlRodzajZasobus { get; set; }

    public virtual DbSet<SlSlownik> SlSlowniks { get; set; }

    public virtual DbSet<SlStanCywilny> SlStanCywilnies { get; set; }

    public virtual DbSet<SlStanowisko> SlStanowiskos { get; set; }

    public virtual DbSet<SlStawkaAkordowa> SlStawkaAkordowas { get; set; }

    public virtual DbSet<SlStawkaAkordowaProg> SlStawkaAkordowaProgs { get; set; }

    public virtual DbSet<SlStawkaProwizyjna> SlStawkaProwizyjnas { get; set; }

    public virtual DbSet<SlStawkaProwizyjnaProg> SlStawkaProwizyjnaProgs { get; set; }

    public virtual DbSet<SlStawkaVat> SlStawkaVats { get; set; }

    public virtual DbSet<SlStawkaZaszeregowanium> SlStawkaZaszeregowania { get; set; }

    public virtual DbSet<SlStawkiOplatSpecjalnych> SlStawkiOplatSpecjalnyches { get; set; }

    public virtual DbSet<SlStopienNiepelnosprawnosci> SlStopienNiepelnosprawnoscis { get; set; }

    public virtual DbSet<SlStopienNiezdolnosciDoPracy> SlStopienNiezdolnosciDoPracies { get; set; }

    public virtual DbSet<SlSubKonto> SlSubKontos { get; set; }

    public virtual DbSet<SlSymbolDeklaracjiUsebank> SlSymbolDeklaracjiUsebanks { get; set; }

    public virtual DbSet<SlSzablonDzialanium> SlSzablonDzialania { get; set; }

    public virtual DbSet<SlSzablonRachunku> SlSzablonRachunkus { get; set; }

    public virtual DbSet<SlSzablonUmowyCp> SlSzablonUmowyCps { get; set; }

    public virtual DbSet<SlSzablonUmowyOprace> SlSzablonUmowyOpraces { get; set; }

    public virtual DbSet<SlSzybkiePlatnosci> SlSzybkiePlatnoscis { get; set; }

    public virtual DbSet<SlTresc> SlTrescs { get; set; }

    public virtual DbSet<SlTrescDokRodo> SlTrescDokRodos { get; set; }

    public virtual DbSet<SlTrybDostawyTwAkcyzowych> SlTrybDostawyTwAkcyzowyches { get; set; }

    public virtual DbSet<SlTrybOdroczonyWysylkiEdd> SlTrybOdroczonyWysylkiEdds { get; set; }

    public virtual DbSet<SlTrybZakonczeniaDostawyEdd> SlTrybZakonczeniaDostawyEdds { get; set; }

    public virtual DbSet<SlTypAbsencji> SlTypAbsencjis { get; set; }

    public virtual DbSet<SlTypDniaWolnego> SlTypDniaWolnegos { get; set; }

    public virtual DbSet<SlTypEwidVat> SlTypEwidVats { get; set; }

    public virtual DbSet<SlTypIdentyfikatora> SlTypIdentyfikatoras { get; set; }

    public virtual DbSet<SlTypObecnosci> SlTypObecnoscis { get; set; }

    public virtual DbSet<SlTypPodmiotuAkcyzowego> SlTypPodmiotuAkcyzowegos { get; set; }

    public virtual DbSet<SlTypWplaty> SlTypWplaties { get; set; }

    public virtual DbSet<SlTytulUbezpieczenium> SlTytulUbezpieczenia { get; set; }

    public virtual DbSet<SlUprawnienie> SlUprawnienies { get; set; }

    public virtual DbSet<SlUrzadCelny> SlUrzadCelnies { get; set; }

    public virtual DbSet<SlUrzadSkarbowy> SlUrzadSkarbowies { get; set; }

    public virtual DbSet<SlVatOznaczeniaJpksprzedaz> SlVatOznaczeniaJpksprzedazs { get; set; }

    public virtual DbSet<SlVatOznaczeniaJpkzakup> SlVatOznaczeniaJpkzakups { get; set; }

    public virtual DbSet<SlWalutaBank> SlWalutaBanks { get; set; }

    public virtual DbSet<SlWalutaKur> SlWalutaKurs { get; set; }

    public virtual DbSet<SlWalutaNominal> SlWalutaNominals { get; set; }

    public virtual DbSet<SlWalutaTabelaKursow> SlWalutaTabelaKursows { get; set; }

    public virtual DbSet<SlWalutum> SlWaluta { get; set; }

    public virtual DbSet<SlWlasciwCechTw> SlWlasciwCechTws { get; set; }

    public virtual DbSet<SlWlasciwoscCecha> SlWlasciwoscCechas { get; set; }

    public virtual DbSet<SlWlasny> SlWlasnies { get; set; }

    public virtual DbSet<SlWojewodztwo> SlWojewodztwos { get; set; }

    public virtual DbSet<SlWyksztalcenie> SlWyksztalcenies { get; set; }

    public virtual DbSet<SlWzorzecSkladnikaPlacowego> SlWzorzecSkladnikaPlacowegos { get; set; }

    public virtual DbSet<SlZawod> SlZawods { get; set; }

    public virtual DbSet<SlZespolPrac> SlZespolPracs { get; set; }

    public virtual DbSet<SlZestawAkordowy> SlZestawAkordowies { get; set; }

    public virtual DbSet<SlZestawAkordowyAkord> SlZestawAkordowyAkords { get; set; }

    public virtual DbSet<SlZwolnienieZakcyzy> SlZwolnienieZakcyzies { get; set; }

    public virtual DbSet<SlZwolnienieZvat> SlZwolnienieZvats { get; set; }

    public virtual DbSet<Slowniki> Slownikis { get; set; }

    public virtual DbSet<SmsMessage> SmsMessages { get; set; }

    public virtual DbSet<SmsParam> SmsParams { get; set; }

    public virtual DbSet<SmsTariffHist> SmsTariffHists { get; set; }

    public virtual DbSet<SmsTemplate> SmsTemplates { get; set; }

    public virtual DbSet<SpPlik> SpPliks { get; set; }

    public virtual DbSet<SpTransakcja> SpTransakcjas { get; set; }

    public virtual DbSet<StKst> StKsts { get; set; }

    public virtual DbSet<StKst2016> StKst2016s { get; set; }

    public virtual DbSet<StMpk> StMpks { get; set; }

    public virtual DbSet<StOperacja> StOperacjas { get; set; }

    public virtual DbSet<StParametr> StParametrs { get; set; }

    public virtual DbSet<StPlanAmrok> StPlanAmroks { get; set; }

    public virtual DbSet<StPlanAmrozbicie> StPlanAmrozbicies { get; set; }

    public virtual DbSet<StSrodekTrwaly> StSrodekTrwalies { get; set; }

    public virtual DbSet<StSrodekTrwalyDane> StSrodekTrwalyDanes { get; set; }

    public virtual DbSet<StSrodekTrwalyPlanAm> StSrodekTrwalyPlanAms { get; set; }

    public virtual DbSet<StWyposazenie> StWyposazenies { get; set; }

    public virtual DbSet<SttTwTowar> SttTwTowars { get; set; }

    public virtual DbSet<SuParametr> SuParametrs { get; set; }

    public virtual DbSet<SvsdParametr> SvsdParametrs { get; set; }

    public virtual DbSet<SySyncCmdResponse> SySyncCmdResponses { get; set; }

    public virtual DbSet<SySyncObjectChange> SySyncObjectChanges { get; set; }

    public virtual DbSet<SySyncObjectChangeStatus> SySyncObjectChangeStatuses { get; set; }

    public virtual DbSet<SySyncParam> SySyncParams { get; set; }

    public virtual DbSet<SySyncReceived> SySyncReceiveds { get; set; }

    public virtual DbSet<Tabele> Tabeles { get; set; }

    public virtual DbSet<TelEwid> TelEwids { get; set; }

    public virtual DbSet<TelObiekt> TelObiekts { get; set; }

    public virtual DbSet<TrHistorium> TrHistoria { get; set; }

    public virtual DbSet<TrOpi> TrOpis { get; set; }

    public virtual DbSet<TrParametr> TrParametrs { get; set; }

    public virtual DbSet<TrTransakcja> TrTransakcjas { get; set; }

    public virtual DbSet<TrmTwTowar> TrmTwTowars { get; set; }

    public virtual DbSet<TwCechaTw> TwCechaTws { get; set; }

    public virtual DbSet<TwCena> TwCenas { get; set; }

    public virtual DbSet<TwCenaHistorium> TwCenaHistoria { get; set; }

    public virtual DbSet<TwDokument> TwDokuments { get; set; }

    public virtual DbSet<TwJednMiary> TwJednMiaries { get; set; }

    public virtual DbSet<TwKodKreskowy> TwKodKreskowies { get; set; }

    public virtual DbSet<TwKomplet> TwKomplets { get; set; }

    public virtual DbSet<TwKreatorPkwiU2015> TwKreatorPkwiU2015s { get; set; }

    public virtual DbSet<TwKreatorPkwiU2015RegulyStawekVat> TwKreatorPkwiU2015RegulyStawekVats { get; set; }

    public virtual DbSet<TwNarzutTw> TwNarzutTws { get; set; }

    public virtual DbSet<TwOpakowaniaAkcyzowe> TwOpakowaniaAkcyzowes { get; set; }

    public virtual DbSet<TwParametr> TwParametrs { get; set; }

    public virtual DbSet<TwPkwiU20082015> TwPkwiU20082015s { get; set; }

    public virtual DbSet<TwPkwiU2015Cn2020> TwPkwiU2015Cn2020s { get; set; }

    public virtual DbSet<TwPowiazaniaKsef> TwPowiazaniaKsefs { get; set; }

    public virtual DbSet<TwStan> TwStans { get; set; }

    public virtual DbSet<TwStanOddzial> TwStanOddzials { get; set; }

    public virtual DbSet<TwTowar> TwTowars { get; set; }

    public virtual DbSet<TwTypKodu> TwTypKodus { get; set; }

    public virtual DbSet<TwZdjecieTw> TwZdjecieTws { get; set; }

    public virtual DbSet<TwZmiana> TwZmianas { get; set; }

    public virtual DbSet<TwZmianaTw> TwZmianaTws { get; set; }

    public virtual DbSet<UfAdministracja> UfAdministracjas { get; set; }

    public virtual DbSet<UfCena> UfCenas { get; set; }

    public virtual DbSet<UfDzialGrupa> UfDzialGrupas { get; set; }

    public virtual DbSet<UfInne> UfInnes { get; set; }

    public virtual DbSet<UfInstalator> UfInstalators { get; set; }

    public virtual DbSet<UfJednostkaMiary> UfJednostkaMiaries { get; set; }

    public virtual DbSet<UfKonfiguracja> UfKonfiguracjas { get; set; }

    public virtual DbSet<UfKonfiguracjaProfil> UfKonfiguracjaProfils { get; set; }

    public virtual DbSet<UfOperacja> UfOperacjas { get; set; }

    public virtual DbSet<UfPlu> UfPlus { get; set; }

    public virtual DbSet<UfSterownik> UfSterowniks { get; set; }

    public virtual DbSet<UfSynchTemp> UfSynchTemps { get; set; }

    public virtual DbSet<UfSynchroKodyKresk> UfSynchroKodyKresks { get; set; }

    public virtual DbSet<UfSynchronizacja> UfSynchronizacjas { get; set; }

    public virtual DbSet<UfTransmisja> UfTransmisjas { get; set; }

    public virtual DbSet<UfTransmisjaKontekst> UfTransmisjaKonteksts { get; set; }

    public virtual DbSet<UfTransmisjaSzczegol> UfTransmisjaSzczegols { get; set; }

    public virtual DbSet<UfUrzadzenie> UfUrzadzenies { get; set; }

    public virtual DbSet<UfVat> UfVats { get; set; }

    public virtual DbSet<UfZadanie> UfZadanies { get; set; }

    public virtual DbSet<UfZadanieTowar> UfZadanieTowars { get; set; }

    public virtual DbSet<UiFiltr> UiFiltrs { get; set; }

    public virtual DbSet<UiFiltrDeklaracje> UiFiltrDeklaracjes { get; set; }

    public virtual DbSet<UiFiltrModul> UiFiltrModuls { get; set; }

    public virtual DbSet<UiFunkcja> UiFunkcjas { get; set; }

    public virtual DbSet<UiIkona> UiIkonas { get; set; }

    public virtual DbSet<UiKolor> UiKolors { get; set; }

    public virtual DbSet<UiKompozycja> UiKompozycjas { get; set; }

    public virtual DbSet<UiModul> UiModuls { get; set; }

    public virtual DbSet<UiModulPo> UiModulPos { get; set; }

    public virtual DbSet<UiModulPosdok> UiModulPosdoks { get; set; }

    public virtual DbSet<UiModulPosxaml> UiModulPosxamls { get; set; }

    public virtual DbSet<UiModulPoszakladka> UiModulPoszakladkas { get; set; }

    public virtual DbSet<UiModulPowiazany> UiModulPowiazanies { get; set; }

    public virtual DbSet<UiOperacja> UiOperacjas { get; set; }

    public virtual DbSet<UiOperacjaModul> UiOperacjaModuls { get; set; }

    public virtual DbSet<UiPodwidok> UiPodwidoks { get; set; }

    public virtual DbSet<UiSkrotModul> UiSkrotModuls { get; set; }

    public virtual DbSet<UiZasob> UiZasobs { get; set; }

    public virtual DbSet<Update> Updates { get; set; }

    public virtual DbSet<VatDaneVat> VatDaneVats { get; set; }

    public virtual DbSet<VatEwidVat> VatEwidVats { get; set; }

    public virtual DbSet<VatKorektaProporcji> VatKorektaProporcjis { get; set; }

    public virtual DbSet<VatMetodaRozl> VatMetodaRozls { get; set; }

    public virtual DbSet<VatMetodaRozlUe> VatMetodaRozlUes { get; set; }

    public virtual DbSet<VatOznaczeniaJpksprzedaz> VatOznaczeniaJpksprzedazs { get; set; }

    public virtual DbSet<VatOznaczeniaJpkzakup> VatOznaczeniaJpkzakups { get; set; }

    public virtual DbSet<VatParametr> VatParametrs { get; set; }

    public virtual DbSet<VatPozycja> VatPozycjas { get; set; }

    public virtual DbSet<VatProporcjaBazowa> VatProporcjaBazowas { get; set; }

    public virtual DbSet<VatPrzypomnienium> VatPrzypomnienia { get; set; }

    public virtual DbSet<VatWizTowar> VatWizTowars { get; set; }

    public virtual DbSet<VatWizTowar2013> VatWizTowar2013s { get; set; }

    public virtual DbSet<VatWizzard> VatWizzards { get; set; }

    public virtual DbSet<VatWizzard2013> VatWizzard2013s { get; set; }

    public virtual DbSet<VatWizzard2014> VatWizzard2014s { get; set; }

    public virtual DbSet<VwAlarm> VwAlarms { get; set; }

    public virtual DbSet<VwAlarmyUzytkownika> VwAlarmyUzytkownikas { get; set; }

    public virtual DbSet<VwAp2> VwAp2s { get; set; }

    public virtual DbSet<VwAplogPod> VwAplogPods { get; set; }

    public virtual DbSet<VwAprun> VwApruns { get; set; }

    public virtual DbSet<VwBankowoscTransakcjeOczekujace> VwBankowoscTransakcjeOczekujaces { get; set; }

    public virtual DbSet<VwBibliotekaDokumentow> VwBibliotekaDokumentows { get; set; }

    public virtual DbSet<VwCelePrzetwarzanium> VwCelePrzetwarzania { get; set; }

    public virtual DbSet<VwCesje> VwCesjes { get; set; }

    public virtual DbSet<VwDataDokHandlowego> VwDataDokHandlowegos { get; set; }

    public virtual DbSet<VwDatyBlokad> VwDatyBlokads { get; set; }

    public virtual DbSet<VwDekl> VwDekls { get; set; }

    public virtual DbSet<VwDeklZu> VwDeklZus { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyKwartVer1> VwDeklaracjePitBLiniowyKwartVer1s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyKwartVer2> VwDeklaracjePitBLiniowyKwartVer2s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyKwartVer3> VwDeklaracjePitBLiniowyKwartVer3s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyKwartVer4> VwDeklaracjePitBLiniowyKwartVer4s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyKwartVer5> VwDeklaracjePitBLiniowyKwartVer5s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyMiesVer1> VwDeklaracjePitBLiniowyMiesVer1s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyMiesVer2> VwDeklaracjePitBLiniowyMiesVer2s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyMiesVer3> VwDeklaracjePitBLiniowyMiesVer3s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyMiesVer4> VwDeklaracjePitBLiniowyMiesVer4s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyMiesVer5> VwDeklaracjePitBLiniowyMiesVer5s { get; set; }

    public virtual DbSet<VwDeklaracjePitBLiniowyVer6> VwDeklaracjePitBLiniowyVer6s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresKwartVer1> VwDeklaracjePitBProgresKwartVer1s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresKwartVer2> VwDeklaracjePitBProgresKwartVer2s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresKwartVer3> VwDeklaracjePitBProgresKwartVer3s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresKwartVer4> VwDeklaracjePitBProgresKwartVer4s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresKwartVer5> VwDeklaracjePitBProgresKwartVer5s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresMiesVer1> VwDeklaracjePitBProgresMiesVer1s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresMiesVer2> VwDeklaracjePitBProgresMiesVer2s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresMiesVer3> VwDeklaracjePitBProgresMiesVer3s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresMiesVer4> VwDeklaracjePitBProgresMiesVer4s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresMiesVer5> VwDeklaracjePitBProgresMiesVer5s { get; set; }

    public virtual DbSet<VwDeklaracjePitBProgresVer6> VwDeklaracjePitBProgresVer6s { get; set; }

    public virtual DbSet<VwDekretBankowy> VwDekretBankowies { get; set; }

    public virtual DbSet<VwDekretHandlowy> VwDekretHandlowies { get; set; }

    public virtual DbSet<VwDekretKasowy> VwDekretKasowies { get; set; }

    public virtual DbSet<VwDok4Fsfzgrid> VwDok4Fsfzgrids { get; set; }

    public virtual DbSet<VwDok4FsfzgridSimple> VwDok4FsfzgridSimples { get; set; }

    public virtual DbSet<VwDok4Gtagrid> VwDok4Gtagrids { get; set; }

    public virtual DbSet<VwDok4Ist> VwDok4Ists { get; set; }

    public virtual DbSet<VwDok4Kfsgrid> VwDok4Kfsgrids { get; set; }

    public virtual DbSet<VwDok4Kfzgrid> VwDok4Kfzgrids { get; set; }

    public virtual DbSet<VwDok4Pagrid> VwDok4Pagrids { get; set; }

    public virtual DbSet<VwDok4ZamGrid> VwDok4ZamGrids { get; set; }

    public virtual DbSet<VwDok4ZamGridvenderoNo> VwDok4ZamGridvenderoNos { get; set; }

    public virtual DbSet<VwDok4ZamGridvenderoOp> VwDok4ZamGridvenderoOps { get; set; }

    public virtual DbSet<VwDok4Zwgrid> VwDok4Zwgrids { get; set; }

    public virtual DbSet<VwDokDoDekretacji> VwDokDoDekretacjis { get; set; }

    public virtual DbSet<VwDokDoEwidOsszest> VwDokDoEwidOsszests { get; set; }

    public virtual DbSet<VwDokFwpowiazane> VwDokFwpowiazanes { get; set; }

    public virtual DbSet<VwDokKorKoszt> VwDokKorKoszts { get; set; }

    public virtual DbSet<VwDokLookupDlaKorekt> VwDokLookupDlaKorekts { get; set; }

    public virtual DbSet<VwDokLookupDlaKorektZak> VwDokLookupDlaKorektZaks { get; set; }

    public virtual DbSet<VwDokLookupSprzed> VwDokLookupSprzeds { get; set; }

    public virtual DbSet<VwDokMagWart> VwDokMagWarts { get; set; }

    public virtual DbSet<VwDokPowiazane> VwDokPowiazanes { get; set; }

    public virtual DbSet<VwDokPowiazaneInw> VwDokPowiazaneInws { get; set; }

    public virtual DbSet<VwDokPowiazaneZaliczki> VwDokPowiazaneZaliczkis { get; set; }

    public virtual DbSet<VwDokPozycjaFinalna> VwDokPozycjaFinalnas { get; set; }

    public virtual DbSet<VwDokZwroty> VwDokZwroties { get; set; }

    public virtual DbSet<VwDokumInfTwKontrahenci> VwDokumInfTwKontrahencis { get; set; }

    public virtual DbSet<VwDokumentJestFsZalCzKfsCr> VwDokumentJestFsZalCzKfsCrs { get; set; }

    public virtual DbSet<VwDokumenty> VwDokumenties { get; set; }

    public virtual DbSet<VwDokumenty2> VwDokumenty2s { get; set; }

    public virtual DbSet<VwDokumentyCzastkoweKfsCr> VwDokumentyCzastkoweKfsCrs { get; set; }

    public virtual DbSet<VwDokumentyFirmy> VwDokumentyFirmies { get; set; }

    public virtual DbSet<VwDokumentyPortalBiura> VwDokumentyPortalBiuras { get; set; }

    public virtual DbSet<VwEmail> VwEmails { get; set; }

    public virtual DbSet<VwEmailTempl> VwEmailTempls { get; set; }

    public virtual DbSet<VwEwidVat4grid> VwEwidVat4grids { get; set; }

    public virtual DbSet<VwEwidVatzakupuOdliczanie> VwEwidVatzakupuOdliczanies { get; set; }

    public virtual DbSet<VwFakturyWewnetrzneGrid> VwFakturyWewnetrzneGrids { get; set; }

    public virtual DbSet<VwFakturyWewnetrzneGridSub> VwFakturyWewnetrzneGridSubs { get; set; }

    public virtual DbSet<VwFeniksCechaTw> VwFeniksCechaTws { get; set; }

    public virtual DbSet<VwFeniksCenaTw> VwFeniksCenaTws { get; set; }

    public virtual DbSet<VwFeniksDokumentSync> VwFeniksDokumentSyncs { get; set; }

    public virtual DbSet<VwFeniksFirmaSync> VwFeniksFirmaSyncs { get; set; }

    public virtual DbSet<VwFeniksGrupaTwSync> VwFeniksGrupaTwSyncs { get; set; }

    public virtual DbSet<VwFeniksJednostkaMiaryTwSync> VwFeniksJednostkaMiaryTwSyncs { get; set; }

    public virtual DbSet<VwFeniksKategoriaSync> VwFeniksKategoriaSyncs { get; set; }

    public virtual DbSet<VwFeniksKontrahentSync> VwFeniksKontrahentSyncs { get; set; }

    public virtual DbSet<VwFeniksMagazynSync> VwFeniksMagazynSyncs { get; set; }

    public virtual DbSet<VwFeniksParametrSync> VwFeniksParametrSyncs { get; set; }

    public virtual DbSet<VwFeniksPlatnoscSync> VwFeniksPlatnoscSyncs { get; set; }

    public virtual DbSet<VwFeniksPoleWlasneSync> VwFeniksPoleWlasneSyncs { get; set; }

    public virtual DbSet<VwFeniksProducentSync> VwFeniksProducentSyncs { get; set; }

    public virtual DbSet<VwFeniksPromocjaPoziomCenSync> VwFeniksPromocjaPoziomCenSyncs { get; set; }

    public virtual DbSet<VwFeniksPromocjaSync> VwFeniksPromocjaSyncs { get; set; }

    public virtual DbSet<VwFeniksPromocjaTowarSync> VwFeniksPromocjaTowarSyncs { get; set; }

    public virtual DbSet<VwFeniksSlCechaTwSync> VwFeniksSlCechaTwSyncs { get; set; }

    public virtual DbSet<VwFeniksSlModelTwSync> VwFeniksSlModelTwSyncs { get; set; }

    public virtual DbSet<VwFeniksSlRabatSync> VwFeniksSlRabatSyncs { get; set; }

    public virtual DbSet<VwFeniksSlWalutaSync> VwFeniksSlWalutaSyncs { get; set; }

    public virtual DbSet<VwFeniksSlWlasciwoscCechaTwSync> VwFeniksSlWlasciwoscCechaTwSyncs { get; set; }

    public virtual DbSet<VwFeniksSlWlasciwoscTwSync> VwFeniksSlWlasciwoscTwSyncs { get; set; }

    public virtual DbSet<VwFeniksStanSync> VwFeniksStanSyncs { get; set; }

    public virtual DbSet<VwFeniksStawkaVatsync> VwFeniksStawkaVatsyncs { get; set; }

    public virtual DbSet<VwFeniksTowarKodySync> VwFeniksTowarKodySyncs { get; set; }

    public virtual DbSet<VwFinanseBankRazem> VwFinanseBankRazems { get; set; }

    public virtual DbSet<VwFinanseBankRazemRew> VwFinanseBankRazemRews { get; set; }

    public virtual DbSet<VwFinanseDekrety> VwFinanseDekreties { get; set; }

    public virtual DbSet<VwFinanseDekretyKompensat> VwFinanseDekretyKompensats { get; set; }

    public virtual DbSet<VwFinanseDekretyWszystkie> VwFinanseDekretyWszystkies { get; set; }

    public virtual DbSet<VwFinanseDokumentKasowy> VwFinanseDokumentKasowies { get; set; }

    public virtual DbSet<VwFinanseDokumenty> VwFinanseDokumenties { get; set; }

    public virtual DbSet<VwFinanseKasaRazem> VwFinanseKasaRazems { get; set; }

    public virtual DbSet<VwFinanseKasaRazemRew> VwFinanseKasaRazemRews { get; set; }

    public virtual DbSet<VwFinanseNumeracja> VwFinanseNumeracjas { get; set; }

    public virtual DbSet<VwFinanseOperacjaBankowa> VwFinanseOperacjaBankowas { get; set; }

    public virtual DbSet<VwFinanseRozDekretow> VwFinanseRozDekretows { get; set; }

    public virtual DbSet<VwFinanseRozDokumenty> VwFinanseRozDokumenties { get; set; }

    public virtual DbSet<VwFinanseRozDokumentyWszystkie> VwFinanseRozDokumentyWszystkies { get; set; }

    public virtual DbSet<VwFinanseRozKhInstykt> VwFinanseRozKhInstykts { get; set; }

    public virtual DbSet<VwFinanseRozKhInstyktKontum> VwFinanseRozKhInstyktKonta { get; set; }

    public virtual DbSet<VwFinanseRozKhLookup> VwFinanseRozKhLookups { get; set; }

    public virtual DbSet<VwFinanseRozKontrahenci> VwFinanseRozKontrahencis { get; set; }

    public virtual DbSet<VwFinanseRozKontrahenciDok> VwFinanseRozKontrahenciDoks { get; set; }

    public virtual DbSet<VwFinanseRozKontrahenciDokBazowy> VwFinanseRozKontrahenciDokBazowies { get; set; }

    public virtual DbSet<VwFinanseRozKontrahenciDokBazowyWszystkie> VwFinanseRozKontrahenciDokBazowyWszystkies { get; set; }

    public virtual DbSet<VwFinanseRozKontrahenciDokRew> VwFinanseRozKontrahenciDokRews { get; set; }

    public virtual DbSet<VwFinanseRozKontrahenciDokRewBazowy> VwFinanseRozKontrahenciDokRewBazowies { get; set; }

    public virtual DbSet<VwFinanseRozKontrahenciDokRewBazowyWszystkie> VwFinanseRozKontrahenciDokRewBazowyWszystkies { get; set; }

    public virtual DbSet<VwFinanseRozKontrahenciDokWszystkie> VwFinanseRozKontrahenciDokWszystkies { get; set; }

    public virtual DbSet<VwFinanseRozNierozliczone> VwFinanseRozNierozliczones { get; set; }

    public virtual DbSet<VwFinanseRozRozliczone> VwFinanseRozRozliczones { get; set; }

    public virtual DbSet<VwFinanseRozRozliczoneRew> VwFinanseRozRozliczoneRews { get; set; }

    public virtual DbSet<VwFinanseRozSplaty> VwFinanseRozSplaties { get; set; }

    public virtual DbSet<VwFinanseRozSplatyDoWyk> VwFinanseRozSplatyDoWyks { get; set; }

    public virtual DbSet<VwFinanseRozSplatyRew> VwFinanseRozSplatyRews { get; set; }

    public virtual DbSet<VwFinanseRozSplatyRozliczeniaOddzial> VwFinanseRozSplatyRozliczeniaOddzials { get; set; }

    public virtual DbSet<VwFinanseRozSplatyRozliczeniaRew> VwFinanseRozSplatyRozliczeniaRews { get; set; }

    public virtual DbSet<VwFinanseRozSplatyRozliczenium> VwFinanseRozSplatyRozliczenia { get; set; }

    public virtual DbSet<VwFinanseRozliczenium> VwFinanseRozliczenia { get; set; }

    public virtual DbSet<VwFinanseRozrachunek> VwFinanseRozrachuneks { get; set; }

    public virtual DbSet<VwFinanseRozrachunkiDoKorekty> VwFinanseRozrachunkiDoKorekties { get; set; }

    public virtual DbSet<VwFinanseRozrachunkiWgDokumentow> VwFinanseRozrachunkiWgDokumentows { get; set; }

    public virtual DbSet<VwFinanseRozrachunkiWgDokumentowRew> VwFinanseRozrachunkiWgDokumentowRews { get; set; }

    public virtual DbSet<VwFinanseRozrachunkiWgKontrahentow> VwFinanseRozrachunkiWgKontrahentows { get; set; }

    public virtual DbSet<VwFinanseRozrachunkiWgKontrahentowKh> VwFinanseRozrachunkiWgKontrahentowKhs { get; set; }

    public virtual DbSet<VwFinanseRozrachunkiWgKontrahentowKhRew> VwFinanseRozrachunkiWgKontrahentowKhRews { get; set; }

    public virtual DbSet<VwFinanseRozrachunkiWgKontrahentowRew> VwFinanseRozrachunkiWgKontrahentowRews { get; set; }

    public virtual DbSet<VwFinanseSesjiKasowych> VwFinanseSesjiKasowyches { get; set; }

    public virtual DbSet<VwFinanseWolneSplaty> VwFinanseWolneSplaties { get; set; }

    public virtual DbSet<VwFinanseWolneSplatyRew> VwFinanseWolneSplatyRews { get; set; }

    public virtual DbSet<VwFinanseWszystkie> VwFinanseWszystkies { get; set; }

    public virtual DbSet<VwGmina> VwGminas { get; set; }

    public virtual DbSet<VwGratAkordy> VwGratAkordies { get; set; }

    public virtual DbSet<VwGratCrakord> VwGratCrakords { get; set; }

    public virtual DbSet<VwGratCrkartaWynagrodzenAdresGmina> VwGratCrkartaWynagrodzenAdresGminas { get; set; }

    public virtual DbSet<VwGratCrkartaWynagrodzenDaty> VwGratCrkartaWynagrodzenDaties { get; set; }

    public virtual DbSet<VwGratCrkartaWynagrodzenPracownik> VwGratCrkartaWynagrodzenPracowniks { get; set; }

    public virtual DbSet<VwGratCrkartaWynagrodzenRachunki> VwGratCrkartaWynagrodzenRachunkis { get; set; }

    public virtual DbSet<VwGratCrkartaWynagrodzenWyplaty> VwGratCrkartaWynagrodzenWyplaties { get; set; }

    public virtual DbSet<VwGratCrkwestionariuszOsobowyPracownicy> VwGratCrkwestionariuszOsobowyPracownicies { get; set; }

    public virtual DbSet<VwGratCrlistaPlac> VwGratCrlistaPlacs { get; set; }

    public virtual DbSet<VwGratCrlistaPlacKasowaWyplaty> VwGratCrlistaPlacKasowaWyplaties { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSkladnik> VwGratCrlistaPlacSkladniks { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSzczegolowyOdcinek> VwGratCrlistaPlacSzczegolowyOdcineks { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSzczegolowyOdcinekBrutto> VwGratCrlistaPlacSzczegolowyOdcinekBruttos { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSzczegolowyOdcinekDoWyplaty> VwGratCrlistaPlacSzczegolowyOdcinekDoWyplaties { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSzczegolowyOdcinekNetto> VwGratCrlistaPlacSzczegolowyOdcinekNettos { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSzczegolowyOdcinekPodatek> VwGratCrlistaPlacSzczegolowyOdcinekPodateks { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSzczegolowyOdcinekSkladniki> VwGratCrlistaPlacSzczegolowyOdcinekSkladnikis { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSzczegolowyOdcinekUbezpieczenium> VwGratCrlistaPlacSzczegolowyOdcinekUbezpieczenia { get; set; }

    public virtual DbSet<VwGratCrlistaPlacSzczegolowyOdcinekZu> VwGratCrlistaPlacSzczegolowyOdcinekZus { get; set; }

    public virtual DbSet<VwGratCrlistaPlacWyplaty> VwGratCrlistaPlacWyplaties { get; set; }

    public virtual DbSet<VwGratCrlistaPlacWyplatySkladniki> VwGratCrlistaPlacWyplatySkladnikis { get; set; }

    public virtual DbSet<VwGratCrnaliczeniaPotracenium> VwGratCrnaliczeniaPotracenia { get; set; }

    public virtual DbSet<VwGratCrpracownicy> VwGratCrpracownicies { get; set; }

    public virtual DbSet<VwGratCrpracownicyWdziale> VwGratCrpracownicyWdziales { get; set; }

    public virtual DbSet<VwGratCrprowizja> VwGratCrprowizjas { get; set; }

    public virtual DbSet<VwGratCrskladnikPlacowyDefinicje> VwGratCrskladnikPlacowyDefinicjes { get; set; }

    public virtual DbSet<VwGratCrzestawPlacowy> VwGratCrzestawPlacowies { get; set; }

    public virtual DbSet<VwGratCrzestawPlacowySkladniki> VwGratCrzestawPlacowySkladnikis { get; set; }

    public virtual DbSet<VwGratInfoPracUmowy> VwGratInfoPracUmowies { get; set; }

    public virtual DbSet<VwGratInfoPracUmowyCp> VwGratInfoPracUmowyCps { get; set; }

    public virtual DbSet<VwGratNaliczeniaPotracenium> VwGratNaliczeniaPotracenia { get; set; }

    public virtual DbSet<VwGratPlanowaniePracy> VwGratPlanowaniePracies { get; set; }

    public virtual DbSet<VwGratPotraceniaKomornicze> VwGratPotraceniaKomorniczes { get; set; }

    public virtual DbSet<VwGratPracownicyLookup> VwGratPracownicyLookups { get; set; }

    public virtual DbSet<VwGratPracownicyLookupPpk> VwGratPracownicyLookupPpks { get; set; }

    public virtual DbSet<VwGratProwizje> VwGratProwizjes { get; set; }

    public virtual DbSet<VwGratRachunkiDoUmowCp> VwGratRachunkiDoUmowCps { get; set; }

    public virtual DbSet<VwGratSkladnikPlacowyInstytucja> VwGratSkladnikPlacowyInstytucjas { get; set; }

    public virtual DbSet<VwGratSkladnikiPlacowe> VwGratSkladnikiPlacowes { get; set; }

    public virtual DbSet<VwGratSqlViewAkord> VwGratSqlViewAkords { get; set; }

    public virtual DbSet<VwGratSqlViewHarmonogramRachunkowListum> VwGratSqlViewHarmonogramRachunkowLista { get; set; }

    public virtual DbSet<VwGratSqlViewListaRachunkowUmowy> VwGratSqlViewListaRachunkowUmowies { get; set; }

    public virtual DbSet<VwGratSqlViewNaliczeniePotracenie> VwGratSqlViewNaliczeniePotracenies { get; set; }

    public virtual DbSet<VwGratSqlViewProwizja> VwGratSqlViewProwizjas { get; set; }

    public virtual DbSet<VwGratSqlViewUmowaCpHeader> VwGratSqlViewUmowaCpHeaders { get; set; }

    public virtual DbSet<VwGratSqlViewUmowyCp> VwGratSqlViewUmowyCps { get; set; }

    public virtual DbSet<VwGratUcpgodzinyPrzepracowane> VwGratUcpgodzinyPrzepracowanes { get; set; }

    public virtual DbSet<VwGratUmowy> VwGratUmowies { get; set; }

    public virtual DbSet<VwGratUmowyCp> VwGratUmowyCps { get; set; }

    public virtual DbSet<VwGratUmowyLookup> VwGratUmowyLookups { get; set; }

    public virtual DbSet<VwGratUpZpLookup> VwGratUpZpLookups { get; set; }

    public virtual DbSet<VwGratWyplaty> VwGratWyplaties { get; set; }

    public virtual DbSet<VwGratZawodLookup> VwGratZawodLookups { get; set; }

    public virtual DbSet<VwGratZfss> VwGratZfsses { get; set; }

    public virtual DbSet<VwGridCoSlFormatNumeracji> VwGridCoSlFormatNumeracjis { get; set; }

    public virtual DbSet<VwHbOperacjaDoSkojarzeniaEbank> VwHbOperacjaDoSkojarzeniaEbanks { get; set; }

    public virtual DbSet<VwHbOperacjaDoSkojarzenium> VwHbOperacjaDoSkojarzenia { get; set; }

    public virtual DbSet<VwHbOperacje> VwHbOperacjes { get; set; }

    public virtual DbSet<VwHbOperacjeEbank> VwHbOperacjeEbanks { get; set; }

    public virtual DbSet<VwHbOperacjeITransakcjeSkojarzone> VwHbOperacjeITransakcjeSkojarzones { get; set; }

    public virtual DbSet<VwHbSkojarzoneAutomatycznie> VwHbSkojarzoneAutomatycznies { get; set; }

    public virtual DbSet<VwHbTransakcjeDoRozliczeniaGridView> VwHbTransakcjeDoRozliczeniaGridViews { get; set; }

    public virtual DbSet<VwHbTransakcjeDoSkojarzenium> VwHbTransakcjeDoSkojarzenia { get; set; }

    public virtual DbSet<VwHbTransakcjeGridView> VwHbTransakcjeGridViews { get; set; }

    public virtual DbSet<VwHbeTransakcjeGridView> VwHbeTransakcjeGridViews { get; set; }

    public virtual DbSet<VwHistoriaTransakcji> VwHistoriaTransakcjis { get; set; }

    public virtual DbSet<VwHistoriaZadanium> VwHistoriaZadania { get; set; }

    public virtual DbSet<VwImpFakturyWewnetrzne> VwImpFakturyWewnetrznes { get; set; }

    public virtual DbSet<VwImpHandlowe> VwImpHandlowes { get; set; }

    public virtual DbSet<VwImpKorektyKosztow> VwImpKorektyKosztows { get; set; }

    public virtual DbSet<VwImpListaPlac> VwImpListaPlacs { get; set; }

    public virtual DbSet<VwImpRachunek> VwImpRachuneks { get; set; }

    public virtual DbSet<VwImpWyplatum> VwImpWyplata { get; set; }

    public virtual DbSet<VwInsSysprocess> VwInsSysprocesses { get; set; }

    public virtual DbSet<VwInstynktSzumy> VwInstynktSzumies { get; set; }

    public virtual DbSet<VwInstytucje> VwInstytucjes { get; set; }

    public virtual DbSet<VwInwCz> VwInwCzs { get; set; }

    public virtual DbSet<VwInwPowiazaneCzastkoweOrazDokMag> VwInwPowiazaneCzastkoweOrazDokMags { get; set; }

    public virtual DbSet<VwInwZb> VwInwZbs { get; set; }

    public virtual DbSet<VwKlienci> VwKliencis { get; set; }

    public virtual DbSet<VwKlientCecha> VwKlientCechas { get; set; }

    public virtual DbSet<VwKlientHistorium> VwKlientHistoria { get; set; }

    public virtual DbSet<VwKompensatyRew> VwKompensatyRews { get; set; }

    public virtual DbSet<VwKonfiguracja> VwKonfiguracjas { get; set; }

    public virtual DbSet<VwKontaPrzeciwstawne> VwKontaPrzeciwstawnes { get; set; }

    public virtual DbSet<VwKosztyDoKorekty> VwKosztyDoKorekties { get; set; }

    public virtual DbSet<VwKursyCen> VwKursyCens { get; set; }

    public virtual DbSet<VwKwotyStawkiOplatSpecjalnych> VwKwotyStawkiOplatSpecjalnyches { get; set; }

    public virtual DbSet<VwKwotyStawkiOplatSpecjalnychWszystkieDok> VwKwotyStawkiOplatSpecjalnychWszystkieDoks { get; set; }

    public virtual DbSet<VwMagazyn> VwMagazyns { get; set; }

    public virtual DbSet<VwMarzaCalkowitaFm> VwMarzaCalkowitaFms { get; set; }

    public virtual DbSet<VwMisprzedaz> VwMisprzedazs { get; set; }

    public virtual DbSet<VwModul> VwModuls { get; set; }

    public virtual DbSet<VwNetParametrInd> VwNetParametrInds { get; set; }

    public virtual DbSet<VwNetWiadomosci> VwNetWiadomoscis { get; set; }

    public virtual DbSet<VwNetWiadomosciNowaWersja> VwNetWiadomosciNowaWersjas { get; set; }

    public virtual DbSet<VwNotaKoryg4Grid> VwNotaKoryg4Grids { get; set; }

    public virtual DbSet<VwNrParametr> VwNrParametrs { get; set; }

    public virtual DbSet<VwObPowiazane> VwObPowiazanes { get; set; }

    public virtual DbSet<VwObPowiazaneGrid> VwObPowiazaneGrids { get; set; }

    public virtual DbSet<VwObPowiazaneGridSymbolTr> VwObPowiazaneGridSymbolTrs { get; set; }

    public virtual DbSet<VwOdliczeniaDoliczenium> VwOdliczeniaDoliczenia { get; set; }

    public virtual DbSet<VwOperacjePrzyjeciaSt> VwOperacjePrzyjeciaSts { get; set; }

    public virtual DbSet<VwOplCukrDokZaliczkowe> VwOplCukrDokZaliczkowes { get; set; }

    public virtual DbSet<VwOplCukrDokZbiorcze> VwOplCukrDokZbiorczes { get; set; }

    public virtual DbSet<VwOplCukrZest> VwOplCukrZests { get; set; }

    public virtual DbSet<VwOplCukrZestDokRazem> VwOplCukrZestDokRazems { get; set; }

    public virtual DbSet<VwPdUprawnienium> VwPdUprawnienia { get; set; }

    public virtual DbSet<VwPersonelRachunkuBankOnline> VwPersonelRachunkuBankOnlines { get; set; }

    public virtual DbSet<VwPodsumowanieKpir> VwPodsumowanieKpirs { get; set; }

    public virtual DbSet<VwPojEksploatacjaRew> VwPojEksploatacjaRews { get; set; }

    public virtual DbSet<VwPolaWlasneDokument> VwPolaWlasneDokuments { get; set; }

    public virtual DbSet<VwPolaWlasneFinanse> VwPolaWlasneFinanses { get; set; }

    public virtual DbSet<VwPolaWlasneKontrahent> VwPolaWlasneKontrahents { get; set; }

    public virtual DbSet<VwPolaWlasnePozycja> VwPolaWlasnePozycjas { get; set; }

    public virtual DbSet<VwPolaWlasneSzansaSprzedazy> VwPolaWlasneSzansaSprzedazies { get; set; }

    public virtual DbSet<VwPolaWlasneTowar> VwPolaWlasneTowars { get; set; }

    public virtual DbSet<VwPolaWlasneZadanie> VwPolaWlasneZadanies { get; set; }

    public virtual DbSet<VwPolaWlasneZlecenie> VwPolaWlasneZlecenies { get; set; }

    public virtual DbSet<VwPowDokLookupGrid> VwPowDokLookupGrids { get; set; }

    public virtual DbSet<VwPoziomyCen> VwPoziomyCens { get; set; }

    public virtual DbSet<VwPoziomyCenWaluty> VwPoziomyCenWaluties { get; set; }

    public virtual DbSet<VwPracownicyPodmiotuSubiekt> VwPracownicyPodmiotuSubiekts { get; set; }

    public virtual DbSet<VwProfilEwidParam> VwProfilEwidParams { get; set; }

    public virtual DbSet<VwProfilTypyParam> VwProfilTypyParams { get; set; }

    public virtual DbSet<VwProfileMagazynyErp> VwProfileMagazynyErps { get; set; }

    public virtual DbSet<VwProfileModuly> VwProfileModulies { get; set; }

    public virtual DbSet<VwProfileModulyNav> VwProfileModulyNavs { get; set; }

    public virtual DbSet<VwProfilePodgladyErp> VwProfilePodgladyErps { get; set; }

    public virtual DbSet<VwProfileProduktyOdwr> VwProfileProduktyOdwrs { get; set; }

    public virtual DbSet<VwProfileSlowniki> VwProfileSlownikis { get; set; }

    public virtual DbSet<VwProfileUprawnieniaMag> VwProfileUprawnieniaMags { get; set; }

    public virtual DbSet<VwProfileUprawnienium> VwProfileUprawnienia { get; set; }

    public virtual DbSet<VwProfileUzytkownicyErp> VwProfileUzytkownicyErps { get; set; }

    public virtual DbSet<VwProfileWydrukiErp> VwProfileWydrukiErps { get; set; }

    public virtual DbSet<VwProfileZestawieniaErp> VwProfileZestawieniaErps { get; set; }

    public virtual DbSet<VwRachBankPdm> VwRachBankPdms { get; set; }

    public virtual DbSet<VwRachunkiBialaListaLogUnikalnePozycje> VwRachunkiBialaListaLogUnikalnePozycjes { get; set; }

    public virtual DbSet<VwRachunkiHarmonogram> VwRachunkiHarmonograms { get; set; }

    public virtual DbSet<VwRaportyKasowe> VwRaportyKasowes { get; set; }

    public virtual DbSet<VwRejKsiegowySymbol> VwRejKsiegowySymbols { get; set; }

    public virtual DbSet<VwRejestrUf> VwRejestrUfs { get; set; }

    public virtual DbSet<VwRewSchematyImportu> VwRewSchematyImportus { get; set; }

    public virtual DbSet<VwRewSchematyImportuUepiK> VwRewSchematyImportuUepiKs { get; set; }

    public virtual DbSet<VwRozliczeniaMiedzyokresoweKosztow> VwRozliczeniaMiedzyokresoweKosztows { get; set; }

    public virtual DbSet<VwRozliczeniaSzybkichPlatnosci> VwRozliczeniaSzybkichPlatnoscis { get; set; }

    public virtual DbSet<VwRozszerzeniaSferyczne> VwRozszerzeniaSferycznes { get; set; }

    public virtual DbSet<VwSchematyImportu> VwSchematyImportus { get; set; }

    public virtual DbSet<VwSerwisyChmurowePowiazanium> VwSerwisyChmurowePowiazania { get; set; }

    public virtual DbSet<VwSesjaBlokadum> VwSesjaBlokada { get; set; }

    public virtual DbSet<VwSesjeKasowe> VwSesjeKasowes { get; set; }

    public virtual DbSet<VwSlPanstwo4Ist> VwSlPanstwo4Ists { get; set; }

    public virtual DbSet<VwSprzMoolimit> VwSprzMoolimits { get; set; }

    public virtual DbSet<VwStawkaVat> VwStawkaVats { get; set; }

    public virtual DbSet<VwStlookup> VwStlookups { get; set; }

    public virtual DbSet<VwSubkontum> VwSubkonta { get; set; }

    public virtual DbSet<VwSynchronizacjaImport> VwSynchronizacjaImports { get; set; }

    public virtual DbSet<VwTowar> VwTowars { get; set; }

    public virtual DbSet<VwTowarListaWszystkie> VwTowarListaWszystkies { get; set; }

    public virtual DbSet<VwTowarListum> VwTowarLista { get; set; }

    public virtual DbSet<VwTowaryCennikiSelekcja> VwTowaryCennikiSelekcjas { get; set; }

    public virtual DbSet<VwTowaryTransakcji> VwTowaryTransakcjis { get; set; }

    public virtual DbSet<VwTransakcja> VwTransakcjas { get; set; }

    public virtual DbSet<VwTransakcjaGrid> VwTransakcjaGrids { get; set; }

    public virtual DbSet<VwTwInfStanyMag> VwTwInfStanyMags { get; set; }

    public virtual DbSet<VwTwParametrNazwaCeny> VwTwParametrNazwaCenies { get; set; }

    public virtual DbSet<VwUprawnieniaMagazynowe> VwUprawnieniaMagazynowes { get; set; }

    public virtual DbSet<VwUrzadSkarbowy> VwUrzadSkarbowies { get; set; }

    public virtual DbSet<VwUrzadzenie> VwUrzadzenies { get; set; }

    public virtual DbSet<VwVatspDoKorekty> VwVatspDoKorekties { get; set; }

    public virtual DbSet<VwVatzakDoKorekty> VwVatzakDoKorekties { get; set; }

    public virtual DbSet<VwWiarygodnaSciezkaAudytu> VwWiarygodnaSciezkaAudytus { get; set; }

    public virtual DbSet<VwWyciagiBankowe> VwWyciagiBankowes { get; set; }

    public virtual DbSet<VwWyciagiBankoweLookup> VwWyciagiBankoweLookups { get; set; }

    public virtual DbSet<VwWyszukiwanieKlienciPersonel> VwWyszukiwanieKlienciPersonels { get; set; }

    public virtual DbSet<VwWzorzec> VwWzorzecs { get; set; }

    public virtual DbSet<VwZadanie> VwZadanies { get; set; }

    public virtual DbSet<VwZadanieWindykacyjne> VwZadanieWindykacyjnes { get; set; }

    public virtual DbSet<VwZadanieWindykacyjneEx> VwZadanieWindykacyjneExes { get; set; }

    public virtual DbSet<VwZbiorczaPozycja> VwZbiorczaPozycjas { get; set; }

    public virtual DbSet<VwZbiorczaPozycjaDod> VwZbiorczaPozycjaDods { get; set; }

    public virtual DbSet<VwZbiorczaPozycjaEx> VwZbiorczaPozycjaExes { get; set; }

    public virtual DbSet<VwZbiorczaPozycjaHan> VwZbiorczaPozycjaHans { get; set; }

    public virtual DbSet<VwZdjecieTowaru> VwZdjecieTowarus { get; set; }

    public virtual DbSet<VwZestDefDokSprzedazy> VwZestDefDokSprzedazies { get; set; }

    public virtual DbSet<VwZestDefKontrahenci> VwZestDefKontrahencis { get; set; }

    public virtual DbSet<VwZestDefPozycjeTowary> VwZestDefPozycjeTowaries { get; set; }

    public virtual DbSet<VwZleceniaKomponent> VwZleceniaKomponents { get; set; }

    public virtual DbSet<VwZlecenium> VwZlecenia { get; set; }

    public virtual DbSet<VwZstOplatySpecjalneWgAsortymentu> VwZstOplatySpecjalneWgAsortymentus { get; set; }

    public virtual DbSet<VwZstPodatekSprzedazyDetalicznej> VwZstPodatekSprzedazyDetalicznejs { get; set; }

    public virtual DbSet<VwZstPrzWgKhnt> VwZstPrzWgKhnts { get; set; }

    public virtual DbSet<VwZstRaportFunduszePromocji> VwZstRaportFunduszePromocjis { get; set; }

    public virtual DbSet<VwZstSprzWgDok> VwZstSprzWgDoks { get; set; }

    public virtual DbSet<VwZstSprzWgDokEx> VwZstSprzWgDokExes { get; set; }

    public virtual DbSet<VwZstSprzWgKhnt> VwZstSprzWgKhnts { get; set; }

    public virtual DbSet<VwZstSubRejSprVatDokFw> VwZstSubRejSprVatDokFws { get; set; }

    public virtual DbSet<VwZstSubRejVatMarza> VwZstSubRejVatMarzas { get; set; }

    public virtual DbSet<VwZstSubRejZakVatDokFw> VwZstSubRejZakVatDokFws { get; set; }

    public virtual DbSet<VwZstWydWgKhnt> VwZstWydWgKhnts { get; set; }

    public virtual DbSet<VwZstZakWgKhnt> VwZstZakWgKhnts { get; set; }

    public virtual DbSet<VwZwrotDokument> VwZwrotDokuments { get; set; }

    public virtual DbSet<VwZwrotPozycja> VwZwrotPozycjas { get; set; }

    public virtual DbSet<VwZwrotVat> VwZwrotVats { get; set; }

    public virtual DbSet<VwpDksKasa> VwpDksKasas { get; set; }

    public virtual DbSet<VwpDksKasaTransfer> VwpDksKasaTransfers { get; set; }

    public virtual DbSet<VwpGtTransformacja> VwpGtTransformacjas { get; set; }

    public virtual DbSet<VwpParEwid> VwpParEwids { get; set; }

    public virtual DbSet<VwpParametry> VwpParametries { get; set; }

    public virtual DbSet<VwpRbRachBankowy> VwpRbRachBankowies { get; set; }

    public virtual DbSet<VwpSlMagazyn> VwpSlMagazyns { get; set; }

    public virtual DbSet<VwpSlMagazynprzesuniecium> VwpSlMagazynprzesuniecia { get; set; }

    public virtual DbSet<VwpSlMagazynzamowieniamm> VwpSlMagazynzamowieniamms { get; set; }

    public virtual DbSet<VwpSlSlownik> VwpSlSlowniks { get; set; }

    public virtual DbSet<VwpWyWzorzec> VwpWyWzorzecs { get; set; }

    public virtual DbSet<VwpZstEwid> VwpZstEwids { get; set; }

    public virtual DbSet<WindParametr> WindParametrs { get; set; }

    public virtual DbSet<WizWizard2017> WizWizard2017s { get; set; }

    public virtual DbSet<WyDrukarkaDomyslna> WyDrukarkaDomyslnas { get; set; }

    public virtual DbSet<WyGrid> WyGrids { get; set; }

    public virtual DbSet<WyGrupa> WyGrupas { get; set; }

    public virtual DbSet<WyKodSterujacy> WyKodSterujacies { get; set; }

    public virtual DbSet<WyNaglowek> WyNagloweks { get; set; }

    public virtual DbSet<WyPlik> WyPliks { get; set; }

    public virtual DbSet<WyPrzelewParam> WyPrzelewParams { get; set; }

    public virtual DbSet<WyStatusWydruku> WyStatusWydrukus { get; set; }

    public virtual DbSet<WyTekstowyParam> WyTekstowyParams { get; set; }

    public virtual DbSet<WyTyp> WyTyps { get; set; }

    public virtual DbSet<WyWydrukParam> WyWydrukParams { get; set; }

    public virtual DbSet<WyWzDomyslny> WyWzDomyslnies { get; set; }

    public virtual DbSet<WyWzPowiazany> WyWzPowiazanies { get; set; }

    public virtual DbSet<WyWzorzec> WyWzorzecs { get; set; }

    public virtual DbSet<WyWzorzecMagazyn> WyWzorzecMagazyns { get; set; }

    public virtual DbSet<WyWzorzecUzytkownik> WyWzorzecUzytkowniks { get; set; }

    public virtual DbSet<XemEwid> XemEwids { get; set; }

    public virtual DbSet<XemSzum> XemSzums { get; set; }

    public virtual DbSet<XinEwid> XinEwids { get; set; }

    public virtual DbSet<XinSzum> XinSzums { get; set; }

    public virtual DbSet<XkhEwid> XkhEwids { get; set; }

    public virtual DbSet<XkhSzum> XkhSzums { get; set; }

    public virtual DbSet<XpkEwid> XpkEwids { get; set; }

    public virtual DbSet<XpkSzum> XpkSzums { get; set; }

    public virtual DbSet<XprEwid> XprEwids { get; set; }

    public virtual DbSet<XprSzum> XprSzums { get; set; }

    public virtual DbSet<XtwEwid> XtwEwids { get; set; }

    public virtual DbSet<XtwSzum> XtwSzums { get; set; }

    public virtual DbSet<XwlEwid> XwlEwids { get; set; }

    public virtual DbSet<XwlSzum> XwlSzums { get; set; }

    public virtual DbSet<ZdAlarmyRezerwacja> ZdAlarmyRezerwacjas { get; set; }

    public virtual DbSet<ZdFaksParametr> ZdFaksParametrs { get; set; }

    public virtual DbSet<ZdHistorium> ZdHistoria { get; set; }

    public virtual DbSet<ZdListParametr> ZdListParametrs { get; set; }

    public virtual DbSet<ZdNotatkaParametr> ZdNotatkaParametrs { get; set; }

    public virtual DbSet<ZdOpi> ZdOpis { get; set; }

    public virtual DbSet<ZdRozmowaIntParametr> ZdRozmowaIntParametrs { get; set; }

    public virtual DbSet<ZdRozrachunek> ZdRozrachuneks { get; set; }

    public virtual DbSet<ZdSpotkanieParametr> ZdSpotkanieParametrs { get; set; }

    public virtual DbSet<ZdTelefonParametr> ZdTelefonParametrs { get; set; }

    public virtual DbSet<ZdUczestnik> ZdUczestniks { get; set; }

    public virtual DbSet<ZdZadanie> ZdZadanies { get; set; }

    public virtual DbSet<ZdZadanieParametr> ZdZadanieParametrs { get; set; }

    public virtual DbSet<ZlpParametryZlecen> ZlpParametryZlecens { get; set; }

    public virtual DbSet<ZlpZlecenie> ZlpZlecenies { get; set; }

    public virtual DbSet<ZpkKsiega> ZpkKsiegas { get; set; }

    public virtual DbSet<ZpkParametr> ZpkParametrs { get; set; }

    public virtual DbSet<ZsCechaZ> ZsCechaZs { get; set; }

    public virtual DbSet<ZsRezerwacja> ZsRezerwacjas { get; set; }

    public virtual DbSet<ZsRezerwacjaUczestnik> ZsRezerwacjaUczestniks { get; set; }

    public virtual DbSet<ZsZasob> ZsZasobs { get; set; }

    public virtual DbSet<ZsZdjecieZ> ZsZdjecieZs { get; set; }

    public virtual DbSet<ZstEwid> ZstEwids { get; set; }

    public virtual DbSet<ZstTemp> ZstTemps { get; set; }

    public virtual DbSet<ZstWlasneXml> ZstWlasneXmls { get; set; }

    public virtual DbSet<ZwRozrachunek> ZwRozrachuneks { get; set; }

    public virtual DbSet<ZwZdarzenieWindykacyjne> ZwZdarzenieWindykacyjnes { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Name=ConnectionStrings:CS");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Polish_CI_AS");

        modelBuilder.Entity<AbAktualizacjeBiznesowe>(entity =>
        {
            entity.HasKey(e => e.AbId);

            entity.ToTable("ab_AktualizacjeBiznesowe");

            entity.Property(e => e.AbId)
                .ValueGeneratedNever()
                .HasColumnName("ab_Id");
            entity.Property(e => e.AbKursyWalutEbcharmonogram)
                .HasColumnType("datetime")
                .HasColumnName("ab_KursyWalutEBCHarmonogram");
            entity.Property(e => e.AbKursyWalutEbcstanowisko1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_KursyWalutEBCStanowisko1");
            entity.Property(e => e.AbKursyWalutEbcstanowisko2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_KursyWalutEBCStanowisko2");
            entity.Property(e => e.AbKursyWalutEbcstanowisko3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_KursyWalutEBCStanowisko3");
            entity.Property(e => e.AbKursyWalutEbctyp).HasColumnName("ab_KursyWalutEBCTyp");
            entity.Property(e => e.AbKursyWalutHarmonogram)
                .HasColumnType("datetime")
                .HasColumnName("ab_KursyWalutHarmonogram");
            entity.Property(e => e.AbKursyWalutStanowisko1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_KursyWalutStanowisko1");
            entity.Property(e => e.AbKursyWalutStanowisko2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_KursyWalutStanowisko2");
            entity.Property(e => e.AbKursyWalutStanowisko3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_KursyWalutStanowisko3");
            entity.Property(e => e.AbKursyWalutTyp).HasColumnName("ab_KursyWalutTyp");
            entity.Property(e => e.AbParamPodatkHarmonogram)
                .HasColumnType("datetime")
                .HasColumnName("ab_ParamPodatkHarmonogram");
            entity.Property(e => e.AbParamPodatkStanowisko1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_ParamPodatkStanowisko1");
            entity.Property(e => e.AbParamPodatkStanowisko2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_ParamPodatkStanowisko2");
            entity.Property(e => e.AbParamPodatkStanowisko3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ab_ParamPodatkStanowisko3");
            entity.Property(e => e.AbParamPodatkTyp).HasColumnName("ab_ParamPodatkTyp");
        });

        modelBuilder.Entity<AbLicznik>(entity =>
        {
            entity.HasKey(e => e.AblId).HasName("PK_ab_Liczniki");

            entity.ToTable("ab_Licznik");

            entity.Property(e => e.AblId)
                .ValueGeneratedNever()
                .HasColumnName("abl_Id");
            entity.Property(e => e.AblDniPo).HasColumnName("abl_DniPo");
            entity.Property(e => e.AblDniPrzed).HasColumnName("abl_DniPrzed");
            entity.Property(e => e.AblInterwal).HasColumnName("abl_Interwal");
            entity.Property(e => e.AblWartosc).HasColumnName("abl_Wartosc");
        });

        modelBuilder.Entity<AdrEmail>(entity =>
        {
            entity.HasKey(e => e.AmId);

            entity.ToTable("adr_Email", tb =>
                {
                    tb.HasTrigger("tr_AdrEmail_Deleting");
                    tb.HasTrigger("tr_AdrEmail_Inserting");
                    tb.HasTrigger("tr_AdrEmail_Updating");
                });

            entity.Property(e => e.AmId)
                .ValueGeneratedNever()
                .HasColumnName("am_Id");
            entity.Property(e => e.AmEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("am_Email");
            entity.Property(e => e.AmIdAdres).HasColumnName("am_IdAdres");
            entity.Property(e => e.AmPodstawowy).HasColumnName("am_Podstawowy");
            entity.Property(e => e.AmRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("am_Rodzaj");

            entity.HasOne(d => d.AmIdAdresNavigation).WithMany(p => p.AdrEmails)
                .HasForeignKey(d => d.AmIdAdres)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_adr_Email_adr__Ewid");
        });

        modelBuilder.Entity<AdrEwid>(entity =>
        {
            entity.HasKey(e => e.AdrId);

            entity.ToTable("adr__Ewid", tb =>
                {
                    tb.HasTrigger("tr_AdrEwidPK_Updating");
                    tb.HasTrigger("tr_AdrEwid_Deleting");
                    tb.HasTrigger("tr_AdrEwid_Inserting");
                    tb.HasTrigger("tr_AdrEwid_Updating");
                });

            entity.HasIndex(e => new { e.AdrIdObiektu, e.AdrTypAdresu }, "IX_adr__Ewid").IsUnique();

            entity.HasIndex(e => new { e.AdrId, e.AdrNip }, "IX_adr__Ewid_1");

            entity.HasIndex(e => e.AdrMiejscowosc, "IX_adr__Ewid_Miejscowosc");

            entity.HasIndex(e => e.AdrTypAdresu, "IX_adr__Ewid_Podmiot");

            entity.Property(e => e.AdrId)
                .ValueGeneratedNever()
                .HasColumnName("adr_Id");
            entity.Property(e => e.AdrAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when [adr_NrLokalu]<>'' then ((([adr_Ulica]+' ')+[adr_NrDomu])+'/')+[adr_NrLokalu] else ([adr_Ulica]+' ')+[adr_NrDomu] end)", false)
                .HasColumnName("adr_Adres");
            entity.Property(e => e.AdrDataZmiany)
                .HasColumnType("datetime")
                .HasColumnName("adr_DataZmiany");
            entity.Property(e => e.AdrFaks)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Faks");
            entity.Property(e => e.AdrGmina)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Gmina");
            entity.Property(e => e.AdrIdGminy).HasColumnName("adr_IdGminy");
            entity.Property(e => e.AdrIdObiektu).HasColumnName("adr_IdObiektu");
            entity.Property(e => e.AdrIdPanstwo).HasColumnName("adr_IdPanstwo");
            entity.Property(e => e.AdrIdWersja).HasColumnName("adr_IdWersja");
            entity.Property(e => e.AdrIdWojewodztwo).HasColumnName("adr_IdWojewodztwo");
            entity.Property(e => e.AdrIdZmienil).HasColumnName("adr_IdZmienil");
            entity.Property(e => e.AdrKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Kod");
            entity.Property(e => e.AdrMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Miejscowosc");
            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.AdrNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_NazwaPelna");
            entity.Property(e => e.AdrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_NIP");
            entity.Property(e => e.AdrNrDomu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_NrDomu");
            entity.Property(e => e.AdrNrEori)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_NrEORI");
            entity.Property(e => e.AdrNrLokalu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_NrLokalu");
            entity.Property(e => e.AdrNrUrzeduSkarbowego)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("adr_NrUrzeduSkarbowego");
            entity.Property(e => e.AdrPoczta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Poczta");
            entity.Property(e => e.AdrPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Powiat");
            entity.Property(e => e.AdrSkrytka)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Skrytka");
            entity.Property(e => e.AdrSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Symbol");
            entity.Property(e => e.AdrTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Telefon");
            entity.Property(e => e.AdrTypAdresu).HasColumnName("adr_TypAdresu");
            entity.Property(e => e.AdrUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adr_Ulica");

            entity.HasOne(d => d.AdrIdPanstwoNavigation).WithMany(p => p.AdrEwids)
                .HasForeignKey(d => d.AdrIdPanstwo)
                .HasConstraintName("FK_adr__Ewid_sl_Panstwo");

            entity.HasOne(d => d.AdrIdWojewodztwoNavigation).WithMany(p => p.AdrEwids)
                .HasForeignKey(d => d.AdrIdWojewodztwo)
                .HasConstraintName("FK_adr__Ewid_sl_Wojewodztwo");
        });

        modelBuilder.Entity<AdrHistorium>(entity =>
        {
            entity.HasKey(e => e.AdrhId);

            entity.ToTable("adr_Historia");

            entity.HasIndex(e => new { e.AdrhIdAdresu, e.AdrhId }, "IX_adr_Historia");

            entity.Property(e => e.AdrhId)
                .ValueGeneratedNever()
                .HasColumnName("adrh_Id");
            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhDataZmiany)
                .HasColumnType("datetime")
                .HasColumnName("adrh_DataZmiany");
            entity.Property(e => e.AdrhFaks)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Faks");
            entity.Property(e => e.AdrhGmina)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Gmina");
            entity.Property(e => e.AdrhIdAdresu).HasColumnName("adrh_IdAdresu");
            entity.Property(e => e.AdrhIdGminy).HasColumnName("adrh_IdGminy");
            entity.Property(e => e.AdrhIdPanstwo)
                .HasDefaultValue(1)
                .HasColumnName("adrh_IdPanstwo");
            entity.Property(e => e.AdrhIdWersja).HasColumnName("adrh_IdWersja");
            entity.Property(e => e.AdrhIdWojewodztwo).HasColumnName("adrh_IdWojewodztwo");
            entity.Property(e => e.AdrhIdZmienil).HasColumnName("adrh_IdZmienil");
            entity.Property(e => e.AdrhKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Kod");
            entity.Property(e => e.AdrhMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Miejscowosc");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.AdrhNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("adrh_NazwaPelna");
            entity.Property(e => e.AdrhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_NIP");
            entity.Property(e => e.AdrhNrDomu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_NrDomu");
            entity.Property(e => e.AdrhNrEori)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_NrEORI");
            entity.Property(e => e.AdrhNrLokalu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_NrLokalu");
            entity.Property(e => e.AdrhNrUrzeduSkarbowego)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("adrh_NrUrzeduSkarbowego");
            entity.Property(e => e.AdrhPoczta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Poczta");
            entity.Property(e => e.AdrhPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Powiat");
            entity.Property(e => e.AdrhSkrytka)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Skrytka");
            entity.Property(e => e.AdrhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Symbol");
            entity.Property(e => e.AdrhTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Telefon");
            entity.Property(e => e.AdrhUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("adrh_Ulica");

            entity.HasOne(d => d.AdrhIdAdresuNavigation).WithMany(p => p.AdrHistoria)
                .HasForeignKey(d => d.AdrhIdAdresu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_adr_Historia_adr__Ewid");
        });

        modelBuilder.Entity<ApAp>(entity =>
        {
            entity.HasKey(e => e.ApId);

            entity.ToTable("ap__AP");

            entity.Property(e => e.ApId)
                .ValueGeneratedNever()
                .HasColumnName("ap_Id");
            entity.Property(e => e.ApIdRejestruKsiegowego).HasColumnName("ap_IdRejestruKsiegowego");
            entity.Property(e => e.ApKontoKorekty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ap_KontoKorekty");
            entity.Property(e => e.ApNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ap_Nazwa");
            entity.Property(e => e.ApSlIdOpisuDekretu).HasColumnName("ap_SL_IdOpisuDekretu");
            entity.Property(e => e.ApTrybAutobilansowaniaDekretu)
                .HasDefaultValue(1)
                .HasColumnName("ap_TrybAutobilansowaniaDekretu");
            entity.Property(e => e.ApTrybBilansowaniaDekretu).HasColumnName("ap_TrybBilansowaniaDekretu");
            entity.Property(e => e.ApTypDatyDekretacji).HasColumnName("ap_TypDatyDekretacji");
            entity.Property(e => e.ApTypDatyDokumentu).HasColumnName("ap_TypDatyDokumentu");
            entity.Property(e => e.ApTypDatyOperacji).HasColumnName("ap_TypDatyOperacji");
            entity.Property(e => e.ApTypOpisuDekretu).HasColumnName("ap_TypOpisuDekretu");
            entity.Property(e => e.ApUOpisDekretu)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ap_U_OpisDekretu");
            entity.Property(e => e.ApZablokowany).HasColumnName("ap_Zablokowany");

            entity.HasOne(d => d.ApSlIdOpisuDekretuNavigation).WithMany(p => p.ApAps)
                .HasForeignKey(d => d.ApSlIdOpisuDekretu)
                .HasConstraintName("FK_ap__AP_sl_Opis");
        });

        modelBuilder.Entity<ApLog>(entity =>
        {
            entity.HasKey(e => e.AlId);

            entity.ToTable("ap_Log");

            entity.Property(e => e.AlId)
                .ValueGeneratedNever()
                .HasColumnName("al_Id");
            entity.Property(e => e.AlDataUruchomienia)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("al_DataUruchomienia");
            entity.Property(e => e.AlIdAp).HasColumnName("al_IdAP");
            entity.Property(e => e.AlIdUzytkownika).HasColumnName("al_IdUzytkownika");
            entity.Property(e => e.AlLog)
                .HasColumnType("ntext")
                .HasColumnName("al_Log");
            entity.Property(e => e.AlNazwaUzytkownika)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("al_NazwaUzytkownika");
            entity.Property(e => e.AlNrDekretu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("al_NrDekretu");
            entity.Property(e => e.AlOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("al_OkresDo");
            entity.Property(e => e.AlOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("al_OkresOd");
            entity.Property(e => e.AlWynik)
                .HasDefaultValue(1)
                .HasColumnName("al_Wynik");

            entity.HasOne(d => d.AlIdApNavigation).WithMany(p => p.ApLogs)
                .HasForeignKey(d => d.AlIdAp)
                .HasConstraintName("FK_ap_Log_ap__AP");

            entity.HasOne(d => d.AlIdUzytkownikaNavigation).WithMany(p => p.ApLogs)
                .HasForeignKey(d => d.AlIdUzytkownika)
                .HasConstraintName("FK_ap_Log_pd_Uzytkownik");
        });

        modelBuilder.Entity<ApLogOpi>(entity =>
        {
            entity.HasKey(e => e.AloId);

            entity.ToTable("ap_LogOpis");

            entity.Property(e => e.AloId)
                .ValueGeneratedNever()
                .HasColumnName("alo_Id");
            entity.Property(e => e.AloIdLogu).HasColumnName("alo_IdLogu");
            entity.Property(e => e.AloOpis)
                .HasColumnType("ntext")
                .HasColumnName("alo_Opis");
            entity.Property(e => e.AloWynik).HasColumnName("alo_Wynik");

            entity.HasOne(d => d.AloIdLoguNavigation).WithMany(p => p.ApLogOpis)
                .HasForeignKey(d => d.AloIdLogu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ap_LogOpis_ap_Log");
        });

        modelBuilder.Entity<ApZapisy>(entity =>
        {
            entity.HasKey(e => e.ZaId);

            entity.ToTable("ap_Zapisy");

            entity.Property(e => e.ZaId)
                .ValueGeneratedNever()
                .HasColumnName("za_Id");
            entity.Property(e => e.ZaDefNrKontaWynikowego)
                .HasColumnType("ntext")
                .HasColumnName("za_DefNrKontaWynikowego");
            entity.Property(e => e.ZaDefWartosc)
                .HasColumnType("ntext")
                .HasColumnName("za_DefWartosc");
            entity.Property(e => e.ZaDefZrodlaDanych)
                .HasColumnType("ntext")
                .HasColumnName("za_DefZrodlaDanych");
            entity.Property(e => e.ZaIdAp).HasColumnName("za_IdAP");
            entity.Property(e => e.ZaLp).HasColumnName("za_Lp");
            entity.Property(e => e.ZaPoczatekGrupy).HasColumnName("za_PoczatekGrupy");
            entity.Property(e => e.ZaSlIdOpisuDekretu).HasColumnName("za_SL_IdOpisuDekretu");
            entity.Property(e => e.ZaTypDefinicjZd)
                .HasDefaultValue(1)
                .HasColumnName("za_TypDefinicjZD");
            entity.Property(e => e.ZaTypOpisuDekretu).HasColumnName("za_TypOpisuDekretu");
            entity.Property(e => e.ZaUOpisDekretu)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("za_U_OpisDekretu");

            entity.HasOne(d => d.ZaIdApNavigation).WithMany(p => p.ApZapisies)
                .HasForeignKey(d => d.ZaIdAp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ap_Zapisy_ap__AP");

            entity.HasOne(d => d.ZaSlIdOpisuDekretuNavigation).WithMany(p => p.ApZapisies)
                .HasForeignKey(d => d.ZaSlIdOpisuDekretu)
                .HasConstraintName("FK_ap_Zapisy_sl_Opis");
        });

        modelBuilder.Entity<BeforeDropOldTable>(entity =>
        {
            entity.ToTable("__BeforeDropOldTables");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Sqlupdate)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("SQLUpdate");
        });

        modelBuilder.Entity<BibDokument>(entity =>
        {
            entity.HasKey(e => e.BibId).HasName("PK_bib_BibliotekaDok");

            entity.ToTable("bib_Dokument");

            entity.Property(e => e.BibId)
                .ValueGeneratedNever()
                .HasColumnName("bib_Id");
            entity.Property(e => e.BibDataDodania)
                .HasColumnType("datetime")
                .HasColumnName("bib_DataDodania");
            entity.Property(e => e.BibDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("bib_DataModyfikacji");
            entity.Property(e => e.BibDodal).HasColumnName("bib_Dodal");
            entity.Property(e => e.BibEAkta).HasColumnName("bib_eAkta");
            entity.Property(e => e.BibEpodpis).HasColumnName("bib_EPodpis");
            entity.Property(e => e.BibEpodpisPowiazany).HasColumnName("bib_EPodpisPowiazany");
            entity.Property(e => e.BibIdKary).HasColumnName("bib_IdKary");
            entity.Property(e => e.BibIdKategorii).HasColumnName("bib_IdKategorii");
            entity.Property(e => e.BibIdObiektu).HasColumnName("bib_IdObiektu");
            entity.Property(e => e.BibNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bib_Nazwa");
            entity.Property(e => e.BibOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bib_Opis");
            entity.Property(e => e.BibPodkategoria).HasColumnName("bib_Podkategoria");
            entity.Property(e => e.BibRozmiar)
                .HasColumnType("money")
                .HasColumnName("bib_Rozmiar");
            entity.Property(e => e.BibSciezkaDoPliku)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("bib_SciezkaDoPliku");
            entity.Property(e => e.BibStanowisko)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bib_Stanowisko");
            entity.Property(e => e.BibTyp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bib_Typ");
            entity.Property(e => e.BibTypObiektu).HasColumnName("bib_TypObiektu");
            entity.Property(e => e.BibWyeksportowany).HasColumnName("bib_Wyeksportowany");
            entity.Property(e => e.BibZablokowany).HasColumnName("bib_Zablokowany");
            entity.Property(e => e.BibZmodyfikowal).HasColumnName("bib_Zmodyfikowal");

            entity.HasOne(d => d.BibIdKaryNavigation).WithMany(p => p.BibDokuments)
                .HasForeignKey(d => d.BibIdKary)
                .HasConstraintName("FK_bib_Dokument_pr_Motywacja");
        });

        modelBuilder.Entity<BibZawartoscPliku>(entity =>
        {
            entity.HasKey(e => e.BipId);

            entity.ToTable("bib_ZawartoscPliku");

            entity.Property(e => e.BipId)
                .ValueGeneratedNever()
                .HasColumnName("bip_Id");
            entity.Property(e => e.BipIdDokumentu).HasColumnName("bip_IdDokumentu");
            entity.Property(e => e.BipTyp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bip_Typ");
            entity.Property(e => e.BipZawartosc)
                .HasColumnType("image")
                .HasColumnName("bip_Zawartosc");
        });

        modelBuilder.Entity<CaClientAccountParam>(entity =>
        {
            entity.HasKey(e => e.CapId).HasName("PK__ca_Clien__3CBE198B098B0CBF");

            entity.ToTable("ca_ClientAccountParams");

            entity.Property(e => e.CapId)
                .ValueGeneratedNever()
                .HasColumnName("cap_Id");
            entity.Property(e => e.CapData)
                .HasColumnType("image")
                .HasColumnName("cap_Data");
            entity.Property(e => e.CapPodlaczKontoInsertPrzypominaj)
                .HasColumnType("datetime")
                .HasColumnName("cap_PodlaczKontoInsertPrzypominaj");
        });

        modelBuilder.Entity<CenCennikCecha>(entity =>
        {
            entity.HasKey(e => e.CcId);

            entity.ToTable("cen_CennikCecha");

            entity.Property(e => e.CcId)
                .ValueGeneratedNever()
                .HasColumnName("cc_Id");
            entity.Property(e => e.CcIdCecha).HasColumnName("cc_IdCecha");
            entity.Property(e => e.CcIdSzablon).HasColumnName("cc_IdSzablon");

            entity.HasOne(d => d.CcIdCechaNavigation).WithMany(p => p.CenCennikCechas)
                .HasForeignKey(d => d.CcIdCecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cen_CennikCecha_sl_CechaTw");

            entity.HasOne(d => d.CcIdSzablonNavigation).WithMany(p => p.CenCennikCechas)
                .HasForeignKey(d => d.CcIdSzablon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cen_CennikCecha_cen_CennikSzablon");
        });

        modelBuilder.Entity<CenCennikDokument>(entity =>
        {
            entity.HasKey(e => e.CdkId);

            entity.ToTable("cen_CennikDokument");

            entity.Property(e => e.CdkId)
                .ValueGeneratedNever()
                .HasColumnName("cdk_Id");
            entity.Property(e => e.CdkIdDokum).HasColumnName("cdk_IdDokum");
            entity.Property(e => e.CdkIdSzablon).HasColumnName("cdk_IdSzablon");
        });

        modelBuilder.Entity<CenCennikElement>(entity =>
        {
            entity.HasKey(e => e.CeId);

            entity.ToTable("cen_CennikElement");

            entity.Property(e => e.CeId)
                .ValueGeneratedNever()
                .HasColumnName("ce_Id");
            entity.Property(e => e.CeIdElement).HasColumnName("ce_IdElement");
            entity.Property(e => e.CeIdSzablon).HasColumnName("ce_IdSzablon");

            entity.HasOne(d => d.CeIdSzablonNavigation).WithMany(p => p.CenCennikElements)
                .HasForeignKey(d => d.CeIdSzablon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cen_CennikElement_cen_CennikSzablon");
        });

        modelBuilder.Entity<CenCennikGrupa>(entity =>
        {
            entity.HasKey(e => e.CgrId);

            entity.ToTable("cen_CennikGrupa");

            entity.Property(e => e.CgrId)
                .ValueGeneratedNever()
                .HasColumnName("cgr_Id");
            entity.Property(e => e.CgrIdGrupa).HasColumnName("cgr_IdGrupa");
            entity.Property(e => e.CgrIdSzablon).HasColumnName("cgr_IdSzablon");

            entity.HasOne(d => d.CgrIdGrupaNavigation).WithMany(p => p.CenCennikGrupas)
                .HasForeignKey(d => d.CgrIdGrupa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cen_CennikGrupa_sl_GrupaTw");

            entity.HasOne(d => d.CgrIdSzablonNavigation).WithMany(p => p.CenCennikGrupas)
                .HasForeignKey(d => d.CgrIdSzablon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cen_CennikGrupa_cen_CennikSzablon");
        });

        modelBuilder.Entity<CenCennikKolumna>(entity =>
        {
            entity.HasKey(e => e.CkoId);

            entity.ToTable("cen_CennikKolumna");

            entity.Property(e => e.CkoId)
                .ValueGeneratedNever()
                .HasColumnName("cko_Id");
            entity.Property(e => e.CkoIdCena).HasColumnName("cko_IdCena");
            entity.Property(e => e.CkoIdSzablon).HasColumnName("cko_IdSzablon");
            entity.Property(e => e.CkoIdWaluta).HasColumnName("cko_IdWaluta");
            entity.Property(e => e.CkoKurs)
                .HasColumnType("money")
                .HasColumnName("cko_Kurs");
            entity.Property(e => e.CkoLp).HasColumnName("cko_LP");
            entity.Property(e => e.CkoNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cko_Nazwa");
            entity.Property(e => e.CkoRabat)
                .HasColumnType("money")
                .HasColumnName("cko_Rabat");

            entity.HasOne(d => d.CkoIdSzablonNavigation).WithMany(p => p.CenCennikKolumnas)
                .HasForeignKey(d => d.CkoIdSzablon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cen_CennikKolumna_cen_CennikSzablon");
        });

        modelBuilder.Entity<CenCennikSzablon>(entity =>
        {
            entity.HasKey(e => e.CsId);

            entity.ToTable("cen_CennikSzablon");

            entity.Property(e => e.CsId)
                .ValueGeneratedNever()
                .HasColumnName("cs_Id");
            entity.Property(e => e.CsCzyWzorzec).HasColumnName("cs_CzyWzorzec");
            entity.Property(e => e.CsDataOkreslona)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("cs_DataOkreslona");
            entity.Property(e => e.CsDataPrzedzialDo)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("cs_DataPrzedzialDo");
            entity.Property(e => e.CsDataPrzedzialOd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("cs_DataPrzedzialOd");
            entity.Property(e => e.CsDataTyp).HasColumnName("cs_DataTyp");
            entity.Property(e => e.CsFiltrTyp).HasColumnName("cs_FiltrTyp");
            entity.Property(e => e.CsIdWzorzec).HasColumnName("cs_IdWzorzec");
            entity.Property(e => e.CsIgnorujNoweElementy).HasColumnName("cs_IgnorujNoweElementy");
            entity.Property(e => e.CsMaxTowId).HasColumnName("cs_MaxTowId");
            entity.Property(e => e.CsNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cs_Nazwa");
            entity.Property(e => e.CsNotIn)
                .HasDefaultValue(true)
                .HasColumnName("cs_NotIn");
            entity.Property(e => e.CsOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cs_Opis");
            entity.Property(e => e.CsRodzajFiltr)
                .HasDefaultValue(15)
                .HasColumnName("cs_RodzajFiltr");
            entity.Property(e => e.CsStanFiltr).HasColumnName("cs_StanFiltr");
            entity.Property(e => e.CsTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cs_Tytul");
            entity.Property(e => e.CsUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cs_Uwagi");
        });

        modelBuilder.Entity<CentParametr>(entity =>
        {
            entity.HasKey(e => e.CentId);

            entity.ToTable("cent_Parametr");

            entity.Property(e => e.CentId)
                .ValueGeneratedNever()
                .HasColumnName("cent_Id");
            entity.Property(e => e.CentCiagVoip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cent_CiagVoip");
            entity.Property(e => e.CentDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("cent_DataModyfikacji");
            entity.Property(e => e.CentOdebranieGlos).HasColumnName("cent_OdebranieGlos");
            entity.Property(e => e.CentOdebranieSkypeChat).HasColumnName("cent_OdebranieSkypeChat");
            entity.Property(e => e.CentOdebranieSkypeGlos).HasColumnName("cent_OdebranieSkypeGlos");
            entity.Property(e => e.CentOpoznienieWybierania).HasColumnName("cent_OpoznienieWybierania");
            entity.Property(e => e.CentParamEwidId).HasColumnName("cent_ParamEwidId");
            entity.Property(e => e.CentPrefixGlobalny)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cent_PrefixGlobalny");
            entity.Property(e => e.CentTryb).HasColumnName("cent_Tryb");
            entity.Property(e => e.CentWybranieGadu).HasColumnName("cent_WybranieGadu");
            entity.Property(e => e.CentWybranieGlos).HasColumnName("cent_WybranieGlos");
            entity.Property(e => e.CentWybranieSkypeChat).HasColumnName("cent_WybranieSkypeChat");
            entity.Property(e => e.CentWybranieSkypeGlos).HasColumnName("cent_WybranieSkypeGlos");
        });

        modelBuilder.Entity<CpCelPrzetwarzanium>(entity =>
        {
            entity.HasKey(e => e.CptId);

            entity.ToTable("cp__CelPrzetwarzania");

            entity.Property(e => e.CptId)
                .ValueGeneratedNever()
                .HasColumnName("cpt_Id");
            entity.Property(e => e.CptCzasTrwania).HasColumnName("cpt_CzasTrwania");
            entity.Property(e => e.CptCzyAktywny)
                .HasDefaultValue(true)
                .HasColumnName("cpt_CzyAktywny");
            entity.Property(e => e.CptCzyDrukowac)
                .HasDefaultValue(true)
                .HasColumnName("cpt_CzyDrukowac");
            entity.Property(e => e.CptDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("cpt_DataZakonczenia");
            entity.Property(e => e.CptNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cpt_Nazwa");
            entity.Property(e => e.CptRodzOkresowosci).HasColumnName("cpt_RodzOkresowosci");
            entity.Property(e => e.CptTresc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cpt_Tresc");
        });

        modelBuilder.Entity<CrmParametr>(entity =>
        {
            entity.HasKey(e => e.CrmId);

            entity.ToTable("crm_Parametr");

            entity.Property(e => e.CrmId)
                .ValueGeneratedNever()
                .HasColumnName("crm_Id");
            entity.Property(e => e.CrmAlgorytm).HasColumnName("crm_Algorytm");
            entity.Property(e => e.CrmOpoznienieWybierania)
                .HasDefaultValue(10)
                .HasColumnName("crm_OpoznienieWybierania");
            entity.Property(e => e.CrmPrefixGlobalny)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("crm_PrefixGlobalny");
            entity.Property(e => e.CrmWizard).HasColumnName("crm_Wizard");
        });

        modelBuilder.Entity<CsSkrypt>(entity =>
        {
            entity.HasKey(e => e.CssId).HasName("PK_cs_Skrypt_css_Id");

            entity.ToTable("cs_Skrypt");

            entity.Property(e => e.CssId)
                .ValueGeneratedNever()
                .HasColumnName("css_Id");
            entity.Property(e => e.CssAktywny).HasColumnName("css_Aktywny");
            entity.Property(e => e.CssAssemblies)
                .HasColumnType("text")
                .HasColumnName("css_Assemblies");
            entity.Property(e => e.CssHaslo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("css_Haslo");
            entity.Property(e => e.CssKolejnosc).HasColumnName("css_Kolejnosc");
            entity.Property(e => e.CssKontakt)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("css_Kontakt");
            entity.Property(e => e.CssNamespaces)
                .HasColumnType("text")
                .HasColumnName("css_Namespaces");
            entity.Property(e => e.CssNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("css_Nazwa");
            entity.Property(e => e.CssOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("css_Opis");
            entity.Property(e => e.CssProducent)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("css_Producent");
            entity.Property(e => e.CssSkrypt)
                .HasColumnType("text")
                .HasColumnName("css_Skrypt");
            entity.Property(e => e.CssTypObiektu).HasColumnName("css_TypObiektu");
            entity.Property(e => e.CssTypObiektuEx).HasColumnName("css_TypObiektuEx");
            entity.Property(e => e.CssWersja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("css_Wersja");
            entity.Property(e => e.CssZdarzenie).HasColumnName("css_Zdarzenie");
        });

        modelBuilder.Entity<CtxGrupa>(entity =>
        {
            entity.HasKey(e => e.CtgId).HasName("PK_ctx_Grupy");

            entity.ToTable("ctx_Grupa");

            entity.Property(e => e.CtgId)
                .ValueGeneratedNever()
                .HasColumnName("ctg_Id");
            entity.Property(e => e.CtgDef)
                .HasColumnType("image")
                .HasColumnName("ctg_Def");
            entity.Property(e => e.CtgNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ctg_Nazwa");
            entity.Property(e => e.CtgSql)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ctg_Sql");
        });

        modelBuilder.Entity<CtxKonfiguracja>(entity =>
        {
            entity.HasKey(e => new { e.CtxSection, e.CtxUser });

            entity.ToTable("ctx__Konfiguracja");

            entity.Property(e => e.CtxSection)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ctx_Section");
            entity.Property(e => e.CtxUser).HasColumnName("ctx_User");
            entity.Property(e => e.CtxData).HasColumnName("ctx_Data");
        });

        modelBuilder.Entity<DeklCukierDokument>(entity =>
        {
            entity.HasKey(e => e.DcdId);

            entity.ToTable("dekl_CukierDokument");

            entity.Property(e => e.DcdId)
                .ValueGeneratedNever()
                .HasColumnName("dcd_Id");
            entity.Property(e => e.DcdDataFaktury)
                .HasColumnType("datetime")
                .HasColumnName("dcd_DataFaktury");
            entity.Property(e => e.DcdIdDeklaracji).HasColumnName("dcd_IdDeklaracji");
            entity.Property(e => e.DcdIdDokumentuZrodlowego).HasColumnName("dcd_IdDokumentuZrodlowego");
            entity.Property(e => e.DcdLpFaktury).HasColumnName("dcd_LpFaktury");
            entity.Property(e => e.DcdNipdostawcy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dcd_NIPDostawcy");
            entity.Property(e => e.DcdNipnabywcy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dcd_NIPNabywcy");
            entity.Property(e => e.DcdNrFaktury)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("dcd_NrFaktury");

            entity.HasOne(d => d.DcdIdDeklaracjiNavigation).WithMany(p => p.DeklCukierDokuments)
                .HasForeignKey(d => d.DcdIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_CukierDokument_dekl__Ewid");
        });

        modelBuilder.Entity<DeklCukierDokumentTow>(entity =>
        {
            entity.HasKey(e => e.DcdpId);

            entity.ToTable("dekl_CukierDokumentTow");

            entity.Property(e => e.DcdpId)
                .ValueGeneratedNever()
                .HasColumnName("dcdp_Id");
            entity.Property(e => e.DcdpIdCukierDokument).HasColumnName("dcdp_IdCukierDokument");
            entity.Property(e => e.DcdpNrPartiiTowaru)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("dcdp_NrPartiiTowaru");
        });

        modelBuilder.Entity<DeklDeklViudo>(entity =>
        {
            entity.HasKey(e => e.DdvId);

            entity.ToTable("dekl_DeklVIUDO");

            entity.Property(e => e.DdvId)
                .ValueGeneratedNever()
                .HasColumnName("ddv_Id");
            entity.Property(e => e.DdvIdDeklaracji).HasColumnName("ddv_IdDeklaracji");
            entity.Property(e => e.DdvXml)
                .HasColumnType("image")
                .HasColumnName("ddv_XML");

            entity.HasOne(d => d.DdvIdDeklaracjiNavigation).WithMany(p => p.DeklDeklViudos)
                .HasForeignKey(d => d.DdvIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_DeklVIUDO_dekl__Ewid");
        });

        modelBuilder.Entity<DeklEDekl>(entity =>
        {
            entity.HasKey(e => e.DelId).HasName("PK_del_eDekl");

            entity.ToTable("dekl_eDekl");

            entity.Property(e => e.DelId)
                .ValueGeneratedNever()
                .HasColumnName("del_Id");
            entity.Property(e => e.DelIdDeklaracji).HasColumnName("del_IdDeklaracji");
            entity.Property(e => e.DelNrReferencyjny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("del_NrReferencyjny");
            entity.Property(e => e.DelStatus).HasColumnName("del_Status");
            entity.Property(e => e.DelXmlexportData)
                .HasColumnType("datetime")
                .HasColumnName("del_XMLExportData");
            entity.Property(e => e.DelXmlpodpisany)
                .HasColumnType("image")
                .HasColumnName("del_XMLPodpisany");
            entity.Property(e => e.DelXmlpodpisanyDaneAutoryzujace).HasColumnName("del_XMLPodpisanyDaneAutoryzujace");
            entity.Property(e => e.DelXmlpodpisanyData)
                .HasColumnType("datetime")
                .HasColumnName("del_XMLPodpisanyData");
            entity.Property(e => e.DelXmlpodpisanyZrodlo).HasColumnName("del_XMLPodpisanyZrodlo");
            entity.Property(e => e.DelXmlupo)
                .HasColumnType("image")
                .HasColumnName("del_XMLUpo");
            entity.Property(e => e.DelXmlupoData)
                .HasColumnType("datetime")
                .HasColumnName("del_XMLUpoData");
            entity.Property(e => e.DelXmlupoStatus).HasColumnName("del_XMLUpoStatus");
            entity.Property(e => e.DelXmlupoZrodlo).HasColumnName("del_XMLUpoZrodlo");
            entity.Property(e => e.DelXmlwygen)
                .HasColumnType("image")
                .HasColumnName("del_XMLWygen");
            entity.Property(e => e.DelXmlwygenData)
                .HasColumnType("datetime")
                .HasColumnName("del_XMLWygenData");
            entity.Property(e => e.DelXmlwygenZrodlo).HasColumnName("del_XMLWygenZrodlo");
            entity.Property(e => e.DelXmlwyslanyData)
                .HasColumnType("datetime")
                .HasColumnName("del_XMLWyslanyData");
            entity.Property(e => e.DelXmlwyslanyStatus).HasColumnName("del_XMLWyslanyStatus");

            entity.HasOne(d => d.DelIdDeklaracjiNavigation).WithMany(p => p.DeklEDekls)
                .HasForeignKey(d => d.DelIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_eDekl_dekl__Ewid");
        });

        modelBuilder.Entity<DeklEDeklLog>(entity =>
        {
            entity.HasKey(e => e.DellId);

            entity.ToTable("dekl_eDeklLog");

            entity.Property(e => e.DellId)
                .ValueGeneratedNever()
                .HasColumnName("dell_Id");
            entity.Property(e => e.DellDataWpis)
                .HasColumnType("datetime")
                .HasColumnName("dell_DataWpis");
            entity.Property(e => e.DellIdeDeklaracji).HasColumnName("dell_IdeDeklaracji");
            entity.Property(e => e.DellWpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dell_Wpis");

            entity.HasOne(d => d.DellIdeDeklaracjiNavigation).WithMany(p => p.DeklEDeklLogs)
                .HasForeignKey(d => d.DellIdeDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_eDeklLog_dekl_eDekl");
        });

        modelBuilder.Entity<DeklEwid>(entity =>
        {
            entity.HasKey(e => e.DeId);

            entity.ToTable("dekl__Ewid");

            entity.Property(e => e.DeId)
                .ValueGeneratedNever()
                .HasColumnName("de_Id");
            entity.Property(e => e.DeCzyExportowac)
                .HasDefaultValue(true)
                .HasColumnName("de_CzyExportowac");
            entity.Property(e => e.DeCzyGlownyZal).HasColumnName("de_CzyGlownyZal");
            entity.Property(e => e.DeCzyWystapilyBledy).HasColumnName("de_CzyWystapilyBledy");
            entity.Property(e => e.DeDataAktualizacji)
                .HasColumnType("datetime")
                .HasColumnName("de_DataAktualizacji");
            entity.Property(e => e.DeDla)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("de_Dla");
            entity.Property(e => e.DeDoPrzeniesienia)
                .HasColumnType("money")
                .HasColumnName("de_DoPrzeniesienia");
            entity.Property(e => e.DeDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("de_DoZaplaty");
            entity.Property(e => e.DeDochodPrzychodPdstSklZdr)
                .HasColumnType("money")
                .HasColumnName("de_DochodPrzychodPdstSklZdr");
            entity.Property(e => e.DeIdDeklGlownej).HasColumnName("de_IdDeklGlownej");
            entity.Property(e => e.DeIdNaliczeniaPpk).HasColumnName("de_IdNaliczeniaPPK");
            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeIdOperacjiBankowej).HasColumnName("de_IdOperacjiBankowej");
            entity.Property(e => e.DeIdWzorca).HasColumnName("de_idWzorca");
            entity.Property(e => e.DeKorekta).HasColumnName("de_Korekta");
            entity.Property(e => e.DeNadwyzka)
                .HasColumnType("money")
                .HasColumnName("de_Nadwyzka");
            entity.Property(e => e.DeNazwaObiektu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("de_NazwaObiektu");
            entity.Property(e => e.DeNumerUmowy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("de_NumerUmowy");
            entity.Property(e => e.DeOkres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("de_Okres");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DeOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresOd");
            entity.Property(e => e.DePdstSkladkiZdrowotnej)
                .HasColumnType("money")
                .HasColumnName("de_PdstSkladkiZdrowotnej");
            entity.Property(e => e.DeTypObiektu).HasColumnName("de_TypObiektu");
            entity.Property(e => e.DeWersjaRobocza).HasColumnName("de_WersjaRobocza");
            entity.Property(e => e.DeWyeksportowanoDoPliku).HasColumnName("de_WyeksportowanoDoPliku");
            entity.Property(e => e.DeZmienionoWpisUe).HasColumnName("de_ZmienionoWpisUE");

            entity.HasOne(d => d.DeIdNaliczeniaPpkNavigation).WithMany(p => p.DeklEwids)
                .HasForeignKey(d => d.DeIdNaliczeniaPpk)
                .HasConstraintName("FK_dekl__Ewid_dekp__Naliczenie");
        });

        modelBuilder.Entity<DeklIntrastatPole>(entity =>
        {
            entity.HasKey(e => e.DipId);

            entity.ToTable("dekl_IntrastatPole");

            entity.Property(e => e.DipId)
                .ValueGeneratedNever()
                .HasColumnName("dip_Id");
            entity.Property(e => e.DipIdDeklaracji).HasColumnName("dip_IdDeklaracji");
            entity.Property(e => e.DipIloscWuzupJm)
                .HasColumnType("money")
                .HasColumnName("dip_IloscWUzupJM");
            entity.Property(e => e.DipKodKrajuPochodzenia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dip_KodKrajuPochodzenia");
            entity.Property(e => e.DipKodKrajuWysPrzez)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dip_KodKrajuWysPrzez");
            entity.Property(e => e.DipKodRodzajuTransakcji).HasColumnName("dip_KodRodzajuTransakcji");
            entity.Property(e => e.DipKodRodzajuTransportu).HasColumnName("dip_KodRodzajuTransportu");
            entity.Property(e => e.DipKodTowaru)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dip_KodTowaru");
            entity.Property(e => e.DipKodWarunkowDostawy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dip_KodWarunkowDostawy");
            entity.Property(e => e.DipMasaNetto)
                .HasColumnType("money")
                .HasColumnName("dip_MasaNetto");
            entity.Property(e => e.DipNrIdentyfikacyjnyVatKh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dip_NrIdentyfikacyjnyVatKh");
            entity.Property(e => e.DipNrPozycji).HasColumnName("dip_NrPozycji");
            entity.Property(e => e.DipOpisTowaru)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dip_OpisTowaru");
            entity.Property(e => e.DipWartoscFakturowaPln)
                .HasColumnType("money")
                .HasColumnName("dip_WartoscFakturowaPLN");
            entity.Property(e => e.DipWartoscStatystycznaPln)
                .HasColumnType("money")
                .HasColumnName("dip_WartoscStatystycznaPLN");

            entity.HasOne(d => d.DipIdDeklaracjiNavigation).WithMany(p => p.DeklIntrastatPoles)
                .HasForeignKey(d => d.DipIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_IntrastatPole_dekl__Ewid");
        });

        modelBuilder.Entity<DeklJpkV7pole>(entity =>
        {
            entity.HasKey(e => e.JvpId);

            entity.ToTable("dekl_JpkV7Pole");

            entity.Property(e => e.JvpId)
                .ValueGeneratedNever()
                .HasColumnName("jvp_Id");
            entity.Property(e => e.JvpIdDeklaracji).HasColumnName("jvp_IdDeklaracji");
            entity.Property(e => e.JvpNazwaPodmiotu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("jvp_NazwaPodmiotu");
            entity.Property(e => e.JvpNip)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("jvp_Nip");
            entity.Property(e => e.JvpTypPodmiotu).HasColumnName("jvp_TypPodmiotu");

            entity.HasOne(d => d.JvpIdDeklaracjiNavigation).WithMany(p => p.DeklJpkV7poles)
                .HasForeignKey(d => d.JvpIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_JpkV7Pole_dekl__Ewid");
        });

        modelBuilder.Entity<DeklParametr>(entity =>
        {
            entity.HasKey(e => e.DprId).HasName("PK_dekl_Parametr_dpr_Id");

            entity.ToTable("dekl_Parametr");

            entity.Property(e => e.DprId)
                .ValueGeneratedNever()
                .HasColumnName("dpr_Id");
            entity.Property(e => e.DprAutomatycznePrzeliczaniePolZalacznikow).HasColumnName("dpr_AutomatycznePrzeliczaniePolZalacznikow");
            entity.Property(e => e.DprPodpis)
                .HasDefaultValue(1)
                .HasColumnName("dpr_Podpis");
            entity.Property(e => e.DprSposobWykazywaniaKwotyVatdeklViudo).HasColumnName("dpr_SposobWykazywaniaKwotyVATDeklVIUDO");
        });

        modelBuilder.Entity<DeklPfron>(entity =>
        {
            entity.HasKey(e => e.DpfId);

            entity.ToTable("dekl_Pfron");

            entity.Property(e => e.DpfId)
                .ValueGeneratedNever()
                .HasColumnName("dpf_Id");
            entity.Property(e => e.DpfData)
                .HasColumnType("datetime")
                .HasColumnName("dpf_Data");
            entity.Property(e => e.DpfIdDeklaracji).HasColumnName("dpf_IdDeklaracji");
            entity.Property(e => e.DpfOzb)
                .HasColumnType("money")
                .HasColumnName("dpf_OZB");
            entity.Property(e => e.DpfOzl)
                .HasColumnType("money")
                .HasColumnName("dpf_OZL");
            entity.Property(e => e.DpfOzog)
                .HasColumnType("money")
                .HasColumnName("dpf_OZOG");
            entity.Property(e => e.DpfOzon)
                .HasColumnType("money")
                .HasColumnName("dpf_OZON");
            entity.Property(e => e.DpfOzs)
                .HasColumnType("money")
                .HasColumnName("dpf_OZS");
            entity.Property(e => e.DpfOzsp)
                .HasColumnType("money")
                .HasColumnName("dpf_OZSp");
            entity.Property(e => e.DpfOzu)
                .HasColumnType("money")
                .HasColumnName("dpf_OZU");
            entity.Property(e => e.DpfOzup)
                .HasColumnType("money")
                .HasColumnName("dpf_OZUp");
            entity.Property(e => e.DpfZb)
                .HasColumnType("money")
                .HasColumnName("dpf_ZB");
            entity.Property(e => e.DpfZl)
                .HasColumnType("money")
                .HasColumnName("dpf_ZL");
            entity.Property(e => e.DpfZog)
                .HasColumnType("money")
                .HasColumnName("dpf_ZOG");
            entity.Property(e => e.DpfZon)
                .HasColumnType("money")
                .HasColumnName("dpf_ZON");
            entity.Property(e => e.DpfZs)
                .HasColumnType("money")
                .HasColumnName("dpf_ZS");
            entity.Property(e => e.DpfZsp)
                .HasColumnType("money")
                .HasColumnName("dpf_ZSp");
            entity.Property(e => e.DpfZu)
                .HasColumnType("money")
                .HasColumnName("dpf_ZU");
            entity.Property(e => e.DpfZup)
                .HasColumnType("money")
                .HasColumnName("dpf_ZUp");

            entity.HasOne(d => d.DpfIdDeklaracjiNavigation).WithMany(p => p.DeklPfrons)
                .HasForeignKey(d => d.DpfIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_Pfron_dekl__Ewid");
        });

        modelBuilder.Entity<DeklPitZdPole>(entity =>
        {
            entity.HasKey(e => e.DpzdId);

            entity.ToTable("dekl_PitZdPole");

            entity.Property(e => e.DpzdId)
                .ValueGeneratedNever()
                .HasColumnName("dpzd_Id");
            entity.Property(e => e.DpzdDataSplaty)
                .HasColumnType("datetime")
                .HasColumnName("dpzd_DataSplaty");
            entity.Property(e => e.DpzdDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("dpzd_DataWystawienia");
            entity.Property(e => e.DpzdDzialalnosc).HasColumnName("dpzd_Dzialalnosc");
            entity.Property(e => e.DpzdIdDeklaracji).HasColumnName("dpzd_IdDeklaracji");
            entity.Property(e => e.DpzdIdKorekty).HasColumnName("dpzd_IdKorekty");
            entity.Property(e => e.DpzdIdZaliczenia).HasColumnName("dpzd_IdZaliczenia");
            entity.Property(e => e.DpzdKwotaDoRozliczenia)
                .HasColumnType("money")
                .HasColumnName("dpzd_KwotaDoRozliczenia");
            entity.Property(e => e.DpzdKwotaKorekty)
                .HasColumnType("money")
                .HasColumnName("dpzd_KwotaKorekty");
            entity.Property(e => e.DpzdKwotaWspolnika)
                .HasColumnType("money")
                .HasColumnName("dpzd_KwotaWspolnika");
            entity.Property(e => e.DpzdNrDokumentu)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("dpzd_NrDokumentu");
            entity.Property(e => e.DpzdOkresSplaty)
                .HasDefaultValue(1)
                .HasColumnName("dpzd_OkresSplaty");
            entity.Property(e => e.DpzdPodatnikNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dpzd_PodatnikNazwa");
            entity.Property(e => e.DpzdPodatnikNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dpzd_PodatnikNip");
            entity.Property(e => e.DpzdPodatnikTypIdent)
                .HasDefaultValue(1)
                .HasColumnName("dpzd_PodatnikTypIdent");
            entity.Property(e => e.DpzdRodzaj).HasColumnName("dpzd_Rodzaj");
            entity.Property(e => e.DpzdTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("dpzd_TerminPlatnosci");
            entity.Property(e => e.DpzdTyp).HasColumnName("dpzd_Typ");
            entity.Property(e => e.DpzdZmienione).HasColumnName("dpzd_Zmienione");

            entity.HasOne(d => d.DpzdIdDeklaracjiNavigation).WithMany(p => p.DeklPitZdPoles)
                .HasForeignKey(d => d.DpzdIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_PitZdPole_dekl__Ewid");

            entity.HasOne(d => d.DpzdIdKorektyNavigation).WithMany(p => p.DeklPitZdPoles)
                .HasForeignKey(d => d.DpzdIdKorekty)
                .HasConstraintName("FK_dekl_PitZdPole_nz_KorektaPIT");

            entity.HasOne(d => d.DpzdIdZaliczeniaNavigation).WithMany(p => p.DeklPitZdPoles)
                .HasForeignKey(d => d.DpzdIdZaliczenia)
                .HasConstraintName("FK_dekl_PitZdPole_nz_KorektaZaliczenie");
        });

        modelBuilder.Entity<DeklPlik>(entity =>
        {
            entity.HasKey(e => e.DplId);

            entity.ToTable("dekl_Plik");

            entity.Property(e => e.DplId)
                .ValueGeneratedNever()
                .HasColumnName("dpl_Id");
            entity.Property(e => e.DplIdWzorca).HasColumnName("dpl_IdWzorca");
            entity.Property(e => e.DplWydruk01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk01");
            entity.Property(e => e.DplWydruk02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk02");
            entity.Property(e => e.DplWydruk03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk03");
            entity.Property(e => e.DplWydruk04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk04");
            entity.Property(e => e.DplWydruk05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk05");
            entity.Property(e => e.DplWydruk06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk06");
            entity.Property(e => e.DplWydruk07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk07");
            entity.Property(e => e.DplWydruk08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk08");
            entity.Property(e => e.DplWydruk09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk09");
            entity.Property(e => e.DplWydruk10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wydruk10");
            entity.Property(e => e.DplWzorzec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpl_Wzorzec");
        });

        modelBuilder.Entity<DeklPole>(entity =>
        {
            entity.HasKey(e => e.DpId);

            entity.ToTable("dekl_Pole");

            entity.Property(e => e.DpId)
                .ValueGeneratedNever()
                .HasColumnName("dp_Id");
            entity.Property(e => e.DpGrupaWartNal).HasColumnName("dp_GrupaWartNal");
            entity.Property(e => e.DpIdDeklaracji).HasColumnName("dp_IdDeklaracji");
            entity.Property(e => e.DpKolejnosc).HasColumnName("dp_Kolejnosc");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.DpTypWartNal).HasColumnName("dp_TypWartNal");
            entity.Property(e => e.DpUkryte).HasColumnName("dp_Ukryte");
            entity.Property(e => e.DpWartosc)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dp_Wartosc");
            entity.Property(e => e.DpZmienione).HasColumnName("dp_Zmienione");

            entity.HasOne(d => d.DpIdDeklaracjiNavigation).WithMany(p => p.DeklPoles)
                .HasForeignKey(d => d.DpIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_Pole_dekl__Ewid");
        });

        modelBuilder.Entity<DeklPoleViudo>(entity =>
        {
            entity.HasKey(e => e.DpvId);

            entity.ToTable("dekl_PoleVIUDO");

            entity.Property(e => e.DpvId)
                .ValueGeneratedNever()
                .HasColumnName("dpv_Id");
            entity.Property(e => e.DpvCzyWymagane)
                .HasDefaultValue(true)
                .HasColumnName("dpv_CzyWymagane");
            entity.Property(e => e.DpvIdDeklaracji).HasColumnName("dpv_IdDeklaracji");
            entity.Property(e => e.DpvLicznik)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))")
                .HasColumnName("dpv_Licznik");
            entity.Property(e => e.DpvNazwaPola)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dpv_NazwaPola");
            entity.Property(e => e.DpvNazwaPolaPowiazanego)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dpv_NazwaPolaPowiazanego");
            entity.Property(e => e.DpvNazwaSekcji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dpv_NazwaSekcji");
            entity.Property(e => e.DpvTypPola).HasColumnName("dpv_TypPola");
            entity.Property(e => e.DpvWartosc)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dpv_Wartosc");

            entity.HasOne(d => d.DpvIdDeklaracjiNavigation).WithMany(p => p.DeklPoleViudos)
                .HasForeignKey(d => d.DpvIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_PoleVIUDO_dekl__Ewid");
        });

        modelBuilder.Entity<DeklVatUePole>(entity =>
        {
            entity.HasKey(e => e.DuepId);

            entity.ToTable("dekl_VatUePole");

            entity.Property(e => e.DuepId)
                .ValueGeneratedNever()
                .HasColumnName("duep_Id");
            entity.Property(e => e.DuepByloJest).HasColumnName("duep_ByloJest");
            entity.Property(e => e.DuepIdDeklaracji).HasColumnName("duep_IdDeklaracji");
            entity.Property(e => e.DuepNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("duep_Nazwa");
            entity.Property(e => e.DuepNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("duep_Nip");
            entity.Property(e => e.DuepPanstwo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("duep_Panstwo");
            entity.Property(e => e.DuepPozycja).HasColumnName("duep_Pozycja");
            entity.Property(e => e.DuepTt).HasColumnName("duep_TT");
            entity.Property(e => e.DuepTyp).HasColumnName("duep_Typ");
            entity.Property(e => e.DuepWartosc)
                .HasColumnType("money")
                .HasColumnName("duep_Wartosc");

            entity.HasOne(d => d.DuepIdDeklaracjiNavigation).WithMany(p => p.DeklVatUePoles)
                .HasForeignKey(d => d.DuepIdDeklaracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_VatUePole_dekl__Ewid");
        });

        modelBuilder.Entity<DeklVatZdPole>(entity =>
        {
            entity.HasKey(e => e.DzdpId);

            entity.ToTable("dekl_VatZdPole");

            entity.Property(e => e.DzdpId)
                .ValueGeneratedNever()
                .HasColumnName("dzdp_Id");
            entity.Property(e => e.DzdpDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("dzdp_DataWystawienia");
            entity.Property(e => e.DzdpIdDekleracji).HasColumnName("dzdp_IdDekleracji");
            entity.Property(e => e.DzdpKorektaNetto)
                .HasColumnType("money")
                .HasColumnName("dzdp_KorektaNetto");
            entity.Property(e => e.DzdpKorektaVat)
                .HasColumnType("money")
                .HasColumnName("dzdp_KorektaVat");
            entity.Property(e => e.DzdpNrFaktury)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dzdp_NrFaktury");
            entity.Property(e => e.DzdpPodatnikNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzdp_PodatnikNazwa");
            entity.Property(e => e.DzdpPodatnikNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzdp_PodatnikNip");
            entity.Property(e => e.DzdpTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("dzdp_TerminPlatnosci");

            entity.HasOne(d => d.DzdpIdDekleracjiNavigation).WithMany(p => p.DeklVatZdPoles)
                .HasForeignKey(d => d.DzdpIdDekleracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekl_VatZdPole_dekl__Ewid");
        });

        modelBuilder.Entity<DeklWersja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("dekl_Wersja");

            entity.Property(e => e.DwDefinicja)
                .HasColumnType("image")
                .HasColumnName("dw_Definicja");
            entity.Property(e => e.DwDefinicjaDef)
                .HasColumnType("image")
                .HasColumnName("dw_DefinicjaDef");
            entity.Property(e => e.DwDeklNazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dw_DeklNazwa");
            entity.Property(e => e.DwId).HasColumnName("dw_Id");
            entity.Property(e => e.DwNarastajaca).HasColumnName("dw_Narastajaca");
            entity.Property(e => e.DwNowyWydruk).HasColumnName("dw_NowyWydruk");
            entity.Property(e => e.DwObslugaPodpDaneAutoryzujace).HasColumnName("dw_ObslugaPodpDaneAutoryzujace");
            entity.Property(e => e.DwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dw_Opis");
            entity.Property(e => e.DwPoleDoDaneAutoryzujace).HasColumnName("dw_PoleDoDaneAutoryzujace");
            entity.Property(e => e.DwPoleDoPrzelewu).HasColumnName("dw_PoleDoPrzelewu");
            entity.Property(e => e.DwPoleDoPrzeniesienia).HasColumnName("dw_PoleDoPrzeniesienia");
            entity.Property(e => e.DwPoleDochodZaMiesiac).HasColumnName("dw_PoleDochodZaMiesiac");
            entity.Property(e => e.DwPoleDochodZaPoprzMiesiac).HasColumnName("dw_PoleDochodZaPoprzMiesiac");
            entity.Property(e => e.DwPoleKorekta).HasColumnName("dw_PoleKorekta");
            entity.Property(e => e.DwPoleNadplata).HasColumnName("dw_PoleNadplata");
            entity.Property(e => e.DwPoleOperatorImie).HasColumnName("dw_PoleOperatorImie");
            entity.Property(e => e.DwPoleOperatorNazwisko).HasColumnName("dw_PoleOperatorNazwisko");
            entity.Property(e => e.DwPolePdstSkladkiZdrowotnej).HasColumnName("dw_PolePdstSkladkiZdrowotnej");
            entity.Property(e => e.DwPolePrzychod).HasColumnName("dw_PolePrzychod");
            entity.Property(e => e.DwPoleRocznaKwotaDochodu).HasColumnName("dw_PoleRocznaKwotaDochodu");
            entity.Property(e => e.DwPoleRocznaKwotaPodatkuNaleznego).HasColumnName("dw_PoleRocznaKwotaPodatkuNaleznego");
            entity.Property(e => e.DwPoleRocznaPodstawaSkladkiZdrowotnej).HasColumnName("dw_PoleRocznaPodstawaSkladkiZdrowotnej");
            entity.Property(e => e.DwPoleRocznaSkladkaZdrowotna).HasColumnName("dw_PoleRocznaSkladkaZdrowotna");
            entity.Property(e => e.DwPoleStatusDok).HasColumnName("dw_PoleStatusDok");
            entity.Property(e => e.DwPoleSumaMiesiecznychNaleznychZaliczek).HasColumnName("dw_PoleSumaMiesiecznychNaleznychZaliczek");
            entity.Property(e => e.DwPoleWartoscZaliczki).HasColumnName("dw_PoleWartoscZaliczki");
            entity.Property(e => e.DwProgramy).HasColumnName("dw_Programy");
            entity.Property(e => e.DwPrzeliczPolaDeklaracji).HasColumnName("dw_PrzeliczPolaDeklaracji");
            entity.Property(e => e.DwStandard).HasColumnName("dw_Standard");
            entity.Property(e => e.DwStrony).HasColumnName("dw_Strony");
            entity.Property(e => e.DwTypDeklaracji).HasColumnName("dw_TypDeklaracji");
            entity.Property(e => e.DwTypDla).HasColumnName("dw_TypDla");
            entity.Property(e => e.DwTypOkresu).HasColumnName("dw_TypOkresu");
            entity.Property(e => e.DwWaznaDo)
                .HasColumnType("datetime")
                .HasColumnName("dw_WaznaDo");
            entity.Property(e => e.DwWaznaOd)
                .HasColumnType("datetime")
                .HasColumnName("dw_WaznaOd");
            entity.Property(e => e.DwWersja).HasColumnName("dw_Wersja");
            entity.Property(e => e.DwWersjaOd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dw_WersjaOd");
            entity.Property(e => e.DwWersjaOryg).HasColumnName("dw_WersjaOryg");
            entity.Property(e => e.DwWidocznosc).HasColumnName("dw_Widocznosc");
            entity.Property(e => e.DwWydrukStr01)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr01");
            entity.Property(e => e.DwWydrukStr02)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr02");
            entity.Property(e => e.DwWydrukStr03)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr03");
            entity.Property(e => e.DwWydrukStr04)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr04");
            entity.Property(e => e.DwWydrukStr05)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr05");
            entity.Property(e => e.DwWydrukStr06)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr06");
            entity.Property(e => e.DwWydrukStr07)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr07");
            entity.Property(e => e.DwWydrukStr08)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr08");
            entity.Property(e => e.DwWydrukStr09)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr09");
            entity.Property(e => e.DwWydrukStr10)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr10");
            entity.Property(e => e.DwZalacznik).HasColumnName("dw_Zalacznik");
        });

        modelBuilder.Entity<DeklWersjaLatest>(entity =>
        {
            entity.HasKey(e => e.DwId);

            entity.ToTable("dekl_WersjaLatest");

            entity.Property(e => e.DwId)
                .ValueGeneratedNever()
                .HasColumnName("dw_Id");
            entity.Property(e => e.DwDefinicja)
                .HasColumnType("image")
                .HasColumnName("dw_Definicja");
            entity.Property(e => e.DwDefinicjaDef)
                .HasColumnType("image")
                .HasColumnName("dw_DefinicjaDef");
            entity.Property(e => e.DwDeklNazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dw_DeklNazwa");
            entity.Property(e => e.DwNarastajaca).HasColumnName("dw_Narastajaca");
            entity.Property(e => e.DwNowyWydruk).HasColumnName("dw_NowyWydruk");
            entity.Property(e => e.DwObslugaPodpDaneAutoryzujace).HasColumnName("dw_ObslugaPodpDaneAutoryzujace");
            entity.Property(e => e.DwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dw_Opis");
            entity.Property(e => e.DwPoleDoDaneAutoryzujace).HasColumnName("dw_PoleDoDaneAutoryzujace");
            entity.Property(e => e.DwPoleDoPrzelewu).HasColumnName("dw_PoleDoPrzelewu");
            entity.Property(e => e.DwPoleDoPrzeniesienia).HasColumnName("dw_PoleDoPrzeniesienia");
            entity.Property(e => e.DwPoleDochodZaMiesiac).HasColumnName("dw_PoleDochodZaMiesiac");
            entity.Property(e => e.DwPoleDochodZaPoprzMiesiac).HasColumnName("dw_PoleDochodZaPoprzMiesiac");
            entity.Property(e => e.DwPoleKorekta).HasColumnName("dw_PoleKorekta");
            entity.Property(e => e.DwPoleNadplata).HasColumnName("dw_PoleNadplata");
            entity.Property(e => e.DwPoleOperatorImie).HasColumnName("dw_PoleOperatorImie");
            entity.Property(e => e.DwPoleOperatorNazwisko).HasColumnName("dw_PoleOperatorNazwisko");
            entity.Property(e => e.DwPolePdstSkladkiZdrowotnej).HasColumnName("dw_PolePdstSkladkiZdrowotnej");
            entity.Property(e => e.DwPolePrzychod).HasColumnName("dw_PolePrzychod");
            entity.Property(e => e.DwPoleRocznaKwotaDochodu).HasColumnName("dw_PoleRocznaKwotaDochodu");
            entity.Property(e => e.DwPoleRocznaKwotaPodatkuNaleznego).HasColumnName("dw_PoleRocznaKwotaPodatkuNaleznego");
            entity.Property(e => e.DwPoleRocznaPodstawaSkladkiZdrowotnej).HasColumnName("dw_PoleRocznaPodstawaSkladkiZdrowotnej");
            entity.Property(e => e.DwPoleRocznaSkladkaZdrowotna).HasColumnName("dw_PoleRocznaSkladkaZdrowotna");
            entity.Property(e => e.DwPoleStatusDok).HasColumnName("dw_PoleStatusDok");
            entity.Property(e => e.DwPoleSumaMiesiecznychNaleznychZaliczek).HasColumnName("dw_PoleSumaMiesiecznychNaleznychZaliczek");
            entity.Property(e => e.DwPoleWartoscZaliczki).HasColumnName("dw_PoleWartoscZaliczki");
            entity.Property(e => e.DwProgramy).HasColumnName("dw_Programy");
            entity.Property(e => e.DwPrzeliczPolaDeklaracji)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("dw_PrzeliczPolaDeklaracji");
            entity.Property(e => e.DwStandard)
                .HasDefaultValue(true)
                .HasColumnName("dw_Standard");
            entity.Property(e => e.DwStrony).HasColumnName("dw_Strony");
            entity.Property(e => e.DwTypDeklaracji).HasColumnName("dw_TypDeklaracji");
            entity.Property(e => e.DwTypDla).HasColumnName("dw_TypDla");
            entity.Property(e => e.DwTypOkresu).HasColumnName("dw_TypOkresu");
            entity.Property(e => e.DwWaznaDo)
                .HasColumnType("datetime")
                .HasColumnName("dw_WaznaDo");
            entity.Property(e => e.DwWaznaOd)
                .HasColumnType("datetime")
                .HasColumnName("dw_WaznaOd");
            entity.Property(e => e.DwWersja).HasColumnName("dw_Wersja");
            entity.Property(e => e.DwWersjaOd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dw_WersjaOd");
            entity.Property(e => e.DwWersjaOryg).HasColumnName("dw_WersjaOryg");
            entity.Property(e => e.DwWidocznosc)
                .HasDefaultValue(true)
                .HasColumnName("dw_Widocznosc");
            entity.Property(e => e.DwWydrukStr01)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr01");
            entity.Property(e => e.DwWydrukStr02)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr02");
            entity.Property(e => e.DwWydrukStr03)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr03");
            entity.Property(e => e.DwWydrukStr04)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr04");
            entity.Property(e => e.DwWydrukStr05)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr05");
            entity.Property(e => e.DwWydrukStr06)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr06");
            entity.Property(e => e.DwWydrukStr07)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr07");
            entity.Property(e => e.DwWydrukStr08)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr08");
            entity.Property(e => e.DwWydrukStr09)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr09");
            entity.Property(e => e.DwWydrukStr10)
                .HasColumnType("image")
                .HasColumnName("dw_WydrukStr10");
            entity.Property(e => e.DwZalacznik).HasColumnName("dw_Zalacznik");
        });

        modelBuilder.Entity<DeklWersjaOld1>(entity =>
        {
            entity.HasKey(e => e.Dwo1Id);

            entity.ToTable("dekl_WersjaOld1");

            entity.Property(e => e.Dwo1Id)
                .ValueGeneratedNever()
                .HasColumnName("dwo1_Id");
            entity.Property(e => e.Dwo1Definicja)
                .HasColumnType("image")
                .HasColumnName("dwo1_Definicja");
            entity.Property(e => e.Dwo1DefinicjaDef)
                .HasColumnType("image")
                .HasColumnName("dwo1_DefinicjaDef");
            entity.Property(e => e.Dwo1DeklNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwo1_DeklNazwa");
            entity.Property(e => e.Dwo1Narastajaca).HasColumnName("dwo1_Narastajaca");
            entity.Property(e => e.Dwo1NowyWydruk).HasColumnName("dwo1_NowyWydruk");
            entity.Property(e => e.Dwo1ObslugaPodpDaneAutoryzujace).HasColumnName("dwo1_ObslugaPodpDaneAutoryzujace");
            entity.Property(e => e.Dwo1Opis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwo1_Opis");
            entity.Property(e => e.Dwo1PoleDoDaneAutoryzujace).HasColumnName("dwo1_PoleDoDaneAutoryzujace");
            entity.Property(e => e.Dwo1PoleDoPrzelewu).HasColumnName("dwo1_PoleDoPrzelewu");
            entity.Property(e => e.Dwo1PoleDoPrzeniesienia).HasColumnName("dwo1_PoleDoPrzeniesienia");
            entity.Property(e => e.Dwo1PoleKorekta).HasColumnName("dwo1_PoleKorekta");
            entity.Property(e => e.Dwo1PoleNadplata).HasColumnName("dwo1_PoleNadplata");
            entity.Property(e => e.Dwo1PoleOperatorImie).HasColumnName("dwo1_PoleOperatorImie");
            entity.Property(e => e.Dwo1PoleOperatorNazwisko).HasColumnName("dwo1_PoleOperatorNazwisko");
            entity.Property(e => e.Dwo1PoleStatusDok).HasColumnName("dwo1_PoleStatusDok");
            entity.Property(e => e.Dwo1Programy).HasColumnName("dwo1_Programy");
            entity.Property(e => e.Dwo1PrzeliczPolaDeklaracji).HasColumnName("dwo1_PrzeliczPolaDeklaracji");
            entity.Property(e => e.Dwo1Standard).HasColumnName("dwo1_Standard");
            entity.Property(e => e.Dwo1Strony).HasColumnName("dwo1_Strony");
            entity.Property(e => e.Dwo1TypDeklaracji).HasColumnName("dwo1_TypDeklaracji");
            entity.Property(e => e.Dwo1TypDla).HasColumnName("dwo1_TypDla");
            entity.Property(e => e.Dwo1TypOkresu).HasColumnName("dwo1_TypOkresu");
            entity.Property(e => e.Dwo1WaznaDo)
                .HasColumnType("datetime")
                .HasColumnName("dwo1_WaznaDo");
            entity.Property(e => e.Dwo1WaznaOd)
                .HasColumnType("datetime")
                .HasColumnName("dwo1_WaznaOd");
            entity.Property(e => e.Dwo1Wersja).HasColumnName("dwo1_Wersja");
            entity.Property(e => e.Dwo1WersjaOd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwo1_WersjaOd");
            entity.Property(e => e.Dwo1WersjaOryg).HasColumnName("dwo1_WersjaOryg");
            entity.Property(e => e.Dwo1Widocznosc).HasColumnName("dwo1_Widocznosc");
            entity.Property(e => e.Dwo1WydrukStr01)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr01");
            entity.Property(e => e.Dwo1WydrukStr02)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr02");
            entity.Property(e => e.Dwo1WydrukStr03)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr03");
            entity.Property(e => e.Dwo1WydrukStr04)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr04");
            entity.Property(e => e.Dwo1WydrukStr05)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr05");
            entity.Property(e => e.Dwo1WydrukStr06)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr06");
            entity.Property(e => e.Dwo1WydrukStr07)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr07");
            entity.Property(e => e.Dwo1WydrukStr08)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr08");
            entity.Property(e => e.Dwo1WydrukStr09)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr09");
            entity.Property(e => e.Dwo1WydrukStr10)
                .HasColumnType("image")
                .HasColumnName("dwo1_WydrukStr10");
            entity.Property(e => e.Dwo1Zalacznik).HasColumnName("dwo1_Zalacznik");
        });

        modelBuilder.Entity<DeklZu>(entity =>
        {
            entity.HasKey(e => e.DzId);

            entity.ToTable("dekl_Zus");

            entity.Property(e => e.DzId)
                .ValueGeneratedNever()
                .HasColumnName("dz_Id");
            entity.Property(e => e.DzDane)
                .HasColumnType("text")
                .HasColumnName("dz_Dane");
            entity.Property(e => e.DzDataAktualizacji)
                .HasColumnType("datetime")
                .HasColumnName("dz_DataAktualizacji");
            entity.Property(e => e.DzOkres)
                .HasColumnType("datetime")
                .HasColumnName("dz_Okres");
            entity.Property(e => e.DzOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dz_Opis");
            entity.Property(e => e.DzWartosc)
                .HasColumnType("money")
                .HasColumnName("dz_Wartosc");
        });

        modelBuilder.Entity<DekpNaliczenie>(entity =>
        {
            entity.HasKey(e => e.DpnId).HasName("PK_dekp__Ewidencja");

            entity.ToTable("dekp__Naliczenie");

            entity.Property(e => e.DpnId)
                .ValueGeneratedNever()
                .HasColumnName("dpn_Id");
            entity.Property(e => e.DpnDataNaliczenia)
                .HasColumnType("datetime")
                .HasColumnName("dpn_DataNaliczenia");
            entity.Property(e => e.DpnMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("dpn_Miesiac");
            entity.Property(e => e.DpnOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dpn_Opis");
            entity.Property(e => e.DpnStatusEksportu).HasColumnName("dpn_StatusEksportu");
            entity.Property(e => e.DpnTyp).HasColumnName("dpn_Typ");
        });

        modelBuilder.Entity<DekzDeklaracja>(entity =>
        {
            entity.HasKey(e => e.DzdId);

            entity.ToTable("dekz_Deklaracja");

            entity.Property(e => e.DzdId)
                .ValueGeneratedNever()
                .HasColumnName("dzd_Id");
            entity.Property(e => e.DzdIdNaliczenia).HasColumnName("dzd_IdNaliczenia");
            entity.Property(e => e.DzdOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzd_Opis");
            entity.Property(e => e.DzdRodzaj).HasColumnName("dzd_Rodzaj");
            entity.Property(e => e.DzdTresc)
                .HasColumnType("text")
                .HasColumnName("dzd_Tresc");

            entity.HasOne(d => d.DzdIdNaliczeniaNavigation).WithMany(p => p.DekzDeklaracjas)
                .HasForeignKey(d => d.DzdIdNaliczenia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dekz_Deklaracja_dekz__Naliczenie");
        });

        modelBuilder.Entity<DekzNaliczenie>(entity =>
        {
            entity.HasKey(e => e.DznId);

            entity.ToTable("dekz__Naliczenie");

            entity.Property(e => e.DznId)
                .ValueGeneratedNever()
                .HasColumnName("dzn_Id");
            entity.Property(e => e.DznData)
                .HasColumnType("datetime")
                .HasColumnName("dzn_Data");
            entity.Property(e => e.DznFormat).HasColumnName("dzn_Format");
            entity.Property(e => e.DznMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("dzn_Miesiac");
            entity.Property(e => e.DznOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzn_Opis");
            entity.Property(e => e.DznTyp).HasColumnName("dzn_Typ");
            entity.Property(e => e.DznWyslane).HasColumnName("dzn_Wyslane");
        });

        modelBuilder.Entity<DekzPozycja>(entity =>
        {
            entity.HasKey(e => e.DzpId);

            entity.ToTable("dekz_Pozycja");

            entity.Property(e => e.DzpId)
                .ValueGeneratedNever()
                .HasColumnName("dzp_Id");
            entity.Property(e => e.DzpIdDeklaracji).HasColumnName("dzp_IdDeklaracji");
            entity.Property(e => e.DzpLp).HasColumnName("dzp_Lp");
            entity.Property(e => e.DzpNrPola).HasColumnName("dzp_NrPola");
            entity.Property(e => e.DzpWartosc)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzp_Wartosc");
        });

        modelBuilder.Entity<DekzPozycjaOpi>(entity =>
        {
            entity.HasKey(e => e.DzoId);

            entity.ToTable("dekz_PozycjaOpis");

            entity.Property(e => e.DzoId)
                .ValueGeneratedNever()
                .HasColumnName("dzo_Id");
            entity.Property(e => e.DzoBlok)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzo_Blok");
            entity.Property(e => e.DzoFormat).HasColumnName("dzo_Format");
            entity.Property(e => e.DzoNrPola).HasColumnName("dzo_NrPola");
            entity.Property(e => e.DzoOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzo_Opis");
            entity.Property(e => e.DzoPozycja)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzo_Pozycja");
            entity.Property(e => e.DzoRodzajDeklaracji).HasColumnName("dzo_RodzajDeklaracji");
            entity.Property(e => e.DzoRozmiar).HasColumnName("dzo_Rozmiar");
            entity.Property(e => e.DzoUzywane)
                .HasDefaultValue(true)
                .HasColumnName("dzo_Uzywane");
        });

        modelBuilder.Entity<DfwFakturyWewnetrzne>(entity =>
        {
            entity.HasKey(e => e.FwnId);

            entity.ToTable("dfw__FakturyWewnetrzne", tb =>
                {
                    tb.HasTrigger("tr_FaktWewnDokument_Inserting");
                    tb.HasTrigger("tr_FaktWewnDokument_ZapisCzasu");
                    tb.HasTrigger("tr_FaktWewnDokument_ZapisCzasu_Deleting");
                });

            entity.Property(e => e.FwnId)
                .ValueGeneratedNever()
                .HasColumnName("fwn_Id");
            entity.Property(e => e.FwnCenyPoziom).HasColumnName("fwn_CenyPoziom");
            entity.Property(e => e.FwnDataSprz)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataSprz");
            entity.Property(e => e.FwnDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataWyst");
            entity.Property(e => e.FwnDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DoDokDataWyst");
            entity.Property(e => e.FwnDoDokId).HasColumnName("fwn_DoDokId");
            entity.Property(e => e.FwnDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_DoDokNrPelny");
            entity.Property(e => e.FwnJestVatAuto).HasColumnName("fwn_JestVatAuto");
            entity.Property(e => e.FwnKatId).HasColumnName("fwn_KatId");
            entity.Property(e => e.FwnKhntAdreshId).HasColumnName("fwn_KhntAdreshId");
            entity.Property(e => e.FwnKhntId).HasColumnName("fwn_KhntId");
            entity.Property(e => e.FwnKodRodzajuTransakcji).HasColumnName("fwn_KodRodzajuTransakcji");
            entity.Property(e => e.FwnKontrolaTyp).HasColumnName("fwn_KontrolaTyp");
            entity.Property(e => e.FwnKorDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_KorDataWyst");
            entity.Property(e => e.FwnKorId).HasColumnName("fwn_KorId");
            entity.Property(e => e.FwnKorNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_KorNrPelny");
            entity.Property(e => e.FwnMagId).HasColumnName("fwn_MagId");
            entity.Property(e => e.FwnMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_MscWyst");
            entity.Property(e => e.FwnNr).HasColumnName("fwn_Nr");
            entity.Property(e => e.FwnNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_NrPelny");
            entity.Property(e => e.FwnNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_NrPelnyOryg");
            entity.Property(e => e.FwnNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("fwn_NrRoz");
            entity.Property(e => e.FwnOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_Odebral");
            entity.Property(e => e.FwnPersonelId).HasColumnName("fwn_PersonelId");
            entity.Property(e => e.FwnPodlegaOplSpec)
                .HasDefaultValue(true)
                .HasColumnName("fwn_PodlegaOplSpec");
            entity.Property(e => e.FwnPodpisanoElektronicznie).HasColumnName("fwn_PodpisanoElektronicznie");
            entity.Property(e => e.FwnPodtyp).HasColumnName("fwn_Podtyp");
            entity.Property(e => e.FwnPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_Podtytul");
            entity.Property(e => e.FwnRodzajOperacjiVat).HasColumnName("fwn_RodzajOperacjiVat");
            entity.Property(e => e.FwnStatus)
                .HasDefaultValue(1)
                .HasColumnName("fwn_Status");
            entity.Property(e => e.FwnStatusKsieg).HasColumnName("fwn_StatusKsieg");
            entity.Property(e => e.FwnTyp).HasColumnName("fwn_Typ");
            entity.Property(e => e.FwnTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_Tytul");
            entity.Property(e => e.FwnUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_Uwagi");
            entity.Property(e => e.FwnVatRozliczanyPrzezUslugobiorce).HasColumnName("fwn_VatRozliczanyPrzezUslugobiorce");
            entity.Property(e => e.FwnVatTyp).HasColumnName("fwn_VatTyp");
            entity.Property(e => e.FwnWartBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartBrutto");
            entity.Property(e => e.FwnWartNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartNetto");
            entity.Property(e => e.FwnWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("fwn_WartOpWyd");
            entity.Property(e => e.FwnWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("fwn_WartOpZwr");
            entity.Property(e => e.FwnWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartTwBrutto");
            entity.Property(e => e.FwnWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartTwNetto");
            entity.Property(e => e.FwnWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartUsBrutto");
            entity.Property(e => e.FwnWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartUsNetto");
            entity.Property(e => e.FwnWartVat)
                .HasColumnType("money")
                .HasColumnName("fwn_WartVat");
            entity.Property(e => e.FwnWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwn_Wystawil");

            entity.HasOne(d => d.FwnKat).WithMany(p => p.DfwFakturyWewnetrznes)
                .HasForeignKey(d => d.FwnKatId)
                .HasConstraintName("FK_dfw__FakturyWewnetrzne_sl_Kategoria");
        });

        modelBuilder.Entity<DfwPozycja>(entity =>
        {
            entity.HasKey(e => e.FwpId);

            entity.ToTable("dfw_Pozycja");

            entity.Property(e => e.FwpId)
                .ValueGeneratedNever()
                .HasColumnName("fwp_Id");
            entity.Property(e => e.FwpCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("fwp_CenaBrutto");
            entity.Property(e => e.FwpCenaNetto)
                .HasColumnType("money")
                .HasColumnName("fwp_CenaNetto");
            entity.Property(e => e.FwpCenaWaluta)
                .HasColumnType("money")
                .HasColumnName("fwp_CenaWaluta");
            entity.Property(e => e.FwpDoId).HasColumnName("fwp_DoId");
            entity.Property(e => e.FwpDokId).HasColumnName("fwp_DokId");
            entity.Property(e => e.FwpIdFaktWewn).HasColumnName("fwp_IdFaktWewn");
            entity.Property(e => e.FwpIlosc)
                .HasColumnType("money")
                .HasColumnName("fwp_Ilosc");
            entity.Property(e => e.FwpJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fwp_Jm");
            entity.Property(e => e.FwpKategoriaId).HasColumnName("fwp_KategoriaId");
            entity.Property(e => e.FwpLp).HasColumnName("fwp_Lp");
            entity.Property(e => e.FwpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fwp_Opis");
            entity.Property(e => e.FwpPkwiu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fwp_Pkwiu");
            entity.Property(e => e.FwpPozDoId).HasColumnName("fwp_PozDoId");
            entity.Property(e => e.FwpPozId).HasColumnName("fwp_PozId");
            entity.Property(e => e.FwpRabat)
                .HasColumnType("money")
                .HasColumnName("fwp_Rabat");
            entity.Property(e => e.FwpStatus).HasColumnName("fwp_Status");
            entity.Property(e => e.FwpTowId).HasColumnName("fwp_TowId");
            entity.Property(e => e.FwpTowKodCn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fwp_TowKodCN");
            entity.Property(e => e.FwpTowRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("fwp_TowRodzaj");
            entity.Property(e => e.FwpVatId).HasColumnName("fwp_VatId");
            entity.Property(e => e.FwpVatProc)
                .HasColumnType("money")
                .HasColumnName("fwp_VatProc");
            entity.Property(e => e.FwpWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fwp_Waluta");
            entity.Property(e => e.FwpWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("fwp_WalutaDataKursu");
            entity.Property(e => e.FwpWalutaIdBanku).HasColumnName("fwp_WalutaIdBanku");
            entity.Property(e => e.FwpWalutaKurs)
                .HasDefaultValue(1m)
                .HasColumnType("money")
                .HasColumnName("fwp_WalutaKurs");
            entity.Property(e => e.FwpWalutaLiczbaJednostek)
                .HasDefaultValue(1)
                .HasColumnName("fwp_WalutaLiczbaJednostek");
            entity.Property(e => e.FwpWalutaRodzajKursu).HasColumnName("fwp_WalutaRodzajKursu");
            entity.Property(e => e.FwpWartBrutto)
                .HasColumnType("money")
                .HasColumnName("fwp_WartBrutto");
            entity.Property(e => e.FwpWartNetto)
                .HasColumnType("money")
                .HasColumnName("fwp_WartNetto");
            entity.Property(e => e.FwpWartVat)
                .HasColumnType("money")
                .HasColumnName("fwp_WartVat");
            entity.Property(e => e.FwpWartWaluta)
                .HasColumnType("money")
                .HasColumnName("fwp_WartWaluta");

            entity.HasOne(d => d.FwpDok).WithMany(p => p.DfwPozycjas)
                .HasForeignKey(d => d.FwpDokId)
                .HasConstraintName("FK_dfw_Pozycja_dok__Dokument");

            entity.HasOne(d => d.FwpIdFaktWewnNavigation).WithMany(p => p.DfwPozycjas)
                .HasForeignKey(d => d.FwpIdFaktWewn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dfw_Pozycja_dfw__FakturyWewnetrzne");

            entity.HasOne(d => d.FwpTow).WithMany(p => p.DfwPozycjas)
                .HasForeignKey(d => d.FwpTowId)
                .HasConstraintName("FK_dfw_Pozycja_tw__Towar");
        });

        modelBuilder.Entity<DfwVat>(entity =>
        {
            entity.HasKey(e => e.FwvId);

            entity.ToTable("dfw_Vat");

            entity.Property(e => e.FwvId)
                .ValueGeneratedNever()
                .HasColumnName("fwv_Id");
            entity.Property(e => e.FwvDokId).HasColumnName("fwv_DokId");
            entity.Property(e => e.FwvVatId).HasColumnName("fwv_VatId");
            entity.Property(e => e.FwvVatProc)
                .HasColumnType("money")
                .HasColumnName("fwv_VatProc");
            entity.Property(e => e.FwvWartBrutto)
                .HasColumnType("money")
                .HasColumnName("fwv_WartBrutto");
            entity.Property(e => e.FwvWartNetto)
                .HasColumnType("money")
                .HasColumnName("fwv_WartNetto");
            entity.Property(e => e.FwvWartVat)
                .HasColumnType("money")
                .HasColumnName("fwv_WartVat");

            entity.HasOne(d => d.FwvDok).WithMany(p => p.DfwVats)
                .HasForeignKey(d => d.FwvDokId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dfw_Vat_dfw__FakturyWewnetrzne");

            entity.HasOne(d => d.FwvVat).WithMany(p => p.DfwVats)
                .HasForeignKey(d => d.FwvVatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dfw_Vat_sl_StawkaVAT");
        });

        modelBuilder.Entity<DkrAutomat>(entity =>
        {
            entity.HasKey(e => e.ApId);

            entity.ToTable("dkr_Automat");

            entity.Property(e => e.ApId)
                .ValueGeneratedNever()
                .HasColumnName("ap_Id");
            entity.Property(e => e.ApData)
                .HasColumnType("datetime")
                .HasColumnName("ap_Data");
            entity.Property(e => e.ApIdKategorii).HasColumnName("ap_IdKategorii");
            entity.Property(e => e.ApIdRejestru).HasColumnName("ap_IdRejestru");
            entity.Property(e => e.ApIdRoku).HasColumnName("ap_IdRoku");
            entity.Property(e => e.ApNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ap_Nazwa");
            entity.Property(e => e.ApOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("ap_OkresDo");
            entity.Property(e => e.ApUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ap_Uwagi");
            entity.Property(e => e.ApZakres).HasColumnName("ap_Zakres");

            entity.HasOne(d => d.ApIdKategoriiNavigation).WithMany(p => p.DkrAutomats)
                .HasForeignKey(d => d.ApIdKategorii)
                .HasConstraintName("FK_dkr_Automat_sl_Kategoria");

            entity.HasOne(d => d.ApIdRejestruNavigation).WithMany(p => p.DkrAutomats)
                .HasForeignKey(d => d.ApIdRejestru)
                .HasConstraintName("FK_dkr_Automat_sl_RejestrKsiegowy");

            entity.HasOne(d => d.ApIdRokuNavigation).WithMany(p => p.DkrAutomats)
                .HasForeignKey(d => d.ApIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_Automat_pd_RokObrotowy");
        });

        modelBuilder.Entity<DkrAutomatPozycja>(entity =>
        {
            entity.HasKey(e => e.AppId);

            entity.ToTable("dkr_AutomatPozycja");

            entity.Property(e => e.AppId)
                .ValueGeneratedNever()
                .HasColumnName("app_Id");
            entity.Property(e => e.AppIdAutomatu).HasColumnName("app_IdAutomatu");
            entity.Property(e => e.AppIdAutomatuPoz).HasColumnName("app_IdAutomatuPoz");
            entity.Property(e => e.AppKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("app_KontoMa");
            entity.Property(e => e.AppKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("app_KontoWn");
            entity.Property(e => e.AppKontoZ)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("app_KontoZ");
            entity.Property(e => e.AppKwotaZ).HasColumnName("app_KwotaZ");
            entity.Property(e => e.AppOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("app_Opis");
            entity.Property(e => e.AppPobierajKontoZma).HasColumnName("app_PobierajKontoZMa");
            entity.Property(e => e.AppPobierajKontoZwn).HasColumnName("app_PobierajKontoZWn");
            entity.Property(e => e.AppTyp).HasColumnName("app_Typ");
            entity.Property(e => e.AppUdzial)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("app_Udzial");
            entity.Property(e => e.AppWszystkieAnalityki).HasColumnName("app_WszystkieAnalityki");

            entity.HasOne(d => d.AppIdAutomatuNavigation).WithMany(p => p.DkrAutomatPozycjas)
                .HasForeignKey(d => d.AppIdAutomatu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_AutomatPozycja_dkr_Automat");
        });

        modelBuilder.Entity<DkrBilansOtwarciaDostawy>(entity =>
        {
            entity.HasKey(e => e.BorId).HasName("PK_dkr_BilansOtwarciaRozbicie");

            entity.ToTable("dkr_BilansOtwarciaDostawy");

            entity.Property(e => e.BorId)
                .ValueGeneratedNever()
                .HasColumnName("bor_Id");
            entity.Property(e => e.BorDokument)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("bor_Dokument");
            entity.Property(e => e.BorIdPozycji).HasColumnName("bor_IdPozycji");
            entity.Property(e => e.BorIdPozycjiZrodlowej).HasColumnName("bor_IdPozycjiZrodlowej");
            entity.Property(e => e.BorIdPozycjiZrodlowejBo).HasColumnName("bor_IdPozycjiZrodlowejBO");
            entity.Property(e => e.BorKurs)
                .HasColumnType("money")
                .HasColumnName("bor_Kurs");
            entity.Property(e => e.BorKwota)
                .HasColumnType("money")
                .HasColumnName("bor_Kwota");
            entity.Property(e => e.BorLiczbaJednostek).HasColumnName("bor_LiczbaJednostek");
            entity.Property(e => e.BorLp).HasColumnName("bor_LP");

            entity.HasOne(d => d.BorIdPozycjiZrodlowejNavigation).WithMany(p => p.DkrBilansOtwarciaDostawies)
                .HasForeignKey(d => d.BorIdPozycjiZrodlowej)
                .HasConstraintName("FK_dkr_BilansOtwarciaRozbicie_dkr_Pozycja_Zrodlowa");

            entity.HasOne(d => d.BorIdPozycjiZrodlowejBoNavigation).WithMany(p => p.InverseBorIdPozycjiZrodlowejBoNavigation)
                .HasForeignKey(d => d.BorIdPozycjiZrodlowejBo)
                .HasConstraintName("FK_dkr_BilansOtwarciaRozbicie_dkr_BilansOtwarciaRozbicie");
        });

        modelBuilder.Entity<DkrBilansOtwarciaZmiana>(entity =>
        {
            entity.HasKey(e => e.BozId);

            entity.ToTable("dkr_BilansOtwarciaZmiana");

            entity.Property(e => e.BozId)
                .ValueGeneratedNever()
                .HasColumnName("boz_Id");
            entity.Property(e => e.BozDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("boz_DataModyfikacji");
            entity.Property(e => e.BozHid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("boz_hid");
            entity.Property(e => e.BozIdBo).HasColumnName("boz_IdBO");
            entity.Property(e => e.BozIdModyfikowal).HasColumnName("boz_IdModyfikowal");
            entity.Property(e => e.BozTyp).HasColumnName("boz_Typ");

            entity.HasOne(d => d.BozIdBoNavigation).WithMany(p => p.DkrBilansOtwarciaZmianas)
                .HasForeignKey(d => d.BozIdBo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_BilansOtwarciaZmiana_dkr_BilansOtwarcia");

            entity.HasOne(d => d.BozIdModyfikowalNavigation).WithMany(p => p.DkrBilansOtwarciaZmianas)
                .HasForeignKey(d => d.BozIdModyfikowal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_BilansOtwarciaZmiana_pd_Uzytkownik");
        });

        modelBuilder.Entity<DkrBilansOtwarciaZmianaSzczegoly>(entity =>
        {
            entity.HasKey(e => e.BozsId);

            entity.ToTable("dkr_BilansOtwarciaZmianaSzczegoly");

            entity.Property(e => e.BozsId)
                .ValueGeneratedNever()
                .HasColumnName("bozs_Id");
            entity.Property(e => e.BozsIdBoz).HasColumnName("bozs_IdBOZ");
            entity.Property(e => e.BozsKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bozs_Konto");
            entity.Property(e => e.BozsStanPo)
                .HasColumnType("money")
                .HasColumnName("bozs_StanPo");
            entity.Property(e => e.BozsStanPrzed)
                .HasColumnType("money")
                .HasColumnName("bozs_StanPrzed");
            entity.Property(e => e.BozsStrona).HasColumnName("bozs_Strona");
            entity.Property(e => e.BozsTyp).HasColumnName("bozs_Typ");

            entity.HasOne(d => d.BozsIdBozNavigation).WithMany(p => p.DkrBilansOtwarciaZmianaSzczegolies)
                .HasForeignKey(d => d.BozsIdBoz)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_BilansOtwarciaZmianaSzczegoly_dkr_BilansOtwarciaZmiana");
        });

        modelBuilder.Entity<DkrBilansOtwarcium>(entity =>
        {
            entity.HasKey(e => e.BoId).HasName("PK_dkr_BO");

            entity.ToTable("dkr_BilansOtwarcia");

            entity.Property(e => e.BoId)
                .ValueGeneratedNever()
                .HasColumnName("bo_Id");
            entity.Property(e => e.BoData)
                .HasColumnType("datetime")
                .HasColumnName("bo_Data");
            entity.Property(e => e.BoDataKorekty)
                .HasColumnType("datetime")
                .HasColumnName("bo_DataKorekty");
            entity.Property(e => e.BoDataZatwierdzenia)
                .HasColumnType("datetime")
                .HasColumnName("bo_DataZatwierdzenia");
            entity.Property(e => e.BoIdKorygujacy).HasColumnName("bo_IdKorygujacy");
            entity.Property(e => e.BoIdRoku).HasColumnName("bo_IdRoku");
            entity.Property(e => e.BoIdUzytkownik).HasColumnName("bo_IdUzytkownik");
            entity.Property(e => e.BoIdZatwierdzajacy).HasColumnName("bo_IdZatwierdzajacy");
            entity.Property(e => e.BoKorygowany).HasColumnName("bo_Korygowany");
            entity.Property(e => e.BoZatwierdzony).HasColumnName("bo_Zatwierdzony");

            entity.HasOne(d => d.BoIdKorygujacyNavigation).WithMany(p => p.DkrBilansOtwarciumBoIdKorygujacyNavigations)
                .HasForeignKey(d => d.BoIdKorygujacy)
                .HasConstraintName("FK_dkr_BilansOtwarcia_pd_Uzytkownik1");

            entity.HasOne(d => d.BoIdRokuNavigation).WithMany(p => p.DkrBilansOtwarcia)
                .HasForeignKey(d => d.BoIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_BO_pd_RokObrotowy");

            entity.HasOne(d => d.BoIdUzytkownikNavigation).WithMany(p => p.DkrBilansOtwarciumBoIdUzytkownikNavigations)
                .HasForeignKey(d => d.BoIdUzytkownik)
                .HasConstraintName("FK_dkr_BO_pd_Uzytkownik");

            entity.HasOne(d => d.BoIdZatwierdzajacyNavigation).WithMany(p => p.DkrBilansOtwarciumBoIdZatwierdzajacyNavigations)
                .HasForeignKey(d => d.BoIdZatwierdzajacy)
                .HasConstraintName("FK_dkr_BilansOtwarcia_pd_Uzytkownik");
        });

        modelBuilder.Entity<DkrDokImportowany>(entity =>
        {
            entity.HasKey(e => e.DiId);

            entity.ToTable("dkr_DokImportowany");

            entity.HasIndex(e => new { e.DiIdDekretu, e.DiTypDokumentu, e.DiIdDokumentu }, "IX_dkr_DokImportowany").IsUnique();

            entity.Property(e => e.DiId)
                .ValueGeneratedNever()
                .HasColumnName("di_Id");
            entity.Property(e => e.DiIdDekretu).HasColumnName("di_IdDekretu");
            entity.Property(e => e.DiIdDokumentu).HasColumnName("di_IdDokumentu");
            entity.Property(e => e.DiTypDokumentu).HasColumnName("di_TypDokumentu");

            entity.HasOne(d => d.DiIdDekretuNavigation).WithMany(p => p.DkrDokImportowanies)
                .HasForeignKey(d => d.DiIdDekretu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_DokImportowany_dkr__Dokument");
        });

        modelBuilder.Entity<DkrDokument>(entity =>
        {
            entity.HasKey(e => e.DkrId);

            entity.ToTable("dkr__Dokument", tb =>
                {
                    tb.HasTrigger("tr_DkrDekret_Updating");
                    tb.HasTrigger("tr_DkrDokument_Inserting");
                });

            entity.HasIndex(e => new { e.DkrDataDekretacji, e.DkrIdRoku, e.DkrStatus }, "IX_dkr__Dokument");

            entity.HasIndex(e => new { e.DkrRejestr, e.DkrIdRoku, e.DkrNumer, e.DkrDataDekretacji }, "IX_dkr__Dokument_Rejestr_Rok_Numer");

            entity.HasIndex(e => new { e.DkrIdDokImport, e.DkrTypDokImport }, "IX_drk__Dokument_IdDokImport");

            entity.Property(e => e.DkrId)
                .ValueGeneratedNever()
                .HasColumnName("dkr_Id");
            entity.Property(e => e.DkrDataDekretacji)
                .HasColumnType("datetime")
                .HasColumnName("dkr_DataDekretacji");
            entity.Property(e => e.DkrDataDokumentu)
                .HasColumnType("datetime")
                .HasColumnName("dkr_DataDokumentu");
            entity.Property(e => e.DkrDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dkr_DataKursu");
            entity.Property(e => e.DkrDataOperacji)
                .HasColumnType("datetime")
                .HasColumnName("dkr_DataOperacji");
            entity.Property(e => e.DkrDekretowal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dkr_Dekretowal");
            entity.Property(e => e.DkrDokumentZrodlowy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkr_DokumentZrodlowy");
            entity.Property(e => e.DkrIdBanku).HasColumnName("dkr_IdBanku");
            entity.Property(e => e.DkrIdDokImport).HasColumnName("dkr_IdDokImport");
            entity.Property(e => e.DkrIdKategorii).HasColumnName("dkr_IdKategorii");
            entity.Property(e => e.DkrIdKh).HasColumnName("dkr_IdKh");
            entity.Property(e => e.DkrIdObiektu).HasColumnName("dkr_IdObiektu");
            entity.Property(e => e.DkrIdObiektuVatOss).HasColumnName("dkr_IdObiektuVatOss");
            entity.Property(e => e.DkrIdRoku).HasColumnName("dkr_IdRoku");
            entity.Property(e => e.DkrImportPochodzenie).HasColumnName("dkr_ImportPochodzenie");
            entity.Property(e => e.DkrKontrolaBilansowania).HasColumnName("dkr_KontrolaBilansowania");
            entity.Property(e => e.DkrKsiegowal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dkr_Ksiegowal");
            entity.Property(e => e.DkrKursDokumentu)
                .HasDefaultValue(1m)
                .HasColumnType("money")
                .HasColumnName("dkr_KursDokumentu");
            entity.Property(e => e.DkrKwota)
                .HasColumnType("money")
                .HasColumnName("dkr_Kwota");
            entity.Property(e => e.DkrKwotaMa)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaMa");
            entity.Property(e => e.DkrKwotaWaluta)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaWaluta");
            entity.Property(e => e.DkrKwotaWalutaMa)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaWalutaMa");
            entity.Property(e => e.DkrKwotaWalutaWn)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaWalutaWn");
            entity.Property(e => e.DkrKwotaWn)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaWn");
            entity.Property(e => e.DkrLiczbaJednostek)
                .HasDefaultValue(1)
                .HasColumnName("dkr_LiczbaJednostek");
            entity.Property(e => e.DkrNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dkr_NrPelny");
            entity.Property(e => e.DkrNrWdzienniku).HasColumnName("dkr_NrWDzienniku");
            entity.Property(e => e.DkrNumer).HasColumnName("dkr_Numer");
            entity.Property(e => e.DkrNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dkr_NumerKSeF");
            entity.Property(e => e.DkrOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkr_Opis");
            entity.Property(e => e.DkrPodtyp).HasColumnName("dkr_Podtyp");
            entity.Property(e => e.DkrRejestr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dkr_Rejestr");
            entity.Property(e => e.DkrRodzajDowodu).HasColumnName("dkr_RodzajDowodu");
            entity.Property(e => e.DkrRodzajKursu).HasColumnName("dkr_RodzajKursu");
            entity.Property(e => e.DkrStatus)
                .HasDefaultValue(1)
                .HasColumnName("dkr_Status");
            entity.Property(e => e.DkrStorno).HasColumnName("dkr_Storno");
            entity.Property(e => e.DkrSymbolKh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkr_SymbolKh");
            entity.Property(e => e.DkrTrybWprowadzaniaRozrachunkow)
                .HasDefaultValue(2)
                .HasColumnName("dkr_TrybWprowadzaniaRozrachunkow");
            entity.Property(e => e.DkrTypDokImport).HasColumnName("dkr_TypDokImport");
            entity.Property(e => e.DkrTypObiektu).HasColumnName("dkr_TypObiektu");
            entity.Property(e => e.DkrUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkr_Uwagi");
            entity.Property(e => e.DkrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("dkr_Waluta");
            entity.Property(e => e.DkrWalutaKursWyswietlany)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkr_WalutaKursWyswietlany");
            entity.Property(e => e.DkrWalutaWyswietlana)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .HasColumnName("dkr_WalutaWyswietlana");

            entity.HasOne(d => d.DkrDekretowalNavigation).WithMany(p => p.DkrDokumentDkrDekretowalNavigations)
                .HasPrincipalKey(p => p.UzIdentyfikator)
                .HasForeignKey(d => d.DkrDekretowal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr__Dokument_pd_Uzytkownik");

            entity.HasOne(d => d.DkrIdBankuNavigation).WithMany(p => p.DkrDokuments)
                .HasForeignKey(d => d.DkrIdBanku)
                .HasConstraintName("FK_dkr__Dokument_sl_WalutaBank");

            entity.HasOne(d => d.DkrIdKategoriiNavigation).WithMany(p => p.DkrDokuments)
                .HasForeignKey(d => d.DkrIdKategorii)
                .HasConstraintName("FK_dkr__Dokument_sl_Kategoria");

            entity.HasOne(d => d.DkrIdKhNavigation).WithMany(p => p.DkrDokuments)
                .HasForeignKey(d => d.DkrIdKh)
                .HasConstraintName("FK_dkr__Dokument_kh__Kontrahent");

            entity.HasOne(d => d.DkrIdRokuNavigation).WithMany(p => p.DkrDokuments)
                .HasForeignKey(d => d.DkrIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr__Dokument_pd_RokObrotowy");

            entity.HasOne(d => d.DkrKsiegowalNavigation).WithMany(p => p.DkrDokumentDkrKsiegowalNavigations)
                .HasPrincipalKey(p => p.UzIdentyfikator)
                .HasForeignKey(d => d.DkrKsiegowal)
                .HasConstraintName("FK_dkr__Dokument_pd_Uzytkownik1");

            entity.HasOne(d => d.DkrRejestrNavigation).WithMany(p => p.DkrDokuments)
                .HasPrincipalKey(p => p.RksSymbol)
                .HasForeignKey(d => d.DkrRejestr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr__Dokument_sl_RejestrKsiegowy1");

            entity.HasOne(d => d.DkrRodzajDowoduNavigation).WithMany(p => p.DkrDokuments)
                .HasForeignKey(d => d.DkrRodzajDowodu)
                .HasConstraintName("FK_dkr__Dokument_sl_RodzajDowoduKsiegowego");

            entity.HasOne(d => d.DkrWalutaNavigation).WithMany(p => p.DkrDokuments)
                .HasForeignKey(d => d.DkrWaluta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr__Dokument_sl_Waluta");
        });

        modelBuilder.Entity<DkrParametr>(entity =>
        {
            entity.HasKey(e => e.DkrpId).HasName("PK_dkrp_Parametr");

            entity.ToTable("dkr_Parametr");

            entity.HasIndex(e => e.DkrpParamEwidId, "IX_dkr_Parametr").IsUnique();

            entity.Property(e => e.DkrpId)
                .ValueGeneratedNever()
                .HasColumnName("dkrp_Id");
            entity.Property(e => e.DkprOssDataWystawienia)
                .HasDefaultValue(2)
                .HasColumnName("dkpr_OssDataWystawienia");
            entity.Property(e => e.DkprOssDataZakDost)
                .HasDefaultValue(3)
                .HasColumnName("dkpr_OssDataZakDost");
            entity.Property(e => e.DkprSprzedazDataOtrzymania)
                .HasDefaultValue(2)
                .HasColumnName("dkpr_SprzedazDataOtrzymania");
            entity.Property(e => e.DkprSprzedazDataWystawienia)
                .HasDefaultValue(3)
                .HasColumnName("dkpr_SprzedazDataWystawienia");
            entity.Property(e => e.DkprSprzedazDataZakDost)
                .HasDefaultValue(3)
                .HasColumnName("dkpr_SprzedazDataZakDost");
            entity.Property(e => e.DkprZakupDataOtrzymania)
                .HasDefaultValue(1)
                .HasColumnName("dkpr_ZakupDataOtrzymania");
            entity.Property(e => e.DkprZakupDataWystawienia)
                .HasDefaultValue(2)
                .HasColumnName("dkpr_ZakupDataWystawienia");
            entity.Property(e => e.DkprZakupDataZakDost)
                .HasDefaultValue(2)
                .HasColumnName("dkpr_ZakupDataZakDost");
            entity.Property(e => e.DkrpAutoDodawanieRozr).HasColumnName("dkrp_AutoDodawanieRozr");
            entity.Property(e => e.DkrpAutoNrTransakcji).HasColumnName("dkrp_AutoNrTransakcji");
            entity.Property(e => e.DkrpDekretyZerowe)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_DekretyZerowe");
            entity.Property(e => e.DkrpDomyslnyTermPlat)
                .HasDefaultValue(14)
                .HasColumnName("dkrp_DomyslnyTermPlat");
            entity.Property(e => e.DkrpKontrolaKreguKosztow).HasColumnName("dkrp_KontrolaKreguKosztow");
            entity.Property(e => e.DkrpKontrolaUniqNrDokumentu)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_KontrolaUniqNrDokumentu");
            entity.Property(e => e.DkrpKopiujTytulem).HasColumnName("dkrp_KopiujTytulem");
            entity.Property(e => e.DkrpParamEwidId).HasColumnName("dkrp_ParamEwidId");
            entity.Property(e => e.DkrpPowielanieRaportRozr)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PowielanieRaportRozr");
            entity.Property(e => e.DkrpPrzepisywanieDtDekretacji)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieDtDekretacji");
            entity.Property(e => e.DkrpPrzepisywanieDtDokumentu)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieDtDokumentu");
            entity.Property(e => e.DkrpPrzepisywanieDtOperacji)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieDtOperacji");
            entity.Property(e => e.DkrpPrzepisywanieKategorii)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieKategorii");
            entity.Property(e => e.DkrpPrzepisywanieKb)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieKB");
            entity.Property(e => e.DkrpPrzepisywanieOpisu)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieOpisu");
            entity.Property(e => e.DkrpPrzepisywanieRejestru)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieRejestru");
            entity.Property(e => e.DkrpPrzepisywanieRodzajuDowodu)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieRodzajuDowodu");
            entity.Property(e => e.DkrpPrzepisywanieStorna).HasColumnName("dkrp_PrzepisywanieStorna");
            entity.Property(e => e.DkrpPrzepisywanieTo)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieTO");
            entity.Property(e => e.DkrpPrzepisywanieWaluty)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_PrzepisywanieWaluty");
            entity.Property(e => e.DkrpSposobAutoRozliczRozr).HasColumnName("dkrp_SposobAutoRozliczRozr");
            entity.Property(e => e.DkrpUstawDaneKhWvat).HasColumnName("dkrp_UstawDaneKhWVAT");
            entity.Property(e => e.DkrpWyswietlajDymki)
                .HasDefaultValue(true)
                .HasColumnName("dkrp_WyswietlajDymki");

            entity.HasOne(d => d.DkrpParamEwid).WithOne(p => p.DkrParametr)
                .HasForeignKey<DkrParametr>(d => d.DkrpParamEwidId)
                .HasConstraintName("FK_dkr_Parametr_par__Ewid");
        });

        modelBuilder.Entity<DkrParametrDokDoDekretacji>(entity =>
        {
            entity.HasKey(e => e.DddpId);

            entity.ToTable("dkr_ParametrDokDoDekretacji");

            entity.HasIndex(e => e.DddpParamEwidId, "IX_dkr_ParametrDokDoDekretacji").IsUnique();

            entity.Property(e => e.DddpId)
                .ValueGeneratedNever()
                .HasColumnName("dddp_Id");
            entity.Property(e => e.DddpAutoNadawanieAnalityk)
                .HasDefaultValue(true)
                .HasColumnName("dddp_AutoNadawanieAnalityk");
            entity.Property(e => e.DddpDataZakupowe)
                .HasDefaultValue(2)
                .HasColumnName("dddp_Data_Zakupowe");
            entity.Property(e => e.DddpDekretacjaUsuwajKwotyZerowe).HasColumnName("dddp_DekretacjaUsuwajKwotyZerowe");
            entity.Property(e => e.DddpDekretyZerowe)
                .HasDefaultValue(true)
                .HasColumnName("dddp_DekretyZerowe");
            entity.Property(e => e.DddpParamEwidId).HasColumnName("dddp_ParamEwidId");
            entity.Property(e => e.DddpProbojBilansowacBezGrup)
                .HasDefaultValue(true)
                .HasColumnName("dddp_ProbojBilansowacBezGrup");
            entity.Property(e => e.DddpPrzenosPlatnosciMasowe)
                .HasDefaultValue(true)
                .HasColumnName("dddp_PrzenosPlatnosciMasowe");
            entity.Property(e => e.DddpPrzerwaniePoBledzie)
                .HasDefaultValue(true)
                .HasColumnName("dddp_PrzerwaniePoBledzie");
            entity.Property(e => e.DddpRozniceZaokraglenDekretowWalutowych)
                .HasDefaultValue(true)
                .HasColumnName("dddp_RozniceZaokraglenDekretowWalutowych");
            entity.Property(e => e.DddpUsuwajNieprawidloweKonta).HasColumnName("dddp_UsuwajNieprawidloweKonta");
            entity.Property(e => e.DddpUzupelniajLukiAnalityk).HasColumnName("dddp_UzupelniajLukiAnalityk");

            entity.HasOne(d => d.DddpParamEwid).WithOne(p => p.DkrParametrDokDoDekretacji)
                .HasForeignKey<DkrParametrDokDoDekretacji>(d => d.DddpParamEwidId)
                .HasConstraintName("FK_dkr_ParametrDokDoDekretacji_par__Ewid");
        });

        modelBuilder.Entity<DkrParametrDziennika>(entity =>
        {
            entity.HasKey(e => e.DkpdIdRoku);

            entity.ToTable("dkr_ParametrDziennika");

            entity.Property(e => e.DkpdIdRoku)
                .ValueGeneratedNever()
                .HasColumnName("dkpd_IdRoku");
            entity.Property(e => e.DkpdNumerLp)
                .HasDefaultValue(1)
                .HasColumnName("dkpd_NumerLp");
            entity.Property(e => e.DkpdNumerPozycji)
                .HasDefaultValue(1)
                .HasColumnName("dkpd_NumerPozycji");

            entity.HasOne(d => d.DkpdIdRokuNavigation).WithOne(p => p.DkrParametrDziennika)
                .HasForeignKey<DkrParametrDziennika>(d => d.DkpdIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_ParametrDziennika_pd_RokObrotowy");
        });

        modelBuilder.Entity<DkrPieczecKsiegowa>(entity =>
        {
            entity.HasKey(e => e.DkpkId);

            entity.ToTable("dkr_PieczecKsiegowa");

            entity.Property(e => e.DkpkId)
                .ValueGeneratedNever()
                .HasColumnName("dkpk_Id");
            entity.Property(e => e.DkpkKontrolaBilansowania).HasColumnName("dkpk_KontrolaBilansowania");
            entity.Property(e => e.DkpkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkpk_Nazwa");
        });

        modelBuilder.Entity<DkrPieczecKsiegowaPozycja>(entity =>
        {
            entity.HasKey(e => e.DkppId);

            entity.ToTable("dkr_PieczecKsiegowaPozycja");

            entity.Property(e => e.DkppId)
                .ValueGeneratedNever()
                .HasColumnName("dkpp_Id");
            entity.Property(e => e.DkppIdPieczeci).HasColumnName("dkpp_IdPieczeci");
            entity.Property(e => e.DkppKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dkpp_Konto");
            entity.Property(e => e.DkppOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dkpp_Opis");
            entity.Property(e => e.DkppPos).HasColumnName("dkpp_Pos");
            entity.Property(e => e.DkppStrona).HasColumnName("dkpp_Strona");
            entity.Property(e => e.DkppTypWiersza).HasColumnName("dkpp_TypWiersza");

            entity.HasOne(d => d.DkppIdPieczeciNavigation).WithMany(p => p.DkrPieczecKsiegowaPozycjas)
                .HasForeignKey(d => d.DkppIdPieczeci)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_PieczecKsiegowaPozycja_dkr_PieczecKsiegowa");
        });

        modelBuilder.Entity<DkrPozycja>(entity =>
        {
            entity.HasKey(e => e.DkoId);

            entity.ToTable("dkr_Pozycja", tb =>
                {
                    tb.HasTrigger("tr_DkrPozycja_Deleting");
                    tb.HasTrigger("tr_DkrPozycja_Inserting");
                    tb.HasTrigger("tr_DkrPozycja_Updating");
                });

            entity.HasIndex(e => e.DkoIdDokumentu, "IX_dkr_Pozycja_IdDokumentu");

            entity.HasIndex(e => new { e.DkoIdRoku, e.DkoKonto }, "IX_dkr_Pozycja_Rok_Konto");

            entity.Property(e => e.DkoId)
                .ValueGeneratedNever()
                .HasColumnName("dko_Id");
            entity.Property(e => e.DkoDataDekretacji)
                .HasColumnType("datetime")
                .HasColumnName("dko_DataDekretacji");
            entity.Property(e => e.DkoDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dko_DataKursu");
            entity.Property(e => e.DkoGrupa).HasColumnName("dko_Grupa");
            entity.Property(e => e.DkoIdBanku).HasColumnName("dko_IdBanku");
            entity.Property(e => e.DkoIdDokumentu).HasColumnName("dko_IdDokumentu");
            entity.Property(e => e.DkoIdKategorii).HasColumnName("dko_IdKategorii");
            entity.Property(e => e.DkoIdRoku).HasColumnName("dko_IdRoku");
            entity.Property(e => e.DkoIdStawkiVat).HasColumnName("dko_IdStawkiVAT");
            entity.Property(e => e.DkoKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dko_Konto");
            entity.Property(e => e.DkoKorektaZaokraglen).HasColumnName("dko_KorektaZaokraglen");
            entity.Property(e => e.DkoKurs)
                .HasDefaultValue(1m)
                .HasColumnType("money")
                .HasColumnName("dko_Kurs");
            entity.Property(e => e.DkoKwotaMa)
                .HasColumnType("money")
                .HasColumnName("dko_KwotaMa");
            entity.Property(e => e.DkoKwotaMaWaluta)
                .HasColumnType("money")
                .HasColumnName("dko_KwotaMaWaluta");
            entity.Property(e => e.DkoKwotaWn)
                .HasColumnType("money")
                .HasColumnName("dko_KwotaWn");
            entity.Property(e => e.DkoKwotaWnWaluta)
                .HasColumnType("money")
                .HasColumnName("dko_KwotaWnWaluta");
            entity.Property(e => e.DkoLiczbaJednostek)
                .HasDefaultValue(1)
                .HasColumnName("dko_LiczbaJednostek");
            entity.Property(e => e.DkoLpWiersza)
                .HasDefaultValue(1)
                .HasColumnName("dko_LpWiersza");
            entity.Property(e => e.DkoNrWdzienniku).HasColumnName("dko_NrWDzienniku");
            entity.Property(e => e.DkoOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dko_Opis");
            entity.Property(e => e.DkoRodzajKursu).HasColumnName("dko_RodzajKursu");
            entity.Property(e => e.DkoStatus)
                .HasDefaultValue(1)
                .HasColumnName("dko_Status");
            entity.Property(e => e.DkoTypWiersza)
                .HasDefaultValue(1)
                .HasColumnName("dko_TypWiersza");
            entity.Property(e => e.DkoWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("dko_Waluta");

            entity.HasOne(d => d.DkoIdBankuNavigation).WithMany(p => p.DkrPozycjas)
                .HasForeignKey(d => d.DkoIdBanku)
                .HasConstraintName("FK_dkr_Pozycja_sl_WalutaBank");

            entity.HasOne(d => d.DkoIdDokumentuNavigation).WithMany(p => p.DkrPozycjas)
                .HasForeignKey(d => d.DkoIdDokumentu)
                .HasConstraintName("FK_dkr_Pozycja_dkr__Dokument");

            entity.HasOne(d => d.DkoIdRokuNavigation).WithMany(p => p.DkrPozycjas)
                .HasForeignKey(d => d.DkoIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_Pozycja_pd_RokObrotowy");

            entity.HasOne(d => d.DkoIdStawkiVatNavigation).WithMany(p => p.DkrPozycjas)
                .HasForeignKey(d => d.DkoIdStawkiVat)
                .HasConstraintName("FK_dkr_Pozycja_sl_StawkaVAT");

            entity.HasOne(d => d.DkoWalutaNavigation).WithMany(p => p.DkrPozycjas)
                .HasForeignKey(d => d.DkoWaluta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_Pozycja_sl_Waluta");
        });

        modelBuilder.Entity<DkrPozycjaWydatekNaPojazd>(entity =>
        {
            entity.HasKey(e => e.DkpwIdPozycja);

            entity.ToTable("dkr_PozycjaWydatekNaPojazd");

            entity.Property(e => e.DkpwIdPozycja)
                .ValueGeneratedNever()
                .HasColumnName("dkpw_IdPozycja");
            entity.Property(e => e.DkpwIdWydatek).HasColumnName("dkpw_IdWydatek");

            entity.HasOne(d => d.DkpwIdPozycjaNavigation).WithOne(p => p.DkrPozycjaWydatekNaPojazd)
                .HasForeignKey<DkrPozycjaWydatekNaPojazd>(d => d.DkpwIdPozycja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_PozycjaWydatekNaPojazd_dkr_Pozycja");

            entity.HasOne(d => d.DkpwIdWydatekNavigation).WithMany(p => p.DkrPozycjaWydatekNaPojazds)
                .HasForeignKey(d => d.DkpwIdWydatek)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_PozycjaWydatekNaPojazd_dkr_WydatekNaPojazd");
        });

        modelBuilder.Entity<DkrRoznicaKursowa>(entity =>
        {
            entity.HasKey(e => e.DkrkId);

            entity.ToTable("dkr_RoznicaKursowa");

            entity.Property(e => e.DkrkId).HasColumnName("dkrk_Id");
            entity.Property(e => e.DkrkData)
                .HasColumnType("datetime")
                .HasColumnName("dkrk_Data");
            entity.Property(e => e.DkrkIdPozycji).HasColumnName("dkrk_IdPozycji");
            entity.Property(e => e.DkrkIdPozycjiWyplaty).HasColumnName("dkrk_IdPozycjiWyplaty");
            entity.Property(e => e.DkrkIdRoku).HasColumnName("dkrk_IdRoku");
            entity.Property(e => e.DkrkIdRoznicy).HasColumnName("dkrk_IdRoznicy");
            entity.Property(e => e.DkrkKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dkrk_Konto");
            entity.Property(e => e.DkrkKurs)
                .HasColumnType("money")
                .HasColumnName("dkrk_Kurs");
            entity.Property(e => e.DkrkKwota)
                .HasColumnType("money")
                .HasColumnName("dkrk_Kwota");
            entity.Property(e => e.DkrkLiczbaJednostek).HasColumnName("dkrk_LiczbaJednostek");
            entity.Property(e => e.DkrkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dkrk_Opis");
            entity.Property(e => e.DkrkTyp).HasColumnName("dkrk_Typ");

            entity.HasOne(d => d.DkrkIdPozycjiNavigation).WithMany(p => p.DkrRoznicaKursowaDkrkIdPozycjiNavigations)
                .HasForeignKey(d => d.DkrkIdPozycji)
                .HasConstraintName("FK_dkr_RoznicaKursowa_dkr_Pozycja_IdPozycji");

            entity.HasOne(d => d.DkrkIdPozycjiWyplatyNavigation).WithMany(p => p.DkrRoznicaKursowaDkrkIdPozycjiWyplatyNavigations)
                .HasForeignKey(d => d.DkrkIdPozycjiWyplaty)
                .HasConstraintName("FK_dkr_RoznicaKursowa_dkr_Pozycja_IdPozycjiWyplaty");

            entity.HasOne(d => d.DkrkIdRokuNavigation).WithMany(p => p.DkrRoznicaKursowas)
                .HasForeignKey(d => d.DkrkIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_RoznicaKursowa_pd_RokObrotowy");

            entity.HasOne(d => d.DkrkIdRoznicyNavigation).WithMany(p => p.InverseDkrkIdRoznicyNavigation)
                .HasForeignKey(d => d.DkrkIdRoznicy)
                .HasConstraintName("FK_dkr_RoznicaKursowa_dkr_RoznicaKursowa");
        });

        modelBuilder.Entity<DkrRoznicaKursowaPozycja>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dkr_RoznicaKursowaPozycja");

            entity.HasIndex(e => new { e.DkrkpIdRoznicy, e.DkrkpIdPozycji, e.DkrkpIdPozycjiBo }, "CK_dkr_RoznicaKursowaPozycja_Pozycja_NoDupl").IsUnique();

            entity.Property(e => e.DkrkpIdPozycji).HasColumnName("dkrkp_IdPozycji");
            entity.Property(e => e.DkrkpIdPozycjiBo).HasColumnName("dkrkp_IdPozycjiBO");
            entity.Property(e => e.DkrkpIdRoznicy).HasColumnName("dkrkp_IdRoznicy");
            entity.Property(e => e.DkrkpKwota)
                .HasColumnType("money")
                .HasColumnName("dkrkp_Kwota");

            entity.HasOne(d => d.DkrkpIdPozycjiNavigation).WithMany()
                .HasForeignKey(d => d.DkrkpIdPozycji)
                .HasConstraintName("FK_dkr_RoznicaKursowaPozycja_dkr_Pozycja");

            entity.HasOne(d => d.DkrkpIdPozycjiBoNavigation).WithMany()
                .HasForeignKey(d => d.DkrkpIdPozycjiBo)
                .HasConstraintName("FK_dkr_RoznicaKursowaPozycja_dkr_BilansOtwarciaRozbicie");

            entity.HasOne(d => d.DkrkpIdRoznicyNavigation).WithMany()
                .HasForeignKey(d => d.DkrkpIdRoznicy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_RoznicaKursowaPozycja_dkr_RoznicaKursowa");
        });

        modelBuilder.Entity<DkrSladRewizyjny>(entity =>
        {
            entity.HasKey(e => e.SrwId);

            entity.ToTable("dkr_SladRewizyjny");

            entity.Property(e => e.SrwId).HasColumnName("srw_Id");
            entity.Property(e => e.SrwData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("srw_Data");
            entity.Property(e => e.SrwDataDekretacji)
                .HasColumnType("datetime")
                .HasColumnName("srw_DataDekretacji");
            entity.Property(e => e.SrwDokumentZrodlowy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("srw_DokumentZrodlowy");
            entity.Property(e => e.SrwIdRoku).HasColumnName("srw_IdRoku");
            entity.Property(e => e.SrwNrDokumentu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("srw_NrDokumentu");
            entity.Property(e => e.SrwOperacja).HasColumnName("srw_Operacja");
            entity.Property(e => e.SrwRejestr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("srw_Rejestr");
            entity.Property(e => e.SrwUzytkownik)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("srw_Uzytkownik");

            entity.HasOne(d => d.SrwIdRokuNavigation).WithMany(p => p.DkrSladRewizyjnies)
                .HasForeignKey(d => d.SrwIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_SladRewizyjny_pd_RokObrotowy");

            entity.HasOne(d => d.SrwRejestrNavigation).WithMany(p => p.DkrSladRewizyjnies)
                .HasPrincipalKey(p => p.RksSymbol)
                .HasForeignKey(d => d.SrwRejestr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_SladRewizyjny_sl_RejestrKsiegowy");

            entity.HasOne(d => d.SrwUzytkownikNavigation).WithMany(p => p.DkrSladRewizyjnies)
                .HasPrincipalKey(p => p.UzIdentyfikator)
                .HasForeignKey(d => d.SrwUzytkownik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_SladRewizyjny_pd_Uzytkownik");
        });

        modelBuilder.Entity<DkrWydatekNaPojazd>(entity =>
        {
            entity.HasKey(e => e.DkwpId);

            entity.ToTable("dkr_WydatekNaPojazd");

            entity.Property(e => e.DkwpId)
                .ValueGeneratedNever()
                .HasColumnName("dkwp_Id");
            entity.Property(e => e.DkwpIdStawkiVat).HasColumnName("dkwp_IdStawkiVat");
            entity.Property(e => e.DkwpMalyPojazd).HasColumnName("dkwp_MalyPojazd");
            entity.Property(e => e.DkwpNetto)
                .HasColumnType("money")
                .HasColumnName("dkwp_Netto");
            entity.Property(e => e.DkwpNettoBrutto).HasColumnName("dkwp_NettoBrutto");
            entity.Property(e => e.DkwpNettoNpo)
                .HasColumnType("money")
                .HasColumnName("dkwp_NettoNpo");
            entity.Property(e => e.DkwpPrzypadekSzczegolnyPit).HasColumnName("dkwp_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.DkwpVat)
                .HasColumnType("money")
                .HasColumnName("dkwp_Vat");
            entity.Property(e => e.DkwpVatNpo)
                .HasColumnType("money")
                .HasColumnName("dkwp_VatNpo");
            entity.Property(e => e.DkwpWartoscZfaktury)
                .HasColumnType("money")
                .HasColumnName("dkwp_WartoscZFaktury");

            entity.HasOne(d => d.DkwpIdStawkiVatNavigation).WithMany(p => p.DkrWydatekNaPojazds)
                .HasForeignKey(d => d.DkwpIdStawkiVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_WydatekNaPojazd_sl_StawkaVAT");
        });

        modelBuilder.Entity<DkrWzorzec>(entity =>
        {
            entity.HasKey(e => e.DkrwId)
                .HasName("PK_dkrw_Wzorzec")
                .IsClustered(false);

            entity.ToTable("dkr_Wzorzec");

            entity.Property(e => e.DkrwId)
                .ValueGeneratedNever()
                .HasColumnName("dkrw_Id");
            entity.Property(e => e.DkrwDataWykonania)
                .HasColumnType("datetime")
                .HasColumnName("dkrw_DataWykonania");
            entity.Property(e => e.DkrwIdKategorii).HasColumnName("dkrw_IdKategorii");
            entity.Property(e => e.DkrwIdKh).HasColumnName("dkrw_IdKh");
            entity.Property(e => e.DkrwIdObiektu).HasColumnName("dkrw_IdObiektu");
            entity.Property(e => e.DkrwKontrolaBilansowania).HasColumnName("dkrw_KontrolaBilansowania");
            entity.Property(e => e.DkrwKursDokumentu)
                .HasColumnType("money")
                .HasColumnName("dkrw_KursDokumentu");
            entity.Property(e => e.DkrwKwota)
                .HasColumnType("money")
                .HasColumnName("dkrw_Kwota");
            entity.Property(e => e.DkrwKwotaVat)
                .HasColumnType("money")
                .HasColumnName("dkrw_KwotaVAT");
            entity.Property(e => e.DkrwKwotaWaluta)
                .HasColumnType("money")
                .HasColumnName("dkrw_KwotaWaluta");
            entity.Property(e => e.DkrwNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkrw_Nazwa");
            entity.Property(e => e.DkrwRejestr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dkrw_Rejestr");
            entity.Property(e => e.DkrwRodzajKursu).HasColumnName("dkrw_RodzajKursu");
            entity.Property(e => e.DkrwSymbolKh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dkrw_SymbolKh");
            entity.Property(e => e.DkrwTyp).HasColumnName("dkrw_Typ");
            entity.Property(e => e.DkrwTypObiektu).HasColumnName("dkrw_TypObiektu");
            entity.Property(e => e.DkrwUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dkrw_Uwagi");
            entity.Property(e => e.DkrwWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dkrw_Waluta");
            entity.Property(e => e.DkrwWalutaWyswietlana)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("dkrw_WalutaWyswietlana");

            entity.HasOne(d => d.DkrwIdKategoriiNavigation).WithMany(p => p.DkrWzorzecs)
                .HasForeignKey(d => d.DkrwIdKategorii)
                .HasConstraintName("FK_dkrw_Wzorzec_sl_Kategoria");

            entity.HasOne(d => d.DkrwRejestrNavigation).WithMany(p => p.DkrWzorzecs)
                .HasPrincipalKey(p => p.RksSymbol)
                .HasForeignKey(d => d.DkrwRejestr)
                .HasConstraintName("FK_dkr_Wzorzec_sl_RejestrKsiegowy");

            entity.HasOne(d => d.DkrwWalutaNavigation).WithMany(p => p.DkrWzorzecs)
                .HasForeignKey(d => d.DkrwWaluta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_Wzorzec_sl_Waluta");
        });

        modelBuilder.Entity<DkrWzorzecPozycja>(entity =>
        {
            entity.HasKey(e => e.DkowId);

            entity.ToTable("dkr_WzorzecPozycja");

            entity.Property(e => e.DkowId)
                .ValueGeneratedNever()
                .HasColumnName("dkow_Id");
            entity.Property(e => e.DkowGrupa).HasColumnName("dkow_Grupa");
            entity.Property(e => e.DkowIdDokumentu).HasColumnName("dkow_IdDokumentu");
            entity.Property(e => e.DkowKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dkow_Konto");
            entity.Property(e => e.DkowKurs)
                .HasDefaultValue(1m)
                .HasColumnType("money")
                .HasColumnName("dkow_Kurs");
            entity.Property(e => e.DkowKwotaMa)
                .HasColumnType("money")
                .HasColumnName("dkow_KwotaMa");
            entity.Property(e => e.DkowKwotaMaWaluta)
                .HasColumnType("money")
                .HasColumnName("dkow_KwotaMaWaluta");
            entity.Property(e => e.DkowKwotaWn)
                .HasColumnType("money")
                .HasColumnName("dkow_KwotaWn");
            entity.Property(e => e.DkowKwotaWnWaluta)
                .HasColumnType("money")
                .HasColumnName("dkow_KwotaWnWaluta");
            entity.Property(e => e.DkowOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dkow_Opis");
            entity.Property(e => e.DkowTransakcja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dkow_Transakcja");
            entity.Property(e => e.DkowWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dkow_Waluta");

            entity.HasOne(d => d.DkowIdDokumentuNavigation).WithMany(p => p.DkrWzorzecPozycjas)
                .HasForeignKey(d => d.DkowIdDokumentu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_WzorzecPozycja_dkr_Wzorzec");

            entity.HasOne(d => d.DkowWalutaNavigation).WithMany(p => p.DkrWzorzecPozycjas)
                .HasForeignKey(d => d.DkowWaluta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dkr_WzorzecPozycja_sl_Waluta");
        });

        modelBuilder.Entity<DksHomeBanking>(entity =>
        {
            entity.HasKey(e => e.HbId);

            entity.ToTable("dks_HomeBanking");

            entity.Property(e => e.HbId).HasColumnName("hb_Id");
            entity.Property(e => e.HbNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_Nazwa");
            entity.Property(e => e.HbTransformacja)
                .HasColumnType("image")
                .HasColumnName("hb_Transformacja");
        });

        modelBuilder.Entity<DksKasa>(entity =>
        {
            entity.HasKey(e => e.KsId).HasName("PK_ks_Kasa");

            entity.ToTable("dks_Kasa", tb => tb.HasTrigger("tr_dks_Kasa_Deleting"));

            entity.HasIndex(e => e.KsSymbol, "UX_Symbol").IsUnique();

            entity.Property(e => e.KsId)
                .ValueGeneratedNever()
                .HasColumnName("ks_Id");
            entity.Property(e => e.KsAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ks_Analityka");
            entity.Property(e => e.KsGlowna).HasColumnName("ks_Glowna");
            entity.Property(e => e.KsNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ks_Nazwa");
            entity.Property(e => e.KsOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ks_Opis");
            entity.Property(e => e.KsRkAutoDodawanie)
                .HasDefaultValue(1)
                .HasColumnName("ks_RK_AutoDodawanie");
            entity.Property(e => e.KsRkFormatNumeru).HasColumnName("ks_RK_FormatNumeru");
            entity.Property(e => e.KsRkKategoria).HasColumnName("ks_RK_Kategoria");
            entity.Property(e => e.KsRkKategoriaKorekty).HasColumnName("ks_RK_KategoriaKorekty");
            entity.Property(e => e.KsRkOkres)
                .HasDefaultValue(1)
                .HasColumnName("ks_RK_Okres");
            entity.Property(e => e.KsRkPersonalizacja)
                .HasDefaultValue(true)
                .HasColumnName("ks_RK_Personalizacja");
            entity.Property(e => e.KsRkWieleZaOkres).HasColumnName("ks_RK_WieleZaOkres");
            entity.Property(e => e.KsSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ks_Symbol");
            entity.Property(e => e.KsWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ks_Waluta");
            entity.Property(e => e.KsWielowalutowa)
                .HasDefaultValue(true)
                .HasColumnName("ks_Wielowalutowa");
            entity.Property(e => e.KsZapisKptjakoOczekujace).HasColumnName("ks_ZapisKPTJakoOczekujace");

            entity.HasOne(d => d.KsRkFormatNumeruNavigation).WithMany(p => p.DksKasas)
                .HasForeignKey(d => d.KsRkFormatNumeru)
                .HasConstraintName("FK_dks_Kasa_sl_FormatNumeracji");

            entity.HasOne(d => d.KsRkKategoriaNavigation).WithMany(p => p.DksKasaKsRkKategoriaNavigations)
                .HasForeignKey(d => d.KsRkKategoria)
                .HasConstraintName("FK_dks_Kasa_sl_Kategoria_Raportu");

            entity.HasOne(d => d.KsRkKategoriaKorektyNavigation).WithMany(p => p.DksKasaKsRkKategoriaKorektyNavigations)
                .HasForeignKey(d => d.KsRkKategoriaKorekty)
                .HasConstraintName("FK_dks_Kasa_sl_Kategoria_KasowyKorygujacy");

            entity.HasOne(d => d.KsWalutaNavigation).WithMany(p => p.DksKasas)
                .HasForeignKey(d => d.KsWaluta)
                .HasConstraintName("FK_dks_Kasa_sl_Waluta");

            entity.HasMany(d => d.PfIdUzytkownikas).WithMany(p => p.PfIdObiektus)
                .UsingEntity<Dictionary<string, object>>(
                    "DksKasaProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_dks_KasaProfil_pd_Uzytkownik"),
                    l => l.HasOne<DksKasa>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_dks_KasaProfil_dks_Kasa"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("dks_KasaProfil", tb => tb.HasTrigger("tr_dks_KasaProfil_Inserting"));
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_IdUzytkownika");
                    });

            entity.HasMany(d => d.PfIdUzytkownikasNavigation).WithMany(p => p.PfIdObiektusNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "DksKasaTransferProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_dks_KasaTransferProfil_pd_Uzytkownik"),
                    l => l.HasOne<DksKasa>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_dks_KasaTransferProfil_dks_Kasa"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("dks_KasaTransferProfil");
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<DksKasaBo>(entity =>
        {
            entity.HasKey(e => e.KsoId);

            entity.ToTable("dks_KasaBO", tb => tb.HasTrigger("tr_dks_KasaBO_Inserting"));

            entity.HasIndex(e => new { e.KsoIdKasy, e.KsoWaluta }, "Waluta_KasaBO").IsUnique();

            entity.Property(e => e.KsoId)
                .ValueGeneratedNever()
                .HasColumnName("kso_Id");
            entity.Property(e => e.KsoIdKasy).HasColumnName("kso_IdKasy");
            entity.Property(e => e.KsoKwota)
                .HasColumnType("money")
                .HasColumnName("kso_Kwota");
            entity.Property(e => e.KsoWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("kso_Waluta");

            entity.HasOne(d => d.KsoIdKasyNavigation).WithMany(p => p.DksKasaBos)
                .HasForeignKey(d => d.KsoIdKasy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dks_KasaBO_dks_Kasa");

            entity.HasOne(d => d.KsoWalutaNavigation).WithMany(p => p.DksKasaBos)
                .HasForeignKey(d => d.KsoWaluta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dks_KasaBO_sl_Waluta");
        });

        modelBuilder.Entity<DksParametrCesja>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dks_ParametrCesja");

            entity.Property(e => e.FpcDataKursu)
                .HasDefaultValue(2)
                .HasColumnName("fpc_DataKursu");
            entity.Property(e => e.FpcFormatNumId).HasColumnName("fpc_FormatNumId");
            entity.Property(e => e.FpcId).HasColumnName("fpc_Id");
            entity.Property(e => e.FpcIdKategorii)
                .HasDefaultValue(-1)
                .HasColumnName("fpc_IdKategorii");
            entity.Property(e => e.FpcNrRozZdok)
                .HasDefaultValue(true)
                .HasColumnName("fpc_NrRozZDok");
            entity.Property(e => e.FpcOstatniKurs)
                .HasDefaultValue(true)
                .HasColumnName("fpc_OstatniKurs");
            entity.Property(e => e.FpcParamEwidId).HasColumnName("fpc_ParamEwidId");
            entity.Property(e => e.FpcTypDok).HasColumnName("fpc_TypDok");
            entity.Property(e => e.FpcTypKursu)
                .HasDefaultValue(1)
                .HasColumnName("fpc_TypKursu");

            entity.HasOne(d => d.FpcFormatNum).WithMany()
                .HasForeignKey(d => d.FpcFormatNumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dks_ParametrCesja_sl_FormatNumeracji");

            entity.HasOne(d => d.FpcParamEwid).WithMany()
                .HasForeignKey(d => d.FpcParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dks_ParametrCesja_par__Ewid");
        });

        modelBuilder.Entity<DksParametrFinansowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dks_ParametrFinansowy");

            entity.HasIndex(e => new { e.FinTypDok, e.FinParamEwidId }, "IX_dks_ParametrFinansowy").IsUnique();

            entity.Property(e => e.FinDataKursu).HasColumnName("fin_DataKursu");
            entity.Property(e => e.FinDrukujPoZapisie).HasColumnName("fin_DrukujPoZapisie");
            entity.Property(e => e.FinGenerujTytul).HasColumnName("fin_GenerujTytul");
            entity.Property(e => e.FinId)
                .HasDefaultValue(1)
                .HasColumnName("fin_Id");
            entity.Property(e => e.FinIdKatTransfer).HasColumnName("fin_IdKatTransfer");
            entity.Property(e => e.FinIdKategorii).HasColumnName("fin_IdKategorii");
            entity.Property(e => e.FinIdKategoriiAov)
                .HasDefaultValue(-1)
                .HasColumnName("fin_IdKategoriiAOV");
            entity.Property(e => e.FinInfoNiesplacone).HasColumnName("fin_InfoNiesplacone");
            entity.Property(e => e.FinKarta).HasColumnName("fin_Karta");
            entity.Property(e => e.FinKartaId).HasColumnName("fin_KartaId");
            entity.Property(e => e.FinKorekty)
                .HasDefaultValue(true)
                .HasColumnName("fin_Korekty");
            entity.Property(e => e.FinNieGenerujAov).HasColumnName("fin_NieGenerujAOV");
            entity.Property(e => e.FinOstatniKurs).HasColumnName("fin_OstatniKurs");
            entity.Property(e => e.FinParamEwidId).HasColumnName("fin_ParamEwidId");
            entity.Property(e => e.FinPrzepisujKatZdok)
                .HasDefaultValue(true)
                .HasColumnName("fin_PrzepisujKatZDok");
            entity.Property(e => e.FinPrzepisujTytulDoOpisu).HasColumnName("fin_PrzepisujTytulDoOpisu");
            entity.Property(e => e.FinRodzajOdsetek).HasColumnName("fin_RodzajOdsetek");
            entity.Property(e => e.FinSposobZaplaty)
                .HasDefaultValue(2)
                .HasColumnName("fin_SposobZaplaty");
            entity.Property(e => e.FinStatus)
                .HasDefaultValue(1)
                .HasColumnName("fin_Status");
            entity.Property(e => e.FinStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("fin_StopaOdsetek");
            entity.Property(e => e.FinTypDok).HasColumnName("fin_TypDok");
            entity.Property(e => e.FinTypKursu).HasColumnName("fin_TypKursu");
            entity.Property(e => e.FinZaliczka)
                .HasDefaultValue(7)
                .HasColumnName("fin_Zaliczka");

            entity.HasOne(d => d.FinKartaNavigation).WithMany()
                .HasForeignKey(d => d.FinKartaId)
                .HasConstraintName("FK_dks_ParametrFinansowy_sl_FormaPlatnosci");

            entity.HasOne(d => d.FinParamEwid).WithMany()
                .HasForeignKey(d => d.FinParamEwidId)
                .HasConstraintName("FK_dks_ParametrFinansowy_par__Ewid");
        });

        modelBuilder.Entity<DnkNotaDokKorygowane>(entity =>
        {
            entity.HasKey(e => e.DnkdId);

            entity.ToTable("dnk_NotaDokKorygowane");

            entity.Property(e => e.DnkdId)
                .ValueGeneratedNever()
                .HasColumnName("dnkd_Id");
            entity.Property(e => e.DnkdIdDok).HasColumnName("dnkd_IdDok");
            entity.Property(e => e.DnkdIdNota).HasColumnName("dnkd_IdNota");

            entity.HasOne(d => d.DnkdIdNotaNavigation).WithMany(p => p.DnkNotaDokKorygowanes)
                .HasForeignKey(d => d.DnkdIdNota)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dnk_NotaDokKorygowane_dnk__NotaKorygujaca");
        });

        modelBuilder.Entity<DnkNotaKorygujaca>(entity =>
        {
            entity.HasKey(e => e.DnkId);

            entity.ToTable("dnk__NotaKorygujaca", tb =>
                {
                    tb.HasTrigger("tr_NotaKorygDokument_Inserting");
                    tb.HasTrigger("tr_ZapisCzasuNK");
                });

            entity.Property(e => e.DnkId)
                .ValueGeneratedNever()
                .HasColumnName("dnk_Id");
            entity.Property(e => e.DnkDataPotw)
                .HasColumnType("datetime")
                .HasColumnName("dnk_DataPotw");
            entity.Property(e => e.DnkDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dnk_DataWyst");
            entity.Property(e => e.DnkDokKorDataSprzedazy)
                .HasColumnType("datetime")
                .HasColumnName("dnk_DokKorDataSprzedazy");
            entity.Property(e => e.DnkDokKorDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("dnk_DokKorDataWystawienia");
            entity.Property(e => e.DnkDokKorDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dnk_DokKorDataZakonczenia");
            entity.Property(e => e.DnkDokKorNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dnk_DokKorNrDok");
            entity.Property(e => e.DnkDokKorNrDokNab)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dnk_DokKorNrDokNab");
            entity.Property(e => e.DnkKatId).HasColumnName("dnk_KatId");
            entity.Property(e => e.DnkMagId).HasColumnName("dnk_MagId");
            entity.Property(e => e.DnkMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dnk_MscWyst");
            entity.Property(e => e.DnkNr).HasColumnName("dnk_Nr");
            entity.Property(e => e.DnkNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dnk_NrPelny");
            entity.Property(e => e.DnkNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dnk_NrRoz");
            entity.Property(e => e.DnkOdbiorcaAdreshId).HasColumnName("dnk_OdbiorcaAdreshId");
            entity.Property(e => e.DnkOdbiorcaId).HasColumnName("dnk_OdbiorcaId");
            entity.Property(e => e.DnkOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dnk_Odebral");
            entity.Property(e => e.DnkPersonelId).HasColumnName("dnk_PersonelId");
            entity.Property(e => e.DnkPodtyp).HasColumnName("dnk_Podtyp");
            entity.Property(e => e.DnkPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dnk_Podtytul");
            entity.Property(e => e.DnkPotwierdzenie).HasColumnName("dnk_Potwierdzenie");
            entity.Property(e => e.DnkTrescDoKor)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dnk_TrescDoKor");
            entity.Property(e => e.DnkTrescPoKor)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dnk_TrescPoKor");
            entity.Property(e => e.DnkTyp).HasColumnName("dnk_Typ");
            entity.Property(e => e.DnkTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dnk_Tytul");
            entity.Property(e => e.DnkUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dnk_Uwagi");
            entity.Property(e => e.DnkWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dnk_Wystawil");

            entity.HasOne(d => d.DnkKat).WithMany(p => p.DnkNotaKorygujacas)
                .HasForeignKey(d => d.DnkKatId)
                .HasConstraintName("FK_dnk__NotaKorygujaca_sl_Kategoria");
        });

        modelBuilder.Entity<DokDokBiblioteka>(entity =>
        {
            entity.HasKey(e => e.DdkbId);

            entity.ToTable("dok_DokBiblioteka");

            entity.HasIndex(e => e.DdkbIdDokumentu, "IX_dok_DokBiblioteka_IdDokumentu");

            entity.Property(e => e.DdkbId)
                .ValueGeneratedNever()
                .HasColumnName("ddkb_Id");
            entity.Property(e => e.DdkbDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("ddkb_DataModyfikacji");
            entity.Property(e => e.DdkbIdDokumentu).HasColumnName("ddkb_IdDokumentu");
            entity.Property(e => e.DdkbIdKategorii).HasColumnName("ddkb_IdKategorii");
            entity.Property(e => e.DdkbIdPersonelu).HasColumnName("ddkb_IdPersonelu");
            entity.Property(e => e.DdkbNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ddkb_Nazwa");
            entity.Property(e => e.DdkbOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ddkb_Opis");
            entity.Property(e => e.DdkbTresc)
                .HasColumnType("image")
                .HasColumnName("ddkb_Tresc");
            entity.Property(e => e.DdkbTyp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ddkb_Typ");
            entity.Property(e => e.DdkbZablokowany).HasColumnName("ddkb_Zablokowany");

            entity.HasOne(d => d.DdkbIdDokumentuNavigation).WithMany(p => p.DokDokBibliotekas)
                .HasForeignKey(d => d.DdkbIdDokumentu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_DokBiblioteka_dok__Dokument");

            entity.HasOne(d => d.DdkbIdKategoriiNavigation).WithMany(p => p.DokDokBibliotekas)
                .HasForeignKey(d => d.DdkbIdKategorii)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_DokBiblioteka_sl_KategoriaDokumentu");

            entity.HasOne(d => d.DdkbIdPersoneluNavigation).WithMany(p => p.DokDokBibliotekas)
                .HasForeignKey(d => d.DdkbIdPersonelu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_DokBiblioteka_pd_Uzytkownik");
        });

        modelBuilder.Entity<DokDokCza>(entity =>
        {
            entity.HasKey(e => e.DgId);

            entity.ToTable("dok_DokCzas");

            entity.Property(e => e.DgId).HasColumnName("dg_Id");
            entity.Property(e => e.DgDataUtworzenia)
                .HasColumnType("datetime")
                .HasColumnName("dg_DataUtworzenia");
            entity.Property(e => e.DgIdDokumentu).HasColumnName("dg_Id_dokumentu");
            entity.Property(e => e.DgRodzaj).HasColumnName("dg_Rodzaj");
        });

        modelBuilder.Entity<DokDokument>(entity =>
        {
            entity.HasKey(e => e.DokId);

            entity.ToTable("dok__Dokument", tb =>
                {
                    tb.HasTrigger("tr_DokDokument_CheckUniqueNumerKSeF");
                    tb.HasTrigger("tr_DokDokument_CheckUniqueWegielNumerOswiadczenia");
                    tb.HasTrigger("tr_DokDokument_Deleting");
                    tb.HasTrigger("tr_DokDokument_Inserting");
                    tb.HasTrigger("tr_ZapisCzasu");
                });

            entity.HasIndex(e => new { e.DokDoDokId, e.DokTyp, e.DokPodtyp }, "IX_dok__Dokument");

            entity.HasIndex(e => e.DokDataWyst, "IX_dok__Dokument_1");

            entity.HasIndex(e => new { e.DokTyp, e.DokMagId, e.DokNr, e.DokNrRoz, e.DokDataWyst }, "IX_dok__Dokument_2");

            entity.HasIndex(e => e.DokDataOtrzym, "IX_dok__Dokument_3");

            entity.HasIndex(e => new { e.DokTyp, e.DokPodtyp, e.DokNrPelnyOryg, e.DokPlatnikId }, "IX_dok__Dokument_4");

            entity.HasIndex(e => new { e.DokId, e.DokNrPelny, e.DokDoDokNrPelny, e.DokOdbiorcaAdreshId }, "IX_dok__Dokument_5");

            entity.HasIndex(e => new { e.DokStatus, e.DokId }, "IX_dok__Dokument_6");

            entity.HasIndex(e => new { e.DokTyp, e.DokId }, "IX_dok__Dokument_7");

            entity.HasIndex(e => new { e.DokPlatnikId, e.DokId, e.DokOdbiorcaId }, "IX_dok__Dokument_8");

            entity.Property(e => e.DokId)
                .ValueGeneratedNever()
                .HasColumnName("dok_Id");
            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokBladKseF)
                .IsUnicode(false)
                .HasColumnName("dok_BladKSeF");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek)
                .HasDefaultValue(1)
                .HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokCzasPrzewozuTransportu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_CzasPrzewozuTransportu");
            entity.Property(e => e.DokCzasWysylkiTransportu)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_CzasWysylkiTransportu");
            entity.Property(e => e.DokCzekaNaKseF).HasColumnName("dok_CzekaNaKSeF");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataNumeruKseF)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataNumeruKSeF");
            entity.Property(e => e.DokDataNumeruKseForyg)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_DataNumeruKSeFOryg");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataRozpoczeciaPrzetwarzaniaKseF)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataRozpoczeciaPrzetwarzaniaKSeF");
            entity.Property(e => e.DokDataUjeciaKorekty)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataUjeciaKorekty");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataWystawieniaKseF)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWystawieniaKSeF");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDoNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_DoNumerKSeF");
            entity.Property(e => e.DokDodatkoweInfoRodzajuTransportu)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_DodatkoweInfoRodzajuTransportu");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokFiskalizacjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_FiskalizacjaData");
            entity.Property(e => e.DokFiskalizacjaIdUrzadzenia)
                .HasMaxLength(20)
                .HasColumnName("dok_FiskalizacjaIdUrzadzenia");
            entity.Property(e => e.DokFiskalizacjaNumer)
                .HasMaxLength(30)
                .HasColumnName("dok_FiskalizacjaNumer");
            entity.Property(e => e.DokFormaDokumentowania).HasColumnName("dok_FormaDokumentowania");
            entity.Property(e => e.DokIdPanstwaKonsumenta).HasColumnName("dok_IdPanstwaKonsumenta");
            entity.Property(e => e.DokIdPanstwaRozpoczeciaWysylki).HasColumnName("dok_IdPanstwaRozpoczeciaWysylki");
            entity.Property(e => e.DokIdPrzetwarzaniaKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_IdPrzetwarzaniaKSeF");
            entity.Property(e => e.DokIdPrzyczynyZwolnieniaZvat).HasColumnName("dok_IdPrzyczynyZwolnieniaZVAT");
            entity.Property(e => e.DokIdSesjiKasowej)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokInformacjeDodatkowe)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dok_InformacjeDodatkowe");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas)
                .HasDefaultValue(true)
                .HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKodRodzajuTransportu).HasColumnName("dok_KodRodzajuTransportu");
            entity.Property(e => e.DokKorektaDanychNabywcy).HasColumnName("dok_KorektaDanychNabywcy");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKartaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwKartaPrzedplata");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_NumerKSeF");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodlegaOplSpec)
                .HasDefaultValue(true)
                .HasColumnName("dok_PodlegaOplSpec");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokSesjaKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_SesjaKSeF");
            entity.Property(e => e.DokSesjaKseFid).HasColumnName("dok_SesjaKSeFId");
            entity.Property(e => e.DokSrodowiskoKseF).HasColumnName("dok_SrodowiskoKSeF");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx)
                .HasDefaultValue(0)
                .HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKseF).HasColumnName("dok_StatusKSeF");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTerminalId)
                .HasMaxLength(20)
                .HasColumnName("dok_TermPlatTerminalId");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypDatyUjeciaKorekty).HasColumnName("dok_TypDatyUjeciaKorekty");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVatRozliczanyPrzezUslugobiorce).HasColumnName("dok_VatRozliczanyPrzezUslugobiorce");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasDefaultValue(1m)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek)
                .HasDefaultValue(1)
                .HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWegielNumerOswiadczenia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_WegielNumerOswiadczenia");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokXmlHashKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_XmlHashKSeF");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.DokZnacznikiGtunaPozycji).HasColumnName("dok_ZnacznikiGTUNaPozycji");

            entity.HasOne(d => d.DokIdPanstwaKonsumentaNavigation).WithMany(p => p.DokDokumentDokIdPanstwaKonsumentaNavigations)
                .HasForeignKey(d => d.DokIdPanstwaKonsumenta)
                .HasConstraintName("FK_dok__Dokument_sl_Panstwo1");

            entity.HasOne(d => d.DokIdPanstwaRozpoczeciaWysylkiNavigation).WithMany(p => p.DokDokumentDokIdPanstwaRozpoczeciaWysylkiNavigations)
                .HasForeignKey(d => d.DokIdPanstwaRozpoczeciaWysylki)
                .HasConstraintName("FK_dok__Dokument_sl_Panstwo");

            entity.HasOne(d => d.DokIdPrzyczynyZwolnieniaZvatNavigation).WithMany(p => p.DokDokuments)
                .HasForeignKey(d => d.DokIdPrzyczynyZwolnieniaZvat)
                .HasConstraintName("FK_dok__Dokument_sl_ZwolnienieZVAT");

            entity.HasOne(d => d.DokIdSesjiKasowejNavigation).WithMany(p => p.DokDokuments)
                .HasForeignKey(d => d.DokIdSesjiKasowej)
                .HasConstraintName("FK__dok__Dokument_sk_Sesja");

            entity.HasOne(d => d.DokKat).WithMany(p => p.DokDokuments)
                .HasForeignKey(d => d.DokKatId)
                .HasConstraintName("FK_dok__Dokument_sl_Kategoria");

            entity.HasOne(d => d.DokKodRodzajuTransportuNavigation).WithMany(p => p.DokDokuments)
                .HasForeignKey(d => d.DokKodRodzajuTransportu)
                .HasConstraintName("FK_dok__Dokument_sl_KodRodzajuTransportuEDD");

            entity.HasOne(d => d.DokNrRachunkuBankowegoPdmNavigation).WithMany(p => p.DokDokuments)
                .HasForeignKey(d => d.DokNrRachunkuBankowegoPdm)
                .HasConstraintName("FK_rb__RachBankowy_dok__Dokument");

            entity.HasOne(d => d.DokSesjaKseFNavigation).WithMany(p => p.DokDokuments)
                .HasForeignKey(d => d.DokSesjaKseFid)
                .HasConstraintName("FK__dok__Dokument_ksef_Sesja");
        });

        modelBuilder.Entity<DokDokumentDefiniowalny>(entity =>
        {
            entity.HasKey(e => e.DdId).HasName("PK_DokumentDefiniowalny");

            entity.ToTable("dok_DokumentDefiniowalny");

            entity.Property(e => e.DdId)
                .ValueGeneratedNever()
                .HasColumnName("dd_Id");
            entity.Property(e => e.DdDokPodtyp).HasColumnName("dd_DokPodtyp");
            entity.Property(e => e.DdDokTyp).HasColumnName("dd_DokTyp");
            entity.Property(e => e.DdIdOperacji).HasColumnName("dd_IdOperacji");
            entity.Property(e => e.DdIdParTyp).HasColumnName("dd_IdParTyp");
            entity.Property(e => e.DdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dd_Nazwa");
            entity.Property(e => e.DdPokazFiltr).HasColumnName("dd_PokazFiltr");
            entity.Property(e => e.DdSkrot)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dd_Skrot");
            entity.Property(e => e.DdUpidAdd).HasColumnName("dd_UpidAdd");
            entity.Property(e => e.DdUpidDelete).HasColumnName("dd_UpidDelete");
            entity.Property(e => e.DdUpidEdit).HasColumnName("dd_UpidEdit");
            entity.Property(e => e.DdUpidPrint).HasColumnName("dd_UpidPrint");
            entity.Property(e => e.DdUwzglednionyJpk).HasColumnName("dd_UwzglednionyJpk");
            entity.Property(e => e.DdUzywaUprawnien).HasColumnName("dd_UzywaUprawnien");
            entity.Property(e => e.DdWzwId)
                .HasDefaultValue(-1)
                .HasColumnName("dd_WzwId");

            entity.HasOne(d => d.DdIdParTypNavigation).WithMany(p => p.DokDokumentDefiniowalnies)
                .HasForeignKey(d => d.DdIdParTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_DokumentDefiniowalny_par_Typ");
        });

        modelBuilder.Entity<DokDokumentDefiniowalnyOperacja>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_DokumentDefiniowalnyOperacja");

            entity.Property(e => e.DdoIdDd).HasColumnName("ddo_IdDD");
            entity.Property(e => e.DdoIdUio).HasColumnName("ddo_IdUio");
            entity.Property(e => e.DdoTypOperacji).HasColumnName("ddo_TypOperacji");

            entity.HasOne(d => d.DdoIdDdNavigation).WithMany()
                .HasForeignKey(d => d.DdoIdDd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_DokumentDefiniowalnyOperacja_dok_DokumentDefiniowalny");

            entity.HasOne(d => d.DdoIdUioNavigation).WithMany()
                .HasForeignKey(d => d.DdoIdUio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_DokumentDefiniowalnyOperacja_ui_Operacja");
        });

        modelBuilder.Entity<DokDokumentDefiniowalnyWzw>(entity =>
        {
            entity.HasKey(e => e.DdwId);

            entity.ToTable("dok_DokumentDefiniowalnyWzw");

            entity.Property(e => e.DdwId)
                .ValueGeneratedNever()
                .HasColumnName("ddw_Id");
            entity.Property(e => e.DdwDokDefId).HasColumnName("ddw_DokDefId");
            entity.Property(e => e.DdwNazwaKomputera)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ddw_NazwaKomputera");
            entity.Property(e => e.DdwWzorzecId).HasColumnName("ddw_WzorzecId");
        });

        modelBuilder.Entity<DokDokumentKonwersja131Sp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_DokumentKonwersja131SP2");

            entity.Property(e => e.DokkId).HasColumnName("dokk_Id");
            entity.Property(e => e.DokkStatusKsieg).HasColumnName("dokk_StatusKsieg");
            entity.Property(e => e.DokkWartMag)
                .HasColumnType("money")
                .HasColumnName("dokk_WartMag");
            entity.Property(e => e.DokkWartMagP)
                .HasColumnType("money")
                .HasColumnName("dokk_WartMagP");
            entity.Property(e => e.DokkWartMagR)
                .HasColumnType("money")
                .HasColumnName("dokk_WartMagR");
            entity.Property(e => e.DokkWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dokk_WartOpWyd");
            entity.Property(e => e.DokkWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dokk_WartOpZwr");
            entity.Property(e => e.DokkWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dokk_WartTwBrutto");
            entity.Property(e => e.DokkWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dokk_WartTwNetto");
            entity.Property(e => e.DokkWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dokk_WartUsBrutto");
            entity.Property(e => e.DokkWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dokk_WartUsNetto");
        });

        modelBuilder.Entity<DokDokumentTechniczny>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_DokumentTechniczny");

            entity.Property(e => e.DtPrzychodRozchodId).HasColumnName("dt_PrzychodRozchodId");
            entity.Property(e => e.DtPrzyjecieMagazynoweId).HasColumnName("dt_PrzyjecieMagazynoweId");

            entity.HasOne(d => d.DtPrzychodRozchod).WithMany()
                .HasForeignKey(d => d.DtPrzychodRozchodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_DokumentTechniczny_dok__Dokument_PrzychodRozchod");

            entity.HasOne(d => d.DtPrzyjecieMagazynowe).WithMany()
                .HasForeignKey(d => d.DtPrzyjecieMagazynoweId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_DokumentTechniczny_dok__Dokument_PrzyjecieMagazynowe");
        });

        modelBuilder.Entity<DokFunduszPromocji>(entity =>
        {
            entity.HasKey(e => e.DfpId);

            entity.ToTable("dok_FunduszPromocji");

            entity.Property(e => e.DfpId)
                .ValueGeneratedNever()
                .HasColumnName("dfp_Id");
            entity.Property(e => e.DfpDokId).HasColumnName("dfp_DokId");
            entity.Property(e => e.DfpFundId).HasColumnName("dfp_FundId");
            entity.Property(e => e.DfpFundNazwa)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("dfp_FundNazwa");
            entity.Property(e => e.DfpPodstawaJm)
                .HasColumnType("money")
                .HasColumnName("dfp_PodstawaJm");
            entity.Property(e => e.DfpPodstawaNetto)
                .HasColumnType("money")
                .HasColumnName("dfp_PodstawaNetto");
            entity.Property(e => e.DfpWartosc)
                .HasColumnType("money")
                .HasColumnName("dfp_Wartosc");
        });

        modelBuilder.Entity<DokMagDysp>(entity =>
        {
            entity.HasKey(e => new { e.MdId, e.MdPozId });

            entity.ToTable("dok_MagDysp", tb =>
                {
                    tb.HasTrigger("tr_dok_MagDysp_Deleting");
                    tb.HasTrigger("tr_dok_MagDysp_Inserting");
                });

            entity.HasIndex(e => e.MdPozId, "IX_dok_MagDysp");

            entity.Property(e => e.MdId).HasColumnName("md_Id");
            entity.Property(e => e.MdPozId).HasColumnName("md_PozId");
            entity.Property(e => e.MdCzas)
                .HasColumnType("datetime")
                .HasColumnName("md_Czas");
            entity.Property(e => e.MdDoId).HasColumnName("md_DoId");
            entity.Property(e => e.MdDoIlosc)
                .HasColumnType("money")
                .HasColumnName("md_DoIlosc");
            entity.Property(e => e.MdIlosc)
                .HasColumnType("money")
                .HasColumnName("md_Ilosc");
            entity.Property(e => e.MdSpid).HasColumnName("md_spid");

            entity.HasOne(d => d.Md).WithMany(p => p.DokMagDysps)
                .HasForeignKey(d => d.MdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_MagDysp_dok_MagRuch");
        });

        modelBuilder.Entity<DokMagRuch>(entity =>
        {
            entity.HasKey(e => e.MrId);

            entity.ToTable("dok_MagRuch");

            entity.HasIndex(e => e.MrDoId, "IX_dok_MagRuch");

            entity.HasIndex(e => e.MrSeriaId, "IX_dok_MagRuch_1");

            entity.HasIndex(e => new { e.MrTowId, e.MrMagId, e.MrPozostalo }, "IX_dok_MagRuch_2");

            entity.HasIndex(e => e.MrPozId, "IX_dok_MagRuch_3");

            entity.Property(e => e.MrId)
                .ValueGeneratedNever()
                .HasColumnName("mr_Id");
            entity.Property(e => e.MrCena)
                .HasColumnType("money")
                .HasColumnName("mr_Cena");
            entity.Property(e => e.MrData)
                .HasColumnType("datetime")
                .HasColumnName("mr_Data");
            entity.Property(e => e.MrDoId).HasColumnName("mr_DoId");
            entity.Property(e => e.MrIlosc)
                .HasColumnType("money")
                .HasColumnName("mr_Ilosc");
            entity.Property(e => e.MrMagId).HasColumnName("mr_MagId");
            entity.Property(e => e.MrPozId).HasColumnName("mr_PozId");
            entity.Property(e => e.MrPozostalo)
                .HasColumnType("money")
                .HasColumnName("mr_Pozostalo");
            entity.Property(e => e.MrSeriaId).HasColumnName("mr_SeriaId");
            entity.Property(e => e.MrTermin)
                .HasColumnType("datetime")
                .HasColumnName("mr_Termin");
            entity.Property(e => e.MrTowId).HasColumnName("mr_TowId");

            entity.HasOne(d => d.MrPoz).WithMany(p => p.DokMagRuches)
                .HasForeignKey(d => d.MrPozId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_MagRuch_dok_Pozycja");
        });

        modelBuilder.Entity<DokMagWart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_MagWart");

            entity.HasIndex(e => e.MwSeriaId, "IX_dok_MagWart");

            entity.HasIndex(e => e.MwPozId, "IX_dok_MagWart_1");

            entity.Property(e => e.MwCena)
                .HasColumnType("money")
                .HasColumnName("mw_Cena");
            entity.Property(e => e.MwData)
                .HasColumnType("datetime")
                .HasColumnName("mw_Data");
            entity.Property(e => e.MwPozId).HasColumnName("mw_PozId");
            entity.Property(e => e.MwSeriaId).HasColumnName("mw_SeriaId");

            entity.HasOne(d => d.MwPoz).WithMany()
                .HasForeignKey(d => d.MwPozId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_MagWart_dok_Pozycja");
        });

        modelBuilder.Entity<DokMagWartKkdr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_MagWartKKDR");

            entity.HasIndex(e => e.MwkkdSeriaId, "IX_dok_MagWartKKDR");

            entity.HasIndex(e => e.MwkkdPozId, "IX_dok_MagWartKKDR_1");

            entity.Property(e => e.MwkkdData)
                .HasColumnType("datetime")
                .HasColumnName("mwkkd_Data");
            entity.Property(e => e.MwkkdDelta)
                .HasColumnType("money")
                .HasColumnName("mwkkd_Delta");
            entity.Property(e => e.MwkkdPozId).HasColumnName("mwkkd_PozId");
            entity.Property(e => e.MwkkdSeriaId).HasColumnName("mwkkd_SeriaId");

            entity.HasOne(d => d.MwkkdPoz).WithMany()
                .HasForeignKey(d => d.MwkkdPozId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_MagWartKKDR_dok_Pozycja");
        });

        modelBuilder.Entity<DokOznaczeniaJpkVat>(entity =>
        {
            entity.HasKey(e => e.DojId);

            entity.ToTable("dok_OznaczeniaJpkVat");

            entity.HasIndex(e => new { e.DojIdObiektu, e.DojIdDokumentu }, "IX_dok_OznaczeniaJpkVat");

            entity.Property(e => e.DojId).HasColumnName("doj_Id");
            entity.Property(e => e.DojBMpvProwizja).HasColumnName("doj_B_MPV_PROWIZJA");
            entity.Property(e => e.DojBSpv).HasColumnName("doj_B_SPV");
            entity.Property(e => e.DojBSpvDostawa).HasColumnName("doj_B_SPV_DOSTAWA");
            entity.Property(e => e.DojEe).HasColumnName("doj_EE");
            entity.Property(e => e.DojFp).HasColumnName("doj_FP");
            entity.Property(e => e.DojGtu1).HasColumnName("doj_GTU1");
            entity.Property(e => e.DojGtu10).HasColumnName("doj_GTU10");
            entity.Property(e => e.DojGtu11).HasColumnName("doj_GTU11");
            entity.Property(e => e.DojGtu12).HasColumnName("doj_GTU12");
            entity.Property(e => e.DojGtu13).HasColumnName("doj_GTU13");
            entity.Property(e => e.DojGtu2).HasColumnName("doj_GTU2");
            entity.Property(e => e.DojGtu3).HasColumnName("doj_GTU3");
            entity.Property(e => e.DojGtu4).HasColumnName("doj_GTU4");
            entity.Property(e => e.DojGtu5).HasColumnName("doj_GTU5");
            entity.Property(e => e.DojGtu6).HasColumnName("doj_GTU6");
            entity.Property(e => e.DojGtu7).HasColumnName("doj_GTU7");
            entity.Property(e => e.DojGtu8).HasColumnName("doj_GTU8");
            entity.Property(e => e.DojGtu9).HasColumnName("doj_GTU9");
            entity.Property(e => e.DojI42).HasColumnName("doj_I_42");
            entity.Property(e => e.DojI63).HasColumnName("doj_I_63");
            entity.Property(e => e.DojIdDokumentu).HasColumnName("doj_IdDokumentu");
            entity.Property(e => e.DojIdObiektu).HasColumnName("doj_IdObiektu");
            entity.Property(e => e.DojIed).HasColumnName("doj_IED");
            entity.Property(e => e.DojMpp).HasColumnName("doj_MPP");
            entity.Property(e => e.DojMrT).HasColumnName("doj_MR_T");
            entity.Property(e => e.DojMrUz).HasColumnName("doj_MR_UZ");
            entity.Property(e => e.DojRo).HasColumnName("doj_RO");
            entity.Property(e => e.DojSw).HasColumnName("doj_SW");
            entity.Property(e => e.DojTp).HasColumnName("doj_TP");
            entity.Property(e => e.DojTtD).HasColumnName("doj_TT_D");
            entity.Property(e => e.DojTtWnt).HasColumnName("doj_TT_WNT");
            entity.Property(e => e.DojWew).HasColumnName("doj_WEW");
            entity.Property(e => e.DojWstoEe).HasColumnName("doj_WSTO_EE");
        });

        modelBuilder.Entity<DokParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_Parametr");

            entity.HasIndex(e => new { e.DkpTyp, e.DkpPodtyp, e.DkpParamEwidId, e.DkpDefiniowalnyId }, "IX_dok_Parametr").IsUnique();

            entity.Property(e => e.DkpAutoAktualizacaCenTowaryKryteria)
                .HasDefaultValue(true)
                .HasColumnName("dkp_AutoAktualizacaCenTowaryKryteria");
            entity.Property(e => e.DkpAutoAktualizacaCenTylkoOstatni).HasColumnName("dkp_AutoAktualizacaCenTylkoOstatni");
            entity.Property(e => e.DkpAutoAktualizacjaCenKryterium).HasColumnName("dkp_AutoAktualizacjaCenKryterium");
            entity.Property(e => e.DkpAutoAktualizacjaCenKwota)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("dkp_AutoAktualizacjaCenKwota");
            entity.Property(e => e.DkpAutoAktualizacjaCenKwotaKryterium).HasColumnName("dkp_AutoAktualizacjaCenKwotaKryterium");
            entity.Property(e => e.DkpAutoAktualizacjaCenTryb).HasColumnName("dkp_AutoAktualizacjaCenTryb");
            entity.Property(e => e.DkpAutoZnacznikFpdlaJpkVat).HasColumnName("dkp_AutoZnacznikFPDlaJpkVat");
            entity.Property(e => e.DkpBankKatId).HasColumnName("dkp_BankKatId");
            entity.Property(e => e.DkpBlokadaDlaKontrahentaBezNip).HasColumnName("dkp_BlokadaDlaKontrahentaBezNIP");
            entity.Property(e => e.DkpBlokadaDlaPowielonegoNrOryg).HasColumnName("dkp_BlokadaDlaPowielonegoNrOryg");
            entity.Property(e => e.DkpBlokujDodajZwGdyFsd)
                .HasDefaultValue(true)
                .HasColumnName("dkp_BlokujDodajZwGdyFSd");
            entity.Property(e => e.DkpBlokujEdycjaFsd)
                .HasDefaultValue(true)
                .HasColumnName("dkp_BlokujEdycjaFSd");
            entity.Property(e => e.DkpBlokujPoprawPaGdyFsd)
                .HasDefaultValue(true)
                .HasColumnName("dkp_BlokujPoprawPaGdyFSd");
            entity.Property(e => e.DkpBlokujPoprawZwGdyFsd)
                .HasDefaultValue(true)
                .HasColumnName("dkp_BlokujPoprawZwGdyFSd");
            entity.Property(e => e.DkpBlokujUsunPaGdyFsd)
                .HasDefaultValue(true)
                .HasColumnName("dkp_BlokujUsunPaGdyFSd");
            entity.Property(e => e.DkpBlokujUsunZwGdyFsd)
                .HasDefaultValue(true)
                .HasColumnName("dkp_BlokujUsunZwGdyFSd");
            entity.Property(e => e.DkpBlokujZwykleZk).HasColumnName("dkp_BlokujZwykleZk");
            entity.Property(e => e.DkpCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dkp_CenyNarzut");
            entity.Property(e => e.DkpCenyPoziom).HasColumnName("dkp_CenyPoziom");
            entity.Property(e => e.DkpCenyPoziomZwr).HasColumnName("dkp_CenyPoziomZwr");
            entity.Property(e => e.DkpCenyPrecyzjaZwykla).HasColumnName("dkp_CenyPrecyzjaZwykla");
            entity.Property(e => e.DkpCenyTyp).HasColumnName("dkp_CenyTyp");
            entity.Property(e => e.DkpCzyDzialanieDodaj).HasColumnName("dkp_CzyDzialanieDodaj");
            entity.Property(e => e.DkpCzyDzialanieEdycja).HasColumnName("dkp_CzyDzialanieEdycja");
            entity.Property(e => e.DkpCzyEdycjaNabyciaMarza).HasColumnName("dkp_CzyEdycjaNabyciaMarza");
            entity.Property(e => e.DkpDataMagZakupuJakZakonczenia).HasColumnName("dkp_DataMagZakupuJakZakonczenia");
            entity.Property(e => e.DkpDataOtrzymaniaJakoDataDlaBlokadyOkresu).HasColumnName("dkp_DataOtrzymaniaJakoDataDlaBlokadyOkresu");
            entity.Property(e => e.DkpDefiniowalnyId).HasColumnName("dkp_DefiniowalnyId");
            entity.Property(e => e.DkpDoFsdWlaczZwrDet)
                .HasDefaultValue(true)
                .HasColumnName("dkp_DoFSdWlaczZwrDet");
            entity.Property(e => e.DkpDodajAkcyzeDoNetto).HasColumnName("dkp_DodajAkcyzeDoNetto");
            entity.Property(e => e.DkpDodajDoBiblioteki).HasColumnName("dkp_DodajDoBiblioteki");
            entity.Property(e => e.DkpDomyslnaKatDlaUsJednorazowych).HasColumnName("dkp_DomyslnaKatDlaUsJednorazowych");
            entity.Property(e => e.DkpDomyslnaKategoria).HasColumnName("dkp_DomyslnaKategoria");
            entity.Property(e => e.DkpDrukarkaId).HasColumnName("dkp_DrukarkaId");
            entity.Property(e => e.DkpDrukuj)
                .HasDefaultValue(true)
                .HasColumnName("dkp_Drukuj");
            entity.Property(e => e.DkpDrukujAuto).HasColumnName("dkp_DrukujAuto");
            entity.Property(e => e.DkpDrukujInwBezZapisu).HasColumnName("dkp_DrukujInwBezZapisu");
            entity.Property(e => e.DkpFiskalizuj)
                .HasDefaultValue(false)
                .HasColumnName("dkp_Fiskalizuj");
            entity.Property(e => e.DkpFmFiskVatId)
                .HasDefaultValue(100004)
                .HasColumnName("dkp_FmFiskVatId");
            entity.Property(e => e.DkpFormaDokumentowania).HasColumnName("dkp_FormaDokumentowania");
            entity.Property(e => e.DkpFwKontrolaTyp)
                .HasDefaultValue(1)
                .HasColumnName("dkp_FwKontrolaTyp");
            entity.Property(e => e.DkpFwKontrolaWieluFaktur)
                .HasDefaultValue(1)
                .HasColumnName("dkp_FwKontrolaWieluFaktur");
            entity.Property(e => e.DkpFwKorektyRoznicowo)
                .HasDefaultValue(true)
                .HasColumnName("dkp_FwKorektyRoznicowo");
            entity.Property(e => e.DkpFwOdliczenieAuto).HasColumnName("dkp_FwOdliczenieAuto");
            entity.Property(e => e.DkpFwPobierajPozycjezOo).HasColumnName("dkp_FwPobierajPozycjezOO");
            entity.Property(e => e.DkpFwVatTyp)
                .HasDefaultValue(1)
                .HasColumnName("dkp_FwVatTyp");
            entity.Property(e => e.DkpFwWszystkiePozycje).HasColumnName("dkp_FwWszystkiePozycje");
            entity.Property(e => e.DkpInsxKhRodzaj)
                .HasDefaultValue(-2)
                .HasColumnName("dkp_InsxKhRodzaj");
            entity.Property(e => e.DkpInsxKhSortuj).HasColumnName("dkp_InsxKhSortuj");
            entity.Property(e => e.DkpInsxKhWarunekAnd).HasColumnName("dkp_InsxKhWarunekAnd");
            entity.Property(e => e.DkpInsxLiczbaPozKh)
                .HasDefaultValue(20)
                .HasColumnName("dkp_InsxLiczbaPozKh");
            entity.Property(e => e.DkpInsxLiczbaPozTw)
                .HasDefaultValue(15)
                .HasColumnName("dkp_InsxLiczbaPozTw");
            entity.Property(e => e.DkpInsxTwBezZerowych).HasColumnName("dkp_InsxTwBezZerowych");
            entity.Property(e => e.DkpInsxTwRezerwacje).HasColumnName("dkp_InsxTwRezerwacje");
            entity.Property(e => e.DkpInsxTwSortuj).HasColumnName("dkp_InsxTwSortuj");
            entity.Property(e => e.DkpInsxTwWarunekAnd).HasColumnName("dkp_InsxTwWarunekAnd");
            entity.Property(e => e.DkpInwCenyIwz).HasColumnName("dkp_InwCenyIWz");
            entity.Property(e => e.DkpInwDomyslnyStan)
                .HasDefaultValue(2)
                .HasColumnName("dkp_InwDomyslnyStan");
            entity.Property(e => e.DkpInwDomyslnyStanWartosc)
                .HasDefaultValue(1m)
                .HasColumnType("money")
                .HasColumnName("dkp_InwDomyslnyStanWartosc");
            entity.Property(e => e.DkpInwKodyDostaw).HasColumnName("dkp_InwKodyDostaw");
            entity.Property(e => e.DkpInwLiczbaDniDoIgnorowaniaOstrzezeniaStatusMag)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("dkp_InwLiczbaDniDoIgnorowaniaOstrzezeniaStatusMag");
            entity.Property(e => e.DkpInwPokazRaport).HasColumnName("dkp_InwPokazRaport");
            entity.Property(e => e.DkpInwRaportNiezerowe).HasColumnName("dkp_InwRaportNiezerowe");
            entity.Property(e => e.DkpInwStatusMagOstrzegaj)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("dkp_InwStatusMagOstrzegaj");
            entity.Property(e => e.DkpInwTrybAuto).HasColumnName("dkp_InwTrybAuto");
            entity.Property(e => e.DkpInwTrybZwykly)
                .HasDefaultValue(true)
                .HasColumnName("dkp_InwTrybZwykly");
            entity.Property(e => e.DkpInwZbWydrukWartosciRoznicStanowZdokMag).HasColumnName("dkp_InwZbWydrukWartosciRoznicStanowZDokMag");
            entity.Property(e => e.DkpIwzEdycjaPwRw).HasColumnName("dkp_IWzEdycjaPwRw");
            entity.Property(e => e.DkpKasaKatId).HasColumnName("dkp_KasaKatId");
            entity.Property(e => e.DkpKatId).HasColumnName("dkp_KatId");
            entity.Property(e => e.DkpKatIdFsu).HasColumnName("dkp_KatIdFSu");
            entity.Property(e => e.DkpKodRodzajuTransakcji).HasColumnName("dkp_KodRodzajuTransakcji");
            entity.Property(e => e.DkpKontrolaFsdDoPabezNip).HasColumnName("dkp_KontrolaFSdDoPABezNIP");
            entity.Property(e => e.DkpKontrolaFsdNipMaxKwota).HasColumnName("dkp_KontrolaFSdNipMaxKwota");
            entity.Property(e => e.DkpKontrolaOkrDokMagFk).HasColumnName("dkp_KontrolaOkrDokMagFk");
            entity.Property(e => e.DkpKontrolaPozycjiIwc).HasColumnName("dkp_KontrolaPozycjiIWc");
            entity.Property(e => e.DkpKontrolaWart).HasColumnName("dkp_KontrolaWart");
            entity.Property(e => e.DkpKontrolaWystDokWaluta)
                .HasDefaultValue(1)
                .HasColumnName("dkp_KontrolaWystDokWaluta");
            entity.Property(e => e.DkpKorektaN).HasColumnName("dkp_KorektaN");
            entity.Property(e => e.DkpKsefWydrukBezNrBlokujOstrzegaj).HasColumnName("dkp_KsefWydrukBezNrBlokujOstrzegaj");
            entity.Property(e => e.DkpKsefWydrukBezNrTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dkp_KsefWydrukBezNrTytul");
            entity.Property(e => e.DkpKsefWydrukowanyBlokujOstrzegaj).HasColumnName("dkp_KsefWydrukowanyBlokujOstrzegaj");
            entity.Property(e => e.DkpMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkp_MscWyst");
            entity.Property(e => e.DkpMscWystTyp).HasColumnName("dkp_MscWystTyp");
            entity.Property(e => e.DkpNalZob).HasColumnName("dkp_NalZob");
            entity.Property(e => e.DkpNaliczajFunduszePromocji).HasColumnName("dkp_NaliczajFunduszePromocji");
            entity.Property(e => e.DkpNieDrukujDokumentu).HasColumnName("dkp_NieDrukujDokumentu");
            entity.Property(e => e.DkpNiePrzenosUwagZam).HasColumnName("dkp_NiePrzenosUwagZam");
            entity.Property(e => e.DkpNzokres)
                .HasDefaultValue(19)
                .HasColumnName("dkp_NZOkres");
            entity.Property(e => e.DkpNztransakcjaVat).HasColumnName("dkp_NZTransakcjaVAT");
            entity.Property(e => e.DkpOplataCukrowaDodawajDoCeny).HasColumnName("dkp_OplataCukrowaDodawajDoCeny");
            entity.Property(e => e.DkpOplataCukrowaDodawajDoCenyNieOgraniczaj).HasColumnName("dkp_OplataCukrowaDodawajDoCenyNieOgraniczaj");
            entity.Property(e => e.DkpOplataCukrowaNaliczaj).HasColumnName("dkp_OplataCukrowaNaliczaj");
            entity.Property(e => e.DkpParamEwidId).HasColumnName("dkp_ParamEwidId");
            entity.Property(e => e.DkpPlaOdb)
                .HasDefaultValue(true)
                .HasColumnName("dkp_PlaOdb");
            entity.Property(e => e.DkpPlaOdbSql)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("dkp_PlaOdbSql");
            entity.Property(e => e.DkpPlatnId).HasColumnName("dkp_PlatnId");
            entity.Property(e => e.DkpPobierajOstatniKurs)
                .HasDefaultValue(true)
                .HasColumnName("dkp_PobierajOstatniKurs");
            entity.Property(e => e.DkpPodpisBrakZgodyKh).HasColumnName("dkp_PodpisBrakZgodyKh");
            entity.Property(e => e.DkpPodpisujPdf).HasColumnName("dkp_PodpisujPDF");
            entity.Property(e => e.DkpPodtyp).HasColumnName("dkp_Podtyp");
            entity.Property(e => e.DkpPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkp_Podtytul");
            entity.Property(e => e.DkpPokazujOdbiorceWsekcjiNabywcy).HasColumnName("dkp_PokazujOdbiorceWSekcjiNabywcy");
            entity.Property(e => e.DkpPozDomyslnyStan)
                .HasDefaultValue(2)
                .HasColumnName("dkp_PozDomyslnyStan");
            entity.Property(e => e.DkpPozDomyslnyStanWartosc)
                .HasDefaultValueSql("((1.0))")
                .HasColumnType("money")
                .HasColumnName("dkp_PozDomyslnyStanWartosc");
            entity.Property(e => e.DkpPozTrybAuto).HasColumnName("dkp_PozTrybAuto");
            entity.Property(e => e.DkpPozTrybZwykly)
                .HasDefaultValue(true)
                .HasColumnName("dkp_PozTrybZwykly");
            entity.Property(e => e.DkpProceduraMarzy).HasColumnName("dkp_ProceduraMarzy");
            entity.Property(e => e.DkpProg).HasColumnName("dkp_Prog");
            entity.Property(e => e.DkpPrzeliczNetto)
                .HasDefaultValue(false)
                .HasColumnName("dkp_PrzeliczNetto");
            entity.Property(e => e.DkpPrzeliczajPozycjePoKazdejZmianieKontrahenta).HasColumnName("dkp_PrzeliczajPozycjePoKazdejZmianieKontrahenta");
            entity.Property(e => e.DkpPrzeniesUwagi).HasColumnName("dkp_PrzeniesUwagi");
            entity.Property(e => e.DkpPzkatId).HasColumnName("dkp_PZKatId");
            entity.Property(e => e.DkpPzpodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkp_PZPodtytul");
            entity.Property(e => e.DkpPztytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkp_PZTytul");
            entity.Property(e => e.DkpRejFiskPozycjeFaktZal).HasColumnName("dkp_RejFiskPozycjeFaktZal");
            entity.Property(e => e.DkpRejFiskUsuwajPozycjeZeroweFaktZb).HasColumnName("dkp_RejFiskUsuwajPozycjeZeroweFaktZb");
            entity.Property(e => e.DkpReszta)
                .HasDefaultValue(true)
                .HasColumnName("dkp_Reszta");
            entity.Property(e => e.DkpRezerwuj).HasColumnName("dkp_Rezerwuj");
            entity.Property(e => e.DkpRodzajDzialanieDodaj)
                .HasDefaultValue(1)
                .HasColumnName("dkp_RodzajDzialanieDodaj");
            entity.Property(e => e.DkpRodzajDzialanieEdycja)
                .HasDefaultValue(1)
                .HasColumnName("dkp_RodzajDzialanieEdycja");
            entity.Property(e => e.DkpRodzajOperacjiVat).HasColumnName("dkp_RodzajOperacjiVat");
            entity.Property(e => e.DkpRodzajZwrDetal).HasColumnName("dkp_RodzajZwrDetal");
            entity.Property(e => e.DkpSortuj)
                .HasDefaultValue(0)
                .HasColumnName("dkp_Sortuj");
            entity.Property(e => e.DkpSpLiczVat)
                .HasDefaultValue(0)
                .HasColumnName("dkp_SpLiczVAT");
            entity.Property(e => e.DkpSposobWystawiania).HasColumnName("dkp_SposobWystawiania");
            entity.Property(e => e.DkpSumGrid).HasColumnName("dkp_SumGrid");
            entity.Property(e => e.DkpSzablonDzialanieDodaj).HasColumnName("dkp_SzablonDzialanieDodaj");
            entity.Property(e => e.DkpSzablonDzialanieEdycja).HasColumnName("dkp_SzablonDzialanieEdycja");
            entity.Property(e => e.DkpSzuflada)
                .HasDefaultValue(false)
                .HasColumnName("dkp_Szuflada");
            entity.Property(e => e.DkpTerminalPlatniczy)
                .HasDefaultValue(false)
                .HasColumnName("dkp_TerminalPlatniczy");
            entity.Property(e => e.DkpTerminalPlatniczyAuto)
                .HasDefaultValue(false)
                .HasColumnName("dkp_TerminalPlatniczyAuto");
            entity.Property(e => e.DkpTerminalPlatniczyStatusBrakStanow).HasColumnName("dkp_TerminalPlatniczyStatusBrakStanow");
            entity.Property(e => e.DkpTerminalPlatniczyTryb).HasColumnName("dkp_TerminalPlatniczyTryb");
            entity.Property(e => e.DkpTyp).HasColumnName("dkp_Typ");
            entity.Property(e => e.DkpTypDatyKursu).HasColumnName("dkp_TypDatyKursu");
            entity.Property(e => e.DkpTypDatyUjeciaKorekty)
                .HasDefaultValue(2)
                .HasColumnName("dkp_TypDatyUjeciaKorekty");
            entity.Property(e => e.DkpTypKartotKhFsu).HasColumnName("dkp_TypKartotKhFSu");
            entity.Property(e => e.DkpTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkp_Tytul");
            entity.Property(e => e.DkpUtrzymujCeneNettoBrutto)
                .HasDefaultValue(1)
                .HasColumnName("dkp_UtrzymujCeneNettoBrutto");
            entity.Property(e => e.DkpUzyjAdresuDostawy).HasColumnName("dkp_UzyjAdresuDostawy");
            entity.Property(e => e.DkpVatMarza)
                .HasDefaultValue(true)
                .HasColumnName("dkp_VatMarza");
            entity.Property(e => e.DkpWalutaKursTyp).HasColumnName("dkp_WalutaKursTyp");
            entity.Property(e => e.DkpWartProgu)
                .HasColumnType("money")
                .HasColumnName("dkp_WartProgu");
            entity.Property(e => e.DkpWzkatId).HasColumnName("dkp_WZKatId");
            entity.Property(e => e.DkpWzpodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkp_WZPodtytul");
            entity.Property(e => e.DkpWztytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dkp_WZTytul");
            entity.Property(e => e.DkpZamRealizacjaZpodlWz)
                .HasDefaultValue(1)
                .HasColumnName("dkp_ZamRealizacjaZPodlWZ");
            entity.Property(e => e.DkpZamRoznMagNieGrupuj).HasColumnName("dkp_ZamRoznMagNieGrupuj");
            entity.Property(e => e.DkpZamRoznWartMin).HasColumnName("dkp_ZamRoznWartMin");
            entity.Property(e => e.DkpZamRoznicTrybRealiz).HasColumnName("dkp_ZamRoznicTrybRealiz");
            entity.Property(e => e.DkpZapiszKontynuuj).HasColumnName("dkp_ZapiszKontynuuj");
            entity.Property(e => e.DkpZaznaczajVatRozliczanyPrzezUslugobiorce).HasColumnName("dkp_ZaznaczajVatRozliczanyPrzezUslugobiorce");

            entity.HasOne(d => d.DkpParamEwid).WithMany()
                .HasForeignKey(d => d.DkpParamEwidId)
                .HasConstraintName("FK_dok_Parametr_par__Ewid");
        });

        modelBuilder.Entity<DokParametrDf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_ParametrDF");

            entity.HasIndex(e => new { e.DkdTyp, e.DkdPodtyp, e.DkdParamEwidId, e.DkdKomputer, e.DkdDefiniowalnyId }, "IX_dok_ParametrDF").IsUnique();

            entity.Property(e => e.DkdDefiniowalnyId).HasColumnName("dkd_DefiniowalnyId");
            entity.Property(e => e.DkdDrukarkaId).HasColumnName("dkd_DrukarkaId");
            entity.Property(e => e.DkdKomputer)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("dkd_Komputer");
            entity.Property(e => e.DkdParamEwidId).HasColumnName("dkd_ParamEwidId");
            entity.Property(e => e.DkdPodtyp).HasColumnName("dkd_Podtyp");
            entity.Property(e => e.DkdTyp).HasColumnName("dkd_Typ");
        });

        modelBuilder.Entity<DokParametrTp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_ParametrTP");

            entity.HasIndex(e => new { e.DktpTyp, e.DktpPodtyp, e.DktpParamEwidId, e.DktpKomputer, e.DktpDefiniowalnyId }, "IX_dok_ParametrTP").IsUnique();

            entity.Property(e => e.DktpDefiniowalnyId).HasColumnName("dktp_DefiniowalnyId");
            entity.Property(e => e.DktpKomputer)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("dktp_Komputer");
            entity.Property(e => e.DktpParamEwidId).HasColumnName("dktp_ParamEwidId");
            entity.Property(e => e.DktpPodtyp).HasColumnName("dktp_Podtyp");
            entity.Property(e => e.DktpTerminalId).HasColumnName("dktp_TerminalId");
            entity.Property(e => e.DktpTyp).HasColumnName("dktp_Typ");
        });

        modelBuilder.Entity<DokPowiazanieFsdPa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_PowiazanieFSdPA");

            entity.HasIndex(e => new { e.DfdIdFs, e.DfdIdPa, e.DfdTyp }, "IX_dok_PowiazanieFSdPA");

            entity.Property(e => e.DfdIdFs).HasColumnName("dfd_IdFS");
            entity.Property(e => e.DfdIdPa).HasColumnName("dfd_IdPA");
            entity.Property(e => e.DfdTyp).HasColumnName("dfd_Typ");
        });

        modelBuilder.Entity<DokPozycja>(entity =>
        {
            entity.HasKey(e => e.ObId);

            entity.ToTable("dok_Pozycja");

            entity.HasIndex(e => e.ObDokHanId, "IX_dok_Pozycja");

            entity.HasIndex(e => e.ObDokMagId, "IX_dok_Pozycja_1");

            entity.HasIndex(e => e.ObDoId, "IX_dok_Pozycja_2");

            entity.HasIndex(e => e.ObTowId, "IX_dok_Pozycja_3");

            entity.HasIndex(e => new { e.ObId, e.ObDokHanId, e.ObDokMagId, e.ObIlosc, e.ObCenaNetto, e.ObCenaBrutto, e.ObWartNetto, e.ObWartBrutto }, "IX_dok_Pozycja_4");

            entity.HasIndex(e => new { e.ObId, e.ObDoId, e.ObZnak, e.ObStatus, e.ObDokHanId, e.ObDokMagId, e.ObTowId, e.ObIlosc, e.ObIloscMag, e.ObCenaWaluta, e.ObCenaNetto, e.ObCenaBrutto, e.ObVatProc }, "IX_dok_Pozycja_5");

            entity.HasIndex(e => new { e.ObTowId, e.ObDokHanId, e.ObId, e.ObDoId }, "IX_dok_Pozycja_6");

            entity.Property(e => e.ObId)
                .ValueGeneratedNever()
                .HasColumnName("ob_Id");
            entity.Property(e => e.ObAkcyza).HasColumnName("ob_Akcyza");
            entity.Property(e => e.ObAkcyzaKwota)
                .HasColumnType("money")
                .HasColumnName("ob_AkcyzaKwota");
            entity.Property(e => e.ObAkcyzaWartosc)
                .HasColumnType("money")
                .HasColumnName("ob_AkcyzaWartosc");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObCenaMag)
                .HasColumnType("money")
                .HasColumnName("ob_CenaMag");
            entity.Property(e => e.ObCenaNabycia)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNabycia");
            entity.Property(e => e.ObCenaNetto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNetto");
            entity.Property(e => e.ObCenaPobranaZcennika).HasColumnName("ob_CenaPobranaZCennika");
            entity.Property(e => e.ObCenaWaluta)
                .HasColumnType("money")
                .HasColumnName("ob_CenaWaluta");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokHanLp).HasColumnName("ob_DokHanLp");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObDokMagLp).HasColumnName("ob_DokMagLp");
            entity.Property(e => e.ObIlosc)
                .HasColumnType("money")
                .HasColumnName("ob_Ilosc");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObKategoriaId).HasColumnName("ob_KategoriaId");
            entity.Property(e => e.ObKsefUuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ob_KsefUUID");
            entity.Property(e => e.ObMagId).HasColumnName("ob_MagId");
            entity.Property(e => e.ObNumerSeryjny)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ob_NumerSeryjny");
            entity.Property(e => e.ObOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ob_Opis");
            entity.Property(e => e.ObOplCukrowaCukierZawartoscEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaCukierZawartoscEx");
            entity.Property(e => e.ObOplCukrowaKwCukier)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukier");
            entity.Property(e => e.ObOplCukrowaKwCukierEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukierEx");
            entity.Property(e => e.ObOplCukrowaKwKofeina)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwKofeina");
            entity.Property(e => e.ObOplCukrowaKwSuma)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwSuma");
            entity.Property(e => e.ObOplCukrowaObj)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaObj");
            entity.Property(e => e.ObOplCukrowaParametry).HasColumnName("ob_OplCukrowaParametry");
            entity.Property(e => e.ObOplCukrowaPodlega)
                .HasDefaultValue(false)
                .HasColumnName("ob_OplCukrowaPodlega");
            entity.Property(e => e.ObOplCukrowaWartCukier)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaWartCukier");
            entity.Property(e => e.ObOplCukrowaWartKofeina)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaWartKofeina");
            entity.Property(e => e.ObOplCukrowaWartSuma)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaWartSuma");
            entity.Property(e => e.ObOznaczenieGtu).HasColumnName("ob_OznaczenieGTU");
            entity.Property(e => e.ObPrzyczynaKorektyId).HasColumnName("ob_PrzyczynaKorektyId");
            entity.Property(e => e.ObRabat)
                .HasColumnType("money")
                .HasColumnName("ob_Rabat");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObSyncId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ob_SyncId");
            entity.Property(e => e.ObTermin)
                .HasColumnType("datetime")
                .HasColumnName("ob_Termin");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowKodCn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_TowKodCN");
            entity.Property(e => e.ObTowPkwiu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ob_TowPkwiu");
            entity.Property(e => e.ObTowRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObVatId).HasColumnName("ob_VatId");
            entity.Property(e => e.ObVatProc)
                .HasColumnType("money")
                .HasColumnName("ob_VatProc");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNabycia)
                .HasColumnType("money")
                .HasColumnName("ob_WartNabycia");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObWegielDataWprowadzeniaLubNabycia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ob_WegielDataWprowadzeniaLubNabycia");
            entity.Property(e => e.ObWegielOpisPochodzenia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ob_WegielOpisPochodzenia");
            entity.Property(e => e.ObZnak)
                .HasDefaultValue((short)1)
                .HasColumnName("ob_Znak");

            entity.HasOne(d => d.ObDo).WithMany(p => p.InverseObDo)
                .HasForeignKey(d => d.ObDoId)
                .HasConstraintName("FK_dok_Pozycja_dok_Pozycja");

            entity.HasOne(d => d.ObDokHan).WithMany(p => p.DokPozycjaObDokHans)
                .HasForeignKey(d => d.ObDokHanId)
                .HasConstraintName("FK_dok_Pozycja_dok__Dokument");

            entity.HasOne(d => d.ObDokMag).WithMany(p => p.DokPozycjaObDokMags)
                .HasForeignKey(d => d.ObDokMagId)
                .HasConstraintName("FK_dok_Pozycja_dok__Dokument1");

            entity.HasOne(d => d.ObTow).WithMany(p => p.DokPozycjas)
                .HasForeignKey(d => d.ObTowId)
                .HasConstraintName("FK_dok_Pozycja_tw__Towar");
        });

        modelBuilder.Entity<DokPromocja>(entity =>
        {
            entity.HasKey(e => e.PcId);

            entity.ToTable("dok_Promocja");

            entity.HasIndex(e => new { e.PcTwGrId, e.PcKhGrId, e.PcCenyPoziom }, "IX_dok_Promocja");

            entity.Property(e => e.PcId)
                .ValueGeneratedNever()
                .HasColumnName("pc_Id");
            entity.Property(e => e.PcCalyDzien).HasColumnName("pc_CalyDzien");
            entity.Property(e => e.PcCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("pc_CenaBrutto");
            entity.Property(e => e.PcCenaNetto)
                .HasColumnType("money")
                .HasColumnName("pc_CenaNetto");
            entity.Property(e => e.PcCenyPoziom).HasColumnName("pc_CenyPoziom");
            entity.Property(e => e.PcCoIle)
                .HasDefaultValue(1)
                .HasColumnName("pc_CoIle");
            entity.Property(e => e.PcDefinicjaZlozona)
                .HasDefaultValue(false)
                .HasColumnName("pc_DefinicjaZlozona");
            entity.Property(e => e.PcDniTygodnia).HasColumnName("pc_DniTygodnia");
            entity.Property(e => e.PcDo)
                .HasColumnType("datetime")
                .HasColumnName("pc_Do");
            entity.Property(e => e.PcDzienMiesiaca).HasColumnName("pc_DzienMiesiaca");
            entity.Property(e => e.PcDzienPorzadek).HasColumnName("pc_DzienPorzadek");
            entity.Property(e => e.PcDzienRodzaj).HasColumnName("pc_DzienRodzaj");
            entity.Property(e => e.PcIlePowtorzen).HasColumnName("pc_IlePowtorzen");
            entity.Property(e => e.PcIlePowtorzenWdniach)
                .HasDefaultValue(true)
                .HasColumnName("pc_IlePowtorzenWDniach");
            entity.Property(e => e.PcInterwal).HasColumnName("pc_Interwal");
            entity.Property(e => e.PcKhGrId).HasColumnName("pc_KhGrId");
            entity.Property(e => e.PcKoniecPowtorzen)
                .HasColumnType("datetime")
                .HasColumnName("pc_KoniecPowtorzen");
            entity.Property(e => e.PcMiesiac).HasColumnName("pc_Miesiac");
            entity.Property(e => e.PcMultiStore).HasColumnName("pc_MultiStore");
            entity.Property(e => e.PcNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pc_Nazwa");
            entity.Property(e => e.PcNieaktywna)
                .HasDefaultValue(false)
                .HasColumnName("pc_Nieaktywna");
            entity.Property(e => e.PcOd)
                .HasColumnType("datetime")
                .HasColumnName("pc_Od");
            entity.Property(e => e.PcOgraniczonaCzasowo)
                .HasDefaultValue(true)
                .HasColumnName("pc_OgraniczonaCzasowo");
            entity.Property(e => e.PcPoczatekZcyklu)
                .HasColumnType("datetime")
                .HasColumnName("pc_PoczatekZCyklu");
            entity.Property(e => e.PcPos).HasColumnName("pc_POS");
            entity.Property(e => e.PcRabat)
                .HasColumnType("money")
                .HasColumnName("pc_Rabat");
            entity.Property(e => e.PcRobocze).HasColumnName("pc_Robocze");
            entity.Property(e => e.PcRodzProm).HasColumnName("pc_RodzProm");
            entity.Property(e => e.PcRodzajPowtorzen).HasColumnName("pc_RodzajPowtorzen");
            entity.Property(e => e.PcTwGrId).HasColumnName("pc_TwGrId");
            entity.Property(e => e.PcWyborKh)
                .HasDefaultValue(false)
                .HasColumnName("pc_WyborKh");
            entity.Property(e => e.PcWyborTw)
                .HasDefaultValue(false)
                .HasColumnName("pc_WyborTw");
        });

        modelBuilder.Entity<DokPromocjaKontrahent>(entity =>
        {
            entity.HasKey(e => e.PckId);

            entity.ToTable("dok_PromocjaKontrahent");

            entity.Property(e => e.PckId)
                .ValueGeneratedNever()
                .HasColumnName("pck_Id");
            entity.Property(e => e.PckIdKontrahent).HasColumnName("pck_IdKontrahent");
            entity.Property(e => e.PckIdPromocja).HasColumnName("pck_IdPromocja");

            entity.HasOne(d => d.PckIdPromocjaNavigation).WithMany(p => p.DokPromocjaKontrahents)
                .HasForeignKey(d => d.PckIdPromocja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_PromocjaKontrahent_dok_Promocja");
        });

        modelBuilder.Entity<DokPromocjaTowar>(entity =>
        {
            entity.HasKey(e => e.PctId);

            entity.ToTable("dok_PromocjaTowar");

            entity.Property(e => e.PctId)
                .ValueGeneratedNever()
                .HasColumnName("pct_Id");
            entity.Property(e => e.PctIdPromocja).HasColumnName("pct_IdPromocja");
            entity.Property(e => e.PctIdTowaru).HasColumnName("pct_IdTowaru");

            entity.HasOne(d => d.PctIdPromocjaNavigation).WithMany(p => p.DokPromocjaTowars)
                .HasForeignKey(d => d.PctIdPromocja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_PromocjaTowar_dok_Promocja");
        });

        modelBuilder.Entity<DokStatusWydruku>(entity =>
        {
            entity.HasKey(e => e.DswId).HasName("PK__dok_StatusWydruku");

            entity.ToTable("dok_StatusWydruku");

            entity.HasIndex(e => e.DswIdDokumentu, "UQ__dok_StatusWydruku_dsw_IdDokumentu").IsUnique();

            entity.Property(e => e.DswId)
                .ValueGeneratedNever()
                .HasColumnName("dsw_Id");
            entity.Property(e => e.DswIdDokumentu).HasColumnName("dsw_IdDokumentu");
            entity.Property(e => e.DswIdWzorca).HasColumnName("dsw_IdWzorca");
            entity.Property(e => e.DswMetodaWydruku).HasColumnName("dsw_MetodaWydruku");

            entity.HasOne(d => d.DswIdDokumentuNavigation).WithOne(p => p.DokStatusWydruku)
                .HasForeignKey<DokStatusWydruku>(d => d.DswIdDokumentu)
                .HasConstraintName("FK__dok_StatusWydruku_dok__Dokument");

            entity.HasOne(d => d.DswIdWzorcaNavigation).WithMany(p => p.DokStatusWydrukus)
                .HasForeignKey(d => d.DswIdWzorca)
                .HasConstraintName("FK__dok_StatusWydruku_wy_Wzorzec");
        });

        modelBuilder.Entity<DokSzczegolyTransportu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_SzczegolyTransportu");

            entity.Property(e => e.DdtDokId).HasColumnName("ddt_DokId");
            entity.Property(e => e.DdtKodJednostki).HasColumnName("ddt_KodJednostki");
            entity.Property(e => e.DdtOpisJednostki)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("ddt_OpisJednostki");

            entity.HasOne(d => d.DdtDok).WithMany()
                .HasForeignKey(d => d.DdtDokId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_SzczegolyTransportu_dok__Dokument");

            entity.HasOne(d => d.DdtKodJednostkiNavigation).WithMany()
                .HasForeignKey(d => d.DdtKodJednostki)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_SzczegolyTransportu_sl_KodJednostkiTransportowejEDD");
        });

        modelBuilder.Entity<DokUzytePromocje>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dok_UzytePromocje");

            entity.Property(e => e.DupDokId).HasColumnName("dup_DokId");
            entity.Property(e => e.DupPromocjaId).HasColumnName("dup_PromocjaId");
        });

        modelBuilder.Entity<DokVat>(entity =>
        {
            entity.HasKey(e => e.VtId);

            entity.ToTable("dok_Vat");

            entity.HasIndex(e => e.VtDokId, "IX_dok_Vat");

            entity.Property(e => e.VtId)
                .ValueGeneratedNever()
                .HasColumnName("vt_Id");
            entity.Property(e => e.VtDokId).HasColumnName("vt_DokId");
            entity.Property(e => e.VtVatId).HasColumnName("vt_VatId");
            entity.Property(e => e.VtVatProc)
                .HasColumnType("money")
                .HasColumnName("vt_VatProc");
            entity.Property(e => e.VtWartBrutto)
                .HasColumnType("money")
                .HasColumnName("vt_WartBrutto");
            entity.Property(e => e.VtWartNetto)
                .HasColumnType("money")
                .HasColumnName("vt_WartNetto");
            entity.Property(e => e.VtWartVat)
                .HasColumnType("money")
                .HasColumnName("vt_WartVat");

            entity.HasOne(d => d.VtDok).WithMany(p => p.DokVats)
                .HasForeignKey(d => d.VtDokId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_Vat_dok__Dokument");

            entity.HasOne(d => d.VtVat).WithMany(p => p.DokVats)
                .HasForeignKey(d => d.VtVatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dok_Vat_sl_StawkaVAT");
        });

        modelBuilder.Entity<DpDokument>(entity =>
        {
            entity.HasKey(e => e.DpdId).HasName("PK_dp__Dokumenty");

            entity.ToTable("dp__Dokument");

            entity.Property(e => e.DpdId)
                .ValueGeneratedNever()
                .HasColumnName("dpd_Id");
            entity.Property(e => e.DpdDataDokumentu)
                .HasDefaultValueSql("('20200101')")
                .HasColumnType("datetime")
                .HasColumnName("dpd_DataDokumentu");
            entity.Property(e => e.DpdDataPrzeslania)
                .HasDefaultValueSql("('20200101')")
                .HasColumnType("datetime")
                .HasColumnName("dpd_DataPrzeslania");
            entity.Property(e => e.DpdDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("dpd_DataWystawienia");
            entity.Property(e => e.DpdDataZakonczeniaDostawy)
                .HasColumnType("datetime")
                .HasColumnName("dpd_DataZakonczeniaDostawy");
            entity.Property(e => e.DpdDopasowanieSchematu).HasColumnName("dpd_DopasowanieSchematu");
            entity.Property(e => e.DpdIdBiura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .UseCollation("Polish_BIN")
                .HasColumnName("dpd_IdBiura");
            entity.Property(e => e.DpdIdDokumentuWprowadzonego).HasColumnName("dpd_IdDokumentuWprowadzonego");
            entity.Property(e => e.DpdIdGrupaDokumentu).HasColumnName("dpd_IdGrupaDokumentu");
            entity.Property(e => e.DpdIdKategorii).HasColumnName("dpd_IdKategorii");
            entity.Property(e => e.DpdIdKontrahenta).HasColumnName("dpd_IdKontrahenta");
            entity.Property(e => e.DpdIdSchematuImportu).HasColumnName("dpd_IdSchematuImportu");
            entity.Property(e => e.DpdKomentarz)
                .IsUnicode(false)
                .HasColumnName("dpd_Komentarz");
            entity.Property(e => e.DpdMiesiacRozliczeniowy)
                .HasDefaultValueSql("('20200101')")
                .HasColumnType("datetime")
                .HasColumnName("dpd_MiesiacRozliczeniowy");
            entity.Property(e => e.DpdNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dpd_Nazwa");
            entity.Property(e => e.DpdNotatka)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dpd_Notatka");
            entity.Property(e => e.DpdNumerDokumentu)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dpd_NumerDokumentu");
            entity.Property(e => e.DpdNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dpd_NumerKSeF");
            entity.Property(e => e.DpdOrientacjaStron)
                .HasColumnType("image")
                .HasColumnName("dpd_OrientacjaStron");
            entity.Property(e => e.DpdRodzajDokumentuGlownego)
                .HasDefaultValue(1)
                .HasColumnName("dpd_RodzajDokumentuGlownego");
            entity.Property(e => e.DpdRodzajFaktury)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dpd_RodzajFaktury");
            entity.Property(e => e.DpdSchematZatwierdzony).HasColumnName("dpd_SchematZatwierdzony");
            entity.Property(e => e.DpdStatus).HasColumnName("dpd_Status");
            entity.Property(e => e.DpdStatusOcr).HasColumnName("dpd_StatusOcr");
            entity.Property(e => e.DpdSygnatura)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dpd_Sygnatura");
            entity.Property(e => e.DpdTrybPracy).HasColumnName("dpd_TrybPracy");
            entity.Property(e => e.DpdTrybWprowadzania)
                .HasDefaultValue(1)
                .HasColumnName("dpd_TrybWprowadzania");
            entity.Property(e => e.DpdTypDokumentu).HasColumnName("dpd_TypDokumentu");
            entity.Property(e => e.DpdTypDokumentuGlownego).HasColumnName("dpd_TypDokumentuGlownego");
            entity.Property(e => e.DpdTypDokumentuPowiazanego).HasColumnName("dpd_TypDokumentuPowiazanego");
            entity.Property(e => e.DpdTypDokumentuWprowadzonego).HasColumnName("dpd_TypDokumentuWprowadzonego");
            entity.Property(e => e.DpdWprowadzDokument)
                .HasDefaultValue(true)
                .HasColumnName("dpd_WprowadzDokument");

            entity.HasOne(d => d.DpdIdGrupaDokumentuNavigation).WithMany(p => p.DpDokuments)
                .HasForeignKey(d => d.DpdIdGrupaDokumentu)
                .HasConstraintName("FK_dp__Dokument_sl_GrupaDokumentow");

            entity.HasOne(d => d.DpdIdKategoriiNavigation).WithMany(p => p.DpDokuments)
                .HasForeignKey(d => d.DpdIdKategorii)
                .HasConstraintName("FK_dp__Dokument_sl_Kategoria");

            entity.HasOne(d => d.DpdIdKontrahentaNavigation).WithMany(p => p.DpDokuments)
                .HasForeignKey(d => d.DpdIdKontrahenta)
                .HasConstraintName("FK_dp__Dokument_kh__Kontrahent");

            entity.HasOne(d => d.DpdIdSchematuImportuNavigation).WithMany(p => p.DpDokuments)
                .HasForeignKey(d => d.DpdIdSchematuImportu)
                .HasConstraintName("FK_dp__Dokument_im_SchematImportu");
        });

        modelBuilder.Entity<DpParametr>(entity =>
        {
            entity.HasKey(e => e.DpparId);

            entity.ToTable("dp_Parametr");

            entity.Property(e => e.DpparId)
                .ValueGeneratedNever()
                .HasColumnName("dppar_Id");
            entity.Property(e => e.DpparBlokadaPobierania).HasColumnName("dppar_BlokadaPobierania");
            entity.Property(e => e.DpparMaksRozmiar)
                .HasDefaultValue(150)
                .HasColumnName("dppar_MaksRozmiar");
            entity.Property(e => e.DpparPobierajPlikiNaWejscie)
                .HasDefaultValue(true)
                .HasColumnName("dppar_PobierajPlikiNaWejscie");
        });

        modelBuilder.Entity<DpPlik>(entity =>
        {
            entity.HasKey(e => e.DppId);

            entity.ToTable("dp_Plik");

            entity.Property(e => e.DppId)
                .ValueGeneratedNever()
                .HasColumnName("dpp_Id");
            entity.Property(e => e.DppIdBiura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .UseCollation("Polish_BIN")
                .HasColumnName("dpp_IdBiura");
            entity.Property(e => e.DppIdDokumentu).HasColumnName("dpp_IdDokumentu");
            entity.Property(e => e.DppKolejnosc).HasColumnName("dpp_Kolejnosc");
            entity.Property(e => e.DppNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dpp_Nazwa");
            entity.Property(e => e.DppOcr)
                .HasColumnType("image")
                .HasColumnName("dpp_Ocr");
            entity.Property(e => e.DppRozmiar).HasColumnName("dpp_Rozmiar");

            entity.HasOne(d => d.DppIdDokumentuNavigation).WithMany(p => p.DpPliks)
                .HasForeignKey(d => d.DppIdDokumentu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dp_Plik_dp__Dokument");
        });

        modelBuilder.Entity<DwDokument>(entity =>
        {
            entity.HasKey(e => e.DwewId);

            entity.ToTable("dw__Dokument");

            entity.Property(e => e.DwewId)
                .ValueGeneratedNever()
                .HasColumnName("dwew_Id");
            entity.Property(e => e.DwewData)
                .HasColumnType("datetime")
                .HasColumnName("dwew_Data");
            entity.Property(e => e.DwewIdDokImport).HasColumnName("dwew_IdDokImport");
            entity.Property(e => e.DwewIdObiektu).HasColumnName("dwew_IdObiektu");
            entity.Property(e => e.DwewIdkategorii).HasColumnName("dwew_IDKategorii");
            entity.Property(e => e.DwewMiejsceWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwew_MiejsceWyst");
            entity.Property(e => e.DwewNrDokumentu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dwew_NrDokumentu");
            entity.Property(e => e.DwewOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwew_Opis");
            entity.Property(e => e.DwewTyp).HasColumnName("dwew_Typ");
            entity.Property(e => e.DwewTypDokImport).HasColumnName("dwew_TypDokImport");
            entity.Property(e => e.DwewTypObiektu).HasColumnName("dwew_TypObiektu");
            entity.Property(e => e.DwewUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwew_Uwagi");
            entity.Property(e => e.DwewWartosc)
                .HasColumnType("money")
                .HasColumnName("dwew_Wartosc");
            entity.Property(e => e.DwewWartoscPrzychod)
                .HasColumnType("money")
                .HasColumnName("dwew_WartoscPrzychod");
            entity.Property(e => e.DwewWystawil)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwew_Wystawil");

            entity.HasOne(d => d.DwewIdkategoriiNavigation).WithMany(p => p.DwDokuments)
                .HasForeignKey(d => d.DwewIdkategorii)
                .HasConstraintName("FK_dw__Dokument_sl_Kategoria");
        });

        modelBuilder.Entity<DwParametr>(entity =>
        {
            entity.HasKey(e => e.DwewprId);

            entity.ToTable("dw_Parametr");

            entity.Property(e => e.DwewprId)
                .ValueGeneratedNever()
                .HasColumnName("dwewpr_Id");
            entity.Property(e => e.DwewprIdKategorii).HasColumnName("dwewpr_IdKategorii");
            entity.Property(e => e.DwewprIdStawkiRyczaltu).HasColumnName("dwewpr_IdStawkiRyczaltu");
            entity.Property(e => e.DwewprKolumnaKs)
                .HasDefaultValue(10)
                .HasColumnName("dwewpr_KolumnaKs");
            entity.Property(e => e.DwewprKolumnaKsPrzy)
                .HasDefaultValue(7)
                .HasColumnName("dwewpr_KolumnaKsPrzy");
            entity.Property(e => e.DwewprKontrolaUniqNrDokumentu)
                .HasDefaultValue(true)
                .HasColumnName("dwewpr_KontrolaUniqNrDokumentu");
            entity.Property(e => e.DwewprKsWyborKolumn).HasColumnName("dwewpr_KsWyborKolumn");
            entity.Property(e => e.DwewprKsWyborKolumnPrzy).HasColumnName("dwewpr_KsWyborKolumnPrzy");
            entity.Property(e => e.DwewprOpisDokuemnt).HasColumnName("dwewpr_OpisDokuemnt");
            entity.Property(e => e.DwewprOpisDokuemntPrzy).HasColumnName("dwewpr_OpisDokuemntPrzy");
            entity.Property(e => e.DwewprOpisKs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwewpr_OpisKs");
            entity.Property(e => e.DwewprOpisKsPrzy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwewpr_OpisKsPrzy");

            entity.HasOne(d => d.DwewprIdKategoriiNavigation).WithMany(p => p.DwParametrs)
                .HasForeignKey(d => d.DwewprIdKategorii)
                .HasConstraintName("FK_dw_Parametr_sl_Kategoria");
        });

        modelBuilder.Entity<DwPozycja>(entity =>
        {
            entity.HasKey(e => e.DwewpId);

            entity.ToTable("dw_Pozycja");

            entity.Property(e => e.DwewpId)
                .ValueGeneratedNever()
                .HasColumnName("dwewp_Id");
            entity.Property(e => e.DwewpCena)
                .HasColumnType("money")
                .HasColumnName("dwewp_Cena");
            entity.Property(e => e.DwewpIdDowWew).HasColumnName("dwewp_IdDowWew");
            entity.Property(e => e.DwewpIlosc)
                .HasColumnType("money")
                .HasColumnName("dwewp_Ilosc");
            entity.Property(e => e.DwewpJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dwewp_JM");
            entity.Property(e => e.DwewpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dwewp_Nazwa");
            entity.Property(e => e.DwewpWartosc)
                .HasColumnType("money")
                .HasColumnName("dwewp_Wartosc");

            entity.HasOne(d => d.DwewpIdDowWewNavigation).WithMany(p => p.DwPozycjas)
                .HasForeignKey(d => d.DwewpIdDowWew)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dw_Pozycja_dw__Dokument");
        });

        modelBuilder.Entity<EcpAbsencja>(entity =>
        {
            entity.HasKey(e => e.EcpaId);

            entity.ToTable("ecp_Absencja");

            entity.Property(e => e.EcpaId)
                .ValueGeneratedNever()
                .HasColumnName("ecpa_Id");
            entity.Property(e => e.EcpaDataWplynieciaZwolnienia)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("ecpa_DataWplynieciaZwolnienia");
            entity.Property(e => e.EcpaDataZlozeniaWniosku)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("ecpa_DataZlozeniaWniosku");
            entity.Property(e => e.EcpaIdDziecka)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpa_IdDziecka");
            entity.Property(e => e.EcpaIdZapis).HasColumnName("ecpa_IdZapis");
            entity.Property(e => e.EcpaKodChoroby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpa_KodChoroby");
            entity.Property(e => e.EcpaKodPrzerwy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpa_KodPrzerwy");
            entity.Property(e => e.EcpaLiczbaMinutUrlopu).HasColumnName("ecpa_LiczbaMinutUrlopu");
            entity.Property(e => e.EcpaLiczbaMinutUrlopuSilaWyzsza).HasColumnName("ecpa_LiczbaMinutUrlopuSilaWyzsza");
            entity.Property(e => e.EcpaMiesSkladStale)
                .HasDefaultValue(0)
                .HasColumnName("ecpa_MiesSkladStale");
            entity.Property(e => e.EcpaMiesSkladZmienne)
                .HasDefaultValue(3)
                .HasColumnName("ecpa_MiesSkladZmienne");
            entity.Property(e => e.EcpaNaliczajPrzestojoweProcent).HasColumnName("ecpa_NaliczajPrzestojoweProcent");
            entity.Property(e => e.EcpaNrChoroby)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpa_NrChoroby");
            entity.Property(e => e.EcpaNrZwolnienia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpa_NrZwolnienia");
            entity.Property(e => e.EcpaOpiekaNadDzieckiemGodzinowo).HasColumnName("ecpa_OpiekaNadDzieckiemGodzinowo");
            entity.Property(e => e.EcpaOpisAbsencji)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpa_OpisAbsencji");
            entity.Property(e => e.EcpaPierwotnie3xx)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpa_Pierwotnie3xx");
            entity.Property(e => e.EcpaPochodzenieEzla).HasColumnName("ecpa_PochodzenieEZLA");
            entity.Property(e => e.EcpaPodstawaUrlWych)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("money")
                .HasColumnName("ecpa_PodstawaUrlWych");
            entity.Property(e => e.EcpaPodstawaZasilku)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("money")
                .HasColumnName("ecpa_PodstawaZasilku");
            entity.Property(e => e.EcpaPodwyzszenieDoKwotySwiadczenia).HasColumnName("ecpa_PodwyzszenieDoKwotySwiadczenia");
            entity.Property(e => e.EcpaProcent)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("money")
                .HasColumnName("ecpa_Procent");
            entity.Property(e => e.EcpaProcentPrzestojowego).HasColumnName("ecpa_ProcentPrzestojowego");
            entity.Property(e => e.EcpaRodzaj).HasColumnName("ecpa_Rodzaj");
            entity.Property(e => e.EcpaUrlopNaZadanie)
                .HasDefaultValue(false)
                .HasColumnName("ecpa_UrlopNaZadanie");
            entity.Property(e => e.EcpaUrlopSilaWyzszaGodzinowo).HasColumnName("ecpa_UrlopSilaWyzszaGodzinowo");
            entity.Property(e => e.EcpaWspolczynnikWaloryzacji)
                .HasColumnType("money")
                .HasColumnName("ecpa_WspolczynnikWaloryzacji");
            entity.Property(e => e.EcpaWypadek)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpa_Wypadek");

            entity.HasOne(d => d.EcpaIdDzieckaNavigation).WithMany(p => p.EcpAbsencjas)
                .HasForeignKey(d => d.EcpaIdDziecka)
                .HasConstraintName("FK_ecp_Absencja_pr_Rodzina");

            entity.HasOne(d => d.EcpaOpisAbsencjiNavigation).WithMany(p => p.EcpAbsencjas)
                .HasForeignKey(d => d.EcpaOpisAbsencji)
                .HasConstraintName("FK_ecp_Absencja_sl_OpisAbsencji");
        });

        modelBuilder.Entity<EcpAbsencjaPrzedKorektum>(entity =>
        {
            entity.HasKey(e => e.EcpapkId);

            entity.ToTable("ecp_AbsencjaPrzedKorekta");

            entity.Property(e => e.EcpapkId)
                .ValueGeneratedNever()
                .HasColumnName("ecpapk_Id");
            entity.Property(e => e.EcpapkDataWplynieciaZwolnienia)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("ecpapk_DataWplynieciaZwolnienia");
            entity.Property(e => e.EcpapkDataZlozeniaWniosku)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("ecpapk_DataZlozeniaWniosku");
            entity.Property(e => e.EcpapkIdDziecka)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpapk_IdDziecka");
            entity.Property(e => e.EcpapkIdZapis).HasColumnName("ecpapk_IdZapis");
            entity.Property(e => e.EcpapkKodChoroby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ecpapk_KodChoroby");
            entity.Property(e => e.EcpapkKodPrzerwy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ecpapk_KodPrzerwy");
            entity.Property(e => e.EcpapkMiesSkladStale)
                .HasDefaultValue(0)
                .HasColumnName("ecpapk_MiesSkladStale");
            entity.Property(e => e.EcpapkMiesSkladZmienne)
                .HasDefaultValue(3)
                .HasColumnName("ecpapk_MiesSkladZmienne");
            entity.Property(e => e.EcpapkNrChoroby)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ecpapk_NrChoroby");
            entity.Property(e => e.EcpapkNrZwolnienia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ecpapk_NrZwolnienia");
            entity.Property(e => e.EcpapkOpiekaNadDzieckiemGodzinowo).HasColumnName("ecpapk_OpiekaNadDzieckiemGodzinowo");
            entity.Property(e => e.EcpapkOpisAbsencji).HasColumnName("ecpapk_OpisAbsencji");
            entity.Property(e => e.EcpapkPierwotnie3xx).HasColumnName("ecpapk_Pierwotnie3xx");
            entity.Property(e => e.EcpapkPodstawaUrlWych)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("money")
                .HasColumnName("ecpapk_PodstawaUrlWych");
            entity.Property(e => e.EcpapkPodstawaZasilku)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("money")
                .HasColumnName("ecpapk_PodstawaZasilku");
            entity.Property(e => e.EcpapkPodwyzszenieDoKwotySwiadczenia).HasColumnName("ecpapk_PodwyzszenieDoKwotySwiadczenia");
            entity.Property(e => e.EcpapkProcent)
                .HasColumnType("money")
                .HasColumnName("ecpapk_Procent");
            entity.Property(e => e.EcpapkRodzaj).HasColumnName("ecpapk_Rodzaj");
            entity.Property(e => e.EcpapkUrlopNaZadanie)
                .HasDefaultValue(false)
                .HasColumnName("ecpapk_UrlopNaZadanie");
            entity.Property(e => e.EcpapkWspolczynnikWaloryzacji)
                .HasColumnType("money")
                .HasColumnName("ecpapk_WspolczynnikWaloryzacji");
            entity.Property(e => e.EcpapkWypadek).HasColumnName("ecpapk_Wypadek");

            entity.HasOne(d => d.EcpapkIdDzieckaNavigation).WithMany(p => p.EcpAbsencjaPrzedKorekta)
                .HasForeignKey(d => d.EcpapkIdDziecka)
                .HasConstraintName("FK_ecp_AbsencjaPrzedKorekta_pr_Rodzina");

            entity.HasOne(d => d.EcpapkOpisAbsencjiNavigation).WithMany(p => p.EcpAbsencjaPrzedKorekta)
                .HasForeignKey(d => d.EcpapkOpisAbsencji)
                .HasConstraintName("FK_ecp_AbsencjaPrzedKorekta_sl_OpisAbsencji");
        });

        modelBuilder.Entity<EcpBlokadum>(entity =>
        {
            entity.HasKey(e => e.EcpbId);

            entity.ToTable("ecp_Blokada");

            entity.Property(e => e.EcpbId)
                .ValueGeneratedNever()
                .HasColumnName("ecpb_Id");
            entity.Property(e => e.EcpbDo)
                .HasColumnType("datetime")
                .HasColumnName("ecpb_Do");
            entity.Property(e => e.EcpbIdObiektu).HasColumnName("ecpb_IdObiektu");
            entity.Property(e => e.EcpbIdPrac).HasColumnName("ecpb_IdPrac");
            entity.Property(e => e.EcpbOd)
                .HasColumnType("datetime")
                .HasColumnName("ecpb_Od");
            entity.Property(e => e.EcpbOpisObiektu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ecpb_OpisObiektu");
            entity.Property(e => e.EcpbRodzajObiektu).HasColumnName("ecpb_RodzajObiektu");

            entity.HasOne(d => d.EcpbIdPracNavigation).WithMany(p => p.EcpBlokada)
                .HasForeignKey(d => d.EcpbIdPrac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecp_Blokada_pr_Pracownik");
        });

        modelBuilder.Entity<EcpEkwiwalent>(entity =>
        {
            entity.HasKey(e => e.EkwId);

            entity.ToTable("ecp_Ekwiwalent");

            entity.Property(e => e.EkwId)
                .ValueGeneratedNever()
                .HasColumnName("ekw_Id");
            entity.Property(e => e.EkwData)
                .HasColumnType("datetime")
                .HasColumnName("ekw_Data");
            entity.Property(e => e.EkwGodziny).HasColumnName("ekw_Godziny");
            entity.Property(e => e.EkwIdPrac).HasColumnName("ekw_IdPrac");
            entity.Property(e => e.EkwMiesRozl)
                .HasColumnType("datetime")
                .HasColumnName("ekw_MiesRozl");
            entity.Property(e => e.EkwSkladnStale).HasColumnName("ekw_SkladnStale");
            entity.Property(e => e.EkwSkladnZmienne).HasColumnName("ekw_SkladnZmienne");
            entity.Property(e => e.EkwWymiar)
                .HasDefaultValue(480)
                .HasColumnName("ekw_Wymiar");
        });

        modelBuilder.Entity<EcpGodzina>(entity =>
        {
            entity.HasKey(e => e.EcpgId);

            entity.ToTable("ecp_Godzina");

            entity.Property(e => e.EcpgId)
                .ValueGeneratedNever()
                .HasColumnName("ecpg_Id");
            entity.Property(e => e.EcpgDo).HasColumnName("ecpg_Do");
            entity.Property(e => e.EcpgIdAtrybutuGodzin)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ecpg_IdAtrybutuGodzin");
            entity.Property(e => e.EcpgIdZapis).HasColumnName("ecpg_IdZapis");
            entity.Property(e => e.EcpgOd).HasColumnName("ecpg_Od");
            entity.Property(e => e.EcpgPoraDnia).HasColumnName("ecpg_PoraDnia");

            entity.HasOne(d => d.EcpgIdAtrybutuGodzinNavigation).WithMany(p => p.EcpGodzinas)
                .HasForeignKey(d => d.EcpgIdAtrybutuGodzin)
                .HasConstraintName("FK_ecp_Godzina_sl_AtrybutGodzinowy");

            entity.HasOne(d => d.EcpgIdZapisNavigation).WithMany(p => p.EcpGodzinas)
                .HasForeignKey(d => d.EcpgIdZapis)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecp_Godzina_ecp__Zapis");
        });

        modelBuilder.Entity<EcpGodzinaPrzedKorektum>(entity =>
        {
            entity.HasKey(e => e.EcpgpkId);

            entity.ToTable("ecp_GodzinaPrzedKorekta");

            entity.Property(e => e.EcpgpkId)
                .ValueGeneratedNever()
                .HasColumnName("ecpgpk_Id");
            entity.Property(e => e.EcpgpkDo).HasColumnName("ecpgpk_Do");
            entity.Property(e => e.EcpgpkIdZapis).HasColumnName("ecpgpk_IdZapis");
            entity.Property(e => e.EcpgpkOd).HasColumnName("ecpgpk_Od");
            entity.Property(e => e.EcpgpkPoraDnia).HasColumnName("ecpgpk_PoraDnia");
        });

        modelBuilder.Entity<EcpObecnosc>(entity =>
        {
            entity.HasKey(e => e.EcpoId);

            entity.ToTable("ecp_Obecnosc");

            entity.Property(e => e.EcpoId)
                .ValueGeneratedNever()
                .HasColumnName("ecpo_Id");
            entity.Property(e => e.EcpoAbsOpiekaNadDzieckiem).HasColumnName("ecpo_AbsOpiekaNadDzieckiem");
            entity.Property(e => e.EcpoAbsPotrac).HasColumnName("ecpo_AbsPotrac");
            entity.Property(e => e.EcpoAbsRozlBezWnPrac).HasColumnName("ecpo_AbsRozlBezWnPrac");
            entity.Property(e => e.EcpoAbsRozlicz).HasColumnName("ecpo_AbsRozlicz");
            entity.Property(e => e.EcpoIdAtrybut).HasColumnName("ecpo_IdAtrybut");
            entity.Property(e => e.EcpoIdZapis).HasColumnName("ecpo_IdZapis");
            entity.Property(e => e.EcpoNadlPlatne).HasColumnName("ecpo_NadlPlatne");
            entity.Property(e => e.EcpoNadlPlatneNocne).HasColumnName("ecpo_NadlPlatneNocne");
            entity.Property(e => e.EcpoNadlRozlicz).HasColumnName("ecpo_NadlRozlicz");
            entity.Property(e => e.EcpoPracaZdalnaOkazjonalna).HasColumnName("ecpo_PracaZdalnaOkazjonalna");
            entity.Property(e => e.EcpoZwykleDzienne).HasColumnName("ecpo_ZwykleDzienne");
            entity.Property(e => e.EcpoZwykleNocne).HasColumnName("ecpo_ZwykleNocne");

            entity.HasOne(d => d.EcpoIdZapisNavigation).WithMany(p => p.EcpObecnoscs)
                .HasForeignKey(d => d.EcpoIdZapis)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecp_Obecnosc_ecp__Zapis");
        });

        modelBuilder.Entity<EcpObecnoscPrzedKorektum>(entity =>
        {
            entity.HasKey(e => e.EcpopkId);

            entity.ToTable("ecp_ObecnoscPrzedKorekta");

            entity.Property(e => e.EcpopkId)
                .ValueGeneratedNever()
                .HasColumnName("ecpopk_Id");
            entity.Property(e => e.EcpopkAbsPotrac).HasColumnName("ecpopk_AbsPotrac");
            entity.Property(e => e.EcpopkAbsRozlBezWnPrac).HasColumnName("ecpopk_AbsRozlBezWnPrac");
            entity.Property(e => e.EcpopkAbsRozlicz).HasColumnName("ecpopk_AbsRozlicz");
            entity.Property(e => e.EcpopkIdAtrybut).HasColumnName("ecpopk_IdAtrybut");
            entity.Property(e => e.EcpopkIdZapis).HasColumnName("ecpopk_IdZapis");
            entity.Property(e => e.EcpopkNadlPlatne).HasColumnName("ecpopk_NadlPlatne");
            entity.Property(e => e.EcpopkNadlPlatneNocne).HasColumnName("ecpopk_NadlPlatneNocne");
            entity.Property(e => e.EcpopkNadlRozlicz).HasColumnName("ecpopk_NadlRozlicz");
            entity.Property(e => e.EcpopkPracaZdalnaOkazjonalna).HasColumnName("ecpopk_PracaZdalnaOkazjonalna");
            entity.Property(e => e.EcpopkZwykleDzienne).HasColumnName("ecpopk_ZwykleDzienne");
            entity.Property(e => e.EcpopkZwykleNocne).HasColumnName("ecpopk_ZwykleNocne");
        });

        modelBuilder.Entity<EcpOdprawaEmerytalna>(entity =>
        {
            entity.HasKey(e => e.EcpoeId);

            entity.ToTable("ecp_OdprawaEmerytalna");

            entity.Property(e => e.EcpoeId)
                .ValueGeneratedNever()
                .HasColumnName("ecpoe_Id");
            entity.Property(e => e.EcpoeData)
                .HasColumnType("datetime")
                .HasColumnName("ecpoe_Data");
            entity.Property(e => e.EcpoeIdPrac).HasColumnName("ecpoe_IdPrac");
            entity.Property(e => e.EcpoeMiesRozl)
                .HasColumnType("datetime")
                .HasColumnName("ecpoe_MiesRozl");
            entity.Property(e => e.EcpoeSkladnZmienne).HasColumnName("ecpoe_SkladnZmienne");
        });

        modelBuilder.Entity<EcpZapi>(entity =>
        {
            entity.HasKey(e => e.EcpId);

            entity.ToTable("ecp__Zapis");

            entity.HasIndex(e => new { e.EcpIdPrac, e.EcpData, e.EcpRodzajZapisu }, "IX_ecp__Zapis");

            entity.Property(e => e.EcpId)
                .ValueGeneratedNever()
                .HasColumnName("ecp_Id");
            entity.Property(e => e.EcpData)
                .HasColumnType("datetime")
                .HasColumnName("ecp_Data");
            entity.Property(e => e.EcpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ecp_DataDo");
            entity.Property(e => e.EcpIdPrac).HasColumnName("ecp_IdPrac");
            entity.Property(e => e.EcpKorekta).HasColumnName("ecp_Korekta");
            entity.Property(e => e.EcpKorektaIdRozliczajacejWyplaty).HasColumnName("ecp_KorektaIdRozliczajacejWyplaty");
            entity.Property(e => e.EcpKorektaKiedy)
                .HasColumnType("datetime")
                .HasColumnName("ecp_KorektaKiedy");
            entity.Property(e => e.EcpKorektaKto).HasColumnName("ecp_KorektaKto");
            entity.Property(e => e.EcpKorektaPrzedRodzajZapisu).HasColumnName("ecp_KorektaPrzedRodzajZapisu");
            entity.Property(e => e.EcpKorektaRozliczWyplata).HasColumnName("ecp_KorektaRozliczWyplata");
            entity.Property(e => e.EcpPrzedKorekta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ecp_PrzedKorekta");
            entity.Property(e => e.EcpRodzajZapisu).HasColumnName("ecp_RodzajZapisu");

            entity.HasOne(d => d.EcpKorektaIdRozliczajacejWyplatyNavigation).WithMany(p => p.EcpZapis)
                .HasForeignKey(d => d.EcpKorektaIdRozliczajacejWyplaty)
                .HasConstraintName("FK_ecp__Zapis_plb_Wyplata");
        });

        modelBuilder.Entity<EdZfss>(entity =>
        {
            entity.HasKey(e => e.ZfsId);

            entity.ToTable("ed_ZFSS");

            entity.Property(e => e.ZfsId)
                .ValueGeneratedNever()
                .HasColumnName("zfs_Id");
            entity.Property(e => e.ZfsData)
                .HasColumnType("datetime")
                .HasColumnName("zfs_Data");
            entity.Property(e => e.ZfsIdInstytucji).HasColumnName("zfs_IdInstytucji");
            entity.Property(e => e.ZfsIdPracownika).HasColumnName("zfs_IdPracownika");
            entity.Property(e => e.ZfsKwota)
                .HasColumnType("money")
                .HasColumnName("zfs_Kwota");
            entity.Property(e => e.ZfsOdbiorca)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zfs_Odbiorca");
            entity.Property(e => e.ZfsOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zfs_Opis");
            entity.Property(e => e.ZfsRok).HasColumnName("zfs_Rok");
            entity.Property(e => e.ZfsTyp).HasColumnName("zfs_Typ");

            entity.HasOne(d => d.ZfsIdInstytucjiNavigation).WithMany(p => p.EdZfsses)
                .HasForeignKey(d => d.ZfsIdInstytucji)
                .HasConstraintName("FK_ed_ZFSS_is__Instytucja");

            entity.HasOne(d => d.ZfsIdPracownikaNavigation).WithMany(p => p.EdZfsses)
                .HasForeignKey(d => d.ZfsIdPracownika)
                .HasConstraintName("FK_ed_ZFSS_pr_Pracownik");
        });

        modelBuilder.Entity<EddEdokDostawy>(entity =>
        {
            entity.HasKey(e => e.EddId);

            entity.ToTable("edd_EDokDostawy");

            entity.HasIndex(e => e.EddIdWiadomosci, "IX_edd_EDokDostawy_edd_IdWiadomosci").IsUnique();

            entity.HasIndex(e => e.EddLokNrRef, "IX_edd_EDokDostawy_edd_LokNrRef").IsUnique();

            entity.Property(e => e.EddId)
                .ValueGeneratedNever()
                .HasColumnName("edd_Id");
            entity.Property(e => e.EddDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("edd_DataWyst");
            entity.Property(e => e.EddDataWysylki)
                .HasColumnType("datetime")
                .HasColumnName("edd_DataWysylki");
            entity.Property(e => e.EddIdDokumentu).HasColumnName("edd_IdDokumentu");
            entity.Property(e => e.EddIdMagazynu).HasColumnName("edd_IdMagazynu");
            entity.Property(e => e.EddIdWiadomosci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edd_IdWiadomosci");
            entity.Property(e => e.EddLokNrRef)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edd_LokNrRef");
            entity.Property(e => e.EddNrDdarc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("edd_NrDDARC");
            entity.Property(e => e.EddStatus).HasColumnName("edd_Status");
            entity.Property(e => e.EddWersja).HasColumnName("edd_Wersja");
            entity.Property(e => e.EddXml).HasColumnName("edd_Xml");

            entity.HasOne(d => d.EddIdDokumentuNavigation).WithMany(p => p.EddEdokDostawies)
                .HasForeignKey(d => d.EddIdDokumentu)
                .HasConstraintName("FK_edd_EDokDostawy_dok__Dokument");

            entity.HasOne(d => d.EddIdMagazynuNavigation).WithMany(p => p.EddEdokDostawies)
                .HasForeignKey(d => d.EddIdMagazynu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_edd_EDokDostawy_sl_Magazyn");
        });

        modelBuilder.Entity<EddParametr>(entity =>
        {
            entity.HasKey(e => e.EdpId);

            entity.ToTable("edd_Parametr");

            entity.Property(e => e.EdpId)
                .ValueGeneratedNever()
                .HasColumnName("edp_Id");
            entity.Property(e => e.EdpAdresEmailWysylkiEdd)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("edp_AdresEmailWysylkiEdd");
            entity.Property(e => e.EdpCzasPrzewozuTransportu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("edp_CzasPrzewozuTransportu");
            entity.Property(e => e.EdpCzasWysylkiTransportu)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("edp_CzasWysylkiTransportu");
            entity.Property(e => e.EdpDodatkoweInfoRodzajuTransportu)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("edp_DodatkoweInfoRodzajuTransportu");
            entity.Property(e => e.EdpIdKontaEmailWysylkiEdd).HasColumnName("edp_IdKontaEmailWysylkiEdd");
            entity.Property(e => e.EdpIdNumeracjiLnr).HasColumnName("edp_IdNumeracjiLnr");
            entity.Property(e => e.EdpIdNumeracjiWiadomosci).HasColumnName("edp_IdNumeracjiWiadomosci");
            entity.Property(e => e.EdpKodRodzajuTransportu).HasColumnName("edp_KodRodzajuTransportu");
            entity.Property(e => e.EdpMaskaAdresuOdbioruStatusowEdd)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("edp_MaskaAdresuOdbioruStatusowEdd");
            entity.Property(e => e.EdpParamEwidId).HasColumnName("edp_ParamEwidId");
            entity.Property(e => e.EdpSystemowyCzasWysylkiTransportu).HasColumnName("edp_SystemowyCzasWysylkiTransportu");
            entity.Property(e => e.EdpTrybDostawyTwAkcyzowych)
                .HasDefaultValue(5)
                .HasColumnName("edp_TrybDostawyTwAkcyzowych");
            entity.Property(e => e.EdpTrybOdroczonyWysylkiEdd)
                .HasDefaultValue(1)
                .HasColumnName("edp_TrybOdroczonyWysylkiEDD");
            entity.Property(e => e.EdpZrodloMiejscaOdbioru).HasColumnName("edp_ZrodloMiejscaOdbioru");
            entity.Property(e => e.EdpZrodloMiejscaWysylki)
                .HasDefaultValue(1)
                .HasColumnName("edp_ZrodloMiejscaWysylki");

            entity.HasOne(d => d.EdpIdKontaEmailWysylkiEddNavigation).WithMany(p => p.EddParametrs)
                .HasForeignKey(d => d.EdpIdKontaEmailWysylkiEdd)
                .HasConstraintName("FK_edd_Parametr_em_Account");

            entity.HasOne(d => d.EdpIdNumeracjiLnrNavigation).WithMany(p => p.EddParametrEdpIdNumeracjiLnrNavigations)
                .HasForeignKey(d => d.EdpIdNumeracjiLnr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_edd_Parametr_sl_FormatNumeracji_Lnr");

            entity.HasOne(d => d.EdpIdNumeracjiWiadomosciNavigation).WithMany(p => p.EddParametrEdpIdNumeracjiWiadomosciNavigations)
                .HasForeignKey(d => d.EdpIdNumeracjiWiadomosci)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_edd_Parametr_sl_FormatNumeracji_Wiadomosci");

            entity.HasOne(d => d.EdpKodRodzajuTransportuNavigation).WithMany(p => p.EddParametrs)
                .HasForeignKey(d => d.EdpKodRodzajuTransportu)
                .HasConstraintName("FK_edd_Parametr_sl_KodRodzajuTransportuEDD");

            entity.HasOne(d => d.EdpParamEwid).WithMany(p => p.EddParametrs)
                .HasForeignKey(d => d.EdpParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_edd_Parametr_par__Ewid");

            entity.HasOne(d => d.EdpTrybDostawyTwAkcyzowychNavigation).WithMany(p => p.EddParametrs)
                .HasForeignKey(d => d.EdpTrybDostawyTwAkcyzowych)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_edd_Parametr_sl_TrybDostawyTwAkcyzowych");

            entity.HasOne(d => d.EdpTrybOdroczonyWysylkiEddNavigation).WithMany(p => p.EddParametrs)
                .HasForeignKey(d => d.EdpTrybOdroczonyWysylkiEdd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_edd_Parametr_sl_TrybOdroczonyWysylkiEDD");
        });

        modelBuilder.Entity<EddReceivedStatusUpdate>(entity =>
        {
            entity.HasKey(e => e.EruId);

            entity.ToTable("edd_ReceivedStatusUpdate");

            entity.Property(e => e.EruId)
                .ValueGeneratedNever()
                .HasColumnName("eru_Id");
            entity.Property(e => e.EruAssignedDdarc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("eru_AssignedDDARC");
            entity.Property(e => e.EruEddMessageId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("eru_EddMessageId");
            entity.Property(e => e.EruInitialMatchingEddId).HasColumnName("eru_InitialMatchingEddId");
            entity.Property(e => e.EruReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("eru_ReceivedDate");
            entity.Property(e => e.EruSentDate)
                .HasColumnType("datetime")
                .HasColumnName("eru_SentDate");
            entity.Property(e => e.EruSourceMailId).HasColumnName("eru_SourceMailId");
            entity.Property(e => e.EruUpdateType).HasColumnName("eru_UpdateType");
        });

        modelBuilder.Entity<EmAccVisibleTo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em_AccVisibleTo");

            entity.Property(e => e.EvAccountId).HasColumnName("ev_AccountId");
            entity.Property(e => e.EvId).HasColumnName("ev_Id");
            entity.Property(e => e.EvUserId).HasColumnName("ev_UserId");

            entity.HasOne(d => d.EvAccount).WithMany()
                .HasForeignKey(d => d.EvAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_em_AccVisibleTo_em_AccVisibleTo");
        });

        modelBuilder.Entity<EmAccount>(entity =>
        {
            entity.HasKey(e => e.EaId).IsClustered(false);

            entity.ToTable("em_Account");

            entity.Property(e => e.EaId)
                .ValueGeneratedNever()
                .HasColumnName("ea_Id");
            entity.Property(e => e.EaAccountName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ea_AccountName");
            entity.Property(e => e.EaAttachmentsCode).HasColumnName("ea_AttachmentsCode");
            entity.Property(e => e.EaAttachmentsLimit).HasColumnName("ea_AttachmentsLimit");
            entity.Property(e => e.EaDefault).HasColumnName("ea_Default");
            entity.Property(e => e.EaDeleteAttAfterSending).HasColumnName("ea_DeleteAttAfterSending");
            entity.Property(e => e.EaDisabled).HasColumnName("ea_Disabled");
            entity.Property(e => e.EaDispositionNotification).HasColumnName("ea_DispositionNotification");
            entity.Property(e => e.EaLeaveOnServer).HasColumnName("ea_LeaveOnServer");
            entity.Property(e => e.EaLimitDailyHour).HasColumnName("ea_LimitDailyHour");
            entity.Property(e => e.EaLimitDailyValue).HasColumnName("ea_LimitDailyValue");
            entity.Property(e => e.EaLimitHours).HasColumnName("ea_LimitHours");
            entity.Property(e => e.EaLimitMinutes).HasColumnName("ea_LimitMinutes");
            entity.Property(e => e.EaLimitSeconds).HasColumnName("ea_LimitSeconds");
            entity.Property(e => e.EaLimitValue).HasColumnName("ea_LimitValue");
            entity.Property(e => e.EaLogin)
                .HasMaxLength(50)
                .HasColumnName("ea_Login");
            entity.Property(e => e.EaOauth2Provider).HasColumnName("ea_Oauth2Provider");
            entity.Property(e => e.EaOauth2RefreshToken)
                .HasColumnType("text")
                .HasColumnName("ea_Oauth2RefreshToken");
            entity.Property(e => e.EaOauth2Token)
                .HasColumnType("text")
                .HasColumnName("ea_Oauth2Token");
            entity.Property(e => e.EaOauth2TokenExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("ea_Oauth2TokenExpiryDate");
            entity.Property(e => e.EaOutlook).HasColumnName("ea_Outlook");
            entity.Property(e => e.EaOwnerId).HasColumnName("ea_OwnerId");
            entity.Property(e => e.EaPassword)
                .HasMaxLength(50)
                .HasColumnName("ea_Password");
            entity.Property(e => e.EaPassword2)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("ea_Password2");
            entity.Property(e => e.EaPop3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ea_POP3");
            entity.Property(e => e.EaPop3port)
                .HasDefaultValue(110)
                .HasColumnName("ea_POP3Port");
            entity.Property(e => e.EaPop3ssl).HasColumnName("ea_POP3SSL");
            entity.Property(e => e.EaPriority)
                .HasDefaultValue(2)
                .HasColumnName("ea_Priority");
            entity.Property(e => e.EaReplyTo)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("ea_ReplyTo");
            entity.Property(e => e.EaSendPackageSize).HasColumnName("ea_SendPackageSize");
            entity.Property(e => e.EaSmtp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ea_SMTP");
            entity.Property(e => e.EaSmtpauth).HasColumnName("ea_SMTPAuth");
            entity.Property(e => e.EaSmtpport)
                .HasDefaultValue(25)
                .HasColumnName("ea_SMTPPort");
            entity.Property(e => e.EaSmtpssl).HasColumnName("ea_SMTPSSL");
            entity.Property(e => e.EaUserAddress)
                .HasMaxLength(50)
                .HasColumnName("ea_UserAddress");
            entity.Property(e => e.EaUserName)
                .HasMaxLength(50)
                .HasColumnName("ea_UserName");
        });

        modelBuilder.Entity<EmAccountFolder>(entity =>
        {
            entity.HasKey(e => e.EafId);

            entity.ToTable("em_AccountFolder");

            entity.Property(e => e.EafId)
                .ValueGeneratedNever()
                .HasColumnName("eaf_Id");
            entity.Property(e => e.EafAccountId).HasColumnName("eaf_AccountId");
            entity.Property(e => e.EafEntryId)
                .HasColumnType("text")
                .HasColumnName("eaf_EntryId");
            entity.Property(e => e.EafOdbiorcza)
                .HasDefaultValue(true)
                .HasColumnName("eaf_Odbiorcza");
            entity.Property(e => e.EafStoreId)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("eaf_StoreId");
        });

        modelBuilder.Entity<EmArchive>(entity =>
        {
            entity.HasKey(e => e.EarId);

            entity.ToTable("em_Archive");

            entity.Property(e => e.EarId).HasColumnName("ear_Id");
            entity.Property(e => e.EarAccountId)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("ear_AccountId");
            entity.Property(e => e.EarUidl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ear_UIDL");
        });

        modelBuilder.Entity<EmAttachment>(entity =>
        {
            entity.HasKey(e => e.EtId);

            entity.ToTable("em_Attachment");

            entity.Property(e => e.EtId)
                .ValueGeneratedNever()
                .HasColumnName("et_Id");
            entity.Property(e => e.EtEmailId).HasColumnName("et_EmailId");
            entity.Property(e => e.EtFilename)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("et_Filename");
            entity.Property(e => e.EtFilepath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("et_Filepath");
        });

        modelBuilder.Entity<EmEmail>(entity =>
        {
            entity.HasKey(e => e.EmId).HasName("PK_em_Email");

            entity.ToTable("em__Email");

            entity.Property(e => e.EmId)
                .ValueGeneratedNever()
                .HasColumnName("em_Id");
            entity.Property(e => e.EmAccount)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("em_Account");
            entity.Property(e => e.EmAccountId).HasColumnName("em_AccountId");
            entity.Property(e => e.EmAttachmentCount)
                .HasDefaultValue(0)
                .HasColumnName("em_AttachmentCount");
            entity.Property(e => e.EmAuctionId).HasColumnName("em_AuctionId");
            entity.Property(e => e.EmBccTo)
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasColumnName("em_BccTo");
            entity.Property(e => e.EmCcTo)
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasColumnName("em_CcTo");
            entity.Property(e => e.EmChangedEncoding).HasColumnName("em_ChangedEncoding");
            entity.Property(e => e.EmCustomerId).HasColumnName("em_CustomerId");
            entity.Property(e => e.EmDate)
                .HasColumnType("datetime")
                .HasColumnName("em_Date");
            entity.Property(e => e.EmDeleteAttAfterSending).HasColumnName("em_DeleteAttAfterSending");
            entity.Property(e => e.EmDeleteStat).HasColumnName("em_DeleteStat");
            entity.Property(e => e.EmDispositionNotification).HasColumnName("em_DispositionNotification");
            entity.Property(e => e.EmDzialanie).HasColumnName("em_Dzialanie");
            entity.Property(e => e.EmFlag).HasColumnName("em_Flag");
            entity.Property(e => e.EmFrom)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("em_From");
            entity.Property(e => e.EmFromAddress)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("em_FromAddress");
            entity.Property(e => e.EmFromName)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("em_FromName");
            entity.Property(e => e.EmGroupId).HasColumnName("em_GroupId");
            entity.Property(e => e.EmHandled).HasColumnName("em_Handled");
            entity.Property(e => e.EmHtmlbody)
                .HasDefaultValue(false)
                .HasColumnName("em_HTMLBody");
            entity.Property(e => e.EmIsSpam).HasColumnName("em_IsSpam");
            entity.Property(e => e.EmMessageId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("em_MessageId");
            entity.Property(e => e.EmPackageId).HasColumnName("em_PackageId");
            entity.Property(e => e.EmPrevTransId).HasColumnName("em_PrevTransId");
            entity.Property(e => e.EmPriority)
                .HasDefaultValue(2)
                .HasColumnName("em_Priority");
            entity.Property(e => e.EmPrivateFor).HasColumnName("em_PrivateFor");
            entity.Property(e => e.EmProcessedForEddUpdates).HasColumnName("em_ProcessedForEddUpdates");
            entity.Property(e => e.EmRead).HasColumnName("em_Read");
            entity.Property(e => e.EmReceived)
                .HasColumnType("datetime")
                .HasColumnName("em_Received");
            entity.Property(e => e.EmReferenceType).HasColumnName("em_ReferenceType");
            entity.Property(e => e.EmReferencedMessageId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("em_ReferencedMessageId");
            entity.Property(e => e.EmReplyTo)
                .HasMaxLength(255)
                .HasColumnName("em_ReplyTo");
            entity.Property(e => e.EmSent)
                .HasColumnType("datetime")
                .HasColumnName("em_Sent");
            entity.Property(e => e.EmSource)
                .HasColumnType("text")
                .HasColumnName("em_Source");
            entity.Property(e => e.EmStatus).HasColumnName("em_Status");
            entity.Property(e => e.EmSubject)
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasColumnName("em_Subject");
            entity.Property(e => e.EmTo)
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasColumnName("em_To");
            entity.Property(e => e.EmTransId).HasColumnName("em_TransId");
            entity.Property(e => e.EmTransakcja).HasColumnName("em_Transakcja");
            entity.Property(e => e.EmUidl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("em_UIDL");
            entity.Property(e => e.EmWasAttDeleted).HasColumnName("em_WasAttDeleted");

            entity.HasOne(d => d.EmGroup).WithMany(p => p.EmEmails)
                .HasForeignKey(d => d.EmGroupId)
                .HasConstraintName("FK_em__Email_sl_CrmGrupaWiadomosci");
        });

        modelBuilder.Entity<EmProperty>(entity =>
        {
            entity.HasKey(e => e.EpId).HasName("PK_em_EmailPr");

            entity.ToTable("em_Properties");

            entity.Property(e => e.EpId)
                .ValueGeneratedNever()
                .HasColumnName("ep_Id");
            entity.Property(e => e.EpAutomat).HasColumnName("ep_Automat");
            entity.Property(e => e.EpCoIle).HasColumnName("ep_CoIle");
            entity.Property(e => e.EpCzasPrzeczyt)
                .HasDefaultValue(1)
                .HasColumnName("ep_CzasPrzeczyt");
            entity.Property(e => e.EpHtml)
                .HasDefaultValue(true)
                .HasColumnName("ep_Html");
            entity.Property(e => e.EpKontoId).HasColumnName("ep_KontoId");
            entity.Property(e => e.EpPrzeczytane)
                .HasDefaultValue(true)
                .HasColumnName("ep_Przeczytane");
            entity.Property(e => e.EpUserId).HasColumnName("ep_UserId");
            entity.Property(e => e.EpWyslijOdRazu).HasColumnName("ep_WyslijOdRazu");
            entity.Property(e => e.EpWyslijOdbierz).HasColumnName("ep_WyslijOdbierz");
            entity.Property(e => e.EpWyslijZamknij).HasColumnName("ep_WyslijZamknij");
        });

        modelBuilder.Entity<EmRule>(entity =>
        {
            entity.HasKey(e => e.ErId);

            entity.ToTable("em_Rule");

            entity.Property(e => e.ErId)
                .ValueGeneratedNever()
                .HasColumnName("er_Id");
            entity.Property(e => e.ErCheckSpamMark).HasColumnName("er_CheckSpamMark");
            entity.Property(e => e.ErEnabled)
                .HasDefaultValue(true)
                .HasColumnName("er_Enabled");
            entity.Property(e => e.ErFlag).HasColumnName("er_Flag");
            entity.Property(e => e.ErFlagaWlasnaId).HasColumnName("er_FlagaWlasnaId");
            entity.Property(e => e.ErGroupId).HasColumnName("er_GroupId");
            entity.Property(e => e.ErMarkAsRead).HasColumnName("er_MarkAsRead");
            entity.Property(e => e.ErMoveTo).HasColumnName("er_MoveTo");
            entity.Property(e => e.ErName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("er_Name");
            entity.Property(e => e.ErOperator)
                .HasDefaultValue(1)
                .HasColumnName("er_Operator");
            entity.Property(e => e.ErPriority).HasColumnName("er_Priority");
            entity.Property(e => e.ErPrivate).HasColumnName("er_Private");
            entity.Property(e => e.ErRank).HasColumnName("er_Rank");
            entity.Property(e => e.ErUserId).HasColumnName("er_UserId");

            entity.HasOne(d => d.ErFlagaWlasna).WithMany(p => p.EmRules)
                .HasForeignKey(d => d.ErFlagaWlasnaId)
                .HasConstraintName("FK_em_Rule_fl__Flagi");
        });

        modelBuilder.Entity<EmRuleWord>(entity =>
        {
            entity.HasKey(e => e.EwId);

            entity.ToTable("em_RuleWord");

            entity.Property(e => e.EwId)
                .ValueGeneratedNever()
                .HasColumnName("ew_Id");
            entity.Property(e => e.EwField).HasColumnName("ew_Field");
            entity.Property(e => e.EwRuleId).HasColumnName("ew_RuleId");
            entity.Property(e => e.EwWord)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ew_Word");

            entity.HasOne(d => d.EwRule).WithMany(p => p.EmRuleWords)
                .HasForeignKey(d => d.EwRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_em_RuleWord_em_Rule");
        });

        modelBuilder.Entity<EmSearchContent>(entity =>
        {
            entity.HasKey(e => e.EscId);

            entity.ToTable("em_SearchContent");

            entity.Property(e => e.EscId)
                .ValueGeneratedNever()
                .HasColumnName("esc_Id");
            entity.Property(e => e.EscContent)
                .HasDefaultValue("")
                .HasColumnType("ntext")
                .HasColumnName("esc_Content");
            entity.Property(e => e.EscEmailId).HasColumnName("esc_EmailId");
        });

        modelBuilder.Entity<EmSendersList>(entity =>
        {
            entity.HasKey(e => e.EslId);

            entity.ToTable("em_SendersList");

            entity.HasIndex(e => new { e.EslUserId, e.EslEntry }, "IX_em_SendersList").IsUnique();

            entity.HasIndex(e => e.EslUserId, "IX_em_SendersList_1");

            entity.Property(e => e.EslId).HasColumnName("esl_Id");
            entity.Property(e => e.EslEntry)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("esl_Entry");
            entity.Property(e => e.EslList).HasColumnName("esl_List");
            entity.Property(e => e.EslUserId).HasColumnName("esl_UserId");
        });

        modelBuilder.Entity<EmSignature>(entity =>
        {
            entity.HasKey(e => e.EsId);

            entity.ToTable("em_Signature");

            entity.Property(e => e.EsId).HasColumnName("es_Id");
            entity.Property(e => e.EsAccountId).HasColumnName("es_AccountId");
            entity.Property(e => e.EsMht)
                .HasColumnType("text")
                .HasColumnName("es_Mht");
            entity.Property(e => e.EsPosition).HasColumnName("es_Position");
            entity.Property(e => e.EsText)
                .HasColumnType("text")
                .HasColumnName("es_Text");
            entity.Property(e => e.EsUserId).HasColumnName("es_UserId");
        });

        modelBuilder.Entity<EmSource>(entity =>
        {
            entity.HasKey(e => e.EsId);

            entity.ToTable("em_Source", tb => tb.HasTrigger("tr_EmSource_Inserting"));

            entity.Property(e => e.EsId)
                .ValueGeneratedNever()
                .HasColumnName("es_Id");
            entity.Property(e => e.EsEmailId).HasColumnName("es_EmailId");
            entity.Property(e => e.EsSize).HasColumnName("es_Size");
            entity.Property(e => e.EsSource)
                .HasColumnType("text")
                .HasColumnName("es_Source");
            entity.Property(e => e.EsSourceData)
                .HasColumnType("image")
                .HasColumnName("es_SourceData");
            entity.Property(e => e.EsSourceNoAtt)
                .HasColumnType("image")
                .HasColumnName("es_SourceNoAtt");
        });

        modelBuilder.Entity<EmTemplate>(entity =>
        {
            entity.HasKey(e => e.EtId);

            entity.ToTable("em_Template");

            entity.Property(e => e.EtId)
                .ValueGeneratedNever()
                .HasColumnName("et_Id");
            entity.Property(e => e.EtBccTo)
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasColumnName("et_BccTo");
            entity.Property(e => e.EtCcTo)
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasColumnName("et_CcTo");
            entity.Property(e => e.EtDeleteAttachments).HasColumnName("et_DeleteAttachments");
            entity.Property(e => e.EtDispositionNotification).HasColumnName("et_DispositionNotification");
            entity.Property(e => e.EtFragment)
                .HasDefaultValue(false)
                .HasColumnName("et_Fragment");
            entity.Property(e => e.EtGroupId).HasColumnName("et_GroupId");
            entity.Property(e => e.EtHtml).HasColumnName("et_HTML");
            entity.Property(e => e.EtMht)
                .HasColumnType("text")
                .HasColumnName("et_Mht");
            entity.Property(e => e.EtName)
                .HasMaxLength(50)
                .HasColumnName("et_Name");
            entity.Property(e => e.EtPriority)
                .HasDefaultValue(2)
                .HasColumnName("et_Priority");
            entity.Property(e => e.EtPrivate).HasColumnName("et_Private");
            entity.Property(e => e.EtReplyTo)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("et_ReplyTo");
            entity.Property(e => e.EtSubject)
                .HasMaxLength(1000)
                .HasColumnName("et_Subject");
            entity.Property(e => e.EtText)
                .HasColumnType("ntext")
                .HasColumnName("et_Text");

            entity.HasOne(d => d.EtGroup).WithMany(p => p.EmTemplates)
                .HasForeignKey(d => d.EtGroupId)
                .HasConstraintName("FK_em_Template_sl_CrmGrupaWiadomosci");
        });

        modelBuilder.Entity<EsSprawozdanieFinElement>(entity =>
        {
            entity.HasKey(e => e.SfeId);

            entity.ToTable("es_SprawozdanieFinElement");

            entity.Property(e => e.SfeId)
                .ValueGeneratedNever()
                .HasColumnName("sfe_Id");
            entity.Property(e => e.SfeIdNaglowka).HasColumnName("sfe_IdNaglowka");
            entity.Property(e => e.SfeIdSprawozdania).HasColumnName("sfe_IdSprawozdania");
            entity.Property(e => e.SfeIdWersja).HasColumnName("sfe_IdWersja");
            entity.Property(e => e.SfeRodzaj).HasColumnName("sfe_Rodzaj");
            entity.Property(e => e.SfeXml)
                .HasColumnType("image")
                .HasColumnName("sfe_XML");
            entity.Property(e => e.SfeZatwierdzony).HasColumnName("sfe_Zatwierdzony");

            entity.HasOne(d => d.SfeIdNaglowkaNavigation).WithMany(p => p.EsSprawozdanieFinElements)
                .HasForeignKey(d => d.SfeIdNaglowka)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_es_SprawozdanieFinElement_es_SprawozdanieFinNaglowek");
        });

        modelBuilder.Entity<EsSprawozdanieFinNaglowek>(entity =>
        {
            entity.HasKey(e => e.SfnId);

            entity.ToTable("es_SprawozdanieFinNaglowek");

            entity.Property(e => e.SfnId)
                .ValueGeneratedNever()
                .HasColumnName("sfn_Id");
            entity.Property(e => e.SfnDataZatwierdzenia)
                .HasColumnType("datetime")
                .HasColumnName("sfn_DataZatwierdzenia");
            entity.Property(e => e.SfnIdRoku).HasColumnName("sfn_IdRoku");
            entity.Property(e => e.SfnImportowany).HasColumnName("sfn_Importowany");
            entity.Property(e => e.SfnMiejsceSkladania).HasColumnName("sfn_MiejsceSkladania");
            entity.Property(e => e.SfnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfn_Nazwa");
            entity.Property(e => e.SfnOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("sfn_OkresDo");
            entity.Property(e => e.SfnOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("sfn_OkresOd");
            entity.Property(e => e.SfnTyp).HasColumnName("sfn_Typ");
            entity.Property(e => e.SfnWariant).HasColumnName("sfn_Wariant");
            entity.Property(e => e.SfnWersjaSchemy)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sfn_WersjaSchemy");
            entity.Property(e => e.SfnWersjaTechniczna).HasColumnName("sfn_WersjaTechniczna");
            entity.Property(e => e.SfnWybraneRodzaje).HasColumnName("sfn_WybraneRodzaje");
            entity.Property(e => e.SfnWyeksportowany).HasColumnName("sfn_Wyeksportowany");
            entity.Property(e => e.SfnZatwierdzony).HasColumnName("sfn_Zatwierdzony");
        });

        modelBuilder.Entity<EsWysylkaElektroniczna>(entity =>
        {
            entity.HasKey(e => e.SfwId);

            entity.ToTable("es_WysylkaElektroniczna");

            entity.Property(e => e.SfwId)
                .ValueGeneratedNever()
                .HasColumnName("sfw_Id");
            entity.Property(e => e.SfwIdNaglowka).HasColumnName("sfw_IdNaglowka");
            entity.Property(e => e.SfwNrReferencyjny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfw_NrReferencyjny");
            entity.Property(e => e.SfwPaczkaZip)
                .HasColumnType("image")
                .HasColumnName("sfw_PaczkaZip");
            entity.Property(e => e.SfwStatus).HasColumnName("sfw_Status");
            entity.Property(e => e.SfwUpo)
                .HasColumnType("image")
                .HasColumnName("sfw_Upo");
            entity.Property(e => e.SfwUpoData)
                .HasColumnType("datetime")
                .HasColumnName("sfw_UpoData");
            entity.Property(e => e.SfwUpoZrodlo).HasColumnName("sfw_UpoZrodlo");
            entity.Property(e => e.SfwWyslanyData)
                .HasColumnType("datetime")
                .HasColumnName("sfw_WyslanyData");
            entity.Property(e => e.SfwXmlpodpisany)
                .HasColumnType("image")
                .HasColumnName("sfw_XMLPodpisany");

            entity.HasOne(d => d.SfwIdNaglowkaNavigation).WithMany(p => p.EsWysylkaElektronicznas)
                .HasForeignKey(d => d.SfwIdNaglowka)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_es_WysylkaElektroniczna_es_SprawozdanieFinNaglowek");
        });

        modelBuilder.Entity<EsWysylkaElektronicznaLog>(entity =>
        {
            entity.HasKey(e => e.SfwlId);

            entity.ToTable("es_WysylkaElektronicznaLog");

            entity.Property(e => e.SfwlId)
                .ValueGeneratedNever()
                .HasColumnName("sfwl_Id");
            entity.Property(e => e.SfwlData)
                .HasColumnType("datetime")
                .HasColumnName("sfwl_Data");
            entity.Property(e => e.SfwlIdWysylki).HasColumnName("sfwl_IdWysylki");
            entity.Property(e => e.SfwlOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfwl_Opis");

            entity.HasOne(d => d.SfwlIdWysylkiNavigation).WithMany(p => p.EsWysylkaElektronicznaLogs)
                .HasForeignKey(d => d.SfwlIdWysylki)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_es_WysylkaElektroniczna_es_WysylkaElektronicznaLog");
        });

        modelBuilder.Entity<EwaEwidencjeAkcyzowe>(entity =>
        {
            entity.HasKey(e => e.EwaId);

            entity.ToTable("ewa__EwidencjeAkcyzowe");

            entity.Property(e => e.EwaId)
                .ValueGeneratedNever()
                .HasColumnName("ewa_Id");
            entity.Property(e => e.EwaBufor)
                .HasDefaultValue(true)
                .HasColumnName("ewa_Bufor");
            entity.Property(e => e.EwaDataKorekty)
                .HasColumnType("datetime")
                .HasColumnName("ewa_DataKorekty");
            entity.Property(e => e.EwaDataSprzedazy)
                .HasColumnType("datetime")
                .HasColumnName("ewa_DataSprzedazy");
            entity.Property(e => e.EwaDataWydania)
                .HasColumnType("datetime")
                .HasColumnName("ewa_DataWydania");
            entity.Property(e => e.EwaDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("ewa_DataWystawienia");
            entity.Property(e => e.EwaDokId).HasColumnName("ewa_DokId");
            entity.Property(e => e.EwaDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ewa_DokNrPelny");
            entity.Property(e => e.EwaGrupa)
                .HasComputedColumnSql("(case when [ewa_KorektaDoId] IS NULL then [ewa_Id] else [ewa_KorektaDoId] end)", false)
                .HasColumnName("ewa_Grupa");
            entity.Property(e => e.EwaIlosc)
                .HasColumnType("money")
                .HasColumnName("ewa_Ilosc");
            entity.Property(e => e.EwaKhAdrNrDomu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ewa_KhAdrNrDomu");
            entity.Property(e => e.EwaKhAdrNrLokalu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ewa_KhAdrNrLokalu");
            entity.Property(e => e.EwaKhAdrUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ewa_KhAdrUlica");
            entity.Property(e => e.EwaKhAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when [ewa_KhAdrNrLokalu]<>'' then ((([ewa_KhAdrUlica]+' ')+[ewa_KhAdrNrDomu])+'/')+[ewa_KhAdrNrLokalu] else ([ewa_KhAdrUlica]+' ')+[ewa_KhAdrNrDomu] end)", false)
                .HasColumnName("ewa_KhAdres");
            entity.Property(e => e.EwaKhId).HasColumnName("ewa_KhId");
            entity.Property(e => e.EwaKhKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ewa_KhKod");
            entity.Property(e => e.EwaKhMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ewa_KhMiejscowosc");
            entity.Property(e => e.EwaKhNazwa)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ewa_KhNazwa");
            entity.Property(e => e.EwaKhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ewa_KhNIP");
            entity.Property(e => e.EwaKhPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("ewa_KhPESEL");
            entity.Property(e => e.EwaKhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ewa_KhSymbol");
            entity.Property(e => e.EwaKorektaAdnotacja)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ewa_KorektaAdnotacja");
            entity.Property(e => e.EwaKorektaDoId).HasColumnName("ewa_KorektaDoId");
            entity.Property(e => e.EwaKorygowana).HasColumnName("ewa_Korygowana");
            entity.Property(e => e.EwaMagId).HasColumnName("ewa_MagId");
            entity.Property(e => e.EwaPowodZwolnieniaId).HasColumnName("ewa_PowodZwolnieniaId");
            entity.Property(e => e.EwaPowodZwolnieniaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ewa_PowodZwolnieniaNazwa");
            entity.Property(e => e.EwaPozId).HasColumnName("ewa_PozId");
            entity.Property(e => e.EwaTwId).HasColumnName("ewa_TwId");
            entity.Property(e => e.EwaTwKodTowaru)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ewa_TwKodTowaru");
            entity.Property(e => e.EwaTwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ewa_TwNazwa");
            entity.Property(e => e.EwaTwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ewa_TwSymbol");
            entity.Property(e => e.EwaTyp).HasColumnName("ewa_Typ");
            entity.Property(e => e.EwaWartoscAkcyzy)
                .HasColumnType("money")
                .HasColumnName("ewa_WartoscAkcyzy");
            entity.Property(e => e.EwaWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("ewa_WartoscBrutto");
            entity.Property(e => e.EwaWartoscNetto)
                .HasColumnType("money")
                .HasColumnName("ewa_WartoscNetto");
            entity.Property(e => e.EwaWystawilKorekte)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ewa_WystawilKorekte");
        });

        modelBuilder.Entity<ExSciezkaDomyslna>(entity =>
        {
            entity.HasKey(e => e.ExId);

            entity.ToTable("ex_SciezkaDomyslna");

            entity.Property(e => e.ExId).HasColumnName("ex_Id");
            entity.Property(e => e.ExIdUzytkownika).HasColumnName("ex_IdUzytkownika");
            entity.Property(e => e.ExNazwaKomputera)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ex_NazwaKomputera");
            entity.Property(e => e.ExRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("ex_Rodzaj");
            entity.Property(e => e.ExSciezka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ex_Sciezka");
        });

        modelBuilder.Entity<FlFlagi>(entity =>
        {
            entity.HasKey(e => e.FlgId);

            entity.ToTable("fl__Flagi");

            entity.HasIndex(e => new { e.FlgIdGrupy, e.FlgNumer }, "GN_fl__Flagi").IsUnique();

            entity.Property(e => e.FlgId)
                .ValueGeneratedNever()
                .HasColumnName("flg_Id");
            entity.Property(e => e.FlgDomyslna).HasColumnName("flg_Domyslna");
            entity.Property(e => e.FlgDomyslnyKomentarz)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("flg_DomyslnyKomentarz");
            entity.Property(e => e.FlgIdGrupy).HasColumnName("flg_IdGrupy");
            entity.Property(e => e.FlgIdUprNadaj).HasColumnName("flg_IdUprNadaj");
            entity.Property(e => e.FlgIdUprZdejmij).HasColumnName("flg_IdUprZdejmij");
            entity.Property(e => e.FlgNumer).HasColumnName("flg_Numer");
            entity.Property(e => e.FlgText)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("flg_Text");

            entity.HasOne(d => d.FlgIdGrupyNavigation).WithMany(p => p.FlFlagis)
                .HasForeignKey(d => d.FlgIdGrupy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fl__Flagi_fl_Grupy");
        });

        modelBuilder.Entity<FlGrupy>(entity =>
        {
            entity.HasKey(e => e.FlpId);

            entity.ToTable("fl_Grupy");

            entity.Property(e => e.FlpId)
                .ValueGeneratedNever()
                .HasColumnName("flp_Id");
            entity.Property(e => e.FlpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("flp_Nazwa");
        });

        modelBuilder.Entity<FlWartosc>(entity =>
        {
            entity.HasKey(e => new { e.FlwIdGrupyFlag, e.FlwTypObiektu, e.FlwIdObiektu });

            entity.ToTable("fl_Wartosc");

            entity.Property(e => e.FlwIdGrupyFlag).HasColumnName("flw_IdGrupyFlag");
            entity.Property(e => e.FlwTypObiektu).HasColumnName("flw_TypObiektu");
            entity.Property(e => e.FlwIdObiektu).HasColumnName("flw_IdObiektu");
            entity.Property(e => e.FlwCzasOstatniejZmiany)
                .HasColumnType("datetime")
                .HasColumnName("flw_CzasOstatniejZmiany");
            entity.Property(e => e.FlwIdFlagi).HasColumnName("flw_IdFlagi");
            entity.Property(e => e.FlwIdUzytkownika).HasColumnName("flw_IdUzytkownika");
            entity.Property(e => e.FlwKomentarz)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("flw_Komentarz");

            entity.HasOne(d => d.FlwIdFlagiNavigation).WithMany(p => p.FlWartoscs)
                .HasForeignKey(d => d.FlwIdFlagi)
                .HasConstraintName("FK_fl_Wartosc_fl__Flagi");

            entity.HasOne(d => d.FlwIdGrupyFlagNavigation).WithMany(p => p.FlWartoscs)
                .HasForeignKey(d => d.FlwIdGrupyFlag)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fl_Wartosc_fl_Grupy");

            entity.HasOne(d => d.FlwIdUzytkownikaNavigation).WithMany(p => p.FlWartoscs)
                .HasForeignKey(d => d.FlwIdUzytkownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fl_Wartosc_pd_Uzytkownik");
        });

        modelBuilder.Entity<FnxCechaTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_CechaTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
            entity.Property(e => e.MtSubiektProductId).HasColumnName("mt_SubiektProductId");
        });

        modelBuilder.Entity<FnxCenaTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_CenaTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId1).HasColumnName("mt_MultiStoreId1");
            entity.Property(e => e.MtMultiStoreId10).HasColumnName("mt_MultiStoreId10");
            entity.Property(e => e.MtMultiStoreId2).HasColumnName("mt_MultiStoreId2");
            entity.Property(e => e.MtMultiStoreId3).HasColumnName("mt_MultiStoreId3");
            entity.Property(e => e.MtMultiStoreId4).HasColumnName("mt_MultiStoreId4");
            entity.Property(e => e.MtMultiStoreId5).HasColumnName("mt_MultiStoreId5");
            entity.Property(e => e.MtMultiStoreId6).HasColumnName("mt_MultiStoreId6");
            entity.Property(e => e.MtMultiStoreId7).HasColumnName("mt_MultiStoreId7");
            entity.Property(e => e.MtMultiStoreId8).HasColumnName("mt_MultiStoreId8");
            entity.Property(e => e.MtMultiStoreId9).HasColumnName("mt_MultiStoreId9");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
            entity.Property(e => e.MtSubiektProductId).HasColumnName("mt_SubiektProductId");
        });

        modelBuilder.Entity<FnxDocSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_DocSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtDescription)
                .HasMaxLength(255)
                .HasColumnName("mt_Description");
            entity.Property(e => e.MtFirstDocId).HasColumnName("mt_FirstDocId");
            entity.Property(e => e.MtFirstDocRealisationDocumentId).HasColumnName("mt_FirstDocRealisationDocumentId");
            entity.Property(e => e.MtFirstStateId).HasColumnName("mt_FirstStateId");
            entity.Property(e => e.MtFirstTypeId).HasColumnName("mt_FirstTypeId");
            entity.Property(e => e.MtIsPaid)
                .HasDefaultValue(false)
                .HasColumnName("mt_IsPaid");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtSecondDocId).HasColumnName("mt_SecondDocId");
            entity.Property(e => e.MtSecondStateId).HasColumnName("mt_SecondStateId");
            entity.Property(e => e.MtSecondTypeId).HasColumnName("mt_SecondTypeId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
        });

        modelBuilder.Entity<FnxFenik>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx__Feniks");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtAmountOfPictures).HasColumnName("mt_AmountOfPictures");
            entity.Property(e => e.MtAmountOfProducts).HasColumnName("mt_AmountOfProducts");
            entity.Property(e => e.MtApiKey)
                .HasMaxLength(128)
                .HasColumnName("mt_ApiKey");
            entity.Property(e => e.MtLastSyncDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSyncDate");
            entity.Property(e => e.MtLicenseDescription)
                .HasMaxLength(256)
                .HasColumnName("mt_LicenseDescription");
            entity.Property(e => e.MtLicenseExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LicenseExpirationDate");
            entity.Property(e => e.MtLicenseStatus).HasColumnName("mt_LicenseStatus");
            entity.Property(e => e.MtLicenseType).HasColumnName("mt_LicenseType");
            entity.Property(e => e.MtNewOrders).HasColumnName("mt_NewOrders");
            entity.Property(e => e.MtSyncMachine)
                .HasMaxLength(1000)
                .HasColumnName("mt_SyncMachine");
            entity.Property(e => e.MtSyncState).HasColumnName("mt_SyncState");
            entity.Property(e => e.MtTriggersEnabled).HasColumnName("mt_TriggersEnabled");
            entity.Property(e => e.MtWebsiteAddress)
                .HasMaxLength(256)
                .HasColumnName("mt_WebsiteAddress");
            entity.Property(e => e.MtWebsiteAdminEmail)
                .HasMaxLength(256)
                .HasColumnName("mt_WebsiteAdminEmail");
            entity.Property(e => e.MtWebsiteName)
                .HasMaxLength(256)
                .HasColumnName("mt_WebsiteName");
            entity.Property(e => e.MtWebsiteStatus).HasColumnName("mt_WebsiteStatus");
            entity.Property(e => e.MtWebsiteType).HasColumnName("mt_WebsiteType");
            entity.Property(e => e.MtWizardAddress)
                .HasMaxLength(1000)
                .HasColumnName("mt_WizardAddress");
        });

        modelBuilder.Entity<FnxFirmaSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_FirmaSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxGrupaTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_GrupaTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxJednostkaMiaryTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_JednostkaMiaryTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
            entity.Property(e => e.MtSubiektProductId).HasColumnName("mt_SubiektProductId");
        });

        modelBuilder.Entity<FnxKategoriaSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_KategoriaSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxKlientSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_KlientSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxKontrahentSklepuSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_KontrahentSklepuSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxKontrahentSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_KontrahentSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxMagazynSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_MagazynSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtActive)
                .HasDefaultValue(true)
                .HasColumnName("mt_Active");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxNewsletter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fnx_Newsletter");

            entity.Property(e => e.MtDirection).HasColumnName("mt_Direction");
            entity.Property(e => e.MtDoSubscribe).HasColumnName("mt_DoSubscribe");
            entity.Property(e => e.MtEmail)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("mt_Email");
            entity.Property(e => e.MtFeniksId).HasColumnName("mt_FeniksId");
            entity.Property(e => e.MtId)
                .ValueGeneratedOnAdd()
                .HasColumnName("mt_Id");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxParametrSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_ParametrSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId1).HasColumnName("mt_MultiStoreId1");
            entity.Property(e => e.MtMultiStoreId10).HasColumnName("mt_MultiStoreId10");
            entity.Property(e => e.MtMultiStoreId2).HasColumnName("mt_MultiStoreId2");
            entity.Property(e => e.MtMultiStoreId3).HasColumnName("mt_MultiStoreId3");
            entity.Property(e => e.MtMultiStoreId4).HasColumnName("mt_MultiStoreId4");
            entity.Property(e => e.MtMultiStoreId5).HasColumnName("mt_MultiStoreId5");
            entity.Property(e => e.MtMultiStoreId6).HasColumnName("mt_MultiStoreId6");
            entity.Property(e => e.MtMultiStoreId7).HasColumnName("mt_MultiStoreId7");
            entity.Property(e => e.MtMultiStoreId8).HasColumnName("mt_MultiStoreId8");
            entity.Property(e => e.MtMultiStoreId9).HasColumnName("mt_MultiStoreId9");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxPlatnoscSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_PlatnoscSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxPoleWlasneSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_PoleWlasneSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxPromocjaPoziomCenSynch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fnx_PromocjaPoziomCenSynch");

            entity.Property(e => e.MtId)
                .ValueGeneratedOnAdd()
                .HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektPoziomCenId).HasColumnName("mt_SubiektPoziomCenId");
            entity.Property(e => e.MtSubiektPromocjaId).HasColumnName("mt_SubiektPromocjaId");
        });

        modelBuilder.Entity<FnxPromocjaSynch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fnx_PromocjaSynch");

            entity.Property(e => e.MtId)
                .ValueGeneratedOnAdd()
                .HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxPromocjaTowarSynch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fnx_PromocjaTowarSynch");

            entity.Property(e => e.MtId)
                .ValueGeneratedOnAdd()
                .HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektPromocjaId).HasColumnName("mt_SubiektPromocjaId");
            entity.Property(e => e.MtSubiektTowarId).HasColumnName("mt_SubiektTowarId");
        });

        modelBuilder.Entity<FnxSlCechaTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_SlCechaTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxSlModelTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId).HasName("PK_fnx_ModelTwSynch");

            entity.ToTable("fnx_SlModelTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxSlRabatSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_SlRabatSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxSlWalutaSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_SlWalutaSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxSlWlasciwoscCechaTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId).HasName("PK_fnx_WlasciwoscCechaTwSynch");

            entity.ToTable("fnx_SlWlasciwoscCechaTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxSlWlasciwoscTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId).HasName("PK_fnx_WlasciwoscTwSynch");

            entity.ToTable("fnx_SlWlasciwoscTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxStanSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_StanSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektProductId).HasColumnName("mt_SubiektProductId");
            entity.Property(e => e.MtSubiektWarehouseId).HasColumnName("mt_SubiektWarehouseId");
        });

        modelBuilder.Entity<FnxStawkaVatSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_StawkaVatSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxTowarKodySynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_TowarKodySynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxTowarSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_TowarSynch", tb => tb.HasTrigger("Feniksfnx_TowarSynchInsert"));

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtDimensionsChanged)
                .HasColumnType("datetime")
                .HasColumnName("mt_DimensionsChanged");
            entity.Property(e => e.MtHistoryMultiStoreId).HasColumnName("mt_HistoryMultiStoreId");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
        });

        modelBuilder.Entity<FnxZdjecieTwSynch>(entity =>
        {
            entity.HasKey(e => e.MtId);

            entity.ToTable("fnx_ZdjecieTwSynch");

            entity.Property(e => e.MtId).HasColumnName("mt_Id");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtMultiStoreId).HasColumnName("mt_MultiStoreId");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.MtSubiektId).HasColumnName("mt_SubiektId");
            entity.Property(e => e.MtSubiektProductId).HasColumnName("mt_SubiektProductId");
        });

        modelBuilder.Entity<FoObiektDefinicja>(entity =>
        {
            entity.HasKey(e => e.FodId);

            entity.ToTable("fo_ObiektDefinicja");

            entity.Property(e => e.FodId)
                .ValueGeneratedNever()
                .HasColumnName("fod_Id");
            entity.Property(e => e.FodBiblDokTyp).HasColumnName("fod_BiblDokTyp");
            entity.Property(e => e.FodFlagiWlasneTyp).HasColumnName("fod_FlagiWlasneTyp");
            entity.Property(e => e.FodFormatNumeracji).HasColumnName("fod_FormatNumeracji");
            entity.Property(e => e.FodIdModulu).HasColumnName("fod_IdModulu");
            entity.Property(e => e.FodIdentyfikator)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fod_Identyfikator");
            entity.Property(e => e.FodKomponentWielogridowy).HasColumnName("fod_KomponentWielogridowy");
            entity.Property(e => e.FodNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fod_Nazwa");
            entity.Property(e => e.FodParTyp).HasColumnName("fod_ParTyp");
            entity.Property(e => e.FodPokazLicznik).HasColumnName("fod_PokazLicznik");
            entity.Property(e => e.FodPolaWlasneTyp).HasColumnName("fod_PolaWlasneTyp");
            entity.Property(e => e.FodTabela)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("fod_Tabela");
            entity.Property(e => e.FodTabelaParametr)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("fod_TabelaParametr");
            entity.Property(e => e.FodTypKontekstu).HasColumnName("fod_TypKontekstu");
            entity.Property(e => e.FodTypObiektu).HasColumnName("fod_TypObiektu");
            entity.Property(e => e.FodTytulModulu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fod_TytulModulu");
            entity.Property(e => e.FodUpidBiblDok).HasColumnName("fod_UpidBiblDok");
            entity.Property(e => e.FodUpidBiblDokBlokady).HasColumnName("fod_UpidBiblDokBlokady");
            entity.Property(e => e.FodUpidBiblDokDoei).HasColumnName("fod_UpidBiblDokDoei");
            entity.Property(e => e.FodUpidBiblDokEdycja).HasColumnName("fod_UpidBiblDokEdycja");
            entity.Property(e => e.FodUpidBiblDokUsun).HasColumnName("fod_UpidBiblDokUsun");
            entity.Property(e => e.FodUpidDodaj).HasColumnName("fod_UpidDodaj");
            entity.Property(e => e.FodUpidDrukuj).HasColumnName("fod_UpidDrukuj");
            entity.Property(e => e.FodUpidPokaz).HasColumnName("fod_UpidPokaz");
            entity.Property(e => e.FodUpidPopraw).HasColumnName("fod_UpidPopraw");
            entity.Property(e => e.FodUpidUsun).HasColumnName("fod_UpidUsun");
            entity.Property(e => e.FodWydrukTyp).HasColumnName("fod_WydrukTyp");
        });

        modelBuilder.Entity<FoObiektPole>(entity =>
        {
            entity.HasKey(e => e.FopId);

            entity.ToTable("fo_ObiektPole");

            entity.Property(e => e.FopId)
                .ValueGeneratedNever()
                .HasColumnName("fop_Id");
            entity.Property(e => e.FopFiltrWlasnySql)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fop_FiltrWlasnySql");
            entity.Property(e => e.FopGridCfg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fop_GridCfg");
            entity.Property(e => e.FopGridColumnsInfo)
                .HasColumnType("image")
                .HasColumnName("fop_GridColumnsInfo");
            entity.Property(e => e.FopGridColumnsVisibility)
                .HasColumnType("image")
                .HasColumnName("fop_GridColumnsVisibility");
            entity.Property(e => e.FopGridListInfo)
                .HasColumnType("image")
                .HasColumnName("fop_GridListInfo");
            entity.Property(e => e.FopGridTableInfo)
                .HasColumnType("image")
                .HasColumnName("fop_GridTableInfo");
            entity.Property(e => e.FopIdZakladki).HasColumnName("fop_IdZakladki");
            entity.Property(e => e.FopKolejnosc).HasColumnName("fop_Kolejnosc");
            entity.Property(e => e.FopKolumna)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("fop_Kolumna");
            entity.Property(e => e.FopKolumnaParametr)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("fop_KolumnaParametr");
            entity.Property(e => e.FopLinkJakoPrzycisk).HasColumnName("fop_LinkJakoPrzycisk");
            entity.Property(e => e.FopNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fop_Nazwa");
            entity.Property(e => e.FopNazwaGrid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fop_NazwaGrid");
            entity.Property(e => e.FopNazwaOkno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fop_NazwaOkno");
            entity.Property(e => e.FopPodsumowanie).HasColumnName("fop_Podsumowanie");
            entity.Property(e => e.FopPozycjaIdent)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fop_PozycjaIdent");
            entity.Property(e => e.FopRozmiar).HasColumnName("fop_Rozmiar");
            entity.Property(e => e.FopSlownikId).HasColumnName("fop_SlownikId");
            entity.Property(e => e.FopSql)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("fop_Sql");
            entity.Property(e => e.FopSzeroka).HasColumnName("fop_Szeroka");
            entity.Property(e => e.FopTekst)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("fop_Tekst");
            entity.Property(e => e.FopTylkoDoOdczytu).HasColumnName("fop_TylkoDoOdczytu");
            entity.Property(e => e.FopTyp).HasColumnName("fop_Typ");
            entity.Property(e => e.FopUnikalne).HasColumnName("fop_Unikalne");
            entity.Property(e => e.FopWarunekSql)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("fop_WarunekSql");
            entity.Property(e => e.FopWidocznoscModul)
                .HasDefaultValue(1)
                .HasColumnName("fop_WidocznoscModul");
            entity.Property(e => e.FopWidocznoscParametr).HasColumnName("fop_WidocznoscParametr");
            entity.Property(e => e.FopWidocznoscZakladka)
                .HasDefaultValue(true)
                .HasColumnName("fop_WidocznoscZakladka");
            entity.Property(e => e.FopWiersze)
                .HasDefaultValue(1)
                .HasColumnName("fop_Wiersze");
            entity.Property(e => e.FopWyliczanieSql)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("fop_WyliczanieSql");
            entity.Property(e => e.FopWyliczanieSqlZdarzenie).HasColumnName("fop_WyliczanieSqlZdarzenie");
            entity.Property(e => e.FopWymagane).HasColumnName("fop_Wymagane");
        });

        modelBuilder.Entity<FoObiektZakladka>(entity =>
        {
            entity.HasKey(e => e.FozId).HasName("PK_fo_Zakladka");

            entity.ToTable("fo_ObiektZakladka");

            entity.Property(e => e.FozId)
                .ValueGeneratedNever()
                .HasColumnName("foz_Id");
            entity.Property(e => e.FozIdDefinicji).HasColumnName("foz_IdDefinicji");
            entity.Property(e => e.FozKolejnosc).HasColumnName("foz_Kolejnosc");
            entity.Property(e => e.FozNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("foz_Nazwa");
            entity.Property(e => e.FozStworzUprawnienia).HasColumnName("foz_StworzUprawnienia");
            entity.Property(e => e.FozUpidEdytuj).HasColumnName("foz_UpidEdytuj");
            entity.Property(e => e.FozUpidPokaz).HasColumnName("foz_UpidPokaz");

            entity.HasOne(d => d.FozIdDefinicjiNavigation).WithMany(p => p.FoObiektZakladkas)
                .HasForeignKey(d => d.FozIdDefinicji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fo_ObiektZakladka_fo_ObiektDefinicja");
        });

        modelBuilder.Entity<FoZakladkaWlasnaPowiazanie>(entity =>
        {
            entity.HasKey(e => e.FozpId);

            entity.ToTable("fo_ZakladkaWlasnaPowiazanie");

            entity.Property(e => e.FozpId)
                .ValueGeneratedNever()
                .HasColumnName("fozp_Id");
            entity.Property(e => e.FozpIdDefinicji).HasColumnName("fozp_IdDefinicji");
            entity.Property(e => e.FozpObiektTyp).HasColumnName("fozp_ObiektTyp");
            entity.Property(e => e.FozpObiektTypEx).HasColumnName("fozp_ObiektTypEx");
        });

        modelBuilder.Entity<GrFiltrWartosc>(entity =>
        {
            entity.HasKey(e => e.GrwId).HasName("PK_gr__FiltrWartosc_1");

            entity.ToTable("gr_FiltrWartosc");

            entity.Property(e => e.GrwId)
                .ValueGeneratedNever()
                .HasColumnName("grw_Id");
            entity.Property(e => e.GrwIdFiltra).HasColumnName("grw_IdFiltra");
            entity.Property(e => e.GrwIdUzytkownika).HasColumnName("grw_IdUzytkownika");
            entity.Property(e => e.GrwProfil)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("grw_Profil");
            entity.Property(e => e.GrwWartosc)
                .HasColumnType("image")
                .HasColumnName("grw_Wartosc");
        });

        modelBuilder.Entity<GrFiltrWlasny>(entity =>
        {
            entity.HasKey(e => e.GrfId).HasName("PK_gr__FiltrWlasny");

            entity.ToTable("gr_FiltrWlasny");

            entity.Property(e => e.GrfId)
                .ValueGeneratedNever()
                .HasColumnName("grf_Id");
            entity.Property(e => e.GrfIdGrida).HasColumnName("grf_IdGrida");
            entity.Property(e => e.GrfNazwa)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("grf_Nazwa");
            entity.Property(e => e.GrfSql)
                .HasColumnType("text")
                .HasColumnName("grf_Sql");
        });

        modelBuilder.Entity<GrFormatowanie>(entity =>
        {
            entity.HasKey(e => e.GrfwId).HasName("PK_gr_FormatowanieWarunkowe");

            entity.ToTable("gr_Formatowanie");

            entity.Property(e => e.GrfwId)
                .ValueGeneratedNever()
                .HasColumnName("grfw_Id");
            entity.Property(e => e.GrfwFormatowanie)
                .HasColumnType("image")
                .HasColumnName("grfw_Formatowanie");
            entity.Property(e => e.GrfwGrid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("grfw_Grid");
            entity.Property(e => e.GrfwIdModulu).HasColumnName("grfw_IdModulu");
            entity.Property(e => e.GrfwKolejnosc).HasColumnName("grfw_Kolejnosc");
            entity.Property(e => e.GrfwNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("grfw_Nazwa");
            entity.Property(e => e.GrfwSqlTabele)
                .HasColumnType("text")
                .HasColumnName("grfw_SqlTabele");
            entity.Property(e => e.GrfwSqlWarunek)
                .HasColumnType("text")
                .HasColumnName("grfw_SqlWarunek");
        });

        modelBuilder.Entity<GrFormatowanieUzytkownik>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("gr_FormatowanieUzytkownik");

            entity.Property(e => e.GrfwuIdFormatowania).HasColumnName("grfwu_IdFormatowania");
            entity.Property(e => e.GrfwuIdUzytkownika).HasColumnName("grfwu_IdUzytkownika");

            entity.HasOne(d => d.GrfwuIdFormatowaniaNavigation).WithMany()
                .HasForeignKey(d => d.GrfwuIdFormatowania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gr_FormatowanieUzytkownik_gr_Formatowanie");

            entity.HasOne(d => d.GrfwuIdUzytkownikaNavigation).WithMany()
                .HasForeignKey(d => d.GrfwuIdUzytkownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gr_FormatowanieUzytkownik_pd_Uzytkownik");
        });

        modelBuilder.Entity<GrFormatowanieWarunek>(entity =>
        {
            entity.HasKey(e => e.GrfwwId);

            entity.ToTable("gr_FormatowanieWarunek");

            entity.Property(e => e.GrfwwId)
                .ValueGeneratedNever()
                .HasColumnName("grfww_Id");
            entity.Property(e => e.GrfwwIdFormatowania).HasColumnName("grfww_IdFormatowania");
            entity.Property(e => e.GrfwwKolumnaNazwa)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("grfww_KolumnaNazwa");
            entity.Property(e => e.GrfwwKolumnaPole)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("grfww_KolumnaPole");
            entity.Property(e => e.GrfwwOperator).HasColumnName("grfww_Operator");
            entity.Property(e => e.GrfwwWartosc)
                .HasColumnType("text")
                .HasColumnName("grfww_Wartosc");
            entity.Property(e => e.GrfwwWarunek).HasColumnName("grfww_Warunek");

            entity.HasOne(d => d.GrfwwIdFormatowaniaNavigation).WithMany(p => p.GrFormatowanieWaruneks)
                .HasForeignKey(d => d.GrfwwIdFormatowania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gr_FormatowanieWlasneWarunek_gr_FormatowanieWlasne");
        });

        modelBuilder.Entity<GrGrid>(entity =>
        {
            entity.HasKey(e => e.GrId).HasName("PK_gr__FiltrWartosc");

            entity.ToTable("gr__Grid");

            entity.Property(e => e.GrId)
                .ValueGeneratedNever()
                .HasColumnName("gr_Id");
            entity.Property(e => e.GrFiltrDodatkowy)
                .HasColumnType("text")
                .HasColumnName("gr_FiltrDodatkowy");
            entity.Property(e => e.GrFiltrDodatkowyWyliczanie)
                .HasDefaultValue(true)
                .HasColumnName("gr_FiltrDodatkowyWyliczanie");
            entity.Property(e => e.GrFiltrDodatkowyZapamietywanie)
                .HasDefaultValue(true)
                .HasColumnName("gr_FiltrDodatkowyZapamietywanie");
            entity.Property(e => e.GrFiltrStandardowy)
                .HasColumnType("image")
                .HasColumnName("gr_FiltrStandardowy");
            entity.Property(e => e.GrIdFiltrKlasyfikacji)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("gr_IdFiltrKlasyfikacji");
            entity.Property(e => e.GrIdModulu).HasColumnName("gr_IdModulu");
            entity.Property(e => e.GrKolejnosc).HasColumnName("gr_Kolejnosc");
            entity.Property(e => e.GrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("gr_Nazwa");
            entity.Property(e => e.GrSection)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("gr_Section");
            entity.Property(e => e.GrStatusNowosci).HasColumnName("gr_StatusNowosci");
            entity.Property(e => e.GrTyp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gr_Typ");
            entity.Property(e => e.GrTypEx).HasColumnName("gr_TypEx");

            entity.HasOne(d => d.GrIdFiltrKlasyfikacjiNavigation).WithMany(p => p.GrGrids)
                .HasForeignKey(d => d.GrIdFiltrKlasyfikacji)
                .HasConstraintName("FK__gr__Grid__gr_IdFiltrKlasyfikacji");
        });

        modelBuilder.Entity<GrGridWlasny>(entity =>
        {
            entity.HasKey(e => e.GrgId);

            entity.ToTable("gr_GridWlasny");

            entity.Property(e => e.GrgId)
                .ValueGeneratedNever()
                .HasColumnName("grg_Id");
            entity.Property(e => e.GrgBinColumns)
                .HasColumnType("image")
                .HasColumnName("grg_BinColumns");
            entity.Property(e => e.GrgBinListInfo)
                .HasColumnType("image")
                .HasColumnName("grg_BinListInfo");
            entity.Property(e => e.GrgBinTables)
                .HasColumnType("image")
                .HasColumnName("grg_BinTables");
            entity.Property(e => e.GrgBinVisibility)
                .HasColumnType("image")
                .HasColumnName("grg_BinVisibility");
            entity.Property(e => e.GrgIdGrida).HasColumnName("grg_IdGrida");
            entity.Property(e => e.GrgKolumnyWlasneWidoczne)
                .HasDefaultValue(true)
                .HasColumnName("grg_KolumnyWlasneWidoczne");
            entity.Property(e => e.GrgSql)
                .HasColumnType("text")
                .HasColumnName("grg_Sql");
            entity.Property(e => e.GrgSqlWhere)
                .HasColumnType("text")
                .HasColumnName("grg_SqlWhere");
        });

        modelBuilder.Entity<GrKomponentKalendarzowyGodzinyPracy>(entity =>
        {
            entity.HasKey(e => e.GrgpId);

            entity.ToTable("gr_KomponentKalendarzowyGodzinyPracy");

            entity.Property(e => e.GrgpId)
                .ValueGeneratedNever()
                .HasColumnName("grgp_Id");
            entity.Property(e => e.GrgpGodzinaKoncowa).HasColumnName("grgp_GodzinaKoncowa");
            entity.Property(e => e.GrgpGodzinaPoczatkowa).HasColumnName("grgp_GodzinaPoczatkowa");
            entity.Property(e => e.GrgpIdGrida).HasColumnName("grgp_IdGrida");

            entity.HasOne(d => d.GrgpIdGridaNavigation).WithMany(p => p.GrKomponentKalendarzowyGodzinyPracies)
                .HasForeignKey(d => d.GrgpIdGrida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gr_KomponentKalendarzowyGodzinyPracy_gr__Grid");
        });

        modelBuilder.Entity<GrKonfiguracja>(entity =>
        {
            entity.HasKey(e => new { e.CgSection, e.CgUser });

            entity.ToTable("gr__Konfiguracja");

            entity.Property(e => e.CgSection)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cg_Section");
            entity.Property(e => e.CgUser).HasColumnName("cg_User");
            entity.Property(e => e.CgBinColumns)
                .HasColumnType("image")
                .HasColumnName("cg_BinColumns");
            entity.Property(e => e.CgBinListInfo)
                .HasColumnType("image")
                .HasColumnName("cg_BinListInfo");
            entity.Property(e => e.CgBinTables)
                .HasColumnType("image")
                .HasColumnName("cg_BinTables");
            entity.Property(e => e.CgBinVisibility)
                .HasColumnType("image")
                .HasColumnName("cg_BinVisibility");
            entity.Property(e => e.CgVersion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cg_Version");
        });

        modelBuilder.Entity<GrKonfiguracjaEx>(entity =>
        {
            entity.HasKey(e => new { e.CgeSection, e.CgeUser, e.CgeService });

            entity.ToTable("gr__KonfiguracjaEx");

            entity.Property(e => e.CgeSection)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cge_Section");
            entity.Property(e => e.CgeUser).HasColumnName("cge_User");
            entity.Property(e => e.CgeService).HasColumnName("cge_Service");
            entity.Property(e => e.CgeBinColumns)
                .HasColumnType("image")
                .HasColumnName("cge_BinColumns");
            entity.Property(e => e.CgeBinListInfo)
                .HasColumnType("image")
                .HasColumnName("cge_BinListInfo");
            entity.Property(e => e.CgeBinTables)
                .HasColumnType("image")
                .HasColumnName("cge_BinTables");
            entity.Property(e => e.CgeBinVisibility)
                .HasColumnType("image")
                .HasColumnName("cge_BinVisibility");
            entity.Property(e => e.CgeLastUpdateVersion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cge_LastUpdateVersion");
            entity.Property(e => e.CgeSql)
                .HasColumnType("text")
                .HasColumnName("cge_Sql");
            entity.Property(e => e.CgeVersion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cge_Version");
        });

        modelBuilder.Entity<GrMiniaturka>(entity =>
        {
            entity.HasKey(e => e.GrmId);

            entity.ToTable("gr_Miniaturka");

            entity.Property(e => e.GrmId)
                .ValueGeneratedNever()
                .HasColumnName("grm_Id");
            entity.Property(e => e.GrmIdObiektu).HasColumnName("grm_IdObiektu");
            entity.Property(e => e.GrmMiniaturka)
                .HasColumnType("image")
                .HasColumnName("grm_Miniaturka");
            entity.Property(e => e.GrmTypObiektu).HasColumnName("grm_TypObiektu");
        });

        modelBuilder.Entity<GrNazwa>(entity =>
        {
            entity.HasKey(e => e.GnSection);

            entity.ToTable("gr_Nazwa");

            entity.Property(e => e.GnSection)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gn_Section");
            entity.Property(e => e.GnNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("gn_Nazwa");
        });

        modelBuilder.Entity<GrWyszukiwanieWlasne>(entity =>
        {
            entity.HasKey(e => e.GrwwId).HasName("PK__gr_WyszukiwanieWlasne");

            entity.ToTable("gr_WyszukiwanieWlasne");

            entity.Property(e => e.GrwwId)
                .ValueGeneratedNever()
                .HasColumnName("grww_Id");
            entity.Property(e => e.GrwwIdGrida).HasColumnName("grww_IdGrida");
            entity.Property(e => e.GrwwLaczWarunekAnd).HasColumnName("grww_LaczWarunekAnd");
            entity.Property(e => e.GrwwSqlSelectId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("grww_SqlSelectId");
            entity.Property(e => e.GrwwSqlWhere)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("grww_SqlWhere");
            entity.Property(e => e.GrwwTekstTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("grww_TekstTytul");
            entity.Property(e => e.GrwwTekstWpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("grww_TekstWpis");

            entity.HasOne(d => d.GrwwIdGridaNavigation).WithMany(p => p.GrWyszukiwanieWlasnes)
                .HasForeignKey(d => d.GrwwIdGrida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__gr_WyszukiwanieWlasne_gr__Grid");
        });

        modelBuilder.Entity<GtAtrybut>(entity =>
        {
            entity.HasKey(e => e.GtaId).IsClustered(false);

            entity.ToTable("gt_Atrybut");

            entity.HasIndex(e => new { e.GtaIdObiektu, e.GtaIdObiektuGt }, "IX_gt_Atrybut").IsClustered();

            entity.Property(e => e.GtaId)
                .ValueGeneratedNever()
                .HasColumnName("gta_Id");
            entity.Property(e => e.GtaIdObiektu).HasColumnName("gta_IdObiektu");
            entity.Property(e => e.GtaIdObiektuGt).HasColumnName("gta_IdObiektuGt");
            entity.Property(e => e.GtaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gta_Nazwa");
            entity.Property(e => e.GtaWartosc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gta_Wartosc");
        });

        modelBuilder.Entity<GtDefinicja>(entity =>
        {
            entity.HasKey(e => e.GtdId);

            entity.ToTable("gt_Definicja");

            entity.Property(e => e.GtdId)
                .ValueGeneratedNever()
                .HasColumnName("gtd_Id");
            entity.Property(e => e.GtdDefinicja)
                .HasColumnType("image")
                .HasColumnName("gtd_Definicja");
            entity.Property(e => e.GtdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gtd_Nazwa");
            entity.Property(e => e.GtdObiektId).HasColumnName("gtd_ObiektId");

            entity.HasOne(d => d.GtdObiekt).WithMany(p => p.GtDefinicjas)
                .HasForeignKey(d => d.GtdObiektId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gt_Definicja_gt__Obiekt");
        });

        modelBuilder.Entity<GtObiekt>(entity =>
        {
            entity.HasKey(e => e.GtoId);

            entity.ToTable("gt__Obiekt");

            entity.Property(e => e.GtoId)
                .ValueGeneratedNever()
                .HasColumnName("gto_Id");
            entity.Property(e => e.GtoNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gto_Nazwa");
            entity.Property(e => e.GtoPodstDefId).HasColumnName("gto_PodstDefId");
            entity.Property(e => e.GtoPodstTransId).HasColumnName("gto_PodstTransId");

            entity.HasOne(d => d.GtoPodstDef).WithMany(p => p.GtObiekts)
                .HasForeignKey(d => d.GtoPodstDefId)
                .HasConstraintName("FK_gt__Obiekt_gt_Definicja");

            entity.HasOne(d => d.GtoPodstTrans).WithMany(p => p.GtObiekts)
                .HasForeignKey(d => d.GtoPodstTransId)
                .HasConstraintName("FK_gt__Obiekt_gt_Transformacja");
        });

        modelBuilder.Entity<GtPlik>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("gt_Plik");

            entity.Property(e => e.GtpId)
                .ValueGeneratedOnAdd()
                .HasColumnName("gtp_Id");
            entity.Property(e => e.GtpIdWpisu).HasColumnName("gtp_IdWpisu");
            entity.Property(e => e.GtpNazwaPliku)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gtp_NazwaPliku");
        });

        modelBuilder.Entity<GtTransObiekt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("gt_TransObiekt");

            entity.Property(e => e.ToDefinicjaId).HasColumnName("to_DefinicjaId");
            entity.Property(e => e.ToTransformacjaId).HasColumnName("to_TransformacjaId");
            entity.Property(e => e.ToUzytkownikId).HasColumnName("to_UzytkownikId");

            entity.HasOne(d => d.ToDefinicja).WithMany()
                .HasForeignKey(d => d.ToDefinicjaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gt_TransObiekt_gt_Definicja");

            entity.HasOne(d => d.ToTransformacja).WithMany()
                .HasForeignKey(d => d.ToTransformacjaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gt_TransObiekt_gt_Transformacja");

            entity.HasOne(d => d.ToUzytkownik).WithMany()
                .HasForeignKey(d => d.ToUzytkownikId)
                .HasConstraintName("FK_gt_TransObiekt_pd_Uzytkownik");
        });

        modelBuilder.Entity<GtTransRodzaj>(entity =>
        {
            entity.HasKey(e => e.GtrId);

            entity.ToTable("gt_TransRodzaj");

            entity.Property(e => e.GtrId)
                .ValueGeneratedNever()
                .HasColumnName("gtr_Id");
            entity.Property(e => e.GtrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gtr_Nazwa");
        });

        modelBuilder.Entity<GtTransformacja>(entity =>
        {
            entity.HasKey(e => e.GttId);

            entity.ToTable("gt_Transformacja");

            entity.Property(e => e.GttId)
                .ValueGeneratedNever()
                .HasColumnName("gtt_Id");
            entity.Property(e => e.GttDefinicjaId).HasColumnName("gtt_DefinicjaId");
            entity.Property(e => e.GttDomyslna).HasColumnName("gtt_Domyslna");
            entity.Property(e => e.GttNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gtt_Nazwa");
            entity.Property(e => e.GttObiektId).HasColumnName("gtt_ObiektId");
            entity.Property(e => e.GttRodzajId).HasColumnName("gtt_RodzajId");
            entity.Property(e => e.GttSchemat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gtt_Schemat");
            entity.Property(e => e.GttStatusNowosci).HasColumnName("gtt_StatusNowosci");
            entity.Property(e => e.GttTransformacja)
                .HasColumnType("image")
                .HasColumnName("gtt_Transformacja");

            entity.HasOne(d => d.GttDefinicja).WithMany(p => p.GtTransformacjas)
                .HasForeignKey(d => d.GttDefinicjaId)
                .HasConstraintName("FK_gt_Transformacja_gt_Definicja");

            entity.HasOne(d => d.GttObiekt).WithMany(p => p.GtTransformacjas)
                .HasForeignKey(d => d.GttObiektId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_gt_Transformacja_gt__Obiekt");

            entity.HasMany(d => d.PfIdUzytkownikas).WithMany(p => p.PfIdObiektus1)
                .UsingEntity<Dictionary<string, object>>(
                    "GtTransformacjaProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_gt_TransformacjaProfil_pd_Uzytkownik"),
                    l => l.HasOne<GtTransformacja>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_gt_TransformacjaProfil_gt_Transformacja"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("gt_TransformacjaProfil");
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<HbEbankParam>(entity =>
        {
            entity.HasKey(e => e.HbeId);

            entity.ToTable("hb_EBankParam");

            entity.Property(e => e.HbeId)
                .ValueGeneratedNever()
                .HasColumnName("hbe_Id");
            entity.Property(e => e.HbeWyloguj).HasColumnName("hbe_Wyloguj");
        });

        modelBuilder.Entity<HbIdent>(entity =>
        {
            entity.HasKey(e => e.HbiId);

            entity.ToTable("hb_Ident");

            entity.Property(e => e.HbiId)
                .ValueGeneratedNever()
                .HasColumnName("hbi_Id");
            entity.Property(e => e.HbiIdPrzedrostka).HasColumnName("hbi_IdPrzedrostka");
            entity.Property(e => e.HbiIdTransakcji)
                .HasDefaultValue(1)
                .HasColumnName("hbi_IdTransakcji");

            entity.HasOne(d => d.HbiIdPrzedrostkaNavigation).WithMany(p => p.HbIdents)
                .HasForeignKey(d => d.HbiIdPrzedrostka)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_hb_Ident_hb_PrzedrostekHist");
        });

        modelBuilder.Entity<HbLogin>(entity =>
        {
            entity.HasKey(e => e.HblId);

            entity.ToTable("hb_Login");

            entity.Property(e => e.HblId).HasColumnName("hbl_Id");
            entity.Property(e => e.HblCertyfikatHash)
                .HasColumnType("text")
                .HasColumnName("hbl_CertyfikatHash");
            entity.Property(e => e.HblIdRachunku).HasColumnName("hbl_IdRachunku");
            entity.Property(e => e.HblIdUzytkownia).HasColumnName("hbl_IdUzytkownia");
            entity.Property(e => e.HblLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hbl_Login");
            entity.Property(e => e.HblTrybLogowania).HasColumnName("hbl_TrybLogowania");

            entity.HasOne(d => d.HblIdRachunkuNavigation).WithMany(p => p.HbLogins)
                .HasForeignKey(d => d.HblIdRachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_hb_Login_rb__RachBankowy");

            entity.HasOne(d => d.HblIdUzytkowniaNavigation).WithMany(p => p.HbLogins)
                .HasForeignKey(d => d.HblIdUzytkownia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_hb_Login_pd_Uzytkownik");
        });

        modelBuilder.Entity<HbNaglowekIstopka>(entity =>
        {
            entity.HasKey(e => e.HbIdNaglowek);

            entity.ToTable("hb_NaglowekIStopka");

            entity.Property(e => e.HbIdNaglowek).HasColumnName("hb_IdNaglowek");
            entity.Property(e => e.HbBilansOtwarciaWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_BilansOtwarciaWaluta");
            entity.Property(e => e.HbDataUtworzeniaWyciagu)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataUtworzeniaWyciagu");
            entity.Property(e => e.HbIdRachunku).HasColumnName("hb_IdRachunku");
            entity.Property(e => e.HbNumerRachunkuWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_NumerRachunkuWyciagu");
            entity.Property(e => e.HbNumerWyciagu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("hb_NumerWyciagu");
            entity.Property(e => e.HbZrodlo)
                .HasDefaultValue(1)
                .HasColumnName("hb_Zrodlo");

            entity.HasOne(d => d.HbIdRachunkuNavigation).WithMany(p => p.HbNaglowekIstopkas)
                .HasForeignKey(d => d.HbIdRachunku)
                .HasConstraintName("FK_hb_NaglowekIStopka_rb__RachBankowy");
        });

        modelBuilder.Entity<HbParser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("hb_Parser");

            entity.Property(e => e.HbpId)
                .ValueGeneratedOnAdd()
                .HasColumnName("hbp_Id");
            entity.Property(e => e.HbpInsStala).HasColumnName("hbp_InsStala");
            entity.Property(e => e.HbpOpis)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("hbp_Opis");
            entity.Property(e => e.HbpProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hbp_ProgId");
            entity.Property(e => e.HbpStronaKodowa).HasColumnName("hbp_StronaKodowa");
        });

        modelBuilder.Entity<HbPowiazanieTransakcji>(entity =>
        {
            entity.HasKey(e => e.HbptId);

            entity.ToTable("hb_PowiazanieTransakcji");

            entity.HasIndex(e => e.HbptIdTransakcjiBankowej, "UQ_hb_PowiazanieTransakcji_hbpt_IdTransakcjiBankowej").IsUnique();

            entity.HasIndex(e => e.HbptIdTransakcjiZwyciagu, "UQ_hb_PowiazanieTransakcji_hbpt_IdTransakcjiZWyciagu").IsUnique();

            entity.Property(e => e.HbptId)
                .ValueGeneratedNever()
                .HasColumnName("hbpt_Id");
            entity.Property(e => e.HbptIdTransakcjiBankowej).HasColumnName("hbpt_IdTransakcjiBankowej");
            entity.Property(e => e.HbptIdTransakcjiZwyciagu).HasColumnName("hbpt_IdTransakcjiZWyciagu");

            entity.HasOne(d => d.HbptIdTransakcjiBankowejNavigation).WithOne(p => p.HbPowiazanieTransakcji)
                .HasForeignKey<HbPowiazanieTransakcji>(d => d.HbptIdTransakcjiBankowej)
                .HasConstraintName("FK_hb_PowiazanieTransakcji_hb_TransakcjaElektroniczna");

            entity.HasOne(d => d.HbptIdTransakcjiZwyciaguNavigation).WithOne(p => p.HbPowiazanieTransakcji)
                .HasForeignKey<HbPowiazanieTransakcji>(d => d.HbptIdTransakcjiZwyciagu)
                .HasConstraintName("FK_hb_PowiazanieTransakcji_hb_Transakcja");
        });

        modelBuilder.Entity<HbPrzedrostekHist>(entity =>
        {
            entity.HasKey(e => e.HbpId);

            entity.ToTable("hb_PrzedrostekHist");

            entity.Property(e => e.HbpId)
                .ValueGeneratedNever()
                .HasColumnName("hbp_Id");
            entity.Property(e => e.HbpIdUslugi).HasColumnName("hbp_IdUslugi");
            entity.Property(e => e.HbpPrzedrostek)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hbp_Przedrostek");

            entity.HasOne(d => d.HbpIdUslugiNavigation).WithMany(p => p.HbPrzedrostekHists)
                .HasForeignKey(d => d.HbpIdUslugi)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_hb_PrzedrostekHist_hb_Usluga");
        });

        modelBuilder.Entity<HbRaport>(entity =>
        {
            entity.HasKey(e => e.HbrId);

            entity.ToTable("hb_Raport");

            entity.Property(e => e.HbrId).HasColumnName("hbr_Id");
            entity.Property(e => e.HbrBank).HasColumnName("hbr_Bank");
            entity.Property(e => e.HbrData)
                .HasColumnType("datetime")
                .HasColumnName("hbr_Data");
            entity.Property(e => e.HbrIdTransakcji)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("hbr_IdTransakcji");
            entity.Property(e => e.HbrIdUzytkownik).HasColumnName("hbr_IdUzytkownik");
            entity.Property(e => e.HbrOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("hbr_Opis");
            entity.Property(e => e.HbrOpisBledu)
                .HasColumnType("ntext")
                .HasColumnName("hbr_OpisBledu");
            entity.Property(e => e.HbrStatus).HasColumnName("hbr_Status");
            entity.Property(e => e.HbrTypOperacji).HasColumnName("hbr_TypOperacji");

            entity.HasOne(d => d.HbrIdTransakcjiNavigation).WithMany(p => p.HbRaports)
                .HasForeignKey(d => d.HbrIdTransakcji)
                .HasConstraintName("FK_hb_Raport_hb_TransakcjaOczekujaca");

            entity.HasOne(d => d.HbrIdUzytkownikNavigation).WithMany(p => p.HbRaports)
                .HasForeignKey(d => d.HbrIdUzytkownik)
                .HasConstraintName("FK_hb_Raport_pd_Uzytkownik");
        });

        modelBuilder.Entity<HbSynchronizacjaRachunkuBankowego>(entity =>
        {
            entity.HasKey(e => e.HbsId);

            entity.ToTable("hb_SynchronizacjaRachunkuBankowego");

            entity.HasIndex(e => e.HbsIdRachunkuBankowego, "UQ_hb_SynchronizacjaRachunkuBankowego_hbs_IdRachunkuBankowego").IsUnique();

            entity.Property(e => e.HbsId)
                .ValueGeneratedNever()
                .HasColumnName("hbs_Id");
            entity.Property(e => e.HbsIdRachunkuBankowego).HasColumnName("hbs_IdRachunkuBankowego");
            entity.Property(e => e.HbsOstatniaModyfikacja)
                .HasColumnType("datetime")
                .HasColumnName("hbs_OstatniaModyfikacja");

            entity.HasOne(d => d.HbsIdRachunkuBankowegoNavigation).WithOne(p => p.HbSynchronizacjaRachunkuBankowego)
                .HasForeignKey<HbSynchronizacjaRachunkuBankowego>(d => d.HbsIdRachunkuBankowego)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_hb_SynchronizacjaRachunkuBankowego_rb__RachBankowy");
        });

        modelBuilder.Entity<HbToParamZnakSpecjalny>(entity =>
        {
            entity.HasKey(e => e.HbzsId).HasName("PK_hb_ToParamZnakSpecjlany");

            entity.ToTable("hb_ToParamZnakSpecjalny");

            entity.Property(e => e.HbzsId)
                .ValueGeneratedNever()
                .HasColumnName("hbzs_Id");
            entity.Property(e => e.HbzsBank).HasColumnName("hbzs_Bank");
            entity.Property(e => e.HbzsNazwa).HasColumnName("hbzs_Nazwa");
            entity.Property(e => e.HbzsPodmiot).HasColumnName("hbzs_Podmiot");
            entity.Property(e => e.HbzsTytul).HasColumnName("hbzs_Tytul");
            entity.Property(e => e.HbzsZnakSpecjalny)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hbzs_ZnakSpecjalny");
            entity.Property(e => e.HbzsZnakZamiana)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hbzs_ZnakZamiana");
        });

        modelBuilder.Entity<HbTransakcja>(entity =>
        {
            entity.HasKey(e => e.HbIdTransakcji);

            entity.ToTable("hb_Transakcja");

            entity.Property(e => e.HbIdTransakcji).HasColumnName("hb_IdTransakcji");
            entity.Property(e => e.HbDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataKsiegowania");
            entity.Property(e => e.HbDataWaluty)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataWaluty");
            entity.Property(e => e.HbIdNaglowekTr).HasColumnName("hb_IdNaglowekTr");
            entity.Property(e => e.HbIdOperacjiBankowej).HasColumnName("hb_idOperacjiBankowej");
            entity.Property(e => e.HbIdTranOczek).HasColumnName("hb_IdTranOczek");
            entity.Property(e => e.HbIdentyfikatorMp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hb_IdentyfikatorMP");
            entity.Property(e => e.HbKodTranzakcji)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_KodTranzakcji");
            entity.Property(e => e.HbKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Kontrahent");
            entity.Property(e => e.HbKurs)
                .HasColumnType("money")
                .HasColumnName("hb_Kurs");
            entity.Property(e => e.HbKwota)
                .HasColumnType("money")
                .HasColumnName("hb_Kwota");
            entity.Property(e => e.HbKwotaWaluty)
                .HasColumnType("money")
                .HasColumnName("hb_KwotaWaluty");
            entity.Property(e => e.HbNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("hb_NrFaktury");
            entity.Property(e => e.HbOpisTranzakcji)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("hb_OpisTranzakcji");
            entity.Property(e => e.HbOznaczenie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_Oznaczenie");
            entity.Property(e => e.HbPelnyNumerMp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hb_PelnyNumerMP");
            entity.Property(e => e.HbPodtypPp).HasColumnName("hb_PodtypPP");
            entity.Property(e => e.HbRachKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_RachKontrahent");
            entity.Property(e => e.HbSprawdzonoSkojarzanie).HasColumnName("hb_SprawdzonoSkojarzanie");
            entity.Property(e => e.HbStatus).HasColumnName("hb_Status");
            entity.Property(e => e.HbTnr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hb_TNR");
            entity.Property(e => e.HbTytul)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("hb_Tytul");
            entity.Property(e => e.HbVat)
                .HasColumnType("money")
                .HasColumnName("hb_Vat");
            entity.Property(e => e.HbWaluta)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Waluta");
            entity.Property(e => e.HbZrodlo)
                .HasDefaultValue(1)
                .HasColumnName("hb_Zrodlo");

            entity.HasOne(d => d.HbIdNaglowekTrNavigation).WithMany(p => p.HbTransakcjas)
                .HasForeignKey(d => d.HbIdNaglowekTr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_hb_Transakcja_hb_NaglowekIStopka");
        });

        modelBuilder.Entity<HbTransakcjaElektroniczna>(entity =>
        {
            entity.HasKey(e => e.HbteId).HasName("PK_hb_TransakcjeBankowe");

            entity.ToTable("hb_TransakcjaElektroniczna");

            entity.HasIndex(e => e.HpteTransakcjaOczekujacaId, "UQ_hb_TransakcjaElektroniczna_hpte_TransakcjaOczekujacaId").IsUnique();

            entity.Property(e => e.HbteId)
                .ValueGeneratedNever()
                .HasColumnName("hbte_Id");
            entity.Property(e => e.HbteIdRachunkuBankowego).HasColumnName("hbte_IdRachunkuBankowego");
            entity.Property(e => e.HpteTransakcjaOczekujacaId).HasColumnName("hpte_TransakcjaOczekujacaId");

            entity.HasOne(d => d.HbteIdRachunkuBankowegoNavigation).WithMany(p => p.HbTransakcjaElektronicznas)
                .HasForeignKey(d => d.HbteIdRachunkuBankowego)
                .HasConstraintName("FK_hb_TransakcjaElektroniczna_rb__RachBankowy");
        });

        modelBuilder.Entity<HbTransakcjaOczekujaca>(entity =>
        {
            entity.HasKey(e => e.HbtoId);

            entity.ToTable("hb_TransakcjaOczekujaca");

            entity.Property(e => e.HbtoId)
                .ValueGeneratedNever()
                .HasColumnName("hbto_Id");
            entity.Property(e => e.HbtoDataRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("hbto_DataRealizacji");
            entity.Property(e => e.HbtoDataWyslania)
                .HasColumnType("datetime")
                .HasColumnName("hbto_DataWyslania");
            entity.Property(e => e.HbtoIdAdresu).HasColumnName("hbto_IdAdresu");
            entity.Property(e => e.HbtoIdHistoriiAdresu).HasColumnName("hbto_IdHistoriiAdresu");
            entity.Property(e => e.HbtoIdObiektu).HasColumnName("hbto_IdObiektu");
            entity.Property(e => e.HbtoIdPaczki).HasColumnName("hbto_IdPaczki");
            entity.Property(e => e.HbtoIdPrzedrostka).HasColumnName("hbto_IdPrzedrostka");
            entity.Property(e => e.HbtoIdRachunkuBankowego).HasColumnName("hbto_IdRachunkuBankowego");
            entity.Property(e => e.HbtoIdRachunkuBankowegoKontrahenta).HasColumnName("hbto_IdRachunkuBankowegoKontrahenta");
            entity.Property(e => e.HbtoIdRachunkuBankowegoKontrahentaHist).HasColumnName("hbto_IdRachunkuBankowegoKontrahentaHist");
            entity.Property(e => e.HbtoIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("hbto_IdWaluty");
            entity.Property(e => e.HbtoIdWbanku)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("hbto_IdWBanku");
            entity.Property(e => e.HbtoIdWystawil).HasColumnName("hbto_IdWystawil");
            entity.Property(e => e.HbtoKwota)
                .HasColumnType("money")
                .HasColumnName("hbto_Kwota");
            entity.Property(e => e.HbtoKwotaVat)
                .HasColumnType("money")
                .HasColumnName("hbto_KwotaVAT");
            entity.Property(e => e.HbtoNazwaKontrahenta)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("hbto_NazwaKontrahenta");
            entity.Property(e => e.HbtoNipkontrahenta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("hbto_NIPKontrahenta");
            entity.Property(e => e.HbtoNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("hbto_NrFaktury");
            entity.Property(e => e.HbtoOczekujNaSrodki).HasColumnName("hbto_OczekujNaSrodki");
            entity.Property(e => e.HbtoOplaty)
                .HasDefaultValue(1)
                .HasColumnName("hbto_Oplaty");
            entity.Property(e => e.HbtoPodIdentyfikacjaZobowiazania)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("hbto_PodIdentyfikacjaZobowiazania");
            entity.Property(e => e.HbtoPodOkres)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hbto_PodOkres");
            entity.Property(e => e.HbtoPodSymbol).HasColumnName("hbto_PodSymbol");
            entity.Property(e => e.HbtoPodtypTransakcji).HasColumnName("hbto_PodtypTransakcji");
            entity.Property(e => e.HbtoPotwierdzenie)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("image")
                .HasColumnName("hbto_Potwierdzenie");
            entity.Property(e => e.HbtoProgram).HasColumnName("hbto_Program");
            entity.Property(e => e.HbtoRodzajSkladkiPlatZus).HasColumnName("hbto_RodzajSkladkiPlatZUS");
            entity.Property(e => e.HbtoStatus).HasColumnName("hbto_Status");
            entity.Property(e => e.HbtoStatusBank).HasColumnName("hbto_StatusBank");
            entity.Property(e => e.HbtoStatusPotwierdzenia)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("hbto_StatusPotwierdzenia");
            entity.Property(e => e.HbtoTrybRealizacji).HasColumnName("hbto_TrybRealizacji");
            entity.Property(e => e.HbtoTypObiektu).HasColumnName("hbto_TypObiektu");
            entity.Property(e => e.HbtoTypPrzelewu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength()
                .HasColumnName("hbto_TypPrzelewu");
            entity.Property(e => e.HbtoTypZlecenia).HasColumnName("hbto_TypZlecenia");
            entity.Property(e => e.HbtoTytul)
                .HasMaxLength(146)
                .IsUnicode(false)
                .HasColumnName("hbto_Tytul");
            entity.Property(e => e.HbtoWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("hbto_Wystawil");
            entity.Property(e => e.HbtoZusdeklaracja)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hbto_ZUSDeklaracja");
            entity.Property(e => e.HbtoZusnrDecyzji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hbto_ZUSNrDecyzji");
            entity.Property(e => e.HbtoZusnrDeklaracji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hbto_ZUSNrDeklaracji");
            entity.Property(e => e.HbtoZuspodIdentyfikator)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hbto_ZUSPodIdentyfikator");
            entity.Property(e => e.HbtoZuspodTypIdentyfikatora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hbto_ZUSPodTypIdentyfikatora");
            entity.Property(e => e.HbtoZustypWplaty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hbto_ZUSTypWplaty");

            entity.HasOne(d => d.HbtoIdAdresuNavigation).WithMany(p => p.HbTransakcjaOczekujacas)
                .HasForeignKey(d => d.HbtoIdAdresu)
                .HasConstraintName("FK_hb_TransakcjaOczekujaca_adr__Ewid");

            entity.HasOne(d => d.HbtoIdHistoriiAdresuNavigation).WithMany(p => p.HbTransakcjaOczekujacas)
                .HasForeignKey(d => d.HbtoIdHistoriiAdresu)
                .HasConstraintName("FK_hb_TransakcjaOczekujaca_adr_Historia");

            entity.HasOne(d => d.HbtoIdPrzedrostkaNavigation).WithMany(p => p.HbTransakcjaOczekujacas)
                .HasForeignKey(d => d.HbtoIdPrzedrostka)
                .HasConstraintName("FK_hb_TransakcjaOczekujaca_hb_PrzedrostekHist");

            entity.HasOne(d => d.HbtoIdRachunkuBankowegoNavigation).WithMany(p => p.HbTransakcjaOczekujacaHbtoIdRachunkuBankowegoNavigations)
                .HasForeignKey(d => d.HbtoIdRachunkuBankowego)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RachBankPodmiotu");

            entity.HasOne(d => d.HbtoIdRachunkuBankowegoKontrahentaNavigation).WithMany(p => p.HbTransakcjaOczekujacaHbtoIdRachunkuBankowegoKontrahentaNavigations)
                .HasForeignKey(d => d.HbtoIdRachunkuBankowegoKontrahenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RachBankKhnt");

            entity.HasOne(d => d.HbtoIdRachunkuBankowegoKontrahentaHistNavigation).WithMany(p => p.HbTransakcjaOczekujacas)
                .HasForeignKey(d => d.HbtoIdRachunkuBankowegoKontrahentaHist)
                .HasConstraintName("FK_RachBankKhntHist");

            entity.HasOne(d => d.HbtoIdWalutyNavigation).WithMany(p => p.HbTransakcjaOczekujacas)
                .HasForeignKey(d => d.HbtoIdWaluty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_hb_TransakcjaOczekujaca_sl_Waluta");
        });

        modelBuilder.Entity<HbTransakcjaOczekujacaObiekt>(entity =>
        {
            entity.HasKey(e => e.HbtooId);

            entity.ToTable("hb_TransakcjaOczekujacaObiekt");

            entity.Property(e => e.HbtooId)
                .ValueGeneratedNever()
                .HasColumnName("hbtoo_Id");
            entity.Property(e => e.HbtooIdObiektuPow).HasColumnName("hbtoo_IdObiektuPow");
            entity.Property(e => e.HbtooIdTransOczek).HasColumnName("hbtoo_IdTransOczek");
            entity.Property(e => e.HbtooKurs)
                .HasColumnType("money")
                .HasColumnName("hbtoo_Kurs");
            entity.Property(e => e.HbtooTypObiektuPow).HasColumnName("hbtoo_TypObiektuPow");
            entity.Property(e => e.HbtooWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hbtoo_Waluta");
            entity.Property(e => e.HbtooWartosc)
                .HasColumnType("money")
                .HasColumnName("hbtoo_Wartosc");
            entity.Property(e => e.HbtooWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("hbtoo_WartoscWaluta");

            entity.HasOne(d => d.HbtooIdTransOczekNavigation).WithMany(p => p.HbTransakcjaOczekujacaObiekts)
                .HasForeignKey(d => d.HbtooIdTransOczek)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_hb_TransakcjaOczekujacaObiekt_hb_TransakcjaOczekujaca");
        });

        modelBuilder.Entity<HbTransakcjaOczekujacaParam>(entity =>
        {
            entity.HasKey(e => e.HbtopId);

            entity.ToTable("hb_TransakcjaOczekujacaParam");

            entity.Property(e => e.HbtopId)
                .ValueGeneratedNever()
                .HasColumnName("hbtop_Id");
            entity.Property(e => e.HbtopOczekujNaSrodki).HasColumnName("hbtop_OczekujNaSrodki");
            entity.Property(e => e.HbtopZamianaZnakow).HasColumnName("hbtop_ZamianaZnakow");
        });

        modelBuilder.Entity<HbUsluga>(entity =>
        {
            entity.HasKey(e => e.HbuId);

            entity.ToTable("hb_Usluga");

            entity.Property(e => e.HbuId)
                .ValueGeneratedNever()
                .HasColumnName("hbu_Id");
            entity.Property(e => e.HbuBank).HasColumnName("hbu_Bank");
            entity.Property(e => e.HbuCertyfikatSerwera)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("hbu_CertyfikatSerwera");
            entity.Property(e => e.HbuIdentyfikatorKlienta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hbu_IdentyfikatorKlienta");
            entity.Property(e => e.HbuNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hbu_Nazwa");
        });

        modelBuilder.Entity<IcenCennikCechaKh>(entity =>
        {
            entity.HasKey(e => e.IcenkcId);

            entity.ToTable("icen_CennikCechaKh");

            entity.Property(e => e.IcenkcId)
                .ValueGeneratedNever()
                .HasColumnName("icenkc_Id");
            entity.Property(e => e.IcenkcCechaId).HasColumnName("icenkc_CechaId");
            entity.Property(e => e.IcenkcCennikId).HasColumnName("icenkc_CennikId");

            entity.HasOne(d => d.IcenkcCecha).WithMany(p => p.IcenCennikCechaKhs)
                .HasForeignKey(d => d.IcenkcCechaId)
                .HasConstraintName("FK_icen_CennikCechaKh_sl_CechaKh");

            entity.HasOne(d => d.IcenkcCennik).WithMany(p => p.IcenCennikCechaKhs)
                .HasForeignKey(d => d.IcenkcCennikId)
                .HasConstraintName("FK_icen_CennikCechaKh_icen__CennikiIndywidualne");
        });

        modelBuilder.Entity<IcenCennikGrupaKh>(entity =>
        {
            entity.HasKey(e => e.IcenkgId);

            entity.ToTable("icen_CennikGrupaKh");

            entity.Property(e => e.IcenkgId)
                .ValueGeneratedNever()
                .HasColumnName("icenkg_Id");
            entity.Property(e => e.IcenkgCennikId).HasColumnName("icenkg_CennikId");
            entity.Property(e => e.IcenkgGrupaId).HasColumnName("icenkg_GrupaId");

            entity.HasOne(d => d.IcenkgCennik).WithMany(p => p.IcenCennikGrupaKhs)
                .HasForeignKey(d => d.IcenkgCennikId)
                .HasConstraintName("FK_icen_CennikGrupaKh_icen__CennikiIndywidualne");

            entity.HasOne(d => d.IcenkgGrupa).WithMany(p => p.IcenCennikGrupaKhs)
                .HasForeignKey(d => d.IcenkgGrupaId)
                .HasConstraintName("FK_icen_CennikGrupaKh_sl_GrupaKh");
        });

        modelBuilder.Entity<IcenCennikKontrahent>(entity =>
        {
            entity.HasKey(e => e.IcenkId);

            entity.ToTable("icen_CennikKontrahent");

            entity.Property(e => e.IcenkId)
                .ValueGeneratedNever()
                .HasColumnName("icenk_Id");
            entity.Property(e => e.IcenkCennikId).HasColumnName("icenk_CennikId");
            entity.Property(e => e.IcenkKhId).HasColumnName("icenk_KhId");

            entity.HasOne(d => d.IcenkCennik).WithMany(p => p.IcenCennikKontrahents)
                .HasForeignKey(d => d.IcenkCennikId)
                .HasConstraintName("FK_icen_CennikKontrahent_icen__CennikiIndywidualne");

            entity.HasOne(d => d.IcenkKh).WithMany(p => p.IcenCennikKontrahents)
                .HasForeignKey(d => d.IcenkKhId)
                .HasConstraintName("FK_icen_CennikKontrahent_kh__Kontrahent");
        });

        modelBuilder.Entity<IcenCennikMagazyn>(entity =>
        {
            entity.HasKey(e => e.IcenmId);

            entity.ToTable("icen_CennikMagazyn");

            entity.HasIndex(e => new { e.IcenmCennikId, e.IcenmMagId }, "UniquePair_icen_CennikMagazyn").IsUnique();

            entity.Property(e => e.IcenmId)
                .ValueGeneratedNever()
                .HasColumnName("icenm_Id");
            entity.Property(e => e.IcenmCennikId).HasColumnName("icenm_CennikId");
            entity.Property(e => e.IcenmMagId).HasColumnName("icenm_MagId");

            entity.HasOne(d => d.IcenmCennik).WithMany(p => p.IcenCennikMagazyns)
                .HasForeignKey(d => d.IcenmCennikId)
                .HasConstraintName("FK_icen_CennikMagazyn_icen__CennikiIndywidualne");

            entity.HasOne(d => d.IcenmMag).WithMany(p => p.IcenCennikMagazyns)
                .HasForeignKey(d => d.IcenmMagId)
                .HasConstraintName("FK_icen_CennikMagazyn_sl_Magazyn");
        });

        modelBuilder.Entity<IcenCennikTowar>(entity =>
        {
            entity.HasKey(e => e.IcentId);

            entity.ToTable("icen_CennikTowar");

            entity.HasIndex(e => new { e.IcentCennikId, e.IcentTwId }, "UniquePair_icen_CennikTowar").IsUnique();

            entity.Property(e => e.IcentId)
                .ValueGeneratedNever()
                .HasColumnName("icent_Id");
            entity.Property(e => e.IcentCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("icent_CenaBrutto");
            entity.Property(e => e.IcentCenaNetto)
                .HasColumnType("money")
                .HasColumnName("icent_CenaNetto");
            entity.Property(e => e.IcentCennikId).HasColumnName("icent_CennikId");
            entity.Property(e => e.IcentTwId).HasColumnName("icent_TwId");

            entity.HasOne(d => d.IcentCennik).WithMany(p => p.IcenCennikTowars)
                .HasForeignKey(d => d.IcentCennikId)
                .HasConstraintName("FK_icen_CennikTowar_icen__CennikiIndywidualne");

            entity.HasOne(d => d.IcentTw).WithMany(p => p.IcenCennikTowars)
                .HasForeignKey(d => d.IcentTwId)
                .HasConstraintName("FK_icen_CennikTowar_tw__Towar");
        });

        modelBuilder.Entity<IcenCennikiIndywidualne>(entity =>
        {
            entity.HasKey(e => e.IcenId);

            entity.ToTable("icen__CennikiIndywidualne");

            entity.Property(e => e.IcenId)
                .ValueGeneratedNever()
                .HasColumnName("icen_Id");
            entity.Property(e => e.IcenCalyDzien).HasColumnName("icen_CalyDzien");
            entity.Property(e => e.IcenCenaPoRabacie).HasColumnName("icen_CenaPoRabacie");
            entity.Property(e => e.IcenCoIle)
                .HasDefaultValue(1)
                .HasColumnName("icen_CoIle");
            entity.Property(e => e.IcenDefinicjaZlozona)
                .HasDefaultValue(false)
                .HasColumnName("icen_DefinicjaZlozona");
            entity.Property(e => e.IcenDniTygodnia).HasColumnName("icen_DniTygodnia");
            entity.Property(e => e.IcenDo)
                .HasColumnType("datetime")
                .HasColumnName("icen_Do");
            entity.Property(e => e.IcenDzienMiesiaca).HasColumnName("icen_DzienMiesiaca");
            entity.Property(e => e.IcenDzienPorzadek).HasColumnName("icen_DzienPorzadek");
            entity.Property(e => e.IcenDzienRodzaj).HasColumnName("icen_DzienRodzaj");
            entity.Property(e => e.IcenIlePowtorzen).HasColumnName("icen_IlePowtorzen");
            entity.Property(e => e.IcenIlePowtorzenWdniach)
                .HasDefaultValue(true)
                .HasColumnName("icen_IlePowtorzenWDniach");
            entity.Property(e => e.IcenInterwal).HasColumnName("icen_Interwal");
            entity.Property(e => e.IcenKoniecPowtorzen)
                .HasColumnType("datetime")
                .HasColumnName("icen_KoniecPowtorzen");
            entity.Property(e => e.IcenKrytKhOperatorAnd)
                .HasDefaultValue(true)
                .HasColumnName("icen_KrytKhOperatorAnd");
            entity.Property(e => e.IcenKrytKhSqlQuery)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("icen_KrytKhSqlQuery");
            entity.Property(e => e.IcenKursRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("icen_KursRodzaj");
            entity.Property(e => e.IcenMiesiac).HasColumnName("icen_Miesiac");
            entity.Property(e => e.IcenNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("icen_Nazwa");
            entity.Property(e => e.IcenNieaktywny).HasColumnName("icen_Nieaktywny");
            entity.Property(e => e.IcenOd)
                .HasColumnType("datetime")
                .HasColumnName("icen_Od");
            entity.Property(e => e.IcenOgraniczonaCzasowo)
                .HasDefaultValue(true)
                .HasColumnName("icen_OgraniczonaCzasowo");
            entity.Property(e => e.IcenOpis)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("icen_Opis");
            entity.Property(e => e.IcenPoczatekZcyklu)
                .HasColumnType("datetime")
                .HasColumnName("icen_PoczatekZCyklu");
            entity.Property(e => e.IcenRobocze).HasColumnName("icen_Robocze");
            entity.Property(e => e.IcenRodzajPowtorzen).HasColumnName("icen_RodzajPowtorzen");
            entity.Property(e => e.IcenUwagi)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("icen_Uwagi");
            entity.Property(e => e.IcenWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("icen_Waluta");
        });

        modelBuilder.Entity<IcenCennikiParametr>(entity =>
        {
            entity.HasKey(e => e.IcenpId).HasName("PK__icen_CennikiParametr");

            entity.ToTable("icen_CennikiParametr");

            entity.Property(e => e.IcenpId)
                .ValueGeneratedNever()
                .HasColumnName("icenp_Id");
            entity.Property(e => e.IcenpParamEwidId).HasColumnName("icenp_ParamEwidId");

            entity.HasOne(d => d.IcenpParamEwid).WithMany(p => p.IcenCennikiParametrs)
                .HasForeignKey(d => d.IcenpParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_icen_CennikiParametr_par__Ewid");
        });

        modelBuilder.Entity<IcenCennikiParametrTyp>(entity =>
        {
            entity.HasKey(e => e.IcenptId).HasName("PK__icen_CennikiParametrTyp");

            entity.ToTable("icen_CennikiParametrTyp");

            entity.Property(e => e.IcenptId)
                .ValueGeneratedNever()
                .HasColumnName("icenpt_Id");
            entity.Property(e => e.IcenptCennikDowolnaWaluta).HasColumnName("icenpt_CennikDowolnaWaluta");
            entity.Property(e => e.IcenptCzasOtwarciaDokum).HasColumnName("icenpt_CzasOtwarciaDokum");
            entity.Property(e => e.IcenptDefiniowalnyId).HasColumnName("icenpt_DefiniowalnyId");
            entity.Property(e => e.IcenptParamEwidId).HasColumnName("icenpt_ParamEwidId");
            entity.Property(e => e.IcenptPodtyp).HasColumnName("icenpt_Podtyp");
            entity.Property(e => e.IcenptTrybWyboruCennika)
                .HasDefaultValue(1)
                .HasColumnName("icenpt_TrybWyboruCennika");
            entity.Property(e => e.IcenptTyp).HasColumnName("icenpt_Typ");
            entity.Property(e => e.IcenptUzyjCennikaRoz).HasColumnName("icenpt_UzyjCennikaRoz");
        });

        modelBuilder.Entity<IdxTwTowar>(entity =>
        {
            entity.HasKey(e => new { e.TermId, e.TableKey }).HasName("PK_InsSearch_idx_tw__Towar");

            entity.ToTable("idx_tw__Towar", "InsSearch", tb => tb.HasTrigger("TRD_InsSearch_idx_tw__Towar"));

            entity.HasIndex(e => e.TableKey, "IX_InsSearch_idx_tw__Towar_TableKey");

            entity.Property(e => e.Tf).HasColumnName("TF");

            entity.HasOne(d => d.TableKeyNavigation).WithMany(p => p.IdxTwTowars)
                .HasForeignKey(d => d.TableKey)
                .HasConstraintName("FK_InsSearch_idx_tw__Towar_TableKey");

            entity.HasOne(d => d.Term).WithMany(p => p.IdxTwTowars)
                .HasForeignKey(d => d.TermId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InsSearch_idx_tw__Towar_TermId");
        });

        modelBuilder.Entity<ImImportLog>(entity =>
        {
            entity.HasKey(e => e.IlId);

            entity.ToTable("im_ImportLog");

            entity.HasIndex(e => e.IlIdImportu, "IX_im_ImportLog");

            entity.Property(e => e.IlId)
                .ValueGeneratedNever()
                .HasColumnName("il_Id");
            entity.Property(e => e.IlIdDekretu).HasColumnName("il_IdDekretu");
            entity.Property(e => e.IlIdImportu).HasColumnName("il_IdImportu");
            entity.Property(e => e.IlIdVat).HasColumnName("il_IdVAT");
            entity.Property(e => e.IlIdVatOss).HasColumnName("il_IdVAT_OSS");
            entity.Property(e => e.IlInDokId).HasColumnName("il_InDok_Id");
            entity.Property(e => e.IlInDokTyp).HasColumnName("il_InDok_Typ");
            entity.Property(e => e.IlNrBledu).HasColumnName("il_NrBledu");
            entity.Property(e => e.IlNumerDokumentu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("il_NumerDokumentu");
            entity.Property(e => e.IlOpisBledu)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("il_OpisBledu");

            entity.HasOne(d => d.IlIdImportuNavigation).WithMany(p => p.ImImportLogs)
                .HasForeignKey(d => d.IlIdImportu)
                .HasConstraintName("FK_im_ImportLog_im_ImportPrzeprowadzony");
        });

        modelBuilder.Entity<ImImportPrzeprowadzony>(entity =>
        {
            entity.HasKey(e => e.IpId);

            entity.ToTable("im_ImportPrzeprowadzony");

            entity.Property(e => e.IpId)
                .ValueGeneratedNever()
                .HasColumnName("ip_Id");
            entity.Property(e => e.IpData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ip_Data");
            entity.Property(e => e.IpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ip_DataDo");
            entity.Property(e => e.IpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ip_DataOd");
            entity.Property(e => e.IpIdOperatora).HasColumnName("ip_IdOperatora");
            entity.Property(e => e.IpImportPonowny).HasColumnName("ip_ImportPonowny");
            entity.Property(e => e.IpLiczbaOk).HasColumnName("ip_LiczbaOK");
            entity.Property(e => e.IpLiczbaWybranych).HasColumnName("ip_LiczbaWybranych");
            entity.Property(e => e.IpMagazyn).HasColumnName("ip_Magazyn");
            entity.Property(e => e.IpOkres)
                .HasDefaultValue(512)
                .HasColumnName("ip_Okres");
            entity.Property(e => e.IpOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ip_Opis");
            entity.Property(e => e.IpPrzerwijImport).HasColumnName("ip_PrzerwijImport");
            entity.Property(e => e.IpTypDokumentow).HasColumnName("ip_TypDokumentow");
            entity.Property(e => e.IpZrodlo).HasColumnName("ip_Zrodlo");

            entity.HasOne(d => d.IpIdOperatoraNavigation).WithMany(p => p.ImImportPrzeprowadzonies)
                .HasForeignKey(d => d.IpIdOperatora)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_ImportPrzeprowadzony_pd_Uzytkownik");
        });

        modelBuilder.Entity<ImSchematImportu>(entity =>
        {
            entity.HasKey(e => e.SiId);

            entity.ToTable("im_SchematImportu");

            entity.HasIndex(e => new { e.SiTypDokZrodlowego, e.SiIdKatDokZrodlowego }, "IX_im_SchematImportu");

            entity.Property(e => e.SiId)
                .ValueGeneratedNever()
                .HasColumnName("si_Id");
            entity.Property(e => e.SiCelZakupu).HasColumnName("si_CelZakupu");
            entity.Property(e => e.SiCzyPobracGtuzewidencjiVat).HasColumnName("si_CzyPobracGTUZEwidencjiVAT");
            entity.Property(e => e.SiCzyPobracProceduryJpkzewidencjiVat).HasColumnName("si_CzyPobracProceduryJPKZEwidencjiVAT");
            entity.Property(e => e.SiDataMagazynowaOtrzymania).HasColumnName("si_DataMagazynowaOtrzymania");
            entity.Property(e => e.SiDataSprzWyst).HasColumnName("si_DataSprzWyst");
            entity.Property(e => e.SiDataUp).HasColumnName("si_DataUP");
            entity.Property(e => e.SiDataWpisuDw).HasColumnName("si_DataWpisuDW");
            entity.Property(e => e.SiDataWpisuEp).HasColumnName("si_DataWpisuEP");
            entity.Property(e => e.SiDataWpisuKpir).HasColumnName("si_DataWpisuKPIR");
            entity.Property(e => e.SiDataWpisuVat).HasColumnName("si_DataWpisuVAT");
            entity.Property(e => e.SiDataWpisuVatoss).HasColumnName("si_DataWpisuVATOSS");
            entity.Property(e => e.SiDataWystawienia).HasColumnName("si_DataWystawienia");
            entity.Property(e => e.SiDataZakDost).HasColumnName("si_DataZakDost");
            entity.Property(e => e.SiDataZakDostVatoss).HasColumnName("si_DataZakDostVATOSS");
            entity.Property(e => e.SiDataZdarzeniaGospodarczego).HasColumnName("si_DataZdarzeniaGospodarczego");
            entity.Property(e => e.SiDekOpisIdSlownikOpisow).HasColumnName("si_DekOpisIdSlownikOpisow");
            entity.Property(e => e.SiDekOpisIdTresciOperacji).HasColumnName("si_DekOpisIdTresciOperacji");
            entity.Property(e => e.SiDekOpisUzytk)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("si_DekOpisUzytk");
            entity.Property(e => e.SiDekOpisZr)
                .HasDefaultValue(2)
                .HasColumnName("si_DekOpisZr");
            entity.Property(e => e.SiDokumIdOpisu).HasColumnName("si_DokumIdOpisu");
            entity.Property(e => e.SiDokumIdTresciOperacji).HasColumnName("si_DokumIdTresciOperacji");
            entity.Property(e => e.SiDokumTekst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("si_DokumTekst");
            entity.Property(e => e.SiDokumZrodloUwag)
                .HasDefaultValue(1)
                .HasColumnName("si_DokumZrodloUwag");
            entity.Property(e => e.SiDokumentZrodlowy).HasColumnName("si_DokumentZrodlowy");
            entity.Property(e => e.SiDowolnaKategoria).HasColumnName("si_DowolnaKategoria");
            entity.Property(e => e.SiEwidVatopisIdSlownikOpisow).HasColumnName("si_EwidVATOpisIdSlownikOpisow");
            entity.Property(e => e.SiEwidVatopisIdTresciOperacji).HasColumnName("si_EwidVATOpisIdTresciOperacji");
            entity.Property(e => e.SiEwidVatopisUzytk)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("si_EwidVATOpisUzytk");
            entity.Property(e => e.SiFakturaRr)
                .HasDefaultValue(-1)
                .HasColumnName("si_FakturaRR");
            entity.Property(e => e.SiIdDataDekretacji).HasColumnName("si_IdDataDekretacji");
            entity.Property(e => e.SiIdDataDokumentu).HasColumnName("si_IdDataDokumentu");
            entity.Property(e => e.SiIdDataOperacji).HasColumnName("si_IdDataOperacji");
            entity.Property(e => e.SiIdDataWpisuZpiK).HasColumnName("si_IdDataWpisuZPiK");
            entity.Property(e => e.SiIdDataZdarzeniaGospZpiK).HasColumnName("si_IdDataZdarzeniaGospZPiK");
            entity.Property(e => e.SiIdDefiniowalnegoTypu).HasColumnName("si_IdDefiniowalnegoTypu");
            entity.Property(e => e.SiIdEwidVat).HasColumnName("si_IdEwidVAT");
            entity.Property(e => e.SiIdEwidVatdokZrodlowego).HasColumnName("si_IdEwidVATDokZrodlowego");
            entity.Property(e => e.SiIdEwidVatoo).HasColumnName("si_IdEwidVATOO");
            entity.Property(e => e.SiIdEwidVatoss).HasColumnName("si_IdEwidVATOSS");
            entity.Property(e => e.SiIdEwidVatossdokZrodlowego).HasColumnName("si_IdEwidVATOSSDokZrodlowego");
            entity.Property(e => e.SiIdEwidVatzak).HasColumnName("si_IdEwidVATZak");
            entity.Property(e => e.SiIdKasy).HasColumnName("si_IdKasy");
            entity.Property(e => e.SiIdKatDokZrodlowego).HasColumnName("si_IdKatDokZrodlowego");
            entity.Property(e => e.SiIdKategoriiDw).HasColumnName("si_IdKategoriiDW");
            entity.Property(e => e.SiIdKategoriiEp).HasColumnName("si_IdKategoriiEP");
            entity.Property(e => e.SiIdKategoriiKh).HasColumnName("si_IdKategoriiKH");
            entity.Property(e => e.SiIdKategoriiKpir).HasColumnName("si_IdKategoriiKPIR");
            entity.Property(e => e.SiIdKategoriiVat).HasColumnName("si_IdKategoriiVAT");
            entity.Property(e => e.SiIdKategoriiVatoss).HasColumnName("si_IdKategoriiVATOSS");
            entity.Property(e => e.SiIdKategoriiZpiK).HasColumnName("si_IdKategoriiZPiK");
            entity.Property(e => e.SiIdMagazynu).HasColumnName("si_IdMagazynu");
            entity.Property(e => e.SiIdRachunku).HasColumnName("si_IdRachunku");
            entity.Property(e => e.SiIdRejestruKs).HasColumnName("si_IdRejestruKs");
            entity.Property(e => e.SiIdRodzajuDowodu).HasColumnName("si_IdRodzajuDowodu");
            entity.Property(e => e.SiIdStawki).HasColumnName("si_IdStawki");
            entity.Property(e => e.SiIdTransakcjaVat).HasColumnName("si_IdTransakcjaVAT");
            entity.Property(e => e.SiIdTransakcjaVatOss).HasColumnName("si_IdTransakcjaVatOss");
            entity.Property(e => e.SiImportDoDw).HasColumnName("si_ImportDoDW");
            entity.Property(e => e.SiImportDoEp).HasColumnName("si_ImportDoEP");
            entity.Property(e => e.SiImportDoKh).HasColumnName("si_ImportDoKH");
            entity.Property(e => e.SiImportDoKpir).HasColumnName("si_ImportDoKPIR");
            entity.Property(e => e.SiImportDoVat).HasColumnName("si_ImportDoVAT");
            entity.Property(e => e.SiImportDoVatoss).HasColumnName("si_ImportDoVATOSS");
            entity.Property(e => e.SiImportDoZpiK).HasColumnName("si_ImportDoZPiK");
            entity.Property(e => e.SiImportWartosciDw).HasColumnName("si_ImportWartosciDW");
            entity.Property(e => e.SiImportWartosciEp).HasColumnName("si_ImportWartosciEP");
            entity.Property(e => e.SiImportWartosciKpir).HasColumnName("si_ImportWartosciKPIR");
            entity.Property(e => e.SiImportujPozycje).HasColumnName("si_ImportujPozycje");
            entity.Property(e => e.SiKategoriaKhzrodlo)
                .HasDefaultValue(1)
                .HasColumnName("si_KategoriaKHZrodlo");
            entity.Property(e => e.SiKategoriaZpiKzrodlo)
                .HasDefaultValue(1)
                .HasColumnName("si_KategoriaZPiKZrodlo");
            entity.Property(e => e.SiKategoriaZrDw).HasColumnName("si_KategoriaZrDW");
            entity.Property(e => e.SiKategoriaZrEp).HasColumnName("si_KategoriaZrEP");
            entity.Property(e => e.SiKategoriaZrKpir).HasColumnName("si_KategoriaZrKPIR");
            entity.Property(e => e.SiKategoriaZrVat).HasColumnName("si_KategoriaZrVAT");
            entity.Property(e => e.SiKategoriaZrVatoss)
                .HasDefaultValue(1)
                .HasColumnName("si_KategoriaZrVATOSS");
            entity.Property(e => e.SiKolumna).HasColumnName("si_Kolumna");
            entity.Property(e => e.SiKontrolaBilansowania).HasColumnName("si_KontrolaBilansowania");
            entity.Property(e => e.SiKorektaWczesniejszegoKwartalu).HasColumnName("si_KorektaWczesniejszegoKwartalu");
            entity.Property(e => e.SiKorygowanyKwartal).HasColumnName("si_KorygowanyKwartal");
            entity.Property(e => e.SiKryteriumDodatkowe).HasColumnName("si_KryteriumDodatkowe");
            entity.Property(e => e.SiMiesiacNaliczeniaVatoss).HasColumnName("si_MiesiacNaliczeniaVATOSS");
            entity.Property(e => e.SiMiesiacOdliczenia).HasColumnName("si_MiesiacOdliczenia");
            entity.Property(e => e.SiNabywca)
                .HasDefaultValue(-2)
                .HasColumnName("si_Nabywca");
            entity.Property(e => e.SiNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("si_Nazwa");
            entity.Property(e => e.SiOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("si_Opis");
            entity.Property(e => e.SiOpisZr).HasColumnName("si_OpisZr");
            entity.Property(e => e.SiOznaczenieDowoduJpkVat)
                .HasDefaultValue(-1)
                .HasColumnName("si_OznaczenieDowoduJpkVAT");
            entity.Property(e => e.SiPodlegaKsiegowaniu)
                .HasDefaultValue(true)
                .HasColumnName("si_PodlegaKsiegowaniu");
            entity.Property(e => e.SiPromocje).HasColumnName("si_Promocje");
            entity.Property(e => e.SiPrzeznaczenie).HasColumnName("si_Przeznaczenie");
            entity.Property(e => e.SiPrzeznaczenieZak).HasColumnName("si_PrzeznaczenieZak");
            entity.Property(e => e.SiPrzypSzczegolny).HasColumnName("si_PrzypSzczegolny");
            entity.Property(e => e.SiPrzypadekSzczegolnyPit).HasColumnName("si_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.SiRodzaj).HasColumnName("si_Rodzaj");
            entity.Property(e => e.SiRodzajDowoduZrodlo)
                .HasDefaultValue(2)
                .HasColumnName("si_RodzajDowoduZrodlo");
            entity.Property(e => e.SiRodzajKryteriumDodatkowego).HasColumnName("si_RodzajKryteriumDodatkowego");
            entity.Property(e => e.SiRodzajZwrotuDetal)
                .HasDefaultValue(-2)
                .HasColumnName("si_RodzajZwrotuDetal");
            entity.Property(e => e.SiRozliczenieVat).HasColumnName("si_RozliczenieVat");
            entity.Property(e => e.SiStatusFiskalny)
                .HasDefaultValue(-2)
                .HasColumnName("si_StatusFiskalny");
            entity.Property(e => e.SiTransakcjaVatdokZrodlowego).HasColumnName("si_TransakcjaVATDokZrodlowego");
            entity.Property(e => e.SiTransakcjaVatzrodlo).HasColumnName("si_TransakcjaVATZrodlo");
            entity.Property(e => e.SiTypDokImport).HasColumnName("si_TypDokImport");
            entity.Property(e => e.SiTypDokZrodlowego).HasColumnName("si_TypDokZrodlowego");
            entity.Property(e => e.SiTypSt).HasColumnName("si_TypST");
            entity.Property(e => e.SiTypTranVatRozlUsl).HasColumnName("si_TypTranVatRozlUsl");
            entity.Property(e => e.SiTypTransakcji)
                .HasDefaultValue(-2)
                .HasColumnName("si_TypTransakcji");
            entity.Property(e => e.SiTypTransakcjiZak).HasColumnName("si_TypTransakcjiZak");
            entity.Property(e => e.SiUsunMnemonik).HasColumnName("si_UsunMnemonik");
            entity.Property(e => e.SiUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("si_Uwagi");
            entity.Property(e => e.SiUwagiZr).HasColumnName("si_UwagiZr");
            entity.Property(e => e.SiVatmarza)
                .HasDefaultValue(1)
                .HasColumnName("si_VATMarza");
            entity.Property(e => e.SiVatmarzaZak).HasColumnName("si_VATMarzaZak");
            entity.Property(e => e.SiVatoo).HasColumnName("si_VATOO");
            entity.Property(e => e.SiWydatki).HasColumnName("si_Wydatki");
            entity.Property(e => e.SiWydatkiZak).HasColumnName("si_WydatkiZak");
            entity.Property(e => e.SiZablokowany).HasColumnName("si_Zablokowany");

            entity.HasOne(d => d.SiDokumIdTresciOperacjiNavigation).WithMany(p => p.ImSchematImportuSiDokumIdTresciOperacjiNavigations)
                .HasForeignKey(d => d.SiDokumIdTresciOperacji)
                .HasConstraintName("FK_im_SchematImportu_sl_Tresc_Dekret");

            entity.HasOne(d => d.SiEwidVatopisIdTresciOperacjiNavigation).WithMany(p => p.ImSchematImportuSiEwidVatopisIdTresciOperacjiNavigations)
                .HasForeignKey(d => d.SiEwidVatopisIdTresciOperacji)
                .HasConstraintName("FK_im_SchematImportu_sl_Tresc_EwidVAT");

            entity.HasOne(d => d.SiIdDefiniowalnegoTypuNavigation).WithMany(p => p.ImSchematImportus)
                .HasForeignKey(d => d.SiIdDefiniowalnegoTypu)
                .HasConstraintName("FK_im_SchematImportu_dok_DokumentDefiniowalny");

            entity.HasOne(d => d.SiIdEwidVatNavigation).WithMany(p => p.ImSchematImportuSiIdEwidVatNavigations)
                .HasForeignKey(d => d.SiIdEwidVat)
                .HasConstraintName("FK_im_SchematImportu_sl_TypEwidVAT1");

            entity.HasOne(d => d.SiIdEwidVatdokZrodlowegoNavigation).WithMany(p => p.ImSchematImportuSiIdEwidVatdokZrodlowegoNavigations)
                .HasForeignKey(d => d.SiIdEwidVatdokZrodlowego)
                .HasConstraintName("FK_im_SchematImportu_sl_TypEwidVAT");

            entity.HasOne(d => d.SiIdEwidVatooNavigation).WithMany(p => p.ImSchematImportuSiIdEwidVatooNavigations)
                .HasForeignKey(d => d.SiIdEwidVatoo)
                .HasConstraintName("FK_im_SchematImportu_sl_TypEwidVATOO");

            entity.HasOne(d => d.SiIdEwidVatossdokZrodlowegoNavigation).WithMany(p => p.ImSchematImportus)
                .HasForeignKey(d => d.SiIdEwidVatossdokZrodlowego)
                .HasConstraintName("FK_im_SchematImportu_sl_EwidVatOss");

            entity.HasOne(d => d.SiIdEwidVatzakNavigation).WithMany(p => p.ImSchematImportuSiIdEwidVatzakNavigations)
                .HasForeignKey(d => d.SiIdEwidVatzak)
                .HasConstraintName("FK_im_SchematImportu_sl_TypEwidVAT2");

            entity.HasOne(d => d.SiIdKategoriiKhNavigation).WithMany(p => p.ImSchematImportus)
                .HasForeignKey(d => d.SiIdKategoriiKh)
                .HasConstraintName("FK_im_SchematImportu_sl_Kategoria");

            entity.HasOne(d => d.SiIdMagazynuNavigation).WithMany(p => p.ImSchematImportus)
                .HasForeignKey(d => d.SiIdMagazynu)
                .HasConstraintName("FK_im_SchematImportu_sl_Magazyn");

            entity.HasOne(d => d.SiIdRejestruKsNavigation).WithMany(p => p.ImSchematImportus)
                .HasForeignKey(d => d.SiIdRejestruKs)
                .HasConstraintName("FK_im_SchematImportu_sl_RejestrKsiegowy");

            entity.HasOne(d => d.SiIdRodzajuDowoduNavigation).WithMany(p => p.ImSchematImportus)
                .HasForeignKey(d => d.SiIdRodzajuDowodu)
                .HasConstraintName("FK_im_SchematImportu_sl_RodzajDowoduKsiegowego");
        });

        modelBuilder.Entity<ImSchematImportuAnalitykiKp>(entity =>
        {
            entity.HasKey(e => e.AkpId);

            entity.ToTable("im_SchematImportuAnalitykiKP");

            entity.HasIndex(e => new { e.AkpIdPozycjiSi, e.AkpPoziom }, "IX_im_SchematImportuAnalitykiKP_PoziomUnikalny").IsUnique();

            entity.Property(e => e.AkpId)
                .ValueGeneratedNever()
                .HasColumnName("akp_Id");
            entity.Property(e => e.AkpIdPozycjiSi).HasColumnName("akp_IdPozycjiSI");
            entity.Property(e => e.AkpMetodaWyznaczania).HasColumnName("akp_MetodaWyznaczania");
            entity.Property(e => e.AkpPoziom).HasColumnName("akp_Poziom");
            entity.Property(e => e.AkpTypKartotekiPowiazanej)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("akp_TypKartotekiPowiazanej");
            entity.Property(e => e.AkpTypObiektuZdokImp)
                .HasDefaultValue(1)
                .HasColumnName("akp_TypObiektuZDokImp");
            entity.Property(e => e.AkpWartoscAnalityki)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("akp_WartoscAnalityki");

            entity.HasOne(d => d.AkpTypKartotekiPowiazanejNavigation).WithMany(p => p.ImSchematImportuAnalitykiKps)
                .HasForeignKey(d => d.AkpTypKartotekiPowiazanej)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuAnalitykiKP_pk_Kartoteka");
        });

        modelBuilder.Entity<ImSchematImportuCechaKontrahentum>(entity =>
        {
            entity.HasKey(e => e.SickId);

            entity.ToTable("im_SchematImportuCechaKontrahenta");

            entity.Property(e => e.SickId)
                .ValueGeneratedNever()
                .HasColumnName("sick_Id");
            entity.Property(e => e.SickIdCechaKontrahenta).HasColumnName("sick_IdCechaKontrahenta");
            entity.Property(e => e.SickIdSchematImportu).HasColumnName("sick_IdSchematImportu");

            entity.HasOne(d => d.SickIdCechaKontrahentaNavigation).WithMany(p => p.ImSchematImportuCechaKontrahenta)
                .HasForeignKey(d => d.SickIdCechaKontrahenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuCechaKontrahenta_sl_CechaKh");

            entity.HasOne(d => d.SickIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuCechaKontrahenta)
                .HasForeignKey(d => d.SickIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuCechaKontrahenta_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuGrupaKontrahentum>(entity =>
        {
            entity.HasKey(e => e.SigkId);

            entity.ToTable("im_SchematImportuGrupaKontrahenta");

            entity.Property(e => e.SigkId)
                .ValueGeneratedNever()
                .HasColumnName("sigk_Id");
            entity.Property(e => e.SigkIdGrupaKontrahenta).HasColumnName("sigk_IdGrupaKontrahenta");
            entity.Property(e => e.SigkIdSchematImportu).HasColumnName("sigk_IdSchematImportu");

            entity.HasOne(d => d.SigkIdGrupaKontrahentaNavigation).WithMany(p => p.ImSchematImportuGrupaKontrahenta)
                .HasForeignKey(d => d.SigkIdGrupaKontrahenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuGrupaKontrahenta_sl_GrupaKh");

            entity.HasOne(d => d.SigkIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuGrupaKontrahenta)
                .HasForeignKey(d => d.SigkIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuGrupaKontrahenta_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuKategorium>(entity =>
        {
            entity.HasKey(e => e.SikId);

            entity.ToTable("im_SchematImportuKategoria");

            entity.Property(e => e.SikId)
                .ValueGeneratedNever()
                .HasColumnName("sik_Id");
            entity.Property(e => e.SikIdKategorii).HasColumnName("sik_IdKategorii");
            entity.Property(e => e.SikIdSchematImportu).HasColumnName("sik_IdSchematImportu");

            entity.HasOne(d => d.SikIdKategoriiNavigation).WithMany(p => p.ImSchematImportuKategoria)
                .HasForeignKey(d => d.SikIdKategorii)
                .HasConstraintName("FK_im_SchematImportuKategoria_sl_Kategoria");

            entity.HasOne(d => d.SikIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuKategoria)
                .HasForeignKey(d => d.SikIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuKategoria_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuKontrahent>(entity =>
        {
            entity.HasKey(e => e.SikhId);

            entity.ToTable("im_SchematImportuKontrahent");

            entity.Property(e => e.SikhId)
                .ValueGeneratedNever()
                .HasColumnName("sikh_Id");
            entity.Property(e => e.SikhIdKontrahent).HasColumnName("sikh_IdKontrahent");
            entity.Property(e => e.SikhIdSchematImportu).HasColumnName("sikh_IdSchematImportu");

            entity.HasOne(d => d.SikhIdKontrahentNavigation).WithMany(p => p.ImSchematImportuKontrahents)
                .HasForeignKey(d => d.SikhIdKontrahent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuKontrahent_kh__Kontrahent");

            entity.HasOne(d => d.SikhIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuKontrahents)
                .HasForeignKey(d => d.SikhIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuKontrahent_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuKwotyUzytkownika>(entity =>
        {
            entity.HasKey(e => e.KusId);

            entity.ToTable("im_SchematImportuKwotyUzytkownika");

            entity.Property(e => e.KusId)
                .ValueGeneratedNever()
                .HasColumnName("kus_Id");
            entity.Property(e => e.KusIdSchematImportu).HasColumnName("kus_IdSchematImportu");
            entity.Property(e => e.KusNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kus_Nazwa");
            entity.Property(e => e.KusOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kus_Opis");

            entity.HasOne(d => d.KusIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuKwotyUzytkownikas)
                .HasForeignKey(d => d.KusIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuKwotyUzytkownika_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuOpisy>(entity =>
        {
            entity.HasKey(e => e.SioId);

            entity.ToTable("im_SchematImportuOpisy");

            entity.Property(e => e.SioId)
                .ValueGeneratedNever()
                .HasColumnName("sio_Id");
            entity.Property(e => e.SioIdSchematu).HasColumnName("sio_IdSchematu");
            entity.Property(e => e.SioIdSlOpisOperacji).HasColumnName("sio_IdSlOpisOperacji");
            entity.Property(e => e.SioIdSlTrescOperacji).HasColumnName("sio_IdSlTrescOperacji");
            entity.Property(e => e.SioTrescOpisu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sio_TrescOpisu");
            entity.Property(e => e.SioTypOpisu).HasColumnName("sio_TypOpisu");
            entity.Property(e => e.SioZrodloOpisu).HasColumnName("sio_ZrodloOpisu");

            entity.HasOne(d => d.SioIdSchematuNavigation).WithMany(p => p.ImSchematImportuOpisies)
                .HasForeignKey(d => d.SioIdSchematu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuOpisy_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuOznaczeniaJpkVat>(entity =>
        {
            entity.HasKey(e => e.SijvId);

            entity.ToTable("im_SchematImportuOznaczeniaJpkVat");

            entity.Property(e => e.SijvId)
                .ValueGeneratedNever()
                .HasColumnName("sijv_Id");
            entity.Property(e => e.SijvIdSchematImportu).HasColumnName("sijv_IdSchematImportu");
            entity.Property(e => e.SijvNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sijv_Nazwa");
            entity.Property(e => e.SijvTyp).HasColumnName("sijv_Typ");

            entity.HasOne(d => d.SijvIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuOznaczeniaJpkVats)
                .HasForeignKey(d => d.SijvIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuOznaczeniaJpkVat_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuPozDekretu>(entity =>
        {
            entity.HasKey(e => e.SidId);

            entity.ToTable("im_SchematImportuPozDekretu");

            entity.Property(e => e.SidId)
                .ValueGeneratedNever()
                .HasColumnName("sid_Id");
            entity.Property(e => e.SidIdCenyDoPrzeliczen).HasColumnName("sid_IdCenyDoPrzeliczen");
            entity.Property(e => e.SidIdKartotekiPowiazanej).HasColumnName("sid_IdKartotekiPowiazanej");
            entity.Property(e => e.SidIdKategoriiPozycji).HasColumnName("sid_IdKategoriiPozycji");
            entity.Property(e => e.SidIdKwoty).HasColumnName("sid_IdKwoty");
            entity.Property(e => e.SidIdKwotyUzytkownika).HasColumnName("sid_IdKwotyUzytkownika");
            entity.Property(e => e.SidIdOpisu).HasColumnName("sid_IdOpisu");
            entity.Property(e => e.SidIdSchematImportu).HasColumnName("sid_IdSchematImportu");
            entity.Property(e => e.SidIdSkladnikaPlacowego).HasColumnName("sid_IdSkladnikaPlacowego");
            entity.Property(e => e.SidIdStawkiVat).HasColumnName("sid_IdStawkiVAT");
            entity.Property(e => e.SidIdTresciOperacji).HasColumnName("sid_IdTresciOperacji");
            entity.Property(e => e.SidIdZrodloOpisu)
                .HasDefaultValue(2)
                .HasColumnName("sid_IdZrodloOpisu");
            entity.Property(e => e.SidNrKonta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sid_NrKonta");
            entity.Property(e => e.SidOpisUzytkownika)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sid_OpisUzytkownika");
            entity.Property(e => e.SidPos).HasColumnName("sid_Pos");
            entity.Property(e => e.SidProcentKwoty)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("sid_ProcentKwoty");
            entity.Property(e => e.SidStrona)
                .HasDefaultValue(1)
                .HasColumnName("sid_Strona");
            entity.Property(e => e.SidTypKwoty).HasColumnName("sid_TypKwoty");
            entity.Property(e => e.SidTypWiersza).HasColumnName("sid_TypWiersza");

            entity.HasOne(d => d.SidIdKategoriiPozycjiNavigation).WithMany(p => p.ImSchematImportuPozDekretus)
                .HasForeignKey(d => d.SidIdKategoriiPozycji)
                .HasConstraintName("FK_im_SchematImportuPozDekretu_sl_Kategoria");

            entity.HasOne(d => d.SidIdKwotyUzytkownikaNavigation).WithMany(p => p.ImSchematImportuPozDekretus)
                .HasForeignKey(d => d.SidIdKwotyUzytkownika)
                .HasConstraintName("FK_im_SchematImportuPozDekretu_im_SchematImportuKwotyUzytkownika");

            entity.HasOne(d => d.SidIdOpisuNavigation).WithMany(p => p.ImSchematImportuPozDekretus)
                .HasForeignKey(d => d.SidIdOpisu)
                .HasConstraintName("FK_im_SchematImportuPozDekretu_sl_Opis");

            entity.HasOne(d => d.SidIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuPozDekretus)
                .HasForeignKey(d => d.SidIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuPozDekretu_im_SchematImportu");

            entity.HasOne(d => d.SidIdSkladnikaPlacowegoNavigation).WithMany(p => p.ImSchematImportuPozDekretus)
                .HasForeignKey(d => d.SidIdSkladnikaPlacowego)
                .HasConstraintName("FK_im_SchematImportuPozDekretu_plb_Skladnik");

            entity.HasOne(d => d.SidIdStawkiVatNavigation).WithMany(p => p.ImSchematImportuPozDekretus)
                .HasForeignKey(d => d.SidIdStawkiVat)
                .HasConstraintName("FK_im_SchematImportuPozDekretu_sl_StawkaVAT");

            entity.HasOne(d => d.SidIdTresciOperacjiNavigation).WithMany(p => p.ImSchematImportuPozDekretus)
                .HasForeignKey(d => d.SidIdTresciOperacji)
                .HasConstraintName("FK_im_SchematImportuPozDekretu_sl_Tresc");
        });

        modelBuilder.Entity<ImSchematImportuPozycjaRach>(entity =>
        {
            entity.HasKey(e => e.SirId);

            entity.ToTable("im_SchematImportuPozycjaRach");

            entity.Property(e => e.SirId)
                .ValueGeneratedNever()
                .HasColumnName("sir_Id");
            entity.Property(e => e.SirIdSchematImportu).HasColumnName("sir_IdSchematImportu");
            entity.Property(e => e.SirImportWartosci).HasColumnName("sir_ImportWartosci");
            entity.Property(e => e.SirKolumna).HasColumnName("sir_Kolumna");

            entity.HasOne(d => d.SirIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuPozycjaRaches)
                .HasForeignKey(d => d.SirIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuPozycjaRach_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuRodzajFaktury>(entity =>
        {
            entity.HasKey(e => e.SirfId);

            entity.ToTable("im_SchematImportuRodzajFaktury");

            entity.Property(e => e.SirfId)
                .ValueGeneratedNever()
                .HasColumnName("sirf_Id");
            entity.Property(e => e.SirfIdSchematImportu).HasColumnName("sirf_IdSchematImportu");
            entity.Property(e => e.SirfRodzajFaktury).HasColumnName("sirf_RodzajFaktury");

            entity.HasOne(d => d.SirfIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuRodzajFakturies)
                .HasForeignKey(d => d.SirfIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuRodzajFaktury_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuTypTransakcji>(entity =>
        {
            entity.HasKey(e => e.SitId);

            entity.ToTable("im_SchematImportuTypTransakcji");

            entity.Property(e => e.SitId)
                .ValueGeneratedNever()
                .HasColumnName("sit_Id");
            entity.Property(e => e.SitIdSchematImportu).HasColumnName("sit_IdSchematImportu");
            entity.Property(e => e.SitTypTransakcji).HasColumnName("sit_TypTransakcji");

            entity.HasOne(d => d.SitIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuTypTransakcjis)
                .HasForeignKey(d => d.SitIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuTypTransakcji_im_SchematImportu");
        });

        modelBuilder.Entity<ImSchematImportuZpiK>(entity =>
        {
            entity.HasKey(e => e.SipkId);

            entity.ToTable("im_SchematImportuZPiK");

            entity.Property(e => e.SipkId)
                .ValueGeneratedNever()
                .HasColumnName("sipk_Id");
            entity.Property(e => e.SipkIdSchematImportu).HasColumnName("sipk_IdSchematImportu");
            entity.Property(e => e.SipkImportWartosci).HasColumnName("sipk_ImportWartosci");
            entity.Property(e => e.SipkKolumna).HasColumnName("sipk_Kolumna");
            entity.Property(e => e.SipkWydPokrZdochZwoln).HasColumnName("sipk_WydPokrZDochZwoln");
            entity.Property(e => e.SipkWydPokrZdochZwolnZlatUb).HasColumnName("sipk_WydPokrZDochZwolnZLatUb");
            entity.Property(e => e.SipkZakresArt17).HasColumnName("sipk_ZakresArt17");

            entity.HasOne(d => d.SipkIdSchematImportuNavigation).WithMany(p => p.ImSchematImportuZpiKs)
                .HasForeignKey(d => d.SipkIdSchematImportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_im_SchematImportuZPiK_im_SchematImportu");
        });

        modelBuilder.Entity<InkZlecenieWindykacji>(entity =>
        {
            entity.HasKey(e => e.InkzId).HasName("PK__ink_ZlecenieWindykacji");

            entity.ToTable("ink_ZlecenieWindykacji");

            entity.HasIndex(e => e.InkzIdDokumentu, "UIX__ink_ZlecenieWindykacji_inkz_IdDokumentu")
                .IsUnique()
                .HasFilter("([inkz_IdDokumentu] IS NOT NULL)");

            entity.HasIndex(e => e.InkzGuid, "UQ__ink_ZlecenieWindykacji_inkz_Guid").IsUnique();

            entity.Property(e => e.InkzId)
                .ValueGeneratedNever()
                .HasColumnName("inkz_Id");
            entity.Property(e => e.InkzDataPobraniaStatusu)
                .HasColumnType("datetime")
                .HasColumnName("inkz_DataPobraniaStatusu");
            entity.Property(e => e.InkzGuid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("inkz_Guid");
            entity.Property(e => e.InkzIdDokumentu).HasColumnName("inkz_IdDokumentu");
            entity.Property(e => e.InkzStatus).HasColumnName("inkz_Status");
        });

        modelBuilder.Entity<InsBlokadum>(entity =>
        {
            entity.HasKey(e => new { e.Obid, e.Obextra, e.Obtype });

            entity.ToTable("ins_blokada", tb =>
                {
                    tb.HasTrigger("ins_blokada_OnDelete");
                    tb.HasTrigger("ins_blokada_OnInsert");
                });

            entity.Property(e => e.Obid).HasColumnName("obid");
            entity.Property(e => e.Obextra).HasColumnName("obextra");
            entity.Property(e => e.Obtype).HasColumnName("obtype");
            entity.Property(e => e.Counter)
                .HasDefaultValue(1)
                .HasColumnName("counter");
            entity.Property(e => e.Locktime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("locktime");
            entity.Property(e => e.Username)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("username");
            entity.Property(e => e.Workstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("workstation");
        });

        modelBuilder.Entity<InsIdent>(entity =>
        {
            entity.HasKey(e => e.IdoNazwa);

            entity.ToTable("ins_ident");

            entity.Property(e => e.IdoNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ido_nazwa");
            entity.Property(e => e.IdoMinIdValue).HasColumnName("ido_minIdValue");
            entity.Property(e => e.IdoWartosc)
                .HasDefaultValue(1)
                .HasColumnName("ido_wartosc");
        });

        modelBuilder.Entity<InsSlad>(entity =>
        {
            entity.HasKey(e => e.SladId);

            entity.ToTable("ins_Slad");

            entity.Property(e => e.SladId).HasColumnName("slad_Id");
            entity.Property(e => e.SladCzasZdarzenia)
                .HasColumnType("datetime")
                .HasColumnName("slad_CzasZdarzenia");
            entity.Property(e => e.SladIdObiektu).HasColumnName("slad_IdObiektu");
            entity.Property(e => e.SladIdUzytkownika).HasColumnName("slad_IdUzytkownika");
            entity.Property(e => e.SladTypObiektu).HasColumnName("slad_TypObiektu");
            entity.Property(e => e.SladZdarzenie).HasColumnName("slad_Zdarzenie");

            entity.HasOne(d => d.SladIdUzytkownikaNavigation).WithMany(p => p.InsSlads)
                .HasForeignKey(d => d.SladIdUzytkownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ins_Slad_pd_Uzytkownik");
        });

        modelBuilder.Entity<InsSzpieg>(entity =>
        {
            entity.HasKey(e => e.InssId);

            entity.ToTable("ins_Szpieg");

            entity.HasIndex(e => e.InssCzasOperacji, "IX_ins_Szpieg_CzasOperacji");

            entity.HasIndex(e => new { e.InssCzasOperacji, e.InssIdUzytkownika }, "IX_ins_Szpieg_CzasOperacji_IdUzytkownika");

            entity.HasIndex(e => e.InssTypObiektu, "IX_ins_Szpieg_TypObiektu");

            entity.HasIndex(e => new { e.InssTypObiektu, e.InssIdObiektu }, "IX_ins_Szpieg_TypObiektu_IdObiektu");

            entity.Property(e => e.InssId).HasColumnName("inss_Id");
            entity.Property(e => e.InssCzasOperacji)
                .HasColumnType("datetime")
                .HasColumnName("inss_CzasOperacji");
            entity.Property(e => e.InssIdObiektu).HasColumnName("inss_IdObiektu");
            entity.Property(e => e.InssIdUzytkownika).HasColumnName("inss_IdUzytkownika");
            entity.Property(e => e.InssNazwaObiektu)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("inss_NazwaObiektu");
            entity.Property(e => e.InssObiektXml)
                .HasColumnType("text")
                .HasColumnName("inss_ObiektXml");
            entity.Property(e => e.InssPoziomUprawnienIdUzytkownika).HasColumnName("inss_PoziomUprawnienIdUzytkownika");
            entity.Property(e => e.InssPoziomUprawnienUzytkownik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("inss_PoziomUprawnienUzytkownik");
            entity.Property(e => e.InssStanowisko)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("inss_Stanowisko");
            entity.Property(e => e.InssTypObiektu).HasColumnName("inss_TypObiektu");
            entity.Property(e => e.InssTypObiektuEx).HasColumnName("inss_TypObiektuEx");
            entity.Property(e => e.InssTypOperacji).HasColumnName("inss_TypOperacji");
            entity.Property(e => e.InssUzytkownik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("inss_Uzytkownik");
        });

        modelBuilder.Entity<InsSzpiegParametr>(entity =>
        {
            entity.HasKey(e => e.InsspId);

            entity.ToTable("ins_SzpiegParametr");

            entity.Property(e => e.InsspId)
                .ValueGeneratedNever()
                .HasColumnName("inssp_Id");
            entity.Property(e => e.InsspParamEwidId).HasColumnName("inssp_ParamEwidId");

            entity.HasOne(d => d.InsspParamEwid).WithMany(p => p.InsSzpiegParametrs)
                .HasForeignKey(d => d.InsspParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ins_SzpiegParametr_par__Ewid");
        });

        modelBuilder.Entity<InsSzpiegParametrTyp>(entity =>
        {
            entity.HasKey(e => e.InssptId);

            entity.ToTable("ins_SzpiegParametrTyp");

            entity.Property(e => e.InssptId)
                .ValueGeneratedNever()
                .HasColumnName("insspt_Id");
            entity.Property(e => e.InssptParamEwidId).HasColumnName("insspt_ParamEwidId");
            entity.Property(e => e.InssptProgramy).HasColumnName("insspt_Programy");
            entity.Property(e => e.InssptStan).HasColumnName("insspt_Stan");
            entity.Property(e => e.InssptTyp).HasColumnName("insspt_Typ");
            entity.Property(e => e.InssptTypEx).HasColumnName("insspt_TypEx");
        });

        modelBuilder.Entity<InsxParametr>(entity =>
        {
            entity.HasKey(e => e.IxpId);

            entity.ToTable("insx_Parametr");

            entity.HasIndex(e => e.IxpParamEwidId, "IX_insx_Parametr").IsUnique();

            entity.Property(e => e.IxpId)
                .ValueGeneratedNever()
                .HasColumnName("ixp_Id");
            entity.Property(e => e.IxpBiblDokWarunekAnd).HasColumnName("ixp_BiblDokWarunekAnd");
            entity.Property(e => e.IxpDataPdm)
                .HasColumnType("image")
                .HasColumnName("ixp_DataPdm");
            entity.Property(e => e.IxpEaPominNieaktywnych).HasColumnName("ixp_EaPominNieaktywnych");
            entity.Property(e => e.IxpEaWarunekAnd).HasColumnName("ixp_EaWarunekAnd");
            entity.Property(e => e.IxpKhMinZnakow).HasColumnName("ixp_KhMinZnakow");
            entity.Property(e => e.IxpKhRodzaj)
                .HasDefaultValue(-2)
                .HasColumnName("ixp_KhRodzaj");
            entity.Property(e => e.IxpKhSortuj).HasColumnName("ixp_KhSortuj");
            entity.Property(e => e.IxpKhWarunekAnd).HasColumnName("ixp_KhWarunekAnd");
            entity.Property(e => e.IxpLiczbaPozEa)
                .HasDefaultValue(20)
                .HasColumnName("ixp_LiczbaPozEa");
            entity.Property(e => e.IxpLiczbaPozKh)
                .HasDefaultValue(20)
                .HasColumnName("ixp_LiczbaPozKh");
            entity.Property(e => e.IxpLiczbaPozTw)
                .HasDefaultValue(15)
                .HasColumnName("ixp_LiczbaPozTw");
            entity.Property(e => e.IxpParamEwidId).HasColumnName("ixp_ParamEwidId");
            entity.Property(e => e.IxpTwBezZerowych).HasColumnName("ixp_TwBezZerowych");
            entity.Property(e => e.IxpTwMinZnakow).HasColumnName("ixp_TwMinZnakow");
            entity.Property(e => e.IxpTwRezerwacje).HasColumnName("ixp_TwRezerwacje");
            entity.Property(e => e.IxpTwSortuj).HasColumnName("ixp_TwSortuj");
            entity.Property(e => e.IxpTwWarunekAnd).HasColumnName("ixp_TwWarunekAnd");
            entity.Property(e => e.IxpWyszukiwanieAdresow)
                .HasDefaultValue(true)
                .HasColumnName("ixp_WyszukiwanieAdresow");

            entity.HasOne(d => d.IxpParamEwid).WithOne(p => p.InsxParametr)
                .HasForeignKey<InsxParametr>(d => d.IxpParamEwidId)
                .HasConstraintName("FK_insx_Parametr_par__Ewid");
        });

        modelBuilder.Entity<IntParametryIntrastat>(entity =>
        {
            entity.HasKey(e => e.IntpId);

            entity.ToTable("int_ParametryIntrastat");

            entity.Property(e => e.IntpId)
                .ValueGeneratedNever()
                .HasColumnName("intp_Id");
            entity.Property(e => e.IntpDokumentySkutekMagazynowyP)
                .HasDefaultValue(1)
                .HasColumnName("intp_DokumentySkutekMagazynowyP");
            entity.Property(e => e.IntpDokumentySkutekMagazynowyW)
                .HasDefaultValue(1)
                .HasColumnName("intp_DokumentySkutekMagazynowyW");
            entity.Property(e => e.IntpDokumentyTypDaty).HasColumnName("intp_DokumentyTypDaty");
            entity.Property(e => e.IntpParamEwidId).HasColumnName("intp_ParamEwidId");
            entity.Property(e => e.IntpZrodloOpisuTowaru).HasColumnName("intp_ZrodloOpisuTowaru");

            entity.HasOne(d => d.IntpParamEwid).WithMany(p => p.IntParametryIntrastats)
                .HasForeignKey(d => d.IntpParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_int_ParametryIntrastat_par__Ewid");
        });

        modelBuilder.Entity<IsInstytucja>(entity =>
        {
            entity.HasKey(e => e.IsId).HasName("PK_is_Instytucja");

            entity.ToTable("is__Instytucja", tb =>
                {
                    tb.HasTrigger("tr_Instytucja_Deleting");
                    tb.HasTrigger("tr_Instytucja_Inserting");
                    tb.HasTrigger("tr_Instytucja_Updating");
                });

            entity.Property(e => e.IsId)
                .ValueGeneratedNever()
                .HasColumnName("is_Id");
            entity.Property(e => e.IsEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("is_EMail");
            entity.Property(e => e.IsFunduszPromocji).HasColumnName("is_FunduszPromocji");
            entity.Property(e => e.IsIdRachunkuWirtualnego).HasColumnName("is_IdRachunkuWirtualnego");
            entity.Property(e => e.IsIzbaCelna).HasColumnName("is_IzbaCelna");
            entity.Property(e => e.IsKodUs).HasColumnName("is_KodUS");
            entity.Property(e => e.IsNrAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("is_NrAnalityka");
            entity.Property(e => e.IsRachunekCit).HasColumnName("is_RachunekCIT");
            entity.Property(e => e.IsRachunekPit).HasColumnName("is_RachunekPIT");
            entity.Property(e => e.IsRachunekVat).HasColumnName("is_RachunekVAT");
            entity.Property(e => e.IsRodzaj).HasColumnName("is_Rodzaj");
            entity.Property(e => e.IsSposobNaliczania).HasColumnName("is_SposobNaliczania");
            entity.Property(e => e.IsSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("is_Symbol");
            entity.Property(e => e.IsWartoscNaliczenia)
                .HasColumnType("money")
                .HasColumnName("is_WartoscNaliczenia");
            entity.Property(e => e.IsWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("is_WWW");

            entity.HasOne(d => d.IsIdRachunkuWirtualnegoNavigation).WithMany(p => p.IsInstytucjas)
                .HasForeignKey(d => d.IsIdRachunkuWirtualnego)
                .HasConstraintName("FK_is__Instytucja_rb_RachBankowyWirtualny");

            entity.HasOne(d => d.IsKodUsNavigation).WithMany(p => p.IsInstytucjas)
                .HasForeignKey(d => d.IsKodUs)
                .HasConstraintName("FK_is__Instytucja_sl_UrzadSkarbowy");

            entity.HasOne(d => d.IsRodzajNavigation).WithMany(p => p.IsInstytucjas)
                .HasForeignKey(d => d.IsRodzaj)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_is__Instytucja_is_RodzajInstytucji");
        });

        modelBuilder.Entity<IsRodzajInstytucji>(entity =>
        {
            entity.HasKey(e => e.IrId);

            entity.ToTable("is_RodzajInstytucji");

            entity.Property(e => e.IrId)
                .ValueGeneratedNever()
                .HasColumnName("ir_Id");
            entity.Property(e => e.IrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ir_Nazwa");
        });

        modelBuilder.Entity<IwCechy>(entity =>
        {
            entity.HasKey(e => e.IwcId);

            entity.ToTable("iw_Cechy");

            entity.Property(e => e.IwcId)
                .ValueGeneratedNever()
                .HasColumnName("iwc_Id");
            entity.Property(e => e.IwcDoIwId).HasColumnName("iwc_doIwId");
            entity.Property(e => e.IwcIdCechy).HasColumnName("iwc_IdCechy");

            entity.HasOne(d => d.IwcDoIw).WithMany(p => p.IwCechies)
                .HasForeignKey(d => d.IwcDoIwId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Cechy_iw__Dokument");

            entity.HasOne(d => d.IwcIdCechyNavigation).WithMany(p => p.IwCechies)
                .HasForeignKey(d => d.IwcIdCechy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Cechy_sl_CechaTw");
        });

        modelBuilder.Entity<IwDokument>(entity =>
        {
            entity.HasKey(e => e.IwId);

            entity.ToTable("iw__Dokument", tb =>
                {
                    tb.HasTrigger("tr_ZapisCzasuIw");
                    tb.HasTrigger("tr__InwDokument_Inserting");
                });

            entity.Property(e => e.IwId)
                .ValueGeneratedNever()
                .HasColumnName("iw_Id");
            entity.Property(e => e.IwCenyIdBanku).HasColumnName("iw_CenyIdBanku");
            entity.Property(e => e.IwCenyKurs)
                .HasColumnType("money")
                .HasColumnName("iw_CenyKurs");
            entity.Property(e => e.IwCenyKursData)
                .HasColumnType("datetime")
                .HasColumnName("iw_CenyKursData");
            entity.Property(e => e.IwCenyLiczbaJedn)
                .HasDefaultValue(1)
                .HasColumnName("iw_CenyLiczbaJedn");
            entity.Property(e => e.IwCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("iw_CenyNarzut");
            entity.Property(e => e.IwCenyPoziom).HasColumnName("iw_CenyPoziom");
            entity.Property(e => e.IwCenyRodzajKursu).HasColumnName("iw_CenyRodzajKursu");
            entity.Property(e => e.IwDataMag)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataMag");
            entity.Property(e => e.IwDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataWyst");
            entity.Property(e => e.IwDataZatw)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataZatw");
            entity.Property(e => e.IwDoIwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Iw_DoIwNrPelny");
            entity.Property(e => e.IwFiltrCheckCecha).HasColumnName("iw_FiltrCheckCecha");
            entity.Property(e => e.IwFiltrCheckFlaga).HasColumnName("iw_FiltrCheckFlaga");
            entity.Property(e => e.IwFiltrCheckGrupa).HasColumnName("iw_FiltrCheckGrupa");
            entity.Property(e => e.IwFiltrCheckPlu).HasColumnName("iw_FiltrCheckPLU");
            entity.Property(e => e.IwFiltrCheckRodzaje).HasColumnName("iw_FiltrCheckRodzaje");
            entity.Property(e => e.IwFiltrCheckStan).HasColumnName("iw_FiltrCheckStan");
            entity.Property(e => e.IwFiltrPludo).HasColumnName("iw_FiltrPLUDo");
            entity.Property(e => e.IwFiltrPluod).HasColumnName("iw_FiltrPLUOd");
            entity.Property(e => e.IwFiltrRodzaje).HasColumnName("iw_FiltrRodzaje");
            entity.Property(e => e.IwFiltrStan).HasColumnName("iw_FiltrStan");
            entity.Property(e => e.IwIdIwcRaport).HasColumnName("iw_IdIWcRaport");
            entity.Property(e => e.IwKatId).HasColumnName("iw_KatId");
            entity.Property(e => e.IwMagId).HasColumnName("iw_MagId");
            entity.Property(e => e.IwMiejsceWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_MiejsceWyst");
            entity.Property(e => e.IwNr).HasColumnName("iw_Nr");
            entity.Property(e => e.IwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("iw_NrPelny");
            entity.Property(e => e.IwNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("iw_NrRoz");
            entity.Property(e => e.IwPersonelId).HasColumnName("iw_PersonelId");
            entity.Property(e => e.IwPodpisanoElektronicznie).HasColumnName("iw_PodpisanoElektronicznie");
            entity.Property(e => e.IwPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("iw_Podtytul");
            entity.Property(e => e.IwPwId).HasColumnName("iw_PwId");
            entity.Property(e => e.IwPwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("iw_PwNrPelny");
            entity.Property(e => e.IwRwId).HasColumnName("iw_RwId");
            entity.Property(e => e.IwRwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("iw_RwNrPelny");
            entity.Property(e => e.IwStatus).HasColumnName("iw_Status");
            entity.Property(e => e.IwStatusBlok).HasColumnName("iw_StatusBlok");
            entity.Property(e => e.IwStatusMagOdlozony).HasColumnName("iw_StatusMagOdlozony");
            entity.Property(e => e.IwTyp).HasColumnName("iw_Typ");
            entity.Property(e => e.IwTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("iw_Tytul");
            entity.Property(e => e.IwUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("iw_Uwagi");
            entity.Property(e => e.IwWartosc)
                .HasColumnType("money")
                .HasColumnName("iw_Wartosc");
            entity.Property(e => e.IwWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_Wystawil");
            entity.Property(e => e.IwZatwierdzil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_Zatwierdzil");

            entity.HasOne(d => d.IwKat).WithMany(p => p.IwDokuments)
                .HasForeignKey(d => d.IwKatId)
                .HasConstraintName("FK_iw__Dokument_sl_Kategoria");

            entity.HasOne(d => d.IwMag).WithMany(p => p.IwDokuments)
                .HasForeignKey(d => d.IwMagId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw__Dokument_sl_Magazyn");

            entity.HasOne(d => d.IwPw).WithMany(p => p.IwDokumentIwPws)
                .HasForeignKey(d => d.IwPwId)
                .HasConstraintName("FK_iw__Dokument_dok__Dokument1");

            entity.HasOne(d => d.IwRw).WithMany(p => p.IwDokumentIwRws)
                .HasForeignKey(d => d.IwRwId)
                .HasConstraintName("FK_iw__Dokument_dok__Dokument");
        });

        modelBuilder.Entity<IwDyspozycja>(entity =>
        {
            entity.HasKey(e => new { e.IwdId, e.IwdDoPozId });

            entity.ToTable("iw_Dyspozycja");

            entity.Property(e => e.IwdId).HasColumnName("iwd_Id");
            entity.Property(e => e.IwdDoPozId).HasColumnName("iwd_DoPozId");
            entity.Property(e => e.IwdCzas)
                .HasColumnType("datetime")
                .HasColumnName("iwd_Czas");
            entity.Property(e => e.IwdDoId).HasColumnName("iwd_DoId");
            entity.Property(e => e.IwdDoIlosc)
                .HasColumnType("money")
                .HasColumnName("iwd_DoIlosc");
            entity.Property(e => e.IwdIlosc)
                .HasColumnType("money")
                .HasColumnName("iwd_Ilosc");
            entity.Property(e => e.IwdIwRozbId)
                .HasDefaultValue(-1)
                .HasColumnName("iwd_IwRozbId");
            entity.Property(e => e.IwdRealId)
                .HasDefaultValue(-1)
                .HasColumnName("iwd_RealId");
            entity.Property(e => e.IwdSpid).HasColumnName("iwd_spid");
        });

        modelBuilder.Entity<IwFlagi>(entity =>
        {
            entity.HasKey(e => e.IwfId);

            entity.ToTable("iw_Flagi");

            entity.Property(e => e.IwfId)
                .ValueGeneratedNever()
                .HasColumnName("iwf_Id");
            entity.Property(e => e.IwfDoIwId).HasColumnName("iwf_doIwId");
            entity.Property(e => e.IwfIdFlagi).HasColumnName("iwf_IdFlagi");

            entity.HasOne(d => d.IwfDoIw).WithMany(p => p.IwFlagis)
                .HasForeignKey(d => d.IwfDoIwId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Flagi_iw__Dokument");

            entity.HasOne(d => d.IwfIdFlagiNavigation).WithMany(p => p.IwFlagis)
                .HasForeignKey(d => d.IwfIdFlagi)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Flagi_fl_Flagi");
        });

        modelBuilder.Entity<IwGrupy>(entity =>
        {
            entity.HasKey(e => e.IwgId);

            entity.ToTable("iw_Grupy");

            entity.Property(e => e.IwgId)
                .ValueGeneratedNever()
                .HasColumnName("iwg_Id");
            entity.Property(e => e.IwgDoIwId).HasColumnName("iwg_doIwId");
            entity.Property(e => e.IwgIdGrupy).HasColumnName("iwg_IdGrupy");

            entity.HasOne(d => d.IwgDoIw).WithMany(p => p.IwGrupies)
                .HasForeignKey(d => d.IwgDoIwId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Grupy_iw__Dokument");

            entity.HasOne(d => d.IwgIdGrupyNavigation).WithMany(p => p.IwGrupies)
                .HasForeignKey(d => d.IwgIdGrupy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Grupy_sl_GrupaTw");
        });

        modelBuilder.Entity<IwPowiazanium>(entity =>
        {
            entity.HasKey(e => e.IwaId);

            entity.ToTable("iw_Powiazania");

            entity.Property(e => e.IwaId)
                .ValueGeneratedNever()
                .HasColumnName("iwa_Id");
            entity.Property(e => e.IwaIdCz).HasColumnName("iwa_IdCz");
            entity.Property(e => e.IwaIdZb).HasColumnName("iwa_IdZb");

            entity.HasOne(d => d.IwaIdCzNavigation).WithMany(p => p.IwPowiazaniumIwaIdCzNavigations)
                .HasForeignKey(d => d.IwaIdCz)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Powiazania_iw__Dokument");

            entity.HasOne(d => d.IwaIdZbNavigation).WithMany(p => p.IwPowiazaniumIwaIdZbNavigations)
                .HasForeignKey(d => d.IwaIdZb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Powiazania_iw__Dokument1");
        });

        modelBuilder.Entity<IwPozycja>(entity =>
        {
            entity.HasKey(e => e.IwpId);

            entity.ToTable("iw_Pozycja");

            entity.Property(e => e.IwpId)
                .ValueGeneratedNever()
                .HasColumnName("iwp_Id");
            entity.Property(e => e.IwpBrakuje)
                .HasColumnType("money")
                .HasColumnName("iwp_Brakuje");
            entity.Property(e => e.IwpCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("iwp_CenaBrutto");
            entity.Property(e => e.IwpCenaNetto)
                .HasColumnType("money")
                .HasColumnName("iwp_CenaNetto");
            entity.Property(e => e.IwpDoDokId).HasColumnName("iwp_doDokId");
            entity.Property(e => e.IwpDostepne)
                .HasColumnType("money")
                .HasColumnName("iwp_Dostepne");
            entity.Property(e => e.IwpIdTowaru).HasColumnName("iwp_IdTowaru");
            entity.Property(e => e.IwpKategoriaId).HasColumnName("iwp_KategoriaId");
            entity.Property(e => e.IwpKodDostawy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iwp_KodDostawy");
            entity.Property(e => e.IwpLp).HasColumnName("iwp_Lp");
            entity.Property(e => e.IwpOpisPozycji)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("iwp_OpisPozycji");
            entity.Property(e => e.IwpPrzychod)
                .HasColumnType("money")
                .HasColumnName("iwp_Przychod");
            entity.Property(e => e.IwpRd).HasColumnName("iwp_Rd");
            entity.Property(e => e.IwpRezerwacja)
                .HasColumnType("money")
                .HasColumnName("iwp_Rezerwacja");
            entity.Property(e => e.IwpRozbitaAuto)
                .HasDefaultValue(0)
                .HasColumnName("iwp_RozbitaAuto");
            entity.Property(e => e.IwpRozchod)
                .HasColumnType("money")
                .HasColumnName("iwp_Rozchod");
            entity.Property(e => e.IwpStanKomp)
                .HasColumnType("money")
                .HasColumnName("iwp_StanKomp");
            entity.Property(e => e.IwpStanMagazyn)
                .HasColumnType("money")
                .HasColumnName("iwp_StanMagazyn");
            entity.Property(e => e.IwpTerminWaznosci)
                .HasColumnType("datetime")
                .HasColumnName("iwp_TerminWaznosci");
            entity.Property(e => e.IwpWartBrutto)
                .HasColumnType("money")
                .HasColumnName("iwp_WartBrutto");
            entity.Property(e => e.IwpWartNetto)
                .HasColumnType("money")
                .HasColumnName("iwp_WartNetto");

            entity.HasOne(d => d.IwpDoDok).WithMany(p => p.IwPozycjas)
                .HasForeignKey(d => d.IwpDoDokId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("iw_Pozycja_fk");

            entity.HasOne(d => d.IwpIdTowaruNavigation).WithMany(p => p.IwPozycjas)
                .HasForeignKey(d => d.IwpIdTowaru)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iw_Pozycja_tw__Towar");
        });

        modelBuilder.Entity<IwRozbicie>(entity =>
        {
            entity.HasKey(e => e.IwrId);

            entity.ToTable("iw_Rozbicie");

            entity.Property(e => e.IwrId)
                .ValueGeneratedNever()
                .HasColumnName("iwr_Id");
            entity.Property(e => e.IwrCenaNetto)
                .HasColumnType("money")
                .HasColumnName("iwr_CenaNetto");
            entity.Property(e => e.IwrDoPozId).HasColumnName("iwr_DoPozId");
            entity.Property(e => e.IwrDysp).HasColumnName("iwr_Dysp");
            entity.Property(e => e.IwrIloscPrzychod)
                .HasColumnType("money")
                .HasColumnName("iwr_IloscPrzychod");
            entity.Property(e => e.IwrIloscRozchod)
                .HasColumnType("money")
                .HasColumnName("iwr_IloscRozchod");
            entity.Property(e => e.IwrKategoriaId).HasColumnName("iwr_KategoriaId");
            entity.Property(e => e.IwrKodDostawy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("iwr_KodDostawy");
            entity.Property(e => e.IwrOpisPozycji)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("iwr_OpisPozycji");
            entity.Property(e => e.IwrRozbitaAuto)
                .HasDefaultValue(false)
                .HasColumnName("iwr_RozbitaAuto");
            entity.Property(e => e.IwrTerminWaznosci)
                .HasColumnType("datetime")
                .HasColumnName("iwr_TerminWaznosci");
            entity.Property(e => e.IwrWartosc)
                .HasColumnType("money")
                .HasColumnName("iwr_Wartosc");
        });

        modelBuilder.Entity<JpkPaczka>(entity =>
        {
            entity.HasKey(e => e.JpkpId).HasName("PK_jpkp_Paczka");

            entity.ToTable("jpk_Paczka");

            entity.Property(e => e.JpkpId)
                .ValueGeneratedNever()
                .HasColumnName("jpkp_Id");
            entity.Property(e => e.JpkpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("jpkp_DataDo");
            entity.Property(e => e.JpkpDataDodania)
                .HasColumnType("datetime")
                .HasColumnName("jpkp_DataDodania");
            entity.Property(e => e.JpkpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("jpkp_DataOd");
            entity.Property(e => e.JpkpIdUrzeduSkarbowego).HasColumnName("jpkp_IdUrzeduSkarbowego");
            entity.Property(e => e.JpkpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jpkp_Nazwa");
            entity.Property(e => e.JpkpOpis)
                .HasColumnType("text")
                .HasColumnName("jpkp_Opis");
            entity.Property(e => e.JpkpSygnatura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jpkp_Sygnatura");
            entity.Property(e => e.JpkpWyslana)
                .HasDefaultValue(false)
                .HasColumnName("jpkp_Wyslana");
            entity.Property(e => e.JpkpZatwierdzona)
                .HasDefaultValue(false)
                .HasColumnName("jpkp_Zatwierdzona");

            entity.HasOne(d => d.JpkpIdUrzeduSkarbowegoNavigation).WithMany(p => p.JpkPaczkas)
                .HasForeignKey(d => d.JpkpIdUrzeduSkarbowego)
                .HasConstraintName("FK_jpk_Paczka_sl_UrzadSkarbowy");
        });

        modelBuilder.Entity<JpkParametr>(entity =>
        {
            entity.HasKey(e => e.JprId);

            entity.ToTable("jpk_Parametr");

            entity.Property(e => e.JprId)
                .ValueGeneratedNever()
                .HasColumnName("jpr_Id");
            entity.Property(e => e.JprCzyPobieracKwotyZapisowZeStawka0DlaVatZakupu).HasColumnName("jpr_CzyPobieracKwotyZapisowZeStawka0DlaVatZakupu");
            entity.Property(e => e.JprCzyPobieracKwotyZapisowZeStawkaZwDlaVatZakupu).HasColumnName("jpr_CzyPobieracKwotyZapisowZeStawkaZwDlaVatZakupu");
            entity.Property(e => e.JprEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("jpr_Email");
            entity.Property(e => e.JprEmailZrodlo).HasColumnName("jpr_EmailZrodlo");
            entity.Property(e => e.JprImportKh)
                .HasDefaultValue(2)
                .HasColumnName("jpr_ImportKh");
            entity.Property(e => e.JprParametryDomyslneRejVat)
                .HasColumnType("image")
                .HasColumnName("jpr_ParametryDomyslneRejVat");
            entity.Property(e => e.JprPeselJakoNrKontrahenta).HasColumnName("jpr_PeselJakoNrKontrahenta");
            entity.Property(e => e.JprPodpisJpkInne)
                .HasDefaultValue(1)
                .HasColumnName("jpr_PodpisJpkInne");
            entity.Property(e => e.JprPodpisJpkVat)
                .HasDefaultValue(1)
                .HasColumnName("jpr_PodpisJpkVat");
            entity.Property(e => e.JprPusteSprzedaz).HasColumnName("jpr_PusteSprzedaz");
            entity.Property(e => e.JprPusteZakup).HasColumnName("jpr_PusteZakup");
            entity.Property(e => e.JprTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jpr_Telefon");
            entity.Property(e => e.JprTelefonZrodlo).HasColumnName("jpr_TelefonZrodlo");
            entity.Property(e => e.JprUzupelnianieKh)
                .HasDefaultValue(3)
                .HasColumnName("jpr_UzupelnianieKh");
        });

        modelBuilder.Entity<JpkPlik>(entity =>
        {
            entity.HasKey(e => e.JpkId).HasName("PK_jpk_PliK");

            entity.ToTable("jpk_Plik");

            entity.Property(e => e.JpkId)
                .ValueGeneratedNever()
                .HasColumnName("jpk_Id");
            entity.Property(e => e.JpkCelZlozenia).HasColumnName("jpk_CelZlozenia");
            entity.Property(e => e.JpkDataWygenerowania)
                .HasColumnType("datetime")
                .HasColumnName("jpk_DataWygenerowania");
            entity.Property(e => e.JpkIdDeklaracji).HasColumnName("jpk_IdDeklaracji");
            entity.Property(e => e.JpkIdPaczki).HasColumnName("jpk_IdPaczki");
            entity.Property(e => e.JpkIdUrzeduSkarbowego).HasColumnName("jpk_IdUrzeduSkarbowego");
            entity.Property(e => e.JpkImportowany).HasColumnName("jpk_Importowany");
            entity.Property(e => e.JpkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jpk_Nazwa");
            entity.Property(e => e.JpkNumerKorekty).HasColumnName("jpk_NumerKorekty");
            entity.Property(e => e.JpkOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("jpk_OkresDo");
            entity.Property(e => e.JpkOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("jpk_OkresOd");
            entity.Property(e => e.JpkParametryPliku)
                .HasColumnType("image")
                .HasColumnName("jpk_ParametryPliku");
            entity.Property(e => e.JpkPlikHash)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("jpk_PlikHash");
            entity.Property(e => e.JpkPlikXml)
                .HasColumnType("image")
                .HasColumnName("jpk_PlikXml");
            entity.Property(e => e.JpkPodtyp).HasColumnName("jpk_Podtyp");
            entity.Property(e => e.JpkRodzaj).HasColumnName("jpk_Rodzaj");
            entity.Property(e => e.JpkScalony).HasColumnName("jpk_Scalony");
            entity.Property(e => e.JpkTyp).HasColumnName("jpk_Typ");
            entity.Property(e => e.JpkWalutaDomyslna)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("jpk_WalutaDomyslna");
            entity.Property(e => e.JpkWersja).HasColumnName("jpk_Wersja");
            entity.Property(e => e.JpkWyeksportowany).HasColumnName("jpk_Wyeksportowany");

            entity.HasOne(d => d.JpkIdDeklaracjiNavigation).WithMany(p => p.JpkPliks)
                .HasForeignKey(d => d.JpkIdDeklaracji)
                .HasConstraintName("FK_jpk_Plik_dekl__Ewid");

            entity.HasOne(d => d.JpkIdPaczkiNavigation).WithMany(p => p.JpkPliks)
                .HasForeignKey(d => d.JpkIdPaczki)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_jpk_Plik_jpk_Paczka");

            entity.HasOne(d => d.JpkIdUrzeduSkarbowegoNavigation).WithMany(p => p.JpkPliks)
                .HasForeignKey(d => d.JpkIdUrzeduSkarbowego)
                .HasConstraintName("FK_jpk_Plik_sl_UrzadSkarbowy");

            entity.HasOne(d => d.JpkTypNavigation).WithMany(p => p.JpkPliks)
                .HasForeignKey(d => d.JpkTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_jpk_Plik_jpk_Typ");

            entity.HasOne(d => d.JpkWalutaDomyslnaNavigation).WithMany(p => p.JpkPliks)
                .HasForeignKey(d => d.JpkWalutaDomyslna)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_jpk_Plik_sl_Waluta");

            entity.HasOne(d => d.JpkWersjaNavigation).WithMany(p => p.JpkPliks)
                .HasForeignKey(d => d.JpkWersja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_jpk_Plik_jpk_Wersja");
        });

        modelBuilder.Entity<JpkPolaNiestandardowe>(entity =>
        {
            entity.HasKey(e => e.JpknId);

            entity.ToTable("jpk_PolaNiestandardowe");

            entity.Property(e => e.JpknId)
                .ValueGeneratedNever()
                .HasColumnName("jpkn_Id");
            entity.Property(e => e.JpknDef)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("jpkn_Def");
            entity.Property(e => e.JpknNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jpkn_Nazwa");
            entity.Property(e => e.JpknRodzic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jpkn_Rodzic");
            entity.Property(e => e.JpknTypPola).HasColumnName("jpkn_TypPola");
            entity.Property(e => e.JpknWersja).HasColumnName("jpkn_Wersja");

            entity.HasOne(d => d.JpknWersjaNavigation).WithMany(p => p.JpkPolaNiestandardowes)
                .HasForeignKey(d => d.JpknWersja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_jpk_PolaNiestandardowe_jpk_Wersja");
        });

        modelBuilder.Entity<JpkTyp>(entity =>
        {
            entity.HasKey(e => e.JpktId);

            entity.ToTable("jpk_Typ");

            entity.Property(e => e.JpktId)
                .ValueGeneratedNever()
                .HasColumnName("jpkt_Id");
            entity.Property(e => e.JpktKolejnosc).HasColumnName("jpkt_Kolejnosc");
            entity.Property(e => e.JpktNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jpkt_Nazwa");
            entity.Property(e => e.JpktProgramy).HasColumnName("jpkt_Programy");
        });

        modelBuilder.Entity<JpkWersja>(entity =>
        {
            entity.HasKey(e => e.JpkwId);

            entity.ToTable("jpk_Wersja");

            entity.Property(e => e.JpkwId)
                .ValueGeneratedNever()
                .HasColumnName("jpkw_Id");
            entity.Property(e => e.JpkwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jpkw_Nazwa");
            entity.Property(e => e.JpkwNrWersji).HasColumnName("jpkw_NrWersji");
            entity.Property(e => e.JpkwNrWersjiOryg)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("jpkw_NrWersjiOryg");
            entity.Property(e => e.JpkwOpis)
                .HasMaxLength(117)
                .IsUnicode(false)
                .HasComputedColumnSql("((((((((([jpkw_Nazwa]+' (')+CONVERT([varchar],[jpkw_WariantFormularza],(0)))+') (')+[jpkw_NrWersjiOryg])+') (')+isnull(CONVERT([varchar](10),[jpkw_WaznaOd],(104)),'01.07.2016'))+' - ')+isnull(CONVERT([varchar](10),[jpkw_WaznaDo],(104)),''))+')')", false)
                .HasColumnName("jpkw_Opis");
            entity.Property(e => e.JpkwTyp).HasColumnName("jpkw_Typ");
            entity.Property(e => e.JpkwWariantFormularza).HasColumnName("jpkw_WariantFormularza");
            entity.Property(e => e.JpkwWaznaDo)
                .HasColumnType("datetime")
                .HasColumnName("jpkw_WaznaDo");
            entity.Property(e => e.JpkwWaznaOd)
                .HasColumnType("datetime")
                .HasColumnName("jpkw_WaznaOd");

            entity.HasOne(d => d.JpkwTypNavigation).WithMany(p => p.JpkWersjas)
                .HasForeignKey(d => d.JpkwTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_jpk_Wersja_jpk_Typ");
        });

        modelBuilder.Entity<JpkWysylkaElektroniczna>(entity =>
        {
            entity.HasKey(e => e.JpkeId);

            entity.ToTable("jpk_WysylkaElektroniczna");

            entity.Property(e => e.JpkeId)
                .ValueGeneratedNever()
                .HasColumnName("jpke_Id");
            entity.Property(e => e.JpkeDaneAutoryzujace).HasColumnName("jpke_DaneAutoryzujace");
            entity.Property(e => e.JpkeIdPaczki).HasColumnName("jpke_IdPaczki");
            entity.Property(e => e.JpkeNrReferencyjny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("jpke_NrReferencyjny");
            entity.Property(e => e.JpkeStatus).HasColumnName("jpke_Status");
            entity.Property(e => e.JpkeUpo)
                .HasColumnType("image")
                .HasColumnName("jpke_Upo");
            entity.Property(e => e.JpkeUpoData)
                .HasColumnType("datetime")
                .HasColumnName("jpke_UpoData");
            entity.Property(e => e.JpkeUpoZrodlo).HasColumnName("jpke_UpoZrodlo");
            entity.Property(e => e.JpkeWyslanyData)
                .HasColumnType("datetime")
                .HasColumnName("jpke_WyslanyData");

            entity.HasOne(d => d.JpkeIdPaczkiNavigation).WithMany(p => p.JpkWysylkaElektronicznas)
                .HasForeignKey(d => d.JpkeIdPaczki)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_jpk_WysylkaElektroniczna_jpk_Paczka");
        });

        modelBuilder.Entity<JpkWysylkaElektronicznaLog>(entity =>
        {
            entity.HasKey(e => e.JpkelId);

            entity.ToTable("jpk_WysylkaElektronicznaLog");

            entity.Property(e => e.JpkelId)
                .ValueGeneratedNever()
                .HasColumnName("jpkel_Id");
            entity.Property(e => e.JpkelDataWpis)
                .HasColumnType("datetime")
                .HasColumnName("jpkel_DataWpis");
            entity.Property(e => e.JpkelIdWyslane).HasColumnName("jpkel_IdWyslane");
            entity.Property(e => e.JpkelWpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("jpkel_Wpis");

            entity.HasOne(d => d.JpkelIdWyslaneNavigation).WithMany(p => p.JpkWysylkaElektronicznaLogs)
                .HasForeignKey(d => d.JpkelIdWyslane)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_jpk_WysylkaElektroniczna_jpk_WysylkaElektronicznaLog");
        });

        modelBuilder.Entity<KhAdresyDostawy>(entity =>
        {
            entity.HasKey(e => e.AdkId);

            entity.ToTable("kh_AdresyDostawy");

            entity.Property(e => e.AdkId).HasColumnName("adk_Id");
            entity.Property(e => e.AdkIdAdresuHist).HasColumnName("adk_IdAdresuHist");
            entity.Property(e => e.AdkIdKhnt).HasColumnName("adk_IdKhnt");

            entity.HasOne(d => d.AdkIdAdresuHistNavigation).WithMany(p => p.KhAdresyDostawies)
                .HasForeignKey(d => d.AdkIdAdresuHist)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_AdresyDostawy_adr_Historia");

            entity.HasOne(d => d.AdkIdKhntNavigation).WithMany(p => p.KhAdresyDostawies)
                .HasForeignKey(d => d.AdkIdKhnt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_AdresyDostawy_kh__Kontrahent");
        });

        modelBuilder.Entity<KhCechaKh>(entity =>
        {
            entity.HasKey(e => e.CkId).HasName("PK_kh_GrupaKh");

            entity.ToTable("kh_CechaKh");

            entity.Property(e => e.CkId)
                .ValueGeneratedNever()
                .HasColumnName("ck_Id");
            entity.Property(e => e.CkIdCecha).HasColumnName("ck_IdCecha");
            entity.Property(e => e.CkIdKhnt).HasColumnName("ck_IdKhnt");

            entity.HasOne(d => d.CkIdCechaNavigation).WithMany(p => p.KhCechaKhs)
                .HasForeignKey(d => d.CkIdCecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_CechaKh_sl_CechaKh");

            entity.HasOne(d => d.CkIdKhntNavigation).WithMany(p => p.KhCechaKhs)
                .HasForeignKey(d => d.CkIdKhnt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_CechaKh_kh__Kontrahent");
        });

        modelBuilder.Entity<KhCechaPrac>(entity =>
        {
            entity.HasKey(e => e.CpId);

            entity.ToTable("kh_CechaPrac");

            entity.Property(e => e.CpId)
                .ValueGeneratedNever()
                .HasColumnName("cp_Id");
            entity.Property(e => e.CpIdCecha).HasColumnName("cp_IdCecha");
            entity.Property(e => e.CpIdPrac).HasColumnName("cp_IdPrac");

            entity.HasOne(d => d.CpIdCechaNavigation).WithMany(p => p.KhCechaPracs)
                .HasForeignKey(d => d.CpIdCecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_CechaPrac_sl_CechaKh");

            entity.HasOne(d => d.CpIdPracNavigation).WithMany(p => p.KhCechaPracs)
                .HasForeignKey(d => d.CpIdPrac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_CechaPrac_kh_Pracownik");
        });

        modelBuilder.Entity<KhDokument>(entity =>
        {
            entity.HasKey(e => e.KdkId);

            entity.ToTable("kh_Dokument");

            entity.HasIndex(e => e.KdkIdKontrahenta, "IX_kh_Dokument_IdKontrahenta");

            entity.Property(e => e.KdkId)
                .ValueGeneratedNever()
                .HasColumnName("kdk_Id");
            entity.Property(e => e.KdkDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("kdk_DataModyfikacji");
            entity.Property(e => e.KdkIdKategorii).HasColumnName("kdk_IdKategorii");
            entity.Property(e => e.KdkIdKontrahenta).HasColumnName("kdk_IdKontrahenta");
            entity.Property(e => e.KdkIdPersonelu).HasColumnName("kdk_IdPersonelu");
            entity.Property(e => e.KdkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kdk_Nazwa");
            entity.Property(e => e.KdkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kdk_Opis");
            entity.Property(e => e.KdkTresc)
                .HasColumnType("image")
                .HasColumnName("kdk_Tresc");
            entity.Property(e => e.KdkTyp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kdk_Typ");
            entity.Property(e => e.KdkZablokowany).HasColumnName("kdk_Zablokowany");

            entity.HasOne(d => d.KdkIdKategoriiNavigation).WithMany(p => p.KhDokuments)
                .HasForeignKey(d => d.KdkIdKategorii)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_Dokument_sl_KategoriaDokumentu");

            entity.HasOne(d => d.KdkIdKontrahentaNavigation).WithMany(p => p.KhDokuments)
                .HasForeignKey(d => d.KdkIdKontrahenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_Dokument_kh__Kontrahent");

            entity.HasOne(d => d.KdkIdPersoneluNavigation).WithMany(p => p.KhDokuments)
                .HasForeignKey(d => d.KdkIdPersonelu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_Dokument_pd_Uzytkownik");
        });

        modelBuilder.Entity<KhKategoriaDokumentu>(entity =>
        {
            entity.HasKey(e => e.KhkdId);

            entity.ToTable("kh_KategoriaDokumentu");

            entity.Property(e => e.KhkdId)
                .ValueGeneratedNever()
                .HasColumnName("khkd_Id");
            entity.Property(e => e.KhkdDokTypEx).HasColumnName("khkd_DokTypEx");
            entity.Property(e => e.KhkdKategoriaId).HasColumnName("khkd_KategoriaId");
            entity.Property(e => e.KhkdKategoriaIdMode).HasColumnName("khkd_KategoriaIdMode");
            entity.Property(e => e.KhkdKontrahentId).HasColumnName("khkd_KontrahentId");

            entity.HasOne(d => d.KhkdKategoria).WithMany(p => p.KhKategoriaDokumentus)
                .HasForeignKey(d => d.KhkdKategoriaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_kh_KategoriaDokumentu_sl_Kategoria");

            entity.HasOne(d => d.KhkdKontrahent).WithMany(p => p.KhKategoriaDokumentus)
                .HasForeignKey(d => d.KhkdKontrahentId)
                .HasConstraintName("FK_kh_KategoriaDokumentu_kh__Kontrahent");
        });

        modelBuilder.Entity<KhKontrahent>(entity =>
        {
            entity.HasKey(e => e.KhId);

            entity.ToTable("kh__Kontrahent", tb =>
                {
                    tb.HasTrigger("tr_KhKontrahent_Deleting");
                    tb.HasTrigger("tr_KhKontrahent_Inserting");
                    tb.HasTrigger("tr_KhKontrahent_Updating");
                });

            entity.Property(e => e.KhId)
                .ValueGeneratedNever()
                .HasColumnName("kh_Id");
            entity.Property(e => e.KhAdresDostawy).HasColumnName("kh_AdresDostawy");
            entity.Property(e => e.KhAdresKoresp).HasColumnName("kh_AdresKoresp");
            entity.Property(e => e.KhAkcyza)
                .HasDefaultValue(1)
                .HasColumnName("kh_Akcyza");
            entity.Property(e => e.KhBrakPpdlaRozrachunkowAuto).HasColumnName("kh_BrakPPDlaRozrachunkowAuto");
            entity.Property(e => e.KhCelZakupu).HasColumnName("kh_CelZakupu");
            entity.Property(e => e.KhCena).HasColumnName("kh_Cena");
            entity.Property(e => e.KhCentrumAut).HasColumnName("kh_CentrumAut");
            entity.Property(e => e.KhCrm).HasColumnName("kh_CRM");
            entity.Property(e => e.KhCzyKomunikat).HasColumnName("kh_CzyKomunikat");
            entity.Property(e => e.KhCzynnyPodatnikVat).HasColumnName("kh_CzynnyPodatnikVAT");
            entity.Property(e => e.KhDataDodania)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataDodania");
            entity.Property(e => e.KhDataOkolicznosciowa)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataOkolicznosciowa");
            entity.Property(e => e.KhDataVat)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataVAT");
            entity.Property(e => e.KhDataWaznosciVat)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataWaznosciVAT");
            entity.Property(e => e.KhDataWyd)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataWyd");
            entity.Property(e => e.KhDataZmiany)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataZmiany");
            entity.Property(e => e.KhDomena)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Domena");
            entity.Property(e => e.KhDomyslnaFormaDokumentowaniaSprzedaz).HasColumnName("kh_DomyslnaFormaDokumentowaniaSprzedaz");
            entity.Property(e => e.KhDomyslnaTransVatsprzedaz).HasColumnName("kh_DomyslnaTransVATSprzedaz");
            entity.Property(e => e.KhDomyslnaTransVatsprzedazFw).HasColumnName("kh_DomyslnaTransVATSprzedazFW");
            entity.Property(e => e.KhDomyslnaTransVatzakup).HasColumnName("kh_DomyslnaTransVATZakup");
            entity.Property(e => e.KhDomyslnaTransVatzakupFw).HasColumnName("kh_DomyslnaTransVATZakupFW");
            entity.Property(e => e.KhDomyslnaWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("kh_DomyslnaWaluta");
            entity.Property(e => e.KhDomyslnaWalutaMode).HasColumnName("kh_DomyslnaWalutaMode");
            entity.Property(e => e.KhDomyslnyRachBankowyId).HasColumnName("kh_DomyslnyRachBankowyId");
            entity.Property(e => e.KhDomyslnyRachBankowyIdMode).HasColumnName("kh_DomyslnyRachBankowyIdMode");
            entity.Property(e => e.KhDomyslnyTypCeny).HasColumnName("kh_DomyslnyTypCeny");
            entity.Property(e => e.KhEfakturyData)
                .HasColumnType("datetime")
                .HasColumnName("kh_EFakturyData");
            entity.Property(e => e.KhEfakturyZgoda).HasColumnName("kh_EFakturyZgoda");
            entity.Property(e => e.KhEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_EMail");
            entity.Property(e => e.KhEwVatspMcOdliczenia).HasColumnName("kh_EwVATSpMcOdliczenia");
            entity.Property(e => e.KhEwVatzakMcOdliczenia).HasColumnName("kh_EwVATZakMcOdliczenia");
            entity.Property(e => e.KhEwVatzakRodzaj)
                .HasDefaultValue(2)
                .HasColumnName("kh_EwVATZakRodzaj");
            entity.Property(e => e.KhEwVatzakSposobOdliczenia).HasColumnName("kh_EwVATZakSposobOdliczenia");
            entity.Property(e => e.KhGaduGadu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_GaduGadu");
            entity.Property(e => e.KhGrafika)
                .HasColumnType("image")
                .HasColumnName("kh_Grafika");
            entity.Property(e => e.KhIdBranza).HasColumnName("kh_IdBranza");
            entity.Property(e => e.KhIdDodal).HasColumnName("kh_IdDodal");
            entity.Property(e => e.KhIdEwVatsp).HasColumnName("kh_IdEwVATSp");
            entity.Property(e => e.KhIdEwVatspKateg).HasColumnName("kh_IdEwVATSpKateg");
            entity.Property(e => e.KhIdEwVatzak).HasColumnName("kh_IdEwVATZak");
            entity.Property(e => e.KhIdEwVatzakKateg).HasColumnName("kh_IdEwVATZakKateg");
            entity.Property(e => e.KhIdFormaP).HasColumnName("kh_IdFormaP");
            entity.Property(e => e.KhIdGrupa).HasColumnName("kh_IdGrupa");
            entity.Property(e => e.KhIdKategoriaKh).HasColumnName("kh_IdKategoriaKH");
            entity.Property(e => e.KhIdNabywca).HasColumnName("kh_IdNabywca");
            entity.Property(e => e.KhIdOdbiorca).HasColumnName("kh_IdOdbiorca");
            entity.Property(e => e.KhIdOpiekun).HasColumnName("kh_IdOpiekun");
            entity.Property(e => e.KhIdOsobaDo).HasColumnName("kh_IdOsobaDO");
            entity.Property(e => e.KhIdOstatniWpisWeryfikacjiStatusuVat).HasColumnName("kh_IdOstatniWpisWeryfikacjiStatusuVAT");
            entity.Property(e => e.KhIdOstatniWpisWeryfikacjiStatusuVies).HasColumnName("kh_IdOstatniWpisWeryfikacjiStatusuVIES");
            entity.Property(e => e.KhIdOstatniWpisWeryfikacjiWykazPodatnikowVat).HasColumnName("kh_IdOstatniWpisWeryfikacjiWykazPodatnikowVAT");
            entity.Property(e => e.KhIdPozyskany).HasColumnName("kh_IdPozyskany");
            entity.Property(e => e.KhIdRabat).HasColumnName("kh_IdRabat");
            entity.Property(e => e.KhIdRachKategPrzychod).HasColumnName("kh_IdRachKategPrzychod");
            entity.Property(e => e.KhIdRachKategRozchod).HasColumnName("kh_IdRachKategRozchod");
            entity.Property(e => e.KhIdRachunkuWirtualnego).HasColumnName("kh_IdRachunkuWirtualnego");
            entity.Property(e => e.KhIdRegion).HasColumnName("kh_IdRegion");
            entity.Property(e => e.KhIdRodzajKontaktu).HasColumnName("kh_IdRodzajKontaktu");
            entity.Property(e => e.KhIdZmienil).HasColumnName("kh_IdZmienil");
            entity.Property(e => e.KhImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Imie");
            entity.Property(e => e.KhInstKredytowa).HasColumnName("kh_InstKredytowa");
            entity.Property(e => e.KhJednorazowy).HasColumnName("kh_Jednorazowy");
            entity.Property(e => e.KhKlientSklepuInternetowego).HasColumnName("kh_KlientSklepuInternetowego");
            entity.Property(e => e.KhKomunikat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Komunikat");
            entity.Property(e => e.KhKomunikatOd)
                .HasColumnType("datetime")
                .HasColumnName("kh_KomunikatOd");
            entity.Property(e => e.KhKomunikatZawsze)
                .HasDefaultValue(true)
                .HasColumnName("kh_KomunikatZawsze");
            entity.Property(e => e.KhKontakt)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Kontakt");
            entity.Property(e => e.KhKorygowanieKup).HasColumnName("kh_KorygowanieKUP");
            entity.Property(e => e.KhKorygowanieVatsp).HasColumnName("kh_KorygowanieVATSp");
            entity.Property(e => e.KhKorygowanieVatzak).HasColumnName("kh_KorygowanieVATZak");
            entity.Property(e => e.KhKrs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_KRS");
            entity.Property(e => e.KhKsefDodatkoweInfoPoprzedzEtykietaPola).HasColumnName("kh_KsefDodatkoweInfoPoprzedzEtykietaPola");
            entity.Property(e => e.KhKsefDomyslnyEtapPrzetwarzania).HasColumnName("kh_KsefDomyslnyEtapPrzetwarzania");
            entity.Property(e => e.KhKsefEksportObslugaPolaDodatkoweInformacje).HasColumnName("kh_KsefEksportObslugaPolaDodatkoweInformacje");
            entity.Property(e => e.KhKsefImportObslugaPolaDodatkoweInformacje).HasColumnName("kh_KsefImportObslugaPolaDodatkoweInformacje");
            entity.Property(e => e.KhKsefMagazynDlaEfaktur).HasColumnName("kh_KsefMagazynDlaEFaktur");
            entity.Property(e => e.KhKsefPoleDodatkoweInformacjeEksportNaPodstSql).HasColumnName("kh_KsefPoleDodatkoweInformacjeEksportNaPodstSql");
            entity.Property(e => e.KhKsefPoleDodatkoweInformacjeEksportSql)
                .HasColumnType("text")
                .HasColumnName("kh_KsefPoleDodatkoweInformacjeEksportSql");
            entity.Property(e => e.KhLiczbaPrac).HasColumnName("kh_LiczbaPrac");
            entity.Property(e => e.KhLokalizacja)
                .HasMaxLength(256)
                .HasColumnName("kh_Lokalizacja");
            entity.Property(e => e.KhMalyPojazd).HasColumnName("kh_MalyPojazd");
            entity.Property(e => e.KhMaxDniSp).HasColumnName("kh_MaxDniSp");
            entity.Property(e => e.KhMaxDokKred).HasColumnName("kh_MaxDokKred");
            entity.Property(e => e.KhMaxWartDokKred)
                .HasDefaultValueSql("((0.00))")
                .HasColumnType("money")
                .HasColumnName("kh_MaxWartDokKred");
            entity.Property(e => e.KhMaxWartKred)
                .HasDefaultValueSql("((0.00))")
                .HasColumnType("money")
                .HasColumnName("kh_MaxWartKred");
            entity.Property(e => e.KhMetodaKasowa).HasColumnName("kh_MetodaKasowa");
            entity.Property(e => e.KhNaliczajOplSpec)
                .HasDefaultValue(true)
                .HasColumnName("kh_NaliczajOplSpec");
            entity.Property(e => e.KhNazwisko)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Nazwisko");
            entity.Property(e => e.KhNrAkcyzowy)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("kh_NrAkcyzowy");
            entity.Property(e => e.KhNrAnalitykaD)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_NrAnalitykaD");
            entity.Property(e => e.KhNrAnalitykaO)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_NrAnalitykaO");
            entity.Property(e => e.KhNrDowodu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_NrDowodu");
            entity.Property(e => e.KhOdbDet).HasColumnName("kh_OdbDet");
            entity.Property(e => e.KhOdbiorcaCesjaPlatnosci).HasColumnName("kh_OdbiorcaCesjaPlatnosci");
            entity.Property(e => e.KhOpisOperacji)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_OpisOperacji");
            entity.Property(e => e.KhOrganWyd)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_OrganWyd");
            entity.Property(e => e.KhOsoba).HasColumnName("kh_Osoba");
            entity.Property(e => e.KhOsobaVat).HasColumnName("kh_OsobaVAT");
            entity.Property(e => e.KhOstrzezenieTerminPlatnosciPrzekroczony).HasColumnName("kh_OstrzezenieTerminPlatnosciPrzekroczony");
            entity.Property(e => e.KhPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_PESEL");
            entity.Property(e => e.KhPlatOdroczone).HasColumnName("kh_PlatOdroczone");
            entity.Property(e => e.KhPlatPrzelew).HasColumnName("kh_PlatPrzelew");
            entity.Property(e => e.KhPodVatzarejestrowanyWue).HasColumnName("kh_PodVATZarejestrowanyWUE");
            entity.Property(e => e.KhPodatekCukrowyNaliczaj).HasColumnName("kh_PodatekCukrowyNaliczaj");
            entity.Property(e => e.KhPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pole1");
            entity.Property(e => e.KhPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pole2");
            entity.Property(e => e.KhPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pole3");
            entity.Property(e => e.KhPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pole4");
            entity.Property(e => e.KhPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pole5");
            entity.Property(e => e.KhPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pole6");
            entity.Property(e => e.KhPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pole7");
            entity.Property(e => e.KhPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pole8");
            entity.Property(e => e.KhPotencjalny).HasColumnName("kh_Potencjalny");
            entity.Property(e => e.KhPowitanie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Powitanie");
            entity.Property(e => e.KhPracownik)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Pracownik");
            entity.Property(e => e.KhPrefKontakt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_PrefKontakt");
            entity.Property(e => e.KhProcGotowka)
                .HasColumnType("money")
                .HasColumnName("kh_ProcGotowka");
            entity.Property(e => e.KhProcKarta)
                .HasColumnType("money")
                .HasColumnName("kh_ProcKarta");
            entity.Property(e => e.KhProcKredyt)
                .HasColumnType("money")
                .HasColumnName("kh_ProcKredyt");
            entity.Property(e => e.KhProcPozostalo)
                .HasColumnType("money")
                .HasColumnName("kh_ProcPozostalo");
            entity.Property(e => e.KhProcPrzelew)
                .HasColumnType("money")
                .HasColumnName("kh_ProcPrzelew");
            entity.Property(e => e.KhProducentRolny).HasColumnName("kh_ProducentRolny");
            entity.Property(e => e.KhPrzypadekSzczegolnyPit).HasColumnName("kh_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.KhRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_REGON");
            entity.Property(e => e.KhRodzaj).HasColumnName("kh_Rodzaj");
            entity.Property(e => e.KhSkype)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Skype");
            entity.Property(e => e.KhStatusAkcyza).HasColumnName("kh_StatusAkcyza");
            entity.Property(e => e.KhStawkaVatprzychod).HasColumnName("kh_StawkaVATPrzychod");
            entity.Property(e => e.KhStawkaVatwydatek).HasColumnName("kh_StawkaVATWydatek");
            entity.Property(e => e.KhStosujIndywidualnyCennikWsklepieInternetowym).HasColumnName("kh_StosujIndywidualnyCennikWSklepieInternetowym");
            entity.Property(e => e.KhStosujRabatWmultistore).HasColumnName("kh_StosujRabatWMultistore");
            entity.Property(e => e.KhStosujSzybkaPlatnosc)
                .HasDefaultValue(true)
                .HasColumnName("kh_StosujSzybkaPlatnosc");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.KhTransakcjaVatsp).HasColumnName("kh_TransakcjaVATSp");
            entity.Property(e => e.KhTransakcjaVatzak).HasColumnName("kh_TransakcjaVATZak");
            entity.Property(e => e.KhUpowaznienieVat).HasColumnName("kh_UpowaznienieVAT");
            entity.Property(e => e.KhUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_Uwagi");
            entity.Property(e => e.KhVatRozliczanyPrzezUslugobiorce).HasColumnName("kh_VatRozliczanyPrzezUslugobiorce");
            entity.Property(e => e.KhVatRozliczanyPrzezUslugobiorceFw).HasColumnName("kh_VatRozliczanyPrzezUslugobiorceFW");
            entity.Property(e => e.KhWartoscNettoCzyBrutto).HasColumnName("kh_WartoscNettoCzyBrutto");
            entity.Property(e => e.KhWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kh_WWW");
            entity.Property(e => e.KhWzwIdCrmTransakcja).HasColumnName("kh_WzwIdCrmTransakcja");
            entity.Property(e => e.KhWzwIdFs).HasColumnName("kh_WzwIdFS");
            entity.Property(e => e.KhWzwIdKfs).HasColumnName("kh_WzwIdKFS");
            entity.Property(e => e.KhWzwIdWz).HasColumnName("kh_WzwIdWZ");
            entity.Property(e => e.KhWzwIdWzvat).HasColumnName("kh_WzwIdWZVAT");
            entity.Property(e => e.KhWzwIdZd).HasColumnName("kh_WzwIdZD");
            entity.Property(e => e.KhWzwIdZk).HasColumnName("kh_WzwIdZK");
            entity.Property(e => e.KhWzwIdZkzal).HasColumnName("kh_WzwIdZKZAL");
            entity.Property(e => e.KhZablokowany).HasColumnName("kh_Zablokowany");
            entity.Property(e => e.KhZgodaDo).HasColumnName("kh_ZgodaDO");
            entity.Property(e => e.KhZgodaEmail).HasColumnName("kh_ZgodaEMail");
            entity.Property(e => e.KhZgodaMark).HasColumnName("kh_ZgodaMark");
            entity.Property(e => e.KhZgodaNewsletterVendero).HasColumnName("kh_ZgodaNewsletterVendero");

            entity.HasOne(d => d.KhDomyslnaWalutaNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhDomyslnaWaluta)
                .HasConstraintName("FK_kh__Kontrahent_sl_Waluta");

            entity.HasOne(d => d.KhDomyslnyRachBankowy).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhDomyslnyRachBankowyId)
                .HasConstraintName("FK_kh__Kontrahent_rb__RachBankowy");

            entity.HasOne(d => d.KhIdBranzaNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdBranza)
                .HasConstraintName("FK_kh__Kontrahent_sl_CrmBranza");

            entity.HasOne(d => d.KhIdEwVatspNavigation).WithMany(p => p.KhKontrahentKhIdEwVatspNavigations)
                .HasForeignKey(d => d.KhIdEwVatsp)
                .HasConstraintName("FK_kh__Kontrahent_sl_TypEwidVAT");

            entity.HasOne(d => d.KhIdEwVatspKategNavigation).WithMany(p => p.KhKontrahentKhIdEwVatspKategNavigations)
                .HasForeignKey(d => d.KhIdEwVatspKateg)
                .HasConstraintName("FK_kh__Kontrahent_sl_Kategoria1");

            entity.HasOne(d => d.KhIdEwVatzakNavigation).WithMany(p => p.KhKontrahentKhIdEwVatzakNavigations)
                .HasForeignKey(d => d.KhIdEwVatzak)
                .HasConstraintName("FK_kh__Kontrahent_sl_TypEwidVAT1");

            entity.HasOne(d => d.KhIdEwVatzakKategNavigation).WithMany(p => p.KhKontrahentKhIdEwVatzakKategNavigations)
                .HasForeignKey(d => d.KhIdEwVatzakKateg)
                .HasConstraintName("FK_kh__Kontrahent_sl_Kategoria2");

            entity.HasOne(d => d.KhIdFormaPNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdFormaP)
                .HasConstraintName("FK_kh__Kontrahent_sl_FormaPlatnosci");

            entity.HasOne(d => d.KhIdGrupaNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdGrupa)
                .HasConstraintName("FK_kh__Kontrahent_sl_GrupaKh");

            entity.HasOne(d => d.KhIdKategoriaKhNavigation).WithMany(p => p.KhKontrahentKhIdKategoriaKhNavigations)
                .HasForeignKey(d => d.KhIdKategoriaKh)
                .HasConstraintName("FK_kh__Kontrahent_sl_Kategoria");

            entity.HasOne(d => d.KhIdNabywcaNavigation).WithMany(p => p.InverseKhIdNabywcaNavigation)
                .HasForeignKey(d => d.KhIdNabywca)
                .HasConstraintName("FK_kh__Kontrahent_kh__Kontrahent_Nabywca");

            entity.HasOne(d => d.KhIdOdbiorcaNavigation).WithMany(p => p.InverseKhIdOdbiorcaNavigation)
                .HasForeignKey(d => d.KhIdOdbiorca)
                .HasConstraintName("FK_kh__Kontrahent_kh__Kontrahent");

            entity.HasOne(d => d.KhIdOpiekunNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdOpiekun)
                .HasConstraintName("FK_kh__Kontrahent_pd_Uzytkownik");

            entity.HasOne(d => d.KhIdOstatniWpisWeryfikacjiStatusuVatNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdOstatniWpisWeryfikacjiStatusuVat)
                .HasConstraintName("FK_kh__Kontrahent_kh_WeryfikacjaNIP");

            entity.HasOne(d => d.KhIdOstatniWpisWeryfikacjiStatusuViesNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdOstatniWpisWeryfikacjiStatusuVies)
                .HasConstraintName("FK_kh__Kontrahent_kh_Vies");

            entity.HasOne(d => d.KhIdPozyskanyNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdPozyskany)
                .HasConstraintName("FK_kh__Kontrahent_sl_CrmZrodloPozyskania");

            entity.HasOne(d => d.KhIdRabatNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdRabat)
                .HasConstraintName("FK_kh__Kontrahent_sl_Rabat");

            entity.HasOne(d => d.KhIdRachKategPrzychodNavigation).WithMany(p => p.KhKontrahentKhIdRachKategPrzychodNavigations)
                .HasForeignKey(d => d.KhIdRachKategPrzychod)
                .HasConstraintName("FK_kh__Kontrahent_sl_Kategoria3");

            entity.HasOne(d => d.KhIdRachKategRozchodNavigation).WithMany(p => p.KhKontrahentKhIdRachKategRozchodNavigations)
                .HasForeignKey(d => d.KhIdRachKategRozchod)
                .HasConstraintName("FK_kh__Kontrahent_sl_Kategoria4");

            entity.HasOne(d => d.KhIdRachunkuWirtualnegoNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdRachunkuWirtualnego)
                .HasConstraintName("FK_kh__Kontrahent_rb_RachBankowyWirtualny");

            entity.HasOne(d => d.KhIdRegionNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdRegion)
                .HasConstraintName("FK_kh__Kontrahent_sl_CrmRegion");

            entity.HasOne(d => d.KhIdRodzajKontaktuNavigation).WithMany(p => p.KhKontrahents)
                .HasForeignKey(d => d.KhIdRodzajKontaktu)
                .HasConstraintName("FK_kh__Kontrahent_sl_RodzajKontaktu");
        });

        modelBuilder.Entity<KhListaFiltr>(entity =>
        {
            entity.HasKey(e => e.LkfId);

            entity.ToTable("kh_ListaFiltr");

            entity.HasIndex(e => e.LkfIdLista, "IX_kh_ListaFiltr").IsUnique();

            entity.Property(e => e.LkfId)
                .ValueGeneratedNever()
                .HasColumnName("lkf_Id");
            entity.Property(e => e.LkfFiltr)
                .HasColumnType("image")
                .HasColumnName("lkf_Filtr");
            entity.Property(e => e.LkfIdLista).HasColumnName("lkf_IdLista");

            entity.HasOne(d => d.LkfIdListaNavigation).WithOne(p => p.KhListaFiltr)
                .HasForeignKey<KhListaFiltr>(d => d.LkfIdLista)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_ListaFiltr_kh_Lista");
        });

        modelBuilder.Entity<KhListaKh>(entity =>
        {
            entity.HasKey(e => e.LkkId);

            entity.ToTable("kh_ListaKh");

            entity.Property(e => e.LkkId)
                .ValueGeneratedNever()
                .HasColumnName("lkk_Id");
            entity.Property(e => e.LkkIdKlient).HasColumnName("lkk_IdKlient");
            entity.Property(e => e.LkkIdLista).HasColumnName("lkk_IdLista");

            entity.HasOne(d => d.LkkIdKlientNavigation).WithMany(p => p.KhListaKhs)
                .HasForeignKey(d => d.LkkIdKlient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_ListaKh_adr__Ewid");

            entity.HasOne(d => d.LkkIdListaNavigation).WithMany(p => p.KhListaKhs)
                .HasForeignKey(d => d.LkkIdLista)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_ListaKh_kh_Lista");
        });

        modelBuilder.Entity<KhListum>(entity =>
        {
            entity.HasKey(e => e.LkId);

            entity.ToTable("kh_Lista");

            entity.Property(e => e.LkId)
                .ValueGeneratedNever()
                .HasColumnName("lk_Id");
            entity.Property(e => e.LkIdPersonel).HasColumnName("lk_IdPersonel");
            entity.Property(e => e.LkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lk_Nazwa");
            entity.Property(e => e.LkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lk_Opis");
            entity.Property(e => e.LkPubliczna).HasColumnName("lk_Publiczna");
            entity.Property(e => e.LkTyp)
                .HasDefaultValue(1)
                .HasColumnName("lk_Typ");

            entity.HasOne(d => d.LkIdPersonelNavigation).WithMany(p => p.KhLista)
                .HasForeignKey(d => d.LkIdPersonel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_Lista_pd_Uzytkownik");
        });

        modelBuilder.Entity<KhOznaczeniaJpkVat>(entity =>
        {
            entity.HasKey(e => e.KojId);

            entity.ToTable("kh_OznaczeniaJpkVat");

            entity.HasIndex(e => e.KojIdObiektu, "UQ__kh_Oznac__348B1725965B03F8").IsUnique();

            entity.Property(e => e.KojId).HasColumnName("koj_Id");
            entity.Property(e => e.KojBMpvProwizja).HasColumnName("koj_B_MPV_PROWIZJA");
            entity.Property(e => e.KojBSpv).HasColumnName("koj_B_SPV");
            entity.Property(e => e.KojBSpvDostawa).HasColumnName("koj_B_SPV_DOSTAWA");
            entity.Property(e => e.KojEe).HasColumnName("koj_EE");
            entity.Property(e => e.KojGtu1).HasColumnName("koj_GTU1");
            entity.Property(e => e.KojGtu10).HasColumnName("koj_GTU10");
            entity.Property(e => e.KojGtu11).HasColumnName("koj_GTU11");
            entity.Property(e => e.KojGtu12).HasColumnName("koj_GTU12");
            entity.Property(e => e.KojGtu13).HasColumnName("koj_GTU13");
            entity.Property(e => e.KojGtu2).HasColumnName("koj_GTU2");
            entity.Property(e => e.KojGtu3).HasColumnName("koj_GTU3");
            entity.Property(e => e.KojGtu4).HasColumnName("koj_GTU4");
            entity.Property(e => e.KojGtu5).HasColumnName("koj_GTU5");
            entity.Property(e => e.KojGtu6).HasColumnName("koj_GTU6");
            entity.Property(e => e.KojGtu7).HasColumnName("koj_GTU7");
            entity.Property(e => e.KojGtu8).HasColumnName("koj_GTU8");
            entity.Property(e => e.KojGtu9).HasColumnName("koj_GTU9");
            entity.Property(e => e.KojI42).HasColumnName("koj_I_42");
            entity.Property(e => e.KojI63).HasColumnName("koj_I_63");
            entity.Property(e => e.KojIdObiektu).HasColumnName("koj_IdObiektu");
            entity.Property(e => e.KojIed).HasColumnName("koj_IED");
            entity.Property(e => e.KojMpp).HasColumnName("koj_MPP");
            entity.Property(e => e.KojMrT).HasColumnName("koj_MR_T");
            entity.Property(e => e.KojMrUz).HasColumnName("koj_MR_UZ");
            entity.Property(e => e.KojSw).HasColumnName("koj_SW");
            entity.Property(e => e.KojTp).HasColumnName("koj_TP");
            entity.Property(e => e.KojTtD).HasColumnName("koj_TT_D");
            entity.Property(e => e.KojTtWnt).HasColumnName("koj_TT_WNT");
            entity.Property(e => e.KojWstoEe).HasColumnName("koj_WSTO_EE");
        });

        modelBuilder.Entity<KhParametr>(entity =>
        {
            entity.HasKey(e => e.KhpId);

            entity.ToTable("kh_Parametr");

            entity.HasIndex(e => e.KhpParamEwidId, "IX_kh_Parametr").IsUnique();

            entity.Property(e => e.KhpId)
                .ValueGeneratedNever()
                .HasColumnName("khp_Id");
            entity.Property(e => e.KhpAdresKolejnosc).HasColumnName("khp_AdresKolejnosc");
            entity.Property(e => e.KhpAkcjaJeden)
                .HasDefaultValue(1)
                .HasColumnName("khp_AkcjaJeden");
            entity.Property(e => e.KhpAkcjaLiczba).HasColumnName("khp_AkcjaLiczba");
            entity.Property(e => e.KhpAkcjaSpoznienie)
                .HasDefaultValue(1)
                .HasColumnName("khp_AkcjaSpoznienie");
            entity.Property(e => e.KhpAkcjaWszystkie)
                .HasDefaultValue(1)
                .HasColumnName("khp_AkcjaWszystkie");
            entity.Property(e => e.KhpAnalitykaD)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_AnalitykaD");
            entity.Property(e => e.KhpAnalitykaO)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_AnalitykaO");
            entity.Property(e => e.KhpBMpvProwizja).HasColumnName("khp_B_MPV_PROWIZJA");
            entity.Property(e => e.KhpBSpv).HasColumnName("khp_B_SPV");
            entity.Property(e => e.KhpBSpvDostawa).HasColumnName("khp_B_SPV_DOSTAWA");
            entity.Property(e => e.KhpCelZakupu).HasColumnName("khp_CelZakupu");
            entity.Property(e => e.KhpCena).HasColumnName("khp_Cena");
            entity.Property(e => e.KhpCzynnyPodatnikVat).HasColumnName("khp_CzynnyPodatnikVAT");
            entity.Property(e => e.KhpDlugoscAuto)
                .HasDefaultValue(40)
                .HasColumnName("khp_DlugoscAuto");
            entity.Property(e => e.KhpDrukujZgodyEdycja).HasColumnName("khp_DrukujZgodyEdycja");
            entity.Property(e => e.KhpDrukujZgodyNowy).HasColumnName("khp_DrukujZgodyNowy");
            entity.Property(e => e.KhpDrukujZgodyWybor)
                .HasDefaultValue(true)
                .HasColumnName("khp_DrukujZgodyWybor");
            entity.Property(e => e.KhpEe).HasColumnName("khp_EE");
            entity.Property(e => e.KhpEwVatspMcOdliczenia).HasColumnName("khp_EwVATSpMcOdliczenia");
            entity.Property(e => e.KhpEwVatzakMcOdliczenia).HasColumnName("khp_EwVATZakMcOdliczenia");
            entity.Property(e => e.KhpEwVatzakRodzaj)
                .HasDefaultValue(2)
                .HasColumnName("khp_EwVATZakRodzaj");
            entity.Property(e => e.KhpEwVatzakSposobOdliczenia).HasColumnName("khp_EwVATZakSposobOdliczenia");
            entity.Property(e => e.KhpFormatujDaneGus)
                .HasDefaultValue(true)
                .HasColumnName("khp_FormatujDaneGus");
            entity.Property(e => e.KhpFormatujNazweZgus).HasColumnName("khp_FormatujNazweZGus");
            entity.Property(e => e.KhpGrupa).HasColumnName("khp_Grupa");
            entity.Property(e => e.KhpGtu1).HasColumnName("khp_GTU1");
            entity.Property(e => e.KhpGtu10).HasColumnName("khp_GTU10");
            entity.Property(e => e.KhpGtu11).HasColumnName("khp_GTU11");
            entity.Property(e => e.KhpGtu12).HasColumnName("khp_GTU12");
            entity.Property(e => e.KhpGtu13).HasColumnName("khp_GTU13");
            entity.Property(e => e.KhpGtu2).HasColumnName("khp_GTU2");
            entity.Property(e => e.KhpGtu3).HasColumnName("khp_GTU3");
            entity.Property(e => e.KhpGtu4).HasColumnName("khp_GTU4");
            entity.Property(e => e.KhpGtu5).HasColumnName("khp_GTU5");
            entity.Property(e => e.KhpGtu6).HasColumnName("khp_GTU6");
            entity.Property(e => e.KhpGtu7).HasColumnName("khp_GTU7");
            entity.Property(e => e.KhpGtu8).HasColumnName("khp_GTU8");
            entity.Property(e => e.KhpGtu9).HasColumnName("khp_GTU9");
            entity.Property(e => e.KhpGusDaneKontaktowe)
                .HasDefaultValue(true)
                .HasColumnName("khp_GusDaneKontaktowe");
            entity.Property(e => e.KhpGusNowaWyszukiwarka)
                .HasDefaultValue(true)
                .HasColumnName("khp_GusNowaWyszukiwarka");
            entity.Property(e => e.KhpI42).HasColumnName("khp_I_42");
            entity.Property(e => e.KhpI63).HasColumnName("khp_I_63");
            entity.Property(e => e.KhpIdEwVatsp)
                .HasDefaultValue(1)
                .HasColumnName("khp_IdEwVATSp");
            entity.Property(e => e.KhpIdEwVatspKateg).HasColumnName("khp_IdEwVATSpKateg");
            entity.Property(e => e.KhpIdEwVatzak)
                .HasDefaultValue(2)
                .HasColumnName("khp_IdEwVATZak");
            entity.Property(e => e.KhpIdEwVatzakKateg).HasColumnName("khp_IdEwVATZakKateg");
            entity.Property(e => e.KhpIdKategoriaKh).HasColumnName("khp_IdKategoriaKH");
            entity.Property(e => e.KhpIdPanstwo)
                .HasDefaultValue(15)
                .HasColumnName("khp_IdPanstwo");
            entity.Property(e => e.KhpIdRabat).HasColumnName("khp_IdRabat");
            entity.Property(e => e.KhpIdRachKategPrzychod)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("khp_IdRachKategPrzychod");
            entity.Property(e => e.KhpIdRachKategRozchod)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("khp_IdRachKategRozchod");
            entity.Property(e => e.KhpIdRegion).HasColumnName("khp_IdRegion");
            entity.Property(e => e.KhpIdTermin).HasColumnName("khp_IdTermin");
            entity.Property(e => e.KhpIdWojewodztwo).HasColumnName("khp_IdWojewodztwo");
            entity.Property(e => e.KhpIed).HasColumnName("khp_IED");
            entity.Property(e => e.KhpJednIdTermin).HasColumnName("khp_JednIdTermin");
            entity.Property(e => e.KhpJednProcGotowka)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("khp_JednProcGotowka");
            entity.Property(e => e.KhpJednProcKarta)
                .HasColumnType("money")
                .HasColumnName("khp_JednProcKarta");
            entity.Property(e => e.KhpJednProcKredyt)
                .HasColumnType("money")
                .HasColumnName("khp_JednProcKredyt");
            entity.Property(e => e.KhpJednProcPozostalo)
                .HasColumnType("money")
                .HasColumnName("khp_JednProcPozostalo");
            entity.Property(e => e.KhpJednProcPrzelew)
                .HasColumnType("money")
                .HasColumnName("khp_JednProcPrzelew");
            entity.Property(e => e.KhpJednStosujDomyslneOznaczeniaJpk)
                .HasDefaultValue(true)
                .HasColumnName("khp_JednStosujDomyslneOznaczeniaJpk");
            entity.Property(e => e.KhpJednZezwalajOdroczone).HasColumnName("khp_JednZezwalajOdroczone");
            entity.Property(e => e.KhpKhJednCzynnyPodatnikVat).HasColumnName("khp_KhJednCzynnyPodatnikVAT");
            entity.Property(e => e.KhpKhJednPodatekCukrowyNaliczaj).HasColumnName("khp_KhJednPodatekCukrowyNaliczaj");
            entity.Property(e => e.KhpKhJednStatusAkcyza).HasColumnName("khp_KhJednStatusAkcyza");
            entity.Property(e => e.KhpKhUprJakoOdb).HasColumnName("khp_KhUprJakoOdb");
            entity.Property(e => e.KhpKhUprPustyAdres).HasColumnName("khp_KhUprPustyAdres");
            entity.Property(e => e.KhpKlientSklepuInternetowego).HasColumnName("khp_KlientSklepuInternetowego");
            entity.Property(e => e.KhpKodPocztowy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_KodPocztowy");
            entity.Property(e => e.KhpKolejnyAuto).HasColumnName("khp_KolejnyAuto");
            entity.Property(e => e.KhpKolejnyWolny).HasColumnName("khp_KolejnyWolny");
            entity.Property(e => e.KhpKontrolaNip).HasColumnName("khp_KontrolaNIP");
            entity.Property(e => e.KhpKontrolaPesel).HasColumnName("khp_KontrolaPESEL");
            entity.Property(e => e.KhpLokalizacja1)
                .HasMaxLength(256)
                .HasColumnName("khp_Lokalizacja1");
            entity.Property(e => e.KhpLokalizacja2)
                .HasMaxLength(256)
                .HasColumnName("khp_Lokalizacja2");
            entity.Property(e => e.KhpLokalizacja3)
                .HasMaxLength(256)
                .HasColumnName("khp_Lokalizacja3");
            entity.Property(e => e.KhpLokalizacja4)
                .HasMaxLength(256)
                .HasColumnName("khp_Lokalizacja4");
            entity.Property(e => e.KhpLokalizacja5)
                .HasMaxLength(256)
                .HasColumnName("khp_Lokalizacja5");
            entity.Property(e => e.KhpMalyPojazd).HasColumnName("khp_MalyPojazd");
            entity.Property(e => e.KhpMaxDniSp).HasColumnName("khp_MaxDniSp");
            entity.Property(e => e.KhpMaxDokKred).HasColumnName("khp_MaxDokKred");
            entity.Property(e => e.KhpMaxWartDokKred)
                .HasDefaultValueSql("((0.00))")
                .HasColumnType("money")
                .HasColumnName("khp_MaxWartDokKred");
            entity.Property(e => e.KhpMaxWartKred)
                .HasDefaultValueSql("((0.00))")
                .HasColumnType("money")
                .HasColumnName("khp_MaxWartKred");
            entity.Property(e => e.KhpMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Miejscowosc");
            entity.Property(e => e.KhpMrT).HasColumnName("khp_MR_T");
            entity.Property(e => e.KhpMrUz).HasColumnName("khp_MR_UZ");
            entity.Property(e => e.KhpNazwaUzupelnij).HasColumnName("khp_NazwaUzupelnij");
            entity.Property(e => e.KhpOdbDet).HasColumnName("khp_OdbDet");
            entity.Property(e => e.KhpOpiekun).HasColumnName("khp_Opiekun");
            entity.Property(e => e.KhpOsoba).HasColumnName("khp_Osoba");
            entity.Property(e => e.KhpOsobaOdbDetal).HasColumnName("khp_OsobaOdbDetal");
            entity.Property(e => e.KhpOstrzezenieTerminPlatnosciPrzekroczony).HasColumnName("khp_OstrzezenieTerminPlatnosciPrzekroczony");
            entity.Property(e => e.KhpParamEwidId).HasColumnName("khp_ParamEwidId");
            entity.Property(e => e.KhpPocztaMiejscowoscZamien)
                .HasDefaultValue(true)
                .HasColumnName("khp_PocztaMiejscowoscZamien");
            entity.Property(e => e.KhpPodatekCukrowyNaliczaj).HasColumnName("khp_PodatekCukrowyNaliczaj");
            entity.Property(e => e.KhpPotencjalny).HasColumnName("khp_Potencjalny");
            entity.Property(e => e.KhpProcGotowka)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("khp_ProcGotowka");
            entity.Property(e => e.KhpProcKarta)
                .HasColumnType("money")
                .HasColumnName("khp_ProcKarta");
            entity.Property(e => e.KhpProcKredyt)
                .HasColumnType("money")
                .HasColumnName("khp_ProcKredyt");
            entity.Property(e => e.KhpProcPozostalo)
                .HasColumnType("money")
                .HasColumnName("khp_ProcPozostalo");
            entity.Property(e => e.KhpProcPrzelew)
                .HasColumnType("money")
                .HasColumnName("khp_ProcPrzelew");
            entity.Property(e => e.KhpPrzypadekSzczegolnyPit).HasColumnName("khp_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.KhpRodzaj).HasColumnName("khp_Rodzaj");
            entity.Property(e => e.KhpSprawdzajStatusVatwportaluPodatkowym).HasColumnName("khp_SprawdzajStatusVATWPortaluPodatkowym");
            entity.Property(e => e.KhpStatusAkcyza).HasColumnName("khp_StatusAkcyza");
            entity.Property(e => e.KhpStosujAkcjeDoWz).HasColumnName("khp_StosujAkcjeDoWZ");
            entity.Property(e => e.KhpStosujAkcjeDoZk).HasColumnName("khp_StosujAkcjeDoZK");
            entity.Property(e => e.KhpStosujAkcjeWliczajNiepowiazaneWz).HasColumnName("khp_StosujAkcjeWliczajNiepowiazaneWZ");
            entity.Property(e => e.KhpStosujRabatWmultistore).HasColumnName("khp_StosujRabatWMultistore");
            entity.Property(e => e.KhpStosujSzybkaPlatnosc)
                .HasDefaultValue(true)
                .HasColumnName("khp_StosujSzybkaPlatnosc");
            entity.Property(e => e.KhpSw).HasColumnName("khp_SW");
            entity.Property(e => e.KhpSymbolAuto).HasColumnName("khp_SymbolAuto");
            entity.Property(e => e.KhpTp).HasColumnName("khp_TP");
            entity.Property(e => e.KhpTransakcjaVatsp).HasColumnName("khp_TransakcjaVATSp");
            entity.Property(e => e.KhpTransakcjaVatzak).HasColumnName("khp_TransakcjaVATZak");
            entity.Property(e => e.KhpTtD).HasColumnName("khp_TT_D");
            entity.Property(e => e.KhpTtWnt).HasColumnName("khp_TT_WNT");
            entity.Property(e => e.KhpUstawiajZdjecia)
                .HasDefaultValue(true)
                .HasColumnName("khp_UstawiajZdjecia");
            entity.Property(e => e.KhpWartoscNettoCzyBrutto).HasColumnName("khp_WartoscNettoCzyBrutto");
            entity.Property(e => e.KhpWstoEe).HasColumnName("khp_WSTO_EE");
            entity.Property(e => e.KhpZezwalajOdroczone)
                .HasDefaultValue(true)
                .HasColumnName("khp_ZezwalajOdroczone");

            entity.HasOne(d => d.KhpIdEwVatspNavigation).WithMany(p => p.KhParametrKhpIdEwVatspNavigations)
                .HasForeignKey(d => d.KhpIdEwVatsp)
                .HasConstraintName("FK_kh_Parametr_sl_TypEwidVAT1");

            entity.HasOne(d => d.KhpIdEwVatspKategNavigation).WithMany(p => p.KhParametrKhpIdEwVatspKategNavigations)
                .HasForeignKey(d => d.KhpIdEwVatspKateg)
                .HasConstraintName("FK_kh_Parametr_sl_Kategoria1");

            entity.HasOne(d => d.KhpIdEwVatzakNavigation).WithMany(p => p.KhParametrKhpIdEwVatzakNavigations)
                .HasForeignKey(d => d.KhpIdEwVatzak)
                .HasConstraintName("FK_kh_Parametr_sl_TypEwidVAT");

            entity.HasOne(d => d.KhpIdEwVatzakKategNavigation).WithMany(p => p.KhParametrKhpIdEwVatzakKategNavigations)
                .HasForeignKey(d => d.KhpIdEwVatzakKateg)
                .HasConstraintName("FK_kh_Parametr_sl_Kategoria2");

            entity.HasOne(d => d.KhpIdKategoriaKhNavigation).WithMany(p => p.KhParametrKhpIdKategoriaKhNavigations)
                .HasForeignKey(d => d.KhpIdKategoriaKh)
                .HasConstraintName("FK_kh_Parametr_sl_Kategoria");

            entity.HasOne(d => d.KhpIdPanstwoNavigation).WithMany(p => p.KhParametrs)
                .HasForeignKey(d => d.KhpIdPanstwo)
                .HasConstraintName("FK_kh_Parametr_sl_Panstwo");

            entity.HasOne(d => d.KhpIdRabatNavigation).WithMany(p => p.KhParametrs)
                .HasForeignKey(d => d.KhpIdRabat)
                .HasConstraintName("FK_kh_Parametr_sl_Rabat");

            entity.HasOne(d => d.KhpIdRachKategPrzychodNavigation).WithMany(p => p.KhParametrKhpIdRachKategPrzychodNavigations)
                .HasForeignKey(d => d.KhpIdRachKategPrzychod)
                .HasConstraintName("FK_kh_Parametr_sl_Kategoria3");

            entity.HasOne(d => d.KhpIdRachKategRozchodNavigation).WithMany(p => p.KhParametrKhpIdRachKategRozchodNavigations)
                .HasForeignKey(d => d.KhpIdRachKategRozchod)
                .HasConstraintName("FK_kh_Parametr_sl_Kategoria4");

            entity.HasOne(d => d.KhpIdRegionNavigation).WithMany(p => p.KhParametrs)
                .HasForeignKey(d => d.KhpIdRegion)
                .HasConstraintName("FK_kh_Parametr_sl_CrmRegion");

            entity.HasOne(d => d.KhpIdTerminNavigation).WithMany(p => p.KhParametrs)
                .HasForeignKey(d => d.KhpIdTermin)
                .HasConstraintName("FK_kh_Parametr_sl_FormaPlatnosci2");

            entity.HasOne(d => d.KhpIdWojewodztwoNavigation).WithMany(p => p.KhParametrs)
                .HasForeignKey(d => d.KhpIdWojewodztwo)
                .HasConstraintName("FK_kh_Parametr_sl_Wojewodztwo");

            entity.HasOne(d => d.KhpParamEwid).WithOne(p => p.KhParametr)
                .HasForeignKey<KhParametr>(d => d.KhpParamEwidId)
                .HasConstraintName("FK_kh_Parametr_par__Ewid");
        });

        modelBuilder.Entity<KhParametrG>(entity =>
        {
            entity.HasKey(e => e.KhpId);

            entity.ToTable("kh_ParametrG");

            entity.Property(e => e.KhpId)
                .ValueGeneratedNever()
                .HasColumnName("khp_Id");
            entity.Property(e => e.KhpAnalitykiObsluga).HasColumnName("khp_AnalitykiObsluga");
            entity.Property(e => e.KhpNazwa1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Nazwa1");
            entity.Property(e => e.KhpNazwa2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Nazwa2");
            entity.Property(e => e.KhpNazwa3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Nazwa3");
            entity.Property(e => e.KhpNazwa4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Nazwa4");
            entity.Property(e => e.KhpNazwa5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Nazwa5");
            entity.Property(e => e.KhpNazwa6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Nazwa6");
            entity.Property(e => e.KhpNazwa7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Nazwa7");
            entity.Property(e => e.KhpNazwa8)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khp_Nazwa8");
        });

        modelBuilder.Entity<KhPracownik>(entity =>
        {
            entity.HasKey(e => e.PkId);

            entity.ToTable("kh_Pracownik", tb =>
                {
                    tb.HasTrigger("tr_KhPracownik_Deleting");
                    tb.HasTrigger("tr_KhPracownik_Inserting");
                    tb.HasTrigger("tr_KhPracownik_Updating");
                });

            entity.Property(e => e.PkId)
                .ValueGeneratedNever()
                .HasColumnName("pk_Id");
            entity.Property(e => e.PkAdresDostawy).HasColumnName("pk_AdresDostawy");
            entity.Property(e => e.PkAdresKoresp).HasColumnName("pk_AdresKoresp");
            entity.Property(e => e.PkDataDodania)
                .HasColumnType("datetime")
                .HasColumnName("pk_DataDodania");
            entity.Property(e => e.PkDataOkolicznosciowa)
                .HasColumnType("datetime")
                .HasColumnName("pk_DataOkolicznosciowa");
            entity.Property(e => e.PkDataZmiany)
                .HasColumnType("datetime")
                .HasColumnName("pk_DataZmiany");
            entity.Property(e => e.PkDomena)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_Domena");
            entity.Property(e => e.PkEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_EMail");
            entity.Property(e => e.PkGaduGadu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_GaduGadu");
            entity.Property(e => e.PkGrafika)
                .HasColumnType("image")
                .HasColumnName("pk_Grafika");
            entity.Property(e => e.PkIdBranza).HasColumnName("pk_IdBranza");
            entity.Property(e => e.PkIdDodal).HasColumnName("pk_IdDodal");
            entity.Property(e => e.PkIdDzial).HasColumnName("pk_IdDzial");
            entity.Property(e => e.PkIdGrupa).HasColumnName("pk_IdGrupa");
            entity.Property(e => e.PkIdKh).HasColumnName("pk_IdKh");
            entity.Property(e => e.PkIdOpiekun).HasColumnName("pk_IdOpiekun");
            entity.Property(e => e.PkIdPozyskany).HasColumnName("pk_IdPozyskany");
            entity.Property(e => e.PkIdRegion).HasColumnName("pk_IdRegion");
            entity.Property(e => e.PkIdRodzajKontaktu).HasColumnName("pk_IdRodzajKontaktu");
            entity.Property(e => e.PkIdZmienil).HasColumnName("pk_IdZmienil");
            entity.Property(e => e.PkImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_Imie");
            entity.Property(e => e.PkLokalizacja)
                .HasMaxLength(256)
                .HasColumnName("pk_Lokalizacja");
            entity.Property(e => e.PkNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pk_Nazwisko");
            entity.Property(e => e.PkPodstaw).HasColumnName("pk_Podstaw");
            entity.Property(e => e.PkPowitanie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_Powitanie");
            entity.Property(e => e.PkSkype)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_Skype");
            entity.Property(e => e.PkStanowisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_Stanowisko");
            entity.Property(e => e.PkTelKomorka)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_TelKomorka");
            entity.Property(e => e.PkTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_Telefon");
            entity.Property(e => e.PkUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pk_Uwagi");
            entity.Property(e => e.PkZablokowany).HasColumnName("pk_Zablokowany");
            entity.Property(e => e.PkZgodaDo).HasColumnName("pk_ZgodaDO");
            entity.Property(e => e.PkZgodaEmail).HasColumnName("pk_ZgodaEMail");
            entity.Property(e => e.PkZgodaMark).HasColumnName("pk_ZgodaMark");

            entity.HasOne(d => d.PkIdBranzaNavigation).WithMany(p => p.KhPracowniks)
                .HasForeignKey(d => d.PkIdBranza)
                .HasConstraintName("FK_kh_Pracownik_sl_CrmBranza");

            entity.HasOne(d => d.PkIdDzialNavigation).WithMany(p => p.KhPracowniks)
                .HasForeignKey(d => d.PkIdDzial)
                .HasConstraintName("FK_kh_Pracownik_sl_CrmDzial");

            entity.HasOne(d => d.PkIdGrupaNavigation).WithMany(p => p.KhPracowniks)
                .HasForeignKey(d => d.PkIdGrupa)
                .HasConstraintName("FK_kh_Pracownik_sl_GrupaKh");

            entity.HasOne(d => d.PkIdKhNavigation).WithMany(p => p.KhPracowniks)
                .HasForeignKey(d => d.PkIdKh)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_Pracownik_kh__Kontrahent");

            entity.HasOne(d => d.PkIdOpiekunNavigation).WithMany(p => p.KhPracowniks)
                .HasForeignKey(d => d.PkIdOpiekun)
                .HasConstraintName("FK_kh_Pracownik_pd_Uzytkownik");

            entity.HasOne(d => d.PkIdPozyskanyNavigation).WithMany(p => p.KhPracowniks)
                .HasForeignKey(d => d.PkIdPozyskany)
                .HasConstraintName("FK_kh_Pracownik_sl_CrmZrodloPozyskania");

            entity.HasOne(d => d.PkIdRegionNavigation).WithMany(p => p.KhPracowniks)
                .HasForeignKey(d => d.PkIdRegion)
                .HasConstraintName("FK_kh_Pracownik_sl_CrmRegion");

            entity.HasOne(d => d.PkIdRodzajKontaktuNavigation).WithMany(p => p.KhPracowniks)
                .HasForeignKey(d => d.PkIdRodzajKontaktu)
                .HasConstraintName("FK_kh_Pracownik_sl_RodzajKontaktu");
        });

        modelBuilder.Entity<KhRachunkiBankoweHistoriaWeryfikacjiBialaListum>(entity =>
        {
            entity.HasKey(e => e.KhrId).HasName("PK__kh_RachunkiBankoweHistoriaWeryfikacjiBialaLista");

            entity.ToTable("kh_RachunkiBankoweHistoriaWeryfikacjiBialaLista");

            entity.Property(e => e.KhrId).HasColumnName("khr_Id");
            entity.Property(e => e.KhrDataWeryfikacji)
                .HasColumnType("datetime")
                .HasColumnName("khr_DataWeryfikacji");
            entity.Property(e => e.KhrIdKontrahent).HasColumnName("khr_IdKontrahent");
            entity.Property(e => e.KhrIdRachunek).HasColumnName("khr_IdRachunek");
            entity.Property(e => e.KhrIdUzytkownik).HasColumnName("khr_IdUzytkownik");
            entity.Property(e => e.KhrIdentyfikatorZapytania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("khr_IdentyfikatorZapytania");
            entity.Property(e => e.KhrNaBialejLiscie).HasColumnName("khr_NaBialejLiscie");
            entity.Property(e => e.KhrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("khr_NIP");
            entity.Property(e => e.KhrNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("khr_NumerRachunku");

            entity.HasOne(d => d.KhrIdKontrahentNavigation).WithMany(p => p.KhRachunkiBankoweHistoriaWeryfikacjiBialaLista)
                .HasForeignKey(d => d.KhrIdKontrahent)
                .HasConstraintName("FK_kh_RachunkiBankoweHistoriaWeryfikacjiBialaLista_kh__Kontrahent");

            entity.HasOne(d => d.KhrIdRachunekNavigation).WithMany(p => p.KhRachunkiBankoweHistoriaWeryfikacjiBialaLista)
                .HasForeignKey(d => d.KhrIdRachunek)
                .HasConstraintName("FK_kh_RachunkiBankoweHistoriaWeryfikacjiBialaLista_rb__RachBankowy");

            entity.HasOne(d => d.KhrIdUzytkownikNavigation).WithMany(p => p.KhRachunkiBankoweHistoriaWeryfikacjiBialaLista)
                .HasForeignKey(d => d.KhrIdUzytkownik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_RachunkiBankoweHistoriaWeryfikacjiBialaLista_pd_Uzytkownik");
        });

        modelBuilder.Entity<KhTransakcjaJednolitum>(entity =>
        {
            entity.HasKey(e => e.KtjId);

            entity.ToTable("kh_TransakcjaJednolita");

            entity.Property(e => e.KtjId)
                .ValueGeneratedNever()
                .HasColumnName("ktj_Id");
            entity.Property(e => e.KtjAktywna).HasColumnName("ktj_Aktywna");
            entity.Property(e => e.KtjIdKontrahenta).HasColumnName("ktj_IdKontrahenta");
            entity.Property(e => e.KtjNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ktj_Nazwa");
            entity.Property(e => e.KtjNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ktj_Numer");
            entity.Property(e => e.KtjOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ktj_Opis");
            entity.Property(e => e.KtjWartPrzewidywana)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("ktj_WartPrzewidywana");

            entity.HasOne(d => d.KtjIdKontrahentaNavigation).WithMany(p => p.KhTransakcjaJednolita)
                .HasForeignKey(d => d.KtjIdKontrahenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_TransakcjaJednolita_kh__Kontrahent");
        });

        modelBuilder.Entity<KhVy>(entity =>
        {
            entity.HasKey(e => e.KhvId);

            entity.ToTable("kh_Vies");

            entity.Property(e => e.KhvId)
                .ValueGeneratedNever()
                .HasColumnName("khv_Id");
            entity.Property(e => e.KhvAdres)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("khv_Adres");
            entity.Property(e => e.KhvAktywnosc).HasColumnName("khv_Aktywnosc");
            entity.Property(e => e.KhvDataZapytania)
                .HasColumnType("datetime")
                .HasColumnName("khv_DataZapytania");
            entity.Property(e => e.KhvIdKh).HasColumnName("khv_IdKh");
            entity.Property(e => e.KhvIdUz).HasColumnName("khv_IdUz");
            entity.Property(e => e.KhvIdentyfikatorZapytania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("khv_IdentyfikatorZapytania");
            entity.Property(e => e.KhvNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("khv_Nazwa");
            entity.Property(e => e.KhvNumerVat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("khv_NumerVat");
            entity.Property(e => e.KhvPanstwoCzlonkowskie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("khv_PanstwoCzlonkowskie");
            entity.Property(e => e.KhvZapytanie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("khv_Zapytanie");

            entity.HasOne(d => d.KhvIdKhNavigation).WithMany(p => p.KhVies)
                .HasForeignKey(d => d.KhvIdKh)
                .HasConstraintName("FK_kh_Vies_kh__Kontrahent");

            entity.HasOne(d => d.KhvIdUzNavigation).WithMany(p => p.KhVies)
                .HasForeignKey(d => d.KhvIdUz)
                .HasConstraintName("FK_kh_Vies_pd_Uzytkownik");
        });

        modelBuilder.Entity<KhWeryfikacjaNip>(entity =>
        {
            entity.HasKey(e => e.KhwnId);

            entity.ToTable("kh_WeryfikacjaNIP");

            entity.Property(e => e.KhwnId).HasColumnName("khwn_Id");
            entity.Property(e => e.KhwnAktywnosc).HasColumnName("khwn_Aktywnosc");
            entity.Property(e => e.KhwnAktywnoscPortalPodatkowy).HasColumnName("khwn_AktywnoscPortalPodatkowy");
            entity.Property(e => e.KhwnDataZapytania)
                .HasColumnType("datetime")
                .HasColumnName("khwn_DataZapytania");
            entity.Property(e => e.KhwnDataZapytaniaWykazPrzywroconych)
                .HasColumnType("datetime")
                .HasColumnName("khwn_DataZapytaniaWykazPrzywroconych");
            entity.Property(e => e.KhwnDataZapytaniaWykazWykreslonych)
                .HasColumnType("datetime")
                .HasColumnName("khwn_DataZapytaniaWykazWykreslonych");
            entity.Property(e => e.KhwnGdzieSprawdzono).HasColumnName("khwn_GdzieSprawdzono");
            entity.Property(e => e.KhwnIdKh).HasColumnName("khwn_IdKh");
            entity.Property(e => e.KhwnIdUz).HasColumnName("khwn_IdUz");
            entity.Property(e => e.KhwnNumerNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("khwn_NumerNIP");
            entity.Property(e => e.KhwnZnalezionoWwykaziePrzywroconych).HasColumnName("khwn_ZnalezionoWWykaziePrzywroconych");
            entity.Property(e => e.KhwnZnalezionoWwykazieWykreslonych).HasColumnName("khwn_ZnalezionoWWykazieWykreslonych");

            entity.HasOne(d => d.KhwnIdKhNavigation).WithMany(p => p.KhWeryfikacjaNips)
                .HasForeignKey(d => d.KhwnIdKh)
                .HasConstraintName("FK_kh_WeryfikacjaNIP_kh__Kontrahent");

            entity.HasOne(d => d.KhwnIdUzNavigation).WithMany(p => p.KhWeryfikacjaNips)
                .HasForeignKey(d => d.KhwnIdUz)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_WeryfikacjaNIP_pd_Uzytkownik");
        });

        modelBuilder.Entity<KhWeryfikacjaWykazPodatnikowVat>(entity =>
        {
            entity.HasKey(e => e.KhwpId);

            entity.ToTable("kh_WeryfikacjaWykazPodatnikowVAT");

            entity.Property(e => e.KhwpId)
                .ValueGeneratedNever()
                .HasColumnName("khwp_Id");
            entity.Property(e => e.KhwpAktywnosc).HasColumnName("khwp_Aktywnosc");
            entity.Property(e => e.KhwpDataOdmowyRejestracji)
                .HasColumnType("datetime")
                .HasColumnName("khwp_DataOdmowyRejestracji");
            entity.Property(e => e.KhwpDataPrzywrocenia)
                .HasColumnType("datetime")
                .HasColumnName("khwp_DataPrzywrocenia");
            entity.Property(e => e.KhwpDataRejestracji)
                .HasColumnType("datetime")
                .HasColumnName("khwp_DataRejestracji");
            entity.Property(e => e.KhwpDataWeryfikacji)
                .HasColumnType("datetime")
                .HasColumnName("khwp_DataWeryfikacji");
            entity.Property(e => e.KhwpDataWykreslenia)
                .HasColumnType("datetime")
                .HasColumnName("khwp_DataWykreslenia");
            entity.Property(e => e.KhwpDataZapytania)
                .HasColumnType("datetime")
                .HasColumnName("khwp_DataZapytania");
            entity.Property(e => e.KhwpIdKh).HasColumnName("khwp_IdKh");
            entity.Property(e => e.KhwpIdUz).HasColumnName("khwp_IdUz");
            entity.Property(e => e.KhwpIdentyfikatorZapytania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("khwp_IdentyfikatorZapytania");
            entity.Property(e => e.KhwpNumerNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("khwp_NumerNIP");
            entity.Property(e => e.KhwpPowodOdmowyRejestracji)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khwp_PowodOdmowyRejestracji");
            entity.Property(e => e.KhwpPowodPrzywrocenia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khwp_PowodPrzywrocenia");
            entity.Property(e => e.KhwpPowodWykreslenia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khwp_PowodWykreslenia");

            entity.HasOne(d => d.KhwpIdKhNavigation).WithMany(p => p.KhWeryfikacjaWykazPodatnikowVats)
                .HasForeignKey(d => d.KhwpIdKh)
                .HasConstraintName("FK_kh_WeryfikacjaWykazPodatnikowVAT_kh__Kontrahent");
        });

        modelBuilder.Entity<KhZgody>(entity =>
        {
            entity.HasKey(e => e.ZgId);

            entity.ToTable("kh_Zgody");

            entity.Property(e => e.ZgId)
                .ValueGeneratedNever()
                .HasColumnName("zg_Id");
            entity.Property(e => e.ZgDataWycofania)
                .HasColumnType("datetime")
                .HasColumnName("zg_DataWycofania");
            entity.Property(e => e.ZgDataWygasniecia)
                .HasColumnType("datetime")
                .HasColumnName("zg_DataWygasniecia");
            entity.Property(e => e.ZgDataZgody)
                .HasColumnType("datetime")
                .HasColumnName("zg_DataZgody");
            entity.Property(e => e.ZgIdCelu).HasColumnName("zg_IdCelu");
            entity.Property(e => e.ZgIdObiektu).HasColumnName("zg_IdObiektu");
            entity.Property(e => e.ZgStatus).HasColumnName("zg_Status");
            entity.Property(e => e.ZgStatusWyliczony)
                .HasComputedColumnSql("(case when [zg_Status]=(1) OR [zg_Status]=(2) then case when CONVERT([datetime],floor(CONVERT([float],getdate(),(0))),(0))<[zg_DataWygasniecia] OR [zg_DataWygasniecia] IS NULL then (1) else (2) end else [zg_Status] end)", false)
                .HasColumnName("zg_StatusWyliczony");
            entity.Property(e => e.ZgTypObiektu).HasColumnName("zg_TypObiektu");

            entity.HasOne(d => d.ZgIdCeluNavigation).WithMany(p => p.KhZgodies)
                .HasForeignKey(d => d.ZgIdCelu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kh_Zgody_cp__CelPrzetwarzania");
        });

        modelBuilder.Entity<KkKodKreskowyParam>(entity =>
        {
            entity.HasKey(e => e.KkpkId);

            entity.ToTable("kk_KodKreskowyParam");

            entity.Property(e => e.KkpkId)
                .ValueGeneratedNever()
                .HasColumnName("kkpk_Id");
            entity.Property(e => e.KkpkDodatkowaCyfraKontrolna).HasColumnName("kkpk_DodatkowaCyfraKontrolna");
            entity.Property(e => e.KkpkKodyZmienne).HasColumnName("kkpk_KodyZmienne");
            entity.Property(e => e.KkpkParamEwidId).HasColumnName("kkpk_ParamEwidId");
            entity.Property(e => e.KkpkPrefix)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kkpk_Prefix");
            entity.Property(e => e.KkpkSuffix)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kkpk_Suffix");
            entity.Property(e => e.KkpkUsunPoczatkoweZera).HasColumnName("kkpk_UsunPoczatkoweZera");

            entity.HasOne(d => d.KkpkParamEwid).WithMany(p => p.KkKodKreskowyParams)
                .HasForeignKey(d => d.KkpkParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kk_KodKreskowyParam_par__Ewid");
        });

        modelBuilder.Entity<KomFrParametr>(entity =>
        {
            entity.HasKey(e => e.FprId);

            entity.ToTable("kom_FrParametr");

            entity.Property(e => e.FprId)
                .ValueGeneratedNever()
                .HasColumnName("fpr_Id");
            entity.Property(e => e.FprDts)
                .HasDefaultValue(true)
                .HasColumnName("fpr_DTS");
            entity.Property(e => e.FprFormat)
                .HasDefaultValueSql("('')")
                .HasColumnName("fpr_Format");
            entity.Property(e => e.FprKolumnaId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fpr_KolumnaId");
            entity.Property(e => e.FprNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fpr_Nazwa");
            entity.Property(e => e.FprRozszerzenie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fpr_Rozszerzenie");
            entity.Property(e => e.FprSciezka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue(".")
                .HasColumnName("fpr_Sciezka");
            entity.Property(e => e.FprTyp)
                .HasDefaultValue(1)
                .HasColumnName("fpr_Typ");
        });

        modelBuilder.Entity<KomKomPrzeprowadzona>(entity =>
        {
            entity.HasKey(e => e.OdkId);

            entity.ToTable("kom_KomPrzeprowadzona");

            entity.Property(e => e.OdkId)
                .ValueGeneratedNever()
                .HasColumnName("odk_Id");
            entity.Property(e => e.OdkData)
                .HasColumnType("datetime")
                .HasColumnName("odk_Data");
            entity.Property(e => e.OdkDataDo)
                .HasColumnType("datetime")
                .HasColumnName("odk_DataDo");
            entity.Property(e => e.OdkDataOd)
                .HasColumnType("datetime")
                .HasColumnName("odk_DataOd");
            entity.Property(e => e.OdkIdMagazyn).HasColumnName("odk_IdMagazyn");
            entity.Property(e => e.OdkLiczbaNieOk).HasColumnName("odk_LiczbaNieOK");
            entity.Property(e => e.OdkLiczbaOk).HasColumnName("odk_LiczbaOK");
            entity.Property(e => e.OdkLiczbaWszystko)
                .HasDefaultValue(-1)
                .HasColumnName("odk_LiczbaWszystko");
            entity.Property(e => e.OdkTypKom).HasColumnName("odk_TypKom");
        });

        modelBuilder.Entity<KomKomunikacjaLog>(entity =>
        {
            entity.HasKey(e => e.LkId);

            entity.ToTable("kom_KomunikacjaLog");

            entity.Property(e => e.LkId).HasColumnName("lk_Id");
            entity.Property(e => e.LkBlad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lk_Blad");
            entity.Property(e => e.LkDokument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lk_Dokument");
            entity.Property(e => e.LkIdKomunikacji).HasColumnName("lk_IdKomunikacji");
            entity.Property(e => e.LkNrBledu).HasColumnName("lk_NrBledu");
            entity.Property(e => e.LkTypDok)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lk_TypDok");
            entity.Property(e => e.LkUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lk_Uwagi");

            entity.HasOne(d => d.LkIdKomunikacjiNavigation).WithMany(p => p.KomKomunikacjaLogs)
                .HasForeignKey(d => d.LkIdKomunikacji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kom_KomunikacjaLog_kom_KomPrzeprowadzona");
        });

        modelBuilder.Entity<KomParametr>(entity =>
        {
            entity.HasKey(e => e.KomId);

            entity.ToTable("kom_Parametr");

            entity.Property(e => e.KomId)
                .ValueGeneratedNever()
                .HasColumnName("kom_Id");
            entity.Property(e => e.KomBiuroKhDodaj).HasColumnName("kom_BiuroKhDodaj");
            entity.Property(e => e.KomBiuroKhNip).HasColumnName("kom_BiuroKhNIP");
            entity.Property(e => e.KomBiuroPrDodaj).HasColumnName("kom_BiuroPrDodaj");
            entity.Property(e => e.KomCenyZakupu).HasColumnName("kom_CenyZakupu");
            entity.Property(e => e.KomDoBiuraDataSprzedaz).HasColumnName("kom_DoBiuraDataSprzedaz");
            entity.Property(e => e.KomDoBiuraDataSprzedazKorekta).HasColumnName("kom_DoBiuraDataSprzedazKorekta");
            entity.Property(e => e.KomDoBiuraDataZakup).HasColumnName("kom_DoBiuraDataZakup");
            entity.Property(e => e.KomDoBiuraDataZakupKorekta).HasColumnName("kom_DoBiuraDataZakupKorekta");
            entity.Property(e => e.KomDoBiuraMagazynoweKhWirtual).HasColumnName("kom_DoBiuraMagazynoweKhWirtual");
            entity.Property(e => e.KomDoBiuraOpBezKh).HasColumnName("kom_DoBiuraOpBezKh");
            entity.Property(e => e.KomDoBiuraOpGotowkowe).HasColumnName("kom_DoBiuraOpGotowkowe");
            entity.Property(e => e.KomDoBiuraWszyscyKh).HasColumnName("kom_DoBiuraWszyscyKh");
            entity.Property(e => e.KomHasloEbisxmleksport)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kom_HasloEBISXMLEksport");
            entity.Property(e => e.KomHasloEbisxmlimport)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kom_HasloEBISXMLImport");
            entity.Property(e => e.KomHasloEdippeksport)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kom_HasloEDIPPEksport");
            entity.Property(e => e.KomHasloEdippimport)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kom_HasloEDIPPImport");
            entity.Property(e => e.KomHasloKadryPlaceXmleksport)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kom_HasloKadryPlaceXMLEksport");
            entity.Property(e => e.KomHasloKadryPlaceXmlimport)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kom_HasloKadryPlaceXMLImport");
            entity.Property(e => e.KomIdMagazyn)
                .HasDefaultValueSql("('')")
                .HasColumnName("kom_IdMagazyn");
            entity.Property(e => e.KomKhAktualizuj).HasColumnName("kom_KhAktualizuj");
            entity.Property(e => e.KomKhTypAktualizacji).HasColumnName("kom_KhTypAktualizacji");
            entity.Property(e => e.KomNieMarzaZyskKoszt).HasColumnName("kom_NieMarzaZyskKoszt");
            entity.Property(e => e.KomNieWysylajDanychWrazliwychEbisxml).HasColumnName("kom_NieWysylajDanychWrazliwychEBISXML");
            entity.Property(e => e.KomNieWysylajDanychWrazliwychEdipp).HasColumnName("kom_NieWysylajDanychWrazliwychEDIPP");
            entity.Property(e => e.KomNieWysylajDanychWrazliwychPozostale).HasColumnName("kom_NieWysylajDanychWrazliwychPozostale");
            entity.Property(e => e.KomNr)
                .HasDefaultValue(1)
                .HasColumnName("kom_Nr");
            entity.Property(e => e.KomOchronaDanychOsobowych).HasColumnName("kom_OchronaDanychOsobowych");
            entity.Property(e => e.KomOdbior).HasColumnName("kom_Odbior");
            entity.Property(e => e.KomPrAktualizuj).HasColumnName("kom_PrAktualizuj");
            entity.Property(e => e.KomSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kom_Symbol");
            entity.Property(e => e.KomSzyfrujPlikiEbisxml).HasColumnName("kom_SzyfrujPlikiEBISXML");
            entity.Property(e => e.KomSzyfrujPlikiEdipp).HasColumnName("kom_SzyfrujPlikiEDIPP");
            entity.Property(e => e.KomSzyfrujPlikiKadryPlaceXmleksport).HasColumnName("kom_SzyfrujPlikiKadryPlaceXMLEksport");
            entity.Property(e => e.KomSzyfrujPlikiKadryPlaceXmlimport).HasColumnName("kom_SzyfrujPlikiKadryPlaceXMLImport");
            entity.Property(e => e.KomTwAktualizuj).HasColumnName("kom_TwAktualizuj");
            entity.Property(e => e.KomTwTypAktualizacji).HasColumnName("kom_TwTypAktualizacji");
            entity.Property(e => e.KomTypPodmiotu).HasColumnName("kom_TypPodmiotu");
        });

        modelBuilder.Entity<KorKorektaKosztow>(entity =>
        {
            entity.HasKey(e => e.KknId);

            entity.ToTable("kor__KorektaKosztow", tb =>
                {
                    tb.HasTrigger("tr_KorKosztDokument_Inserting");
                    tb.HasTrigger("tr_ZapisCzasuKK");
                });

            entity.Property(e => e.KknId)
                .ValueGeneratedNever()
                .HasColumnName("kkn_Id");
            entity.Property(e => e.KknDataDo)
                .HasColumnType("datetime")
                .HasColumnName("kkn_DataDo");
            entity.Property(e => e.KknDataOd)
                .HasColumnType("datetime")
                .HasColumnName("kkn_DataOd");
            entity.Property(e => e.KknDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("kkn_DataWyst");
            entity.Property(e => e.KknKatId).HasColumnName("kkn_KatId");
            entity.Property(e => e.KknMagId).HasColumnName("kkn_MagId");
            entity.Property(e => e.KknMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("kkn_MscWyst");
            entity.Property(e => e.KknNr).HasColumnName("kkn_Nr");
            entity.Property(e => e.KknNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("kkn_NrPelny");
            entity.Property(e => e.KknNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("kkn_NrRoz");
            entity.Property(e => e.KknPersonelId).HasColumnName("kkn_PersonelId");
            entity.Property(e => e.KknPodtyp).HasColumnName("kkn_Podtyp");
            entity.Property(e => e.KknPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kkn_Podtytul");
            entity.Property(e => e.KknStatus).HasColumnName("kkn_Status");
            entity.Property(e => e.KknStatusKsieg).HasColumnName("kkn_StatusKsieg");
            entity.Property(e => e.KknTyp).HasColumnName("kkn_Typ");
            entity.Property(e => e.KknTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kkn_Tytul");
            entity.Property(e => e.KknUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("kkn_Uwagi");
            entity.Property(e => e.KknWartKkhs)
                .HasColumnType("money")
                .HasColumnName("kkn_WartKKHs");
            entity.Property(e => e.KknWartKkhz)
                .HasColumnType("money")
                .HasColumnName("kkn_WartKKHz");
            entity.Property(e => e.KknWartKkmp)
                .HasColumnType("money")
                .HasColumnName("kkn_WartKKMp");
            entity.Property(e => e.KknWartKkmw)
                .HasColumnType("money")
                .HasColumnName("kkn_WartKKMw");
            entity.Property(e => e.KknWartKkmwob)
                .HasColumnType("money")
                .HasColumnName("kkn_WartKKMwob");
            entity.Property(e => e.KknWartKkmwop)
                .HasColumnType("money")
                .HasColumnName("kkn_WartKKMwop");
            entity.Property(e => e.KknWartMmp)
                .HasColumnType("money")
                .HasColumnName("kkn_WartMMP");
            entity.Property(e => e.KknWartMmw)
                .HasColumnType("money")
                .HasColumnName("kkn_WartMMW");
            entity.Property(e => e.KknWartPz)
                .HasColumnType("money")
                .HasColumnName("kkn_WartPZ");
            entity.Property(e => e.KknWartRw)
                .HasColumnType("money")
                .HasColumnName("kkn_WartRW");
            entity.Property(e => e.KknWartWzhan)
                .HasColumnType("money")
                .HasColumnName("kkn_WartWZhan");
            entity.Property(e => e.KknWartWzmag)
                .HasColumnType("money")
                .HasColumnName("kkn_WartWZmag");
            entity.Property(e => e.KknWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("kkn_Wystawil");

            entity.HasOne(d => d.KknKat).WithMany(p => p.KorKorektaKosztows)
                .HasForeignKey(d => d.KknKatId)
                .HasConstraintName("FK_kor__KorektaKosztow_sl_Kategoria");
        });

        modelBuilder.Entity<KorPozycja>(entity =>
        {
            entity.HasKey(e => e.KkpId);

            entity.ToTable("kor_Pozycja");

            entity.Property(e => e.KkpId)
                .ValueGeneratedNever()
                .HasColumnName("kkp_Id");
            entity.Property(e => e.KkpDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("kkp_DokDataWyst");
            entity.Property(e => e.KkpDokId).HasColumnName("kkp_DokId");
            entity.Property(e => e.KkpDokNrPelny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kkp_DokNrPelny");
            entity.Property(e => e.KkpIdKorKoszt).HasColumnName("kkp_IdKorKoszt");
            entity.Property(e => e.KkpKorDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("kkp_KorDataWyst");
            entity.Property(e => e.KkpKorId).HasColumnName("kkp_KorId");
            entity.Property(e => e.KkpKorNrPelny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kkp_KorNrPelny");
            entity.Property(e => e.KkpTypOkresu).HasColumnName("kkp_TypOkresu");
            entity.Property(e => e.KkpTypPozycji).HasColumnName("kkp_TypPozycji");
            entity.Property(e => e.KkpWartKorekty)
                .HasColumnType("money")
                .HasColumnName("kkp_WartKorekty");
            entity.Property(e => e.KkpWartPoKor)
                .HasColumnType("money")
                .HasColumnName("kkp_WartPoKor");
            entity.Property(e => e.KkpWartPrzedKor)
                .HasColumnType("money")
                .HasColumnName("kkp_WartPrzedKor");

            entity.HasOne(d => d.KkpDok).WithMany(p => p.KorPozycjas)
                .HasForeignKey(d => d.KkpDokId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kor_Pozycja_dok__Dokument");

            entity.HasOne(d => d.KkpIdKorKosztNavigation).WithMany(p => p.KorPozycjas)
                .HasForeignKey(d => d.KkpIdKorKoszt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kor_Pozycja_kor__KorektaKosztow");
        });

        modelBuilder.Entity<KpAkord>(entity =>
        {
            entity.HasKey(e => e.AkId);

            entity.ToTable("kp_Akord");

            entity.Property(e => e.AkId)
                .ValueGeneratedNever()
                .HasColumnName("ak_Id");
            entity.Property(e => e.AkData)
                .HasColumnType("datetime")
                .HasColumnName("ak_Data");
            entity.Property(e => e.AkDokumentRozliczajacyOpis)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ak_DokumentRozliczajacyOpis");
            entity.Property(e => e.AkIdDokRozlRachunek).HasColumnName("ak_IdDokRozlRachunek");
            entity.Property(e => e.AkIdDokRozlWyplata).HasColumnName("ak_IdDokRozlWyplata");
            entity.Property(e => e.AkIdStawkiAkordowej).HasColumnName("ak_IdStawkiAkordowej");
            entity.Property(e => e.AkIdUmowyCywilnoprawnej).HasColumnName("ak_IdUmowyCywilnoprawnej");
            entity.Property(e => e.AkIdUmowyOprace).HasColumnName("ak_IdUmowyOPrace");
            entity.Property(e => e.AkIlosc)
                .HasColumnType("money")
                .HasColumnName("ak_Ilosc");
            entity.Property(e => e.AkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ak_Opis");
            entity.Property(e => e.AkSposobRozliczenia).HasColumnName("ak_SposobRozliczenia");
            entity.Property(e => e.AkStatus).HasColumnName("ak_Status");
            entity.Property(e => e.AkWartosc)
                .HasColumnType("money")
                .HasColumnName("ak_Wartosc");

            entity.HasOne(d => d.AkIdStawkiAkordowejNavigation).WithMany(p => p.KpAkords)
                .HasForeignKey(d => d.AkIdStawkiAkordowej)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kp_Akord_sl_StawkaAkordowa");

            entity.HasOne(d => d.AkIdUmowyCywilnoprawnejNavigation).WithMany(p => p.KpAkords)
                .HasForeignKey(d => d.AkIdUmowyCywilnoprawnej)
                .HasConstraintName("FK_kp_Akord_plb_UmowaCP");

            entity.HasOne(d => d.AkIdUmowyOpraceNavigation).WithMany(p => p.KpAkords)
                .HasForeignKey(d => d.AkIdUmowyOprace)
                .HasConstraintName("FK_kp_Akord_plb_Umowa");
        });

        modelBuilder.Entity<KpKomornikPozyczkaDefinicja>(entity =>
        {
            entity.HasKey(e => e.KpId).HasName("PK_kp_KomornikPozyczka");

            entity.ToTable("kp_KomornikPozyczkaDefinicja");

            entity.Property(e => e.KpId)
                .ValueGeneratedNever()
                .HasColumnName("kp_Id");
            entity.Property(e => e.KpCzestotliwoscPotracania)
                .HasDefaultValue(1)
                .HasColumnName("kp_CzestotliwoscPotracania");
            entity.Property(e => e.KpCzyNaSwiadectwiePracy)
                .HasDefaultValue(true)
                .HasColumnName("kp_CzyNaSwiadectwiePracy");
            entity.Property(e => e.KpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("kp_DataDo");
            entity.Property(e => e.KpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("kp_DataOd");
            entity.Property(e => e.KpIdPracownika).HasColumnName("kp_IdPracownika");
            entity.Property(e => e.KpIdSkladnika).HasColumnName("kp_IdSkladnika");
            entity.Property(e => e.KpKomornik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kp_Komornik");
            entity.Property(e => e.KpKwotaPotraceniaMiesiecznego)
                .HasColumnType("money")
                .HasColumnName("kp_KwotaPotraceniaMiesiecznego");
            entity.Property(e => e.KpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kp_Nazwa");
            entity.Property(e => e.KpPriorytetPotracenia)
                .HasDefaultValue(1)
                .HasColumnName("kp_PriorytetPotracenia");
            entity.Property(e => e.KpProcentOchronyWynagrodzenia)
                .HasColumnType("money")
                .HasColumnName("kp_ProcentOchronyWynagrodzenia");
            entity.Property(e => e.KpProcentWynagrodzeniaPotracany)
                .HasColumnType("money")
                .HasColumnName("kp_ProcentWynagrodzeniaPotracany");
            entity.Property(e => e.KpPrzyczynaAnulowania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kp_PrzyczynaAnulowania");
            entity.Property(e => e.KpRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("kp_Rodzaj");
            entity.Property(e => e.KpSposobPotracania).HasColumnName("kp_SposobPotracania");
            entity.Property(e => e.KpSumaPotracenia)
                .HasColumnType("money")
                .HasColumnName("kp_SumaPotracenia");
            entity.Property(e => e.KpSygnaturaSprawy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kp_SygnaturaSprawy");
            entity.Property(e => e.KpZawieszenieDataDo)
                .HasColumnType("datetime")
                .HasColumnName("kp_ZawieszenieDataDo");
            entity.Property(e => e.KpZawieszenieDataOd)
                .HasColumnType("datetime")
                .HasColumnName("kp_ZawieszenieDataOd");

            entity.HasOne(d => d.KpIdPracownikaNavigation).WithMany(p => p.KpKomornikPozyczkaDefinicjas)
                .HasForeignKey(d => d.KpIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kp_KomornikPozyczkaDefinicja_pr_Pracownik");

            entity.HasOne(d => d.KpIdSkladnikaNavigation).WithMany(p => p.KpKomornikPozyczkaDefinicjas)
                .HasForeignKey(d => d.KpIdSkladnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kp_KomornikPozyczkaDefinicja_plb_Skladnik");
        });

        modelBuilder.Entity<KpNaliczeniePotracenie>(entity =>
        {
            entity.HasKey(e => e.NalpId);

            entity.ToTable("kp_NaliczeniePotracenie");

            entity.Property(e => e.NalpId)
                .ValueGeneratedNever()
                .HasColumnName("nalp_Id");
            entity.Property(e => e.NalpData)
                .HasColumnType("datetime")
                .HasColumnName("nalp_Data");
            entity.Property(e => e.NalpDokumentRozliczajacyOpis)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nalp_DokumentRozliczajacyOpis");
            entity.Property(e => e.NalpIdDokRozliczajacego).HasColumnName("nalp_IdDokRozliczajacego");
            entity.Property(e => e.NalpIdSkladnika).HasColumnName("nalp_IdSkladnika");
            entity.Property(e => e.NalpIdUmowy).HasColumnName("nalp_IdUmowy");
            entity.Property(e => e.NalpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nalp_Opis");
            entity.Property(e => e.NalpSposobRozliczenia)
                .HasDefaultValue(1)
                .HasColumnName("nalp_SposobRozliczenia");
            entity.Property(e => e.NalpStatus).HasColumnName("nalp_Status");
            entity.Property(e => e.NalpTyp).HasColumnName("nalp_Typ");
            entity.Property(e => e.NalpWartosc)
                .HasColumnType("money")
                .HasColumnName("nalp_Wartosc");

            entity.HasOne(d => d.NalpIdUmowyNavigation).WithMany(p => p.KpNaliczeniePotracenies)
                .HasForeignKey(d => d.NalpIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kp_NaliczeniePotracenie_plb_Umowa");
        });

        modelBuilder.Entity<KpPozycjaDefinicji>(entity =>
        {
            entity.HasKey(e => e.KppId);

            entity.ToTable("kp_PozycjaDefinicji");

            entity.Property(e => e.KppId)
                .ValueGeneratedNever()
                .HasColumnName("kpp_Id");
            entity.Property(e => e.KppData)
                .HasColumnType("datetime")
                .HasColumnName("kpp_Data");
            entity.Property(e => e.KppDokumentRozliczajacy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("kpp_DokumentRozliczajacy");
            entity.Property(e => e.KppIdDefinicji).HasColumnName("kpp_IdDefinicji");
            entity.Property(e => e.KppIdDokumentRozliczajacy).HasColumnName("kpp_IdDokumentRozliczajacy");
            entity.Property(e => e.KppKwotaPotracona)
                .HasColumnType("money")
                .HasColumnName("kpp_KwotaPotracona");
            entity.Property(e => e.KppKwotaPotraconaZzasilkow)
                .HasColumnType("money")
                .HasColumnName("kpp_KwotaPotraconaZZasilkow");
            entity.Property(e => e.KppKwotaWyliczona)
                .HasColumnType("money")
                .HasColumnName("kpp_KwotaWyliczona");
            entity.Property(e => e.KppOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpp_Opis");
            entity.Property(e => e.KppSposobRozliczenia).HasColumnName("kpp_SposobRozliczenia");

            entity.HasOne(d => d.KppIdDefinicjiNavigation).WithMany(p => p.KpPozycjaDefinicjis)
                .HasForeignKey(d => d.KppIdDefinicji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kp_PozycjaDefinicji_kp_KomornikPozyczkaDefinicja");

            entity.HasOne(d => d.KppIdDokumentRozliczajacyNavigation).WithMany(p => p.KpPozycjaDefinicjis)
                .HasForeignKey(d => d.KppIdDokumentRozliczajacy)
                .HasConstraintName("FK_kp_PozycjaDefinicji_plb_Wyplata1");
        });

        modelBuilder.Entity<KpProwizja>(entity =>
        {
            entity.HasKey(e => e.PrId);

            entity.ToTable("kp_Prowizja");

            entity.Property(e => e.PrId)
                .ValueGeneratedNever()
                .HasColumnName("pr_Id");
            entity.Property(e => e.PrData)
                .HasColumnType("datetime")
                .HasColumnName("pr_Data");
            entity.Property(e => e.PrDokumentRozliczajacyOpis)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_DokumentRozliczajacyOpis");
            entity.Property(e => e.PrIdDokRozlRachunek).HasColumnName("pr_IdDokRozlRachunek");
            entity.Property(e => e.PrIdDokRozlWyplata).HasColumnName("pr_IdDokRozlWyplata");
            entity.Property(e => e.PrIdStawkiProwizyjnej).HasColumnName("pr_IdStawkiProwizyjnej");
            entity.Property(e => e.PrIdUmowyCywilnoprawnej).HasColumnName("pr_IdUmowyCywilnoprawnej");
            entity.Property(e => e.PrIdUmowyOprace).HasColumnName("pr_IdUmowyOPrace");
            entity.Property(e => e.PrIlosc)
                .HasColumnType("money")
                .HasColumnName("pr_Ilosc");
            entity.Property(e => e.PrOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_Opis");
            entity.Property(e => e.PrSposobRozliczenia)
                .HasDefaultValue(1)
                .HasColumnName("pr_SposobRozliczenia");
            entity.Property(e => e.PrStatus).HasColumnName("pr_Status");
            entity.Property(e => e.PrWartosc)
                .HasColumnType("money")
                .HasColumnName("pr_Wartosc");

            entity.HasOne(d => d.PrIdUmowyCywilnoprawnejNavigation).WithMany(p => p.KpProwizjas)
                .HasForeignKey(d => d.PrIdUmowyCywilnoprawnej)
                .HasConstraintName("FK_kp_Prowizja_plb_UmowaCP");

            entity.HasOne(d => d.PrIdUmowyOpraceNavigation).WithMany(p => p.KpProwizjas)
                .HasForeignKey(d => d.PrIdUmowyOprace)
                .HasConstraintName("FK_kp_Prowizja_plb_Umowa");
        });

        modelBuilder.Entity<KprKsiega>(entity =>
        {
            entity.HasKey(e => e.KprId);

            entity.ToTable("kpr__Ksiega");

            entity.HasIndex(e => e.KprKorektaKuptyp, "IX_kpr__Ksiega_Koszty");

            entity.Property(e => e.KprId)
                .ValueGeneratedNever()
                .HasColumnName("kpr_Id");
            entity.Property(e => e.KprDataZdarzenia)
                .HasColumnType("datetime")
                .HasColumnName("kpr_DataZdarzenia");
            entity.Property(e => e.KprDataZdarzeniaGospodarczego)
                .HasColumnType("datetime")
                .HasColumnName("kpr_DataZdarzeniaGospodarczego");
            entity.Property(e => e.KprDochod)
                .HasComputedColumnSql("(([kpr_KolPrzychSpTowUsl]+[kpr_KolPrzychPozostale])-(((([kpr_KolZakTowarow]+[kpr_KolZakKosztyUbocz])+[kpr_KolWydReprRekl])+[kpr_KolWydWynagr])+[kpr_KolWydPozostale]))", false)
                .HasColumnType("money")
                .HasColumnName("kpr_Dochod");
            entity.Property(e => e.KprIdDokImport).HasColumnName("kpr_IdDokImport");
            entity.Property(e => e.KprIdKategorii).HasColumnName("kpr_IdKategorii");
            entity.Property(e => e.KprIdKh).HasColumnName("kpr_IdKh");
            entity.Property(e => e.KprIdObiektu).HasColumnName("kpr_IdObiektu");
            entity.Property(e => e.KprIdObiektuVatoss).HasColumnName("kpr_IdObiektuVATOss");
            entity.Property(e => e.KprIdOkresu).HasColumnName("kpr_IdOkresu");
            entity.Property(e => e.KprIdPanstwaKonsumpcji).HasColumnName("kpr_IdPanstwaKonsumpcji");
            entity.Property(e => e.KprImportowany).HasColumnName("kpr_Importowany");
            entity.Property(e => e.KprKodPocztowyKh)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_KodPocztowyKh");
            entity.Property(e => e.KprKolBadaniaRozwoj)
                .HasColumnType("money")
                .HasColumnName("kpr_KolBadaniaRozwoj");
            entity.Property(e => e.KprKolInne)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_KolInne");
            entity.Property(e => e.KprKolPrzychPozostale)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_KolPrzychPozostale");
            entity.Property(e => e.KprKolPrzychRazem)
                .HasComputedColumnSql("([kpr_KolPrzychSpTowUsl]+[kpr_KolPrzychPozostale])", false)
                .HasColumnType("money")
                .HasColumnName("kpr_KolPrzychRazem");
            entity.Property(e => e.KprKolPrzychSpTowUsl)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_KolPrzychSpTowUsl");
            entity.Property(e => e.KprKolUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_KolUwagi");
            entity.Property(e => e.KprKolWydPozostale)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_KolWydPozostale");
            entity.Property(e => e.KprKolWydRazem)
                .HasComputedColumnSql("(([kpr_KolWydReprRekl]+[kpr_KolWydWynagr])+[kpr_KolWydPozostale])", false)
                .HasColumnType("money")
                .HasColumnName("kpr_KolWydRazem");
            entity.Property(e => e.KprKolWydReprRekl)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_KolWydReprRekl");
            entity.Property(e => e.KprKolWydWynagr)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_KolWydWynagr");
            entity.Property(e => e.KprKolZakKosztyUbocz)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_KolZakKosztyUbocz");
            entity.Property(e => e.KprKolZakTowarow)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_KolZakTowarow");
            entity.Property(e => e.KprKorektaKupdataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("kpr_KorektaKUPDataPlatnosci");
            entity.Property(e => e.KprKorektaKupdowodZaplaty)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("kpr_KorektaKUPDowodZaplaty");
            entity.Property(e => e.KprKorektaKupidDokKorygowany).HasColumnName("kpr_KorektaKUPIdDokKorygowany");
            entity.Property(e => e.KprKorektaKupnrDokKorygowany)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("kpr_KorektaKUPNrDokKorygowany");
            entity.Property(e => e.KprKorektaKupplatnoscCzesciowa).HasColumnName("kpr_KorektaKUPPlatnoscCzesciowa");
            entity.Property(e => e.KprKorektaKupterminKorekty)
                .HasColumnType("datetime")
                .HasColumnName("kpr_KorektaKUPTerminKorekty");
            entity.Property(e => e.KprKorektaKupterminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("kpr_KorektaKUPTerminPlatnosci");
            entity.Property(e => e.KprKorektaKuptyp).HasColumnName("kpr_KorektaKUPTyp");
            entity.Property(e => e.KprKorektaSn).HasColumnName("kpr_KorektaSN");
            entity.Property(e => e.KprMalyPojazd).HasColumnName("kpr_MalyPojazd");
            entity.Property(e => e.KprMiastoKh)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_MiastoKh");
            entity.Property(e => e.KprNazwaKh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_NazwaKh");
            entity.Property(e => e.KprNazwaPelnaKh)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_NazwaPelnaKh");
            entity.Property(e => e.KprNettoBrutto).HasColumnName("kpr_NettoBrutto");
            entity.Property(e => e.KprNipkh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_NIPKh");
            entity.Property(e => e.KprNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_NrDokumentu");
            entity.Property(e => e.KprNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("kpr_NumerKSeF");
            entity.Property(e => e.KprOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_Opis");
            entity.Property(e => e.KprOpisKolBadaniaRozwoj)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kpr_OpisKolBadaniaRozwoj");
            entity.Property(e => e.KprPrzypadekSzczegolnyPit).HasColumnName("kpr_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.KprRodzaj).HasColumnName("kpr_Rodzaj");
            entity.Property(e => e.KprStawkaVat)
                .HasDefaultValue(0)
                .HasColumnName("kpr_StawkaVAT");
            entity.Property(e => e.KprStawkaVatOss)
                .HasDefaultValue(0)
                .HasColumnName("kpr_StawkaVatOss");
            entity.Property(e => e.KprSymbolKh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_SymbolKh");
            entity.Property(e => e.KprTypDokImport).HasColumnName("kpr_TypDokImport");
            entity.Property(e => e.KprTypObiektu).HasColumnName("kpr_TypObiektu");
            entity.Property(e => e.KprTypOpisuKolBadaniaRozwoj).HasColumnName("kpr_TypOpisuKolBadaniaRozwoj");
            entity.Property(e => e.KprUlicaKh)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpr_UlicaKh");
            entity.Property(e => e.KprUniewazniony).HasColumnName("kpr_Uniewazniony");
            entity.Property(e => e.KprWartoscZfaktury)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("kpr_WartoscZFaktury");
            entity.Property(e => e.KprWersjaKpiR)
                .HasDefaultValue(1)
                .HasColumnName("kpr_WersjaKPiR");
            entity.Property(e => e.KprWlaczKorygowanieKup).HasColumnName("kpr_WlaczKorygowanieKUP");
            entity.Property(e => e.KprZakupy)
                .HasComputedColumnSql("([kpr_KolZakTowarow]+[kpr_KolZakKosztyUbocz])", false)
                .HasColumnType("money")
                .HasColumnName("kpr_Zakupy");
            entity.Property(e => e.KprZakupyWydatki)
                .HasComputedColumnSql("(((([kpr_KolZakTowarow]+[kpr_KolZakKosztyUbocz])+[kpr_KolWydReprRekl])+[kpr_KolWydWynagr])+[kpr_KolWydPozostale])", false)
                .HasColumnType("money")
                .HasColumnName("kpr_ZakupyWydatki");

            entity.HasOne(d => d.KprIdKategoriiNavigation).WithMany(p => p.KprKsiegas)
                .HasForeignKey(d => d.KprIdKategorii)
                .HasConstraintName("FK_kpr__Ksiega_sl_Kategoria");

            entity.HasOne(d => d.KprIdKhNavigation).WithMany(p => p.KprKsiegas)
                .HasForeignKey(d => d.KprIdKh)
                .HasConstraintName("FK_kpr__Ksiega_kh__Kontrahent");

            entity.HasOne(d => d.KprIdOkresuNavigation).WithMany(p => p.KprKsiegas)
                .HasForeignKey(d => d.KprIdOkresu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kpr__Ksiega_pd_Okres");

            entity.HasOne(d => d.KprIdPanstwaKonsumpcjiNavigation).WithMany(p => p.KprKsiegas)
                .HasForeignKey(d => d.KprIdPanstwaKonsumpcji)
                .HasConstraintName("FK_kpr__Ksiega_sl_Panstwo");

            entity.HasOne(d => d.KprKorektaKupidDokKorygowanyNavigation).WithMany(p => p.InverseKprKorektaKupidDokKorygowanyNavigation)
                .HasForeignKey(d => d.KprKorektaKupidDokKorygowany)
                .HasConstraintName("FK_kpr__Ksiega_kpr__Ksiega");
        });

        modelBuilder.Entity<KprParametr>(entity =>
        {
            entity.HasKey(e => e.KprpId);

            entity.ToTable("kpr_Parametr");

            entity.Property(e => e.KprpId)
                .ValueGeneratedNever()
                .HasColumnName("kprp_Id");
            entity.Property(e => e.KprpBrakKontrahenta).HasColumnName("kprp_BrakKontrahenta");
            entity.Property(e => e.KprpDomyslnaStawkaVatprzychod)
                .HasDefaultValue(0)
                .HasColumnName("kprp_DomyslnaStawkaVATPrzychod");
            entity.Property(e => e.KprpDomyslnaStawkaVatwydatek)
                .HasDefaultValue(0)
                .HasColumnName("kprp_DomyslnaStawkaVATWydatek");
            entity.Property(e => e.KprpIdKategoriiPrz).HasColumnName("kprp_IdKategoriiPrz");
            entity.Property(e => e.KprpIdKategoriiSn).HasColumnName("kprp_IdKategoriiSN");
            entity.Property(e => e.KprpIdKategoriiZak).HasColumnName("kprp_IdKategoriiZak");
            entity.Property(e => e.KprpInfoSklUbezpKsiegZaliczka)
                .HasDefaultValue(true)
                .HasColumnName("kprp_InfoSklUbezpKsiegZaliczka");
            entity.Property(e => e.KprpKontrolaUniqNrDokumentu)
                .HasDefaultValue(true)
                .HasColumnName("kprp_KontrolaUniqNrDokumentu");
            entity.Property(e => e.KprpKorygowanieKup).HasColumnName("kprp_KorygowanieKUP");
            entity.Property(e => e.KprpKosztyUzupelnianieDblClck).HasColumnName("kprp_KosztyUzupelnianieDblClck");
            entity.Property(e => e.KprpKupmsgBox).HasColumnName("kprp_KUPMsgBox");
            entity.Property(e => e.KprpPrzepisywanieDatyZaplaty)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieDatyZaplaty");
            entity.Property(e => e.KprpPrzepisywanieDtZdarzenia)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieDtZdarzenia");
            entity.Property(e => e.KprpPrzepisywanieDtZdarzeniaGospodarczego)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieDtZdarzeniaGospodarczego");
            entity.Property(e => e.KprpPrzepisywanieKategorii)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieKategorii");
            entity.Property(e => e.KprpPrzepisywanieKh)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieKh");
            entity.Property(e => e.KprpPrzepisywanieKorektyKup)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieKorektyKUP");
            entity.Property(e => e.KprpPrzepisywanieOpisBr)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieOpisBr");
            entity.Property(e => e.KprpPrzepisywanieOpisu)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieOpisu");
            entity.Property(e => e.KprpPrzepisywaniePanstwoKonsumpcji)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywaniePanstwoKonsumpcji");
            entity.Property(e => e.KprpPrzepisywaniePrzypadek)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywaniePrzypadek");
            entity.Property(e => e.KprpPrzepisywanieStawkaVat)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieStawkaVat");
            entity.Property(e => e.KprpPrzepisywanieStawkaVatOss)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieStawkaVatOss");
            entity.Property(e => e.KprpPrzepisywanieTypOpisuBr)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieTypOpisuBr");
            entity.Property(e => e.KprpPrzepisywanieVat)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieVAT");
            entity.Property(e => e.KprpPrzepisywanieVatOss)
                .HasDefaultValue(true)
                .HasColumnName("kprp_PrzepisywanieVatOss");
            entity.Property(e => e.KprpUkryjVatoss).HasColumnName("kprp_UkryjVATOss");
            entity.Property(e => e.KprpWersjaKpiR)
                .HasDefaultValue(1)
                .HasColumnName("kprp_WersjaKPiR");
            entity.Property(e => e.KprpWersjaKpiRinfo).HasColumnName("kprp_WersjaKPiRInfo");

            entity.HasOne(d => d.KprpIdKategoriiPrzNavigation).WithMany(p => p.KprParametrKprpIdKategoriiPrzNavigations)
                .HasForeignKey(d => d.KprpIdKategoriiPrz)
                .HasConstraintName("FK_kpr_Parametr_sl_Kategoria");

            entity.HasOne(d => d.KprpIdKategoriiSnNavigation).WithMany(p => p.KprParametrKprpIdKategoriiSnNavigations)
                .HasForeignKey(d => d.KprpIdKategoriiSn)
                .HasConstraintName("FK_kpr_Parametr_sl_Kategoria4");

            entity.HasOne(d => d.KprpIdKategoriiZakNavigation).WithMany(p => p.KprParametrKprpIdKategoriiZakNavigations)
                .HasForeignKey(d => d.KprpIdKategoriiZak)
                .HasConstraintName("FK_kpr_Parametr_sl_Kategoria2");
        });

        modelBuilder.Entity<KsKlasyfikatory>(entity =>
        {
            entity.HasKey(e => e.KskId).HasName("PK__ks_Klasy__BAC7ABDE7FB789C2");

            entity.ToTable("ks_Klasyfikatory");

            entity.Property(e => e.KskId)
                .ValueGeneratedNever()
                .HasColumnName("ksk_Id");
            entity.Property(e => e.KskIdSlownika).HasColumnName("ksk_IdSlownika");
            entity.Property(e => e.KskNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("Nowy klasyfikator")
                .HasColumnName("ksk_Nazwa");
            entity.Property(e => e.KskOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ksk_Opis");
            entity.Property(e => e.KskTryb).HasColumnName("ksk_Tryb");
            entity.Property(e => e.KskTypObiektu).HasColumnName("ksk_TypObiektu");

            entity.HasOne(d => d.KskIdSlownikaNavigation).WithMany(p => p.KsKlasyfikatories)
                .HasForeignKey(d => d.KskIdSlownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ks_Klasyf__ksk_I__0293F66D");

            entity.HasOne(d => d.KskTypObiektuNavigation).WithMany(p => p.KsKlasyfikatories)
                .HasForeignKey(d => d.KskTypObiektu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ks_Klasyf__ksk_I__019FD234");
        });

        modelBuilder.Entity<KsKlasyfikatoryUklad>(entity =>
        {
            entity.HasKey(e => e.KsuId).HasName("PK__ks_Klasy__9652140C0758AB8A");

            entity.ToTable("ks_KlasyfikatoryUklad");

            entity.Property(e => e.KsuId)
                .ValueGeneratedNever()
                .HasColumnName("ksu_Id");
            entity.Property(e => e.KsuIdKlasyfikacji).HasColumnName("ksu_IdKlasyfikacji");
            entity.Property(e => e.KsuIdRodzica).HasColumnName("ksu_IdRodzica");
            entity.Property(e => e.KsuIdWpisu).HasColumnName("ksu_IdWpisu");
            entity.Property(e => e.KsuNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ksu_Nazwa");
            entity.Property(e => e.KsuPozycja).HasColumnName("ksu_Pozycja");
            entity.Property(e => e.KsuRozwinieta)
                .HasDefaultValue(true)
                .HasColumnName("ksu_Rozwinieta");

            entity.HasOne(d => d.KsuIdKlasyfikacjiNavigation).WithMany(p => p.KsKlasyfikatoryUklads)
                .HasForeignKey(d => d.KsuIdKlasyfikacji)
                .HasConstraintName("FK__ks_Klasyf__ksu_I__0A351835");
        });

        modelBuilder.Entity<KsPrzypisaniaWlasne>(entity =>
        {
            entity.HasKey(e => e.KspwId).HasName("PK__ks_Przyp__B29786A612CA5E36");

            entity.ToTable("ks_PrzypisaniaWlasne");

            entity.Property(e => e.KspwId)
                .ValueGeneratedNever()
                .HasColumnName("kspw_Id");
            entity.Property(e => e.KspwIdObiektu).HasColumnName("kspw_IdObiektu");
            entity.Property(e => e.KspwIdWpisu).HasColumnName("kspw_IdWpisu");
            entity.Property(e => e.KspwTypObiektu).HasColumnName("kspw_TypObiektu");

            entity.HasOne(d => d.KspwIdWpisuNavigation).WithMany(p => p.KsPrzypisaniaWlasnes)
                .HasForeignKey(d => d.KspwIdWpisu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ks_Przyp__kspw_I__15A6CAE1");

            entity.HasOne(d => d.KspwTypObiektuNavigation).WithMany(p => p.KsPrzypisaniaWlasnes)
                .HasForeignKey(d => d.KspwTypObiektu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ks_Przyp__kspw_T__14B2A6A8");
        });

        modelBuilder.Entity<KsefFaktury>(entity =>
        {
            entity.HasKey(e => e.KsefId).HasName("PK__ksef_Faktury_Primary_Key");

            entity.ToTable("ksef_Faktury");

            entity.Property(e => e.KsefId)
                .ValueGeneratedNever()
                .HasColumnName("ksef_Id");
            entity.Property(e => e.KsefBladKseF)
                .IsUnicode(false)
                .HasColumnName("ksef_BladKSeF");
            entity.Property(e => e.KsefDataNumeruKseF)
                .HasColumnType("datetime")
                .HasColumnName("ksef_DataNumeruKSeF");
            entity.Property(e => e.KsefDataNumeruKseForyg)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ksef_DataNumeruKSeFOryg");
            entity.Property(e => e.KsefDataPobrania)
                .HasColumnType("datetime")
                .HasColumnName("ksef_DataPobrania");
            entity.Property(e => e.KsefDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("ksef_DataWystawienia");
            entity.Property(e => e.KsefIdPlik).HasColumnName("ksef_IdPlik");
            entity.Property(e => e.KsefKontrahent)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("ksef_Kontrahent");
            entity.Property(e => e.KsefNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ksef_NIP");
            entity.Property(e => e.KsefNip2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ksef_NIP2");
            entity.Property(e => e.KsefNumer)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("ksef_Numer");
            entity.Property(e => e.KsefNumerFaKorygowanej)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("ksef_NumerFaKorygowanej");
            entity.Property(e => e.KsefNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("ksef_NumerKSeF");
            entity.Property(e => e.KsefNumerKseFkorygowanej)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("ksef_NumerKSeFKorygowanej");
            entity.Property(e => e.KsefRodzaj)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ksef_Rodzaj");
            entity.Property(e => e.KsefStatusBledu).HasColumnName("ksef_StatusBledu");
            entity.Property(e => e.KsefStatusPrzetworzenia).HasColumnName("ksef_StatusPrzetworzenia");
            entity.Property(e => e.KsefUzytoModyfikacjiWlasnej).HasColumnName("ksef_UzytoModyfikacjiWlasnej");
            entity.Property(e => e.KsefWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ksef_Waluta");
            entity.Property(e => e.KsefWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("ksef_WartoscBrutto");
            entity.Property(e => e.KsefWersja).HasColumnName("ksef_Wersja");
            entity.Property(e => e.KsefZrodlo).HasColumnName("ksef_Zrodlo");

            entity.HasOne(d => d.KsefIdPlikNavigation).WithMany(p => p.KsefFakturies)
                .HasForeignKey(d => d.KsefIdPlik)
                .HasConstraintName("FK_ksef_Faktury_ksef_Pliki");
        });

        modelBuilder.Entity<KsefFakturyHandel>(entity =>
        {
            entity.HasKey(e => e.KsefhId).HasName("PK_ksef_FakturyHandel_Primary_Key");

            entity.ToTable("ksef_FakturyHandel");

            entity.HasIndex(e => e.KsefhIdFaktury, "IX_ksef_FakturyHandel_ksefh_IdFaktury");

            entity.Property(e => e.KsefhId)
                .ValueGeneratedNever()
                .HasColumnName("ksefh_Id");
            entity.Property(e => e.KsefhIdDokumentu).HasColumnName("ksefh_IdDokumentu");
            entity.Property(e => e.KsefhIdFaktury).HasColumnName("ksefh_IdFaktury");
            entity.Property(e => e.KsefhMagId).HasColumnName("ksefh_MagId");

            entity.HasOne(d => d.KsefhIdDokumentuNavigation).WithMany(p => p.KsefFakturyHandels)
                .HasForeignKey(d => d.KsefhIdDokumentu)
                .HasConstraintName("FK_ksef_FakturyHandel_ksefh_IdDokumentu");

            entity.HasOne(d => d.KsefhIdFakturyNavigation).WithMany(p => p.KsefFakturyHandels)
                .HasForeignKey(d => d.KsefhIdFaktury)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ksef_FakturyHandel_ksefh_IdFaktury");

            entity.HasOne(d => d.KsefhMag).WithMany(p => p.KsefFakturyHandels)
                .HasForeignKey(d => d.KsefhMagId)
                .HasConstraintName("FK_ksef_FakturyHandel_ksefh_MagId");
        });

        modelBuilder.Entity<KsefFakturyKsiegowosc>(entity =>
        {
            entity.HasKey(e => e.KsefkId).HasName("PK_ksef_FakturyKsiegowosc_Primary_Key");

            entity.ToTable("ksef_FakturyKsiegowosc");

            entity.HasIndex(e => e.KsefkIdFaktury, "IX_ksef_FakturyKsiegowosc_ksefk_IdFaktury");

            entity.Property(e => e.KsefkId)
                .ValueGeneratedNever()
                .HasColumnName("ksefk_Id");
            entity.Property(e => e.KsefkDataDokumentu)
                .HasColumnType("datetime")
                .HasColumnName("ksefk_DataDokumentu");
            entity.Property(e => e.KsefkDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("ksefk_DataWystawienia");
            entity.Property(e => e.KsefkDataZakonczeniaDostawy)
                .HasColumnType("datetime")
                .HasColumnName("ksefk_DataZakonczeniaDostawy");
            entity.Property(e => e.KsefkIdDokumentuWprowadzonego).HasColumnName("ksefk_IdDokumentuWprowadzonego");
            entity.Property(e => e.KsefkIdFaktury).HasColumnName("ksefk_IdFaktury");
            entity.Property(e => e.KsefkIdGrupaDokumentu).HasColumnName("ksefk_IdGrupaDokumentu");
            entity.Property(e => e.KsefkIdKontrahenta).HasColumnName("ksefk_IdKontrahenta");
            entity.Property(e => e.KsefkIdSchematuImportu).HasColumnName("ksefk_IdSchematuImportu");
            entity.Property(e => e.KsefkKatId).HasColumnName("ksefk_KatId");
            entity.Property(e => e.KsefkMiesiacRozliczeniowy)
                .HasColumnType("datetime")
                .HasColumnName("ksefk_MiesiacRozliczeniowy");
            entity.Property(e => e.KsefkNotatkaKsiegowa)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ksefk_NotatkaKsiegowa");
            entity.Property(e => e.KsefkPrzetworzonoPrzedZmianaFormy).HasColumnName("ksefk_PrzetworzonoPrzedZmianaFormy");
            entity.Property(e => e.KsefkRodzajDokumentuGlownego)
                .HasDefaultValue(1)
                .HasColumnName("ksefk_RodzajDokumentuGlownego");
            entity.Property(e => e.KsefkRodzajDopasowaniaSi).HasColumnName("ksefk_RodzajDopasowaniaSI");
            entity.Property(e => e.KsefkSchematZatwierdzony).HasColumnName("ksefk_SchematZatwierdzony");
            entity.Property(e => e.KsefkTrybWprowadzania)
                .HasDefaultValue(1)
                .HasColumnName("ksefk_TrybWprowadzania");
            entity.Property(e => e.KsefkTypDokumentu).HasColumnName("ksefk_TypDokumentu");
            entity.Property(e => e.KsefkTypDokumentuGlownego).HasColumnName("ksefk_TypDokumentuGlownego");
            entity.Property(e => e.KsefkTypDokumentuPowiazanego).HasColumnName("ksefk_TypDokumentuPowiazanego");
            entity.Property(e => e.KsefkTypDokumentuWprowadzonego).HasColumnName("ksefk_TypDokumentuWprowadzonego");

            entity.HasOne(d => d.KsefkIdFakturyNavigation).WithMany(p => p.KsefFakturyKsiegowoscs)
                .HasForeignKey(d => d.KsefkIdFaktury)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ksef_FakturyKsiegowosc_ksefk_IdFaktury");

            entity.HasOne(d => d.KsefkIdGrupaDokumentuNavigation).WithMany(p => p.KsefFakturyKsiegowoscs)
                .HasForeignKey(d => d.KsefkIdGrupaDokumentu)
                .HasConstraintName("FK_ksef_FakturyKsiegowosc_sl_GrupaDokumentow");

            entity.HasOne(d => d.KsefkIdKontrahentaNavigation).WithMany(p => p.KsefFakturyKsiegowoscs)
                .HasForeignKey(d => d.KsefkIdKontrahenta)
                .HasConstraintName("FK_ksef_FakturyKsiegowosc_kh__Kontrahent");

            entity.HasOne(d => d.KsefkKat).WithMany(p => p.KsefFakturyKsiegowoscs)
                .HasForeignKey(d => d.KsefkKatId)
                .HasConstraintName("FK_ksef_FakturyKsiegowosc_sl_Kategoria");
        });

        modelBuilder.Entity<KsefParametry>(entity =>
        {
            entity.HasKey(e => e.KsefpId);

            entity.ToTable("ksef_Parametry");

            entity.Property(e => e.KsefpId)
                .ValueGeneratedNever()
                .HasColumnName("ksefp_Id");
            entity.Property(e => e.KsefpBezFormyPlatnosciWczytajJako)
                .HasDefaultValue(1)
                .HasColumnName("ksefp_BezFormyPlatnosciWczytajJako");
            entity.Property(e => e.KsefpBezSekcjiPlatnosciWczytajJako)
                .HasDefaultValue(1)
                .HasColumnName("ksefp_BezSekcjiPlatnosciWczytajJako");
            entity.Property(e => e.KsefpBonWczytajJako).HasColumnName("ksefp_BonWczytajJako");
            entity.Property(e => e.KsefpBrakNabywcyZachowanie)
                .HasDefaultValue(1)
                .HasColumnName("ksefp_BrakNabywcyZachowanie");
            entity.Property(e => e.KsefpCzekWczytajJako).HasColumnName("ksefp_CzekWczytajJako");
            entity.Property(e => e.KsefpEksportDodatkoweInfoNaPodstSql).HasColumnName("ksefp_EksportDodatkoweInfoNaPodstSql");
            entity.Property(e => e.KsefpEksportDodatkoweInfoPoprzedzEtykietaPola).HasColumnName("ksefp_EksportDodatkoweInfoPoprzedzEtykietaPola");
            entity.Property(e => e.KsefpEksportDodatkoweInfoSql)
                .HasColumnType("text")
                .HasColumnName("ksefp_EksportDodatkoweInfoSql");
            entity.Property(e => e.KsefpEksportObslugaPolaDodatkoweInformacje).HasColumnName("ksefp_EksportObslugaPolaDodatkoweInformacje");
            entity.Property(e => e.KsefpEtapPrzetwarzaniaNabywca).HasColumnName("ksefp_EtapPrzetwarzaniaNabywca");
            entity.Property(e => e.KsefpEtapPrzetwarzaniaSprzedawca)
                .HasDefaultValue(5)
                .HasColumnName("ksefp_EtapPrzetwarzaniaSprzedawca");
            entity.Property(e => e.KsefpFakturySprzedazoweOd)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_FakturySprzedazoweOd");
            entity.Property(e => e.KsefpFakturySprzedazoweOdOstatnie)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_FakturySprzedazoweOdOstatnie");
            entity.Property(e => e.KsefpFakturySprzedazoweOstatnie)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_FakturySprzedazoweOstatnie");
            entity.Property(e => e.KsefpFormaPlatnosciFakturNiezaplaconych)
                .HasDefaultValue(5)
                .HasColumnName("ksefp_FormaPlatnosciFakturNiezaplaconych");
            entity.Property(e => e.KsefpGenerujPoZapisie).HasColumnName("ksefp_GenerujPoZapisie");
            entity.Property(e => e.KsefpGotowkaWczytajJako)
                .HasDefaultValue(2)
                .HasColumnName("ksefp_GotowkaWczytajJako");
            entity.Property(e => e.KsefpImportNierozpoznanyAsortyment).HasColumnName("ksefp_ImportNierozpoznanyAsortyment");
            entity.Property(e => e.KsefpImportObslugaPolaDodatkoweInformacje)
                .HasDefaultValue(1)
                .HasColumnName("ksefp_ImportObslugaPolaDodatkoweInformacje");
            entity.Property(e => e.KsefpInformacjeOplatnosciach).HasColumnName("ksefp_InformacjeOPlatnosciach");
            entity.Property(e => e.KsefpInnaWczytajJako)
                .HasDefaultValue(1)
                .HasColumnName("ksefp_InnaWczytajJako");
            entity.Property(e => e.KsefpInneFakturyOd)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_InneFakturyOd");
            entity.Property(e => e.KsefpInneFakturyOdOstatnie)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_InneFakturyOdOstatnie");
            entity.Property(e => e.KsefpInneFakturyOstatnie)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_InneFakturyOstatnie");
            entity.Property(e => e.KsefpKartaMapujNaInnaOpis)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("ksefp_KartaMapujNaInnaOpis");
            entity.Property(e => e.KsefpKartaWczytajJako)
                .HasDefaultValue(3)
                .HasColumnName("ksefp_KartaWczytajJako");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejBezFplat)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejBezFPlat");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejBezSekPlat)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejBezSekPlat");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejFplatBon)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejFPlatBon");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejFplatCzek)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejFPlatCzek");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejFplatGotowka)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejFPlatGotowka");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejFplatInna)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejFPlatInna");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejFplatKarta)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejFPlatKarta");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejFplatKredyt)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejFPlatKredyt");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejFplatMobilna)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejFPlatMobilna");
            entity.Property(e => e.KsefpKartaWybranaDlaWczytanejFplatPrzelew)
                .HasDefaultValue(-1)
                .HasColumnName("ksefp_KartaWybranaDlaWczytanejFPlatPrzelew");
            entity.Property(e => e.KsefpKredytMapujNaInnaOpis)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("ksefp_KredytMapujNaInnaOpis");
            entity.Property(e => e.KsefpKredytWczytajJako).HasColumnName("ksefp_KredytWczytajJako");
            entity.Property(e => e.KsefpLogowanie).HasColumnName("ksefp_Logowanie");
            entity.Property(e => e.KsefpLogowaniePoziom).HasColumnName("ksefp_LogowaniePoziom");
            entity.Property(e => e.KsefpMapaJednostekMiar)
                .HasDefaultValue(1)
                .HasColumnName("ksefp_MapaJednostekMiar");
            entity.Property(e => e.KsefpMapaPowiazanTowarowych)
                .HasDefaultValue(1)
                .HasColumnName("ksefp_MapaPowiazanTowarowych");
            entity.Property(e => e.KsefpMobilnaWczytajJako).HasColumnName("ksefp_MobilnaWczytajJako");
            entity.Property(e => e.KsefpMojeFakturyOd)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_MojeFakturyOd");
            entity.Property(e => e.KsefpMojeFakturyOdOstatnie)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_MojeFakturyOdOstatnie");
            entity.Property(e => e.KsefpMojeFakturyOstatnie)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_MojeFakturyOstatnie");
            entity.Property(e => e.KsefpNiezgodneDaneNabywcyZachowanie)
                .HasDefaultValue(1)
                .HasColumnName("ksefp_NiezgodneDaneNabywcyZachowanie");
            entity.Property(e => e.KsefpNumeryPoprzednichFakturZalWuwagach)
                .HasDefaultValue(true)
                .HasColumnName("ksefp_NumeryPoprzednichFakturZalWUwagach");
            entity.Property(e => e.KsefpOdswiezajStatusy).HasColumnName("ksefp_OdswiezajStatusy");
            entity.Property(e => e.KsefpOdswiezanieStatusowInterwal)
                .HasDefaultValue(5)
                .HasColumnName("ksefp_OdswiezanieStatusowInterwal");
            entity.Property(e => e.KsefpOdswiezanieStatusowOstatnie)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_OdswiezanieStatusowOstatnie");
            entity.Property(e => e.KsefpParamEwidId).HasColumnName("ksefp_ParamEwidId");
            entity.Property(e => e.KsefpPlatnoscKartaWysylajJako)
                .HasDefaultValue(2)
                .HasColumnName("ksefp_PlatnoscKartaWysylajJako");
            entity.Property(e => e.KsefpPlatnoscKredytWysylajJako)
                .HasDefaultValue(5)
                .HasColumnName("ksefp_PlatnoscKredytWysylajJako");
            entity.Property(e => e.KsefpPlatnoscPrzelewWysylajJako)
                .HasDefaultValue(6)
                .HasColumnName("ksefp_PlatnoscPrzelewWysylajJako");
            entity.Property(e => e.KsefpPobierajFaktury).HasColumnName("ksefp_PobierajFaktury");
            entity.Property(e => e.KsefpPobierajFakturyPrzyStarcie).HasColumnName("ksefp_PobierajFakturyPrzyStarcie");
            entity.Property(e => e.KsefpPobierajFakturySprzedazowe).HasColumnName("ksefp_PobierajFakturySprzedazowe");
            entity.Property(e => e.KsefpPobierajInneFaktury).HasColumnName("ksefp_PobierajInneFaktury");
            entity.Property(e => e.KsefpPobierajMojeFaktury).HasColumnName("ksefp_PobierajMojeFaktury");
            entity.Property(e => e.KsefpPobierajUpo).HasColumnName("ksefp_PobierajUPO");
            entity.Property(e => e.KsefpPobierajUpointerwal)
                .HasDefaultValue(60)
                .HasColumnName("ksefp_PobierajUPOInterwal");
            entity.Property(e => e.KsefpPobierajUpoostatnie)
                .HasColumnType("datetime")
                .HasColumnName("ksefp_PobierajUPOOstatnie");
            entity.Property(e => e.KsefpPobieranieFakturInterwal)
                .HasDefaultValue(30)
                .HasColumnName("ksefp_PobieranieFakturInterwal");
            entity.Property(e => e.KsefpPobieranieFakturInterwalDlugi)
                .HasDefaultValue(12)
                .HasColumnName("ksefp_PobieranieFakturInterwalDlugi");
            entity.Property(e => e.KsefpPozycjeZeFakturZalWczytajJako).HasColumnName("ksefp_PozycjeZeFakturZalWczytajJako");
            entity.Property(e => e.KsefpPrzelewMapujNaInnaOpis)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("ksefp_PrzelewMapujNaInnaOpis");
            entity.Property(e => e.KsefpPrzelewWczytajJako)
                .HasDefaultValue(4)
                .HasColumnName("ksefp_PrzelewWczytajJako");
            entity.Property(e => e.KsefpSprawdzajPrzedZapisem).HasColumnName("ksefp_SprawdzajPrzedZapisem");
            entity.Property(e => e.KsefpSrodowisko).HasColumnName("ksefp_Srodowisko");
            entity.Property(e => e.KsefpTrybWysylki).HasColumnName("ksefp_TrybWysylki");
            entity.Property(e => e.KsefpUstawiajPodtytulDokJakoFakturaKorekta)
                .HasDefaultValue(true)
                .HasColumnName("ksefp_UstawiajPodtytulDokJakoFakturaKorekta");
            entity.Property(e => e.KsefpVatDlaFakturVatMarza).HasColumnName("ksefp_VatDlaFakturVatMarza");
            entity.Property(e => e.KsefpWybranyMagazyn).HasColumnName("ksefp_WybranyMagazyn");
            entity.Property(e => e.KsefpWysylkaPoZapisie).HasColumnName("ksefp_WysylkaPoZapisie");
            entity.Property(e => e.KsefpZapisujDokumentyWbazie)
                .HasDefaultValue(true)
                .HasColumnName("ksefp_ZapisujDokumentyWBazie");

            entity.HasOne(d => d.KsefpParamEwid).WithMany(p => p.KsefParametries)
                .HasForeignKey(d => d.KsefpParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ksef_Parametry_par__Ewid");

            entity.HasOne(d => d.KsefpWybranyMagazynNavigation).WithMany(p => p.KsefParametries)
                .HasForeignKey(d => d.KsefpWybranyMagazyn)
                .HasConstraintName("FK_ksef_Parametry_ksefp_WybranyMagazyn");
        });

        modelBuilder.Entity<KsefParametryAlgorytmyMapowaniaTw>(entity =>
        {
            entity.HasKey(e => e.KsefmtwId);

            entity.ToTable("ksef_ParametryAlgorytmyMapowaniaTw");

            entity.Property(e => e.KsefmtwId)
                .ValueGeneratedNever()
                .HasColumnName("ksefmtw_Id");
            entity.Property(e => e.KsefmtwAktywny).HasColumnName("ksefmtw_Aktywny");
            entity.Property(e => e.KsefmtwAlgorytm).HasColumnName("ksefmtw_Algorytm");
            entity.Property(e => e.KsefmtwKolejnosc).HasColumnName("ksefmtw_Kolejnosc");
            entity.Property(e => e.KsefmtwParamEwidId).HasColumnName("ksefmtw_ParamEwidId");
            entity.Property(e => e.KsefmtwParametryId).HasColumnName("ksefmtw_ParametryId");

            entity.HasOne(d => d.KsefmtwParamEwid).WithMany(p => p.KsefParametryAlgorytmyMapowaniaTws)
                .HasForeignKey(d => d.KsefmtwParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ksef_ParametryAlgorytmyMapowaniaTw_par__Ewid");
        });

        modelBuilder.Entity<KsefPliki>(entity =>
        {
            entity.HasKey(e => e.KsefxId);

            entity.ToTable("ksef_Pliki");

            entity.Property(e => e.KsefxId)
                .ValueGeneratedNever()
                .HasColumnName("ksefx_Id");
            entity.Property(e => e.KsefxHash)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("ksefx_Hash");
            entity.Property(e => e.KsefxXml).HasColumnName("ksefx_XML");
        });

        modelBuilder.Entity<KsefSesja>(entity =>
        {
            entity.HasKey(e => e.KsefsId).HasName("PK__ksef_Sesja");

            entity.ToTable("ksef_Sesja");

            entity.Property(e => e.KsefsId)
                .ValueGeneratedNever()
                .HasColumnName("ksefs_Id");
            entity.Property(e => e.KsefsDataUtworzenia)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ksefs_DataUtworzenia");
            entity.Property(e => e.KsefsSessionId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("ksefs_SessionId");
            entity.Property(e => e.KsefsSessionToken)
                .HasColumnType("image")
                .HasColumnName("ksefs_SessionToken");
            entity.Property(e => e.KsefsSrodowisko).HasColumnName("ksefs_Srodowisko");
            entity.Property(e => e.KsefsUpostatus).HasColumnName("ksefs_UPOStatus");
            entity.Property(e => e.KsefsUzytkId).HasColumnName("ksefs_UzytkId");
        });

        modelBuilder.Entity<KsefUpo>(entity =>
        {
            entity.HasKey(e => e.KsefuId).HasName("PK_ksef_UPO_ksefu_Id");

            entity.ToTable("ksef_UPO");

            entity.Property(e => e.KsefuId)
                .ValueGeneratedNever()
                .HasColumnName("ksefu_Id");
            entity.Property(e => e.KsefuDataPobrania)
                .HasColumnType("datetime")
                .HasColumnName("ksefu_DataPobrania");
            entity.Property(e => e.KsefuSesjaId).HasColumnName("ksefu_SesjaId");
            entity.Property(e => e.KsefuUpo)
                .HasColumnType("text")
                .HasColumnName("ksefu_UPO");

            entity.HasOne(d => d.KsefuSesja).WithMany(p => p.KsefUpos)
                .HasForeignKey(d => d.KsefuSesjaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ksef_UPO_ksef_Sesja");
        });

        modelBuilder.Entity<KwKartum>(entity =>
        {
            entity.HasKey(e => e.KkwId);

            entity.ToTable("kw__Karta");

            entity.Property(e => e.KkwId)
                .ValueGeneratedNever()
                .HasColumnName("kkw_Id");
            entity.Property(e => e.KkwIdPracownika).HasColumnName("kkw_IdPracownika");
            entity.Property(e => e.KkwMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("kkw_Miesiac");

            entity.HasOne(d => d.KkwIdPracownikaNavigation).WithMany(p => p.KwKarta)
                .HasForeignKey(d => d.KkwIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kw__Karta_pr_Pracownik");
        });

        modelBuilder.Entity<KwParametr>(entity =>
        {
            entity.HasKey(e => e.KwprId);

            entity.ToTable("kw_Parametr");

            entity.Property(e => e.KwprId)
                .ValueGeneratedNever()
                .HasColumnName("kwpr_Id");
            entity.Property(e => e.KwprBruttoDuze).HasColumnName("kwpr_BruttoDuze");
            entity.Property(e => e.KwprBruttoMale).HasColumnName("kwpr_BruttoMale");
            entity.Property(e => e.KwprDoWyplatyGotowka).HasColumnName("kwpr_DoWyplatyGotowka");
            entity.Property(e => e.KwprDoWyplatyPrzelewem).HasColumnName("kwpr_DoWyplatyPrzelewem");
            entity.Property(e => e.KwprDoWyplatyRazem).HasColumnName("kwpr_DoWyplatyRazem");
            entity.Property(e => e.KwprDodatkiNieopodatkowane).HasColumnName("kwpr_DodatkiNieopodatkowane");
            entity.Property(e => e.KwprFep).HasColumnName("kwpr_FEP");
            entity.Property(e => e.KwprFgsp).HasColumnName("kwpr_FGSP");
            entity.Property(e => e.KwprFormat1).HasColumnName("kwpr_Format1");
            entity.Property(e => e.KwprFormat10).HasColumnName("kwpr_Format10");
            entity.Property(e => e.KwprFormat2).HasColumnName("kwpr_Format2");
            entity.Property(e => e.KwprFormat3).HasColumnName("kwpr_Format3");
            entity.Property(e => e.KwprFormat4).HasColumnName("kwpr_Format4");
            entity.Property(e => e.KwprFormat5).HasColumnName("kwpr_Format5");
            entity.Property(e => e.KwprFormat6).HasColumnName("kwpr_Format6");
            entity.Property(e => e.KwprFormat7).HasColumnName("kwpr_Format7");
            entity.Property(e => e.KwprFormat8).HasColumnName("kwpr_Format8");
            entity.Property(e => e.KwprFormat9).HasColumnName("kwpr_Format9");
            entity.Property(e => e.KwprFp).HasColumnName("kwpr_FP");
            entity.Property(e => e.KwprKupryczaltowe).HasColumnName("kwpr_KUPRyczaltowe");
            entity.Property(e => e.KwprKupskladniki).HasColumnName("kwpr_KUPSkladniki");
            entity.Property(e => e.KwprNazwa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa1");
            entity.Property(e => e.KwprNazwa10)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa10");
            entity.Property(e => e.KwprNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa2");
            entity.Property(e => e.KwprNazwa3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa3");
            entity.Property(e => e.KwprNazwa4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa4");
            entity.Property(e => e.KwprNazwa5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa5");
            entity.Property(e => e.KwprNazwa6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa6");
            entity.Property(e => e.KwprNazwa7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa7");
            entity.Property(e => e.KwprNazwa8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa8");
            entity.Property(e => e.KwprNazwa9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwpr_Nazwa9");
            entity.Property(e => e.KwprNetto).HasColumnName("kwpr_Netto");
            entity.Property(e => e.KwprPodatekNaliczony).HasColumnName("kwpr_PodatekNaliczony");
            entity.Property(e => e.KwprPotraceniaNieopodatkowane).HasColumnName("kwpr_PotraceniaNieopodatkowane");
            entity.Property(e => e.KwprSklChorobowa).HasColumnName("kwpr_SklChorobowa");
            entity.Property(e => e.KwprSklEmFirmy).HasColumnName("kwpr_SklEmFirmy");
            entity.Property(e => e.KwprSklEmPracIfilar).HasColumnName("kwpr_SklEmPracIFilar");
            entity.Property(e => e.KwprSklEmPracIifilar).HasColumnName("kwpr_SklEmPracIIFilar");
            entity.Property(e => e.KwprSklFirmaRazem).HasColumnName("kwpr_SklFirmaRazem");
            entity.Property(e => e.KwprSklPracRazem).HasColumnName("kwpr_SklPracRazem");
            entity.Property(e => e.KwprSklRentFirmy).HasColumnName("kwpr_SklRentFirmy");
            entity.Property(e => e.KwprSklRentPrac).HasColumnName("kwpr_SklRentPrac");
            entity.Property(e => e.KwprSklWypadkowa).HasColumnName("kwpr_SklWypadkowa");
            entity.Property(e => e.KwprSklZdrNieodliczana).HasColumnName("kwpr_SklZdrNieodliczana");
            entity.Property(e => e.KwprSklZdrOdliczana).HasColumnName("kwpr_SklZdrOdliczana");
            entity.Property(e => e.KwprSklZdrowotneRazem).HasColumnName("kwpr_SklZdrowotneRazem");
            entity.Property(e => e.KwprSklZuspoOdlZasilkow).HasColumnName("kwpr_SklZUSPoOdlZasilkow");
            entity.Property(e => e.KwprSkladkiZusrazem).HasColumnName("kwpr_SkladkiZUSRazem");
            entity.Property(e => e.KwprZaliczkaNaPodatek).HasColumnName("kwpr_ZaliczkaNaPodatek");
            entity.Property(e => e.KwprZasilkiZusnieopodatkowane).HasColumnName("kwpr_ZasilkiZUSNieopodatkowane");
            entity.Property(e => e.KwprZasilkiZusopodatkowane).HasColumnName("kwpr_ZasilkiZUSOpodatkowane");
            entity.Property(e => e.KwprZasilkiZusrazem).HasColumnName("kwpr_ZasilkiZUSRazem");
            entity.Property(e => e.KwprZdrowotneZusrazem).HasColumnName("kwpr_ZdrowotneZUSRazem");
        });

        modelBuilder.Entity<KwPozycja>(entity =>
        {
            entity.HasKey(e => e.KkwpId);

            entity.ToTable("kw_Pozycja");

            entity.Property(e => e.KkwpId)
                .ValueGeneratedNever()
                .HasColumnName("kkwp_Id");
            entity.Property(e => e.KkwpIdKarty).HasColumnName("kkwp_IdKarty");
            entity.Property(e => e.KkwpMpk).HasColumnName("kkwp_MPK");
            entity.Property(e => e.KkwpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kkwp_Opis");
            entity.Property(e => e.KkwpWsp1)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp1");
            entity.Property(e => e.KkwpWsp10)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp10");
            entity.Property(e => e.KkwpWsp2)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp2");
            entity.Property(e => e.KkwpWsp3)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp3");
            entity.Property(e => e.KkwpWsp4)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp4");
            entity.Property(e => e.KkwpWsp5)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp5");
            entity.Property(e => e.KkwpWsp6)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp6");
            entity.Property(e => e.KkwpWsp7)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp7");
            entity.Property(e => e.KkwpWsp8)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp8");
            entity.Property(e => e.KkwpWsp9)
                .HasColumnType("money")
                .HasColumnName("kkwp_Wsp9");
            entity.Property(e => e.KkwpZlecenie).HasColumnName("kkwp_Zlecenie");

            entity.HasOne(d => d.KkwpIdKartyNavigation).WithMany(p => p.KwPozycjas)
                .HasForeignKey(d => d.KkwpIdKarty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_kw_Pozycja_kw__Karta");

            entity.HasOne(d => d.KkwpMpkNavigation).WithMany(p => p.KwPozycjas)
                .HasForeignKey(d => d.KkwpMpk)
                .HasConstraintName("FK_kw_Pozycja_st_MPK");

            entity.HasOne(d => d.KkwpZlecenieNavigation).WithMany(p => p.KwPozycjas)
                .HasForeignKey(d => d.KkwpZlecenie)
                .HasConstraintName("FK_kw_Pozycja_zlp__Zlecenie");
        });

        modelBuilder.Entity<LabParam>(entity =>
        {
            entity.HasKey(e => e.PlabId);

            entity.ToTable("lab_Params");

            entity.Property(e => e.PlabId)
                .ValueGeneratedNever()
                .HasColumnName("plab_Id");
            entity.Property(e => e.PlabDokumentyPlus).HasColumnName("plab_DokumentyPlus");
            entity.Property(e => e.PlabInsAidokPlus).HasColumnName("plab_InsAIDokPlus");
            entity.Property(e => e.PlabKseF).HasColumnName("plab_KSeF");
            entity.Property(e => e.PlabPortalBiuraDokOcr).HasColumnName("plab_PortalBiuraDokOCR");
            entity.Property(e => e.PlabPortalBiuraDokument).HasColumnName("plab_PortalBiuraDokument");
            entity.Property(e => e.PlabPortalBiuraPrzeslijPliki).HasColumnName("plab_PortalBiuraPrzeslijPliki");
            entity.Property(e => e.PlabPortalBiuraRaport).HasColumnName("plab_PortalBiuraRaport");
            entity.Property(e => e.PlabRegulamin).HasColumnName("plab_Regulamin");
            entity.Property(e => e.PlabRoczneNaliczanieSklZdr).HasColumnName("plab_RoczneNaliczanieSklZdr");
            entity.Property(e => e.PlabSchematyImportuDfpb).HasColumnName("plab_SchematyImportuDFPB");
            entity.Property(e => e.PlabSchematyImportuKseF).HasColumnName("plab_SchematyImportuKSeF");
            entity.Property(e => e.PlabSesjeKasowe).HasColumnName("plab_SesjeKasowe");
            entity.Property(e => e.PlabWydrukiNiefiskalne).HasColumnName("plab_WydrukiNiefiskalne");
        });

        modelBuilder.Entity<LenTwTowar>(entity =>
        {
            entity.HasKey(e => e.TableKey).HasName("PK_InsSearch_len_tw__Towar");

            entity.ToTable("len_tw__Towar", "InsSearch", tb =>
                {
                    tb.HasTrigger("TRD_InsSearch_len_tw__Towar");
                    tb.HasTrigger("TRI_InsSearch_len_tw__Towar");
                    tb.HasTrigger("TRU_InsSearch_len_tw__Towar");
                });

            entity.Property(e => e.TableKey).ValueGeneratedNever();
            entity.Property(e => e.Dl).HasColumnName("DL");

            entity.HasOne(d => d.TableKeyNavigation).WithOne(p => p.LenTwTowar)
                .HasForeignKey<LenTwTowar>(d => d.TableKey)
                .HasConstraintName("FK_InsSearch_len_tw__Towar_TableKey");
        });

        modelBuilder.Entity<LogLogowanie>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("log_Logowanie");

            entity.Property(e => e.LogId).HasColumnName("log_Id");
            entity.Property(e => e.LogData)
                .HasColumnType("datetime")
                .HasColumnName("log_Data");
            entity.Property(e => e.LogInformacje)
                .HasColumnType("text")
                .HasColumnName("log_Informacje");
            entity.Property(e => e.LogObiektId).HasColumnName("log_ObiektId");
            entity.Property(e => e.LogObiektTyp).HasColumnName("log_ObiektTyp");
            entity.Property(e => e.LogObiektTypEx).HasColumnName("log_ObiektTypEx");
            entity.Property(e => e.LogProcesId).HasColumnName("log_ProcesId");
            entity.Property(e => e.LogRodzaj).HasColumnName("log_Rodzaj");
            entity.Property(e => e.LogStanowisko)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("log_Stanowisko");
            entity.Property(e => e.LogUzytkownikId).HasColumnName("log_UzytkownikId");
            entity.Property(e => e.LogUzytkownikIdentyfikator)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("log_UzytkownikIdentyfikator");
            entity.Property(e => e.LogWatekId).HasColumnName("log_WatekId");
            entity.Property(e => e.LogZrodlo).HasColumnName("log_Zrodlo");
        });

        modelBuilder.Entity<LogOdrzLicencje>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("log_OdrzLicencje");

            entity.Property(e => e.LsBlocked).HasColumnName("ls_blocked");
            entity.Property(e => e.LsCmd)
                .HasMaxLength(16)
                .HasColumnName("ls_cmd");
            entity.Property(e => e.LsContextInfo)
                .HasMaxLength(128)
                .IsFixedLength()
                .HasColumnName("ls_context_info");
            entity.Property(e => e.LsCpu).HasColumnName("ls_cpu");
            entity.Property(e => e.LsDate)
                .HasColumnType("datetime")
                .HasColumnName("ls_Date");
            entity.Property(e => e.LsDbid).HasColumnName("ls_dbid");
            entity.Property(e => e.LsEcid).HasColumnName("ls_ecid");
            entity.Property(e => e.LsHostname)
                .HasMaxLength(128)
                .HasColumnName("ls_hostname");
            entity.Property(e => e.LsHostprocess)
                .HasMaxLength(10)
                .HasColumnName("ls_hostprocess");
            entity.Property(e => e.LsKpid).HasColumnName("ls_kpid");
            entity.Property(e => e.LsLastBatch)
                .HasColumnType("datetime")
                .HasColumnName("ls_last_batch");
            entity.Property(e => e.LsLastwaittype)
                .HasMaxLength(32)
                .HasColumnName("ls_lastwaittype");
            entity.Property(e => e.LsLoginTime)
                .HasColumnType("datetime")
                .HasColumnName("ls_login_time");
            entity.Property(e => e.LsLoginame)
                .HasMaxLength(128)
                .HasColumnName("ls_loginame");
            entity.Property(e => e.LsMemusage).HasColumnName("ls_memusage");
            entity.Property(e => e.LsNetAddress)
                .HasMaxLength(12)
                .HasColumnName("ls_net_address");
            entity.Property(e => e.LsNetLibrary)
                .HasMaxLength(12)
                .HasColumnName("ls_net_library");
            entity.Property(e => e.LsNtDomain)
                .HasMaxLength(128)
                .HasColumnName("ls_nt_domain");
            entity.Property(e => e.LsNtUsername)
                .HasMaxLength(128)
                .HasColumnName("ls_nt_username");
            entity.Property(e => e.LsOpenTran).HasColumnName("ls_open_tran");
            entity.Property(e => e.LsPhysicalIo).HasColumnName("ls_physical_io");
            entity.Property(e => e.LsProgramName)
                .HasMaxLength(128)
                .HasColumnName("ls_program_name");
            entity.Property(e => e.LsSid)
                .HasMaxLength(86)
                .IsFixedLength()
                .HasColumnName("ls_sid");
            entity.Property(e => e.LsSpid).HasColumnName("ls_spid");
            entity.Property(e => e.LsSqlHandle)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ls_sql_handle");
            entity.Property(e => e.LsStatus)
                .HasMaxLength(30)
                .HasColumnName("ls_status");
            entity.Property(e => e.LsStmtEnd).HasColumnName("ls_stmt_end");
            entity.Property(e => e.LsStmtStart).HasColumnName("ls_stmt_start");
            entity.Property(e => e.LsUid).HasColumnName("ls_uid");
            entity.Property(e => e.LsUserHost)
                .HasMaxLength(128)
                .HasColumnName("ls_UserHost");
            entity.Property(e => e.LsUserId).HasColumnName("ls_UserId");
            entity.Property(e => e.LsWaitresource)
                .HasMaxLength(256)
                .HasColumnName("ls_waitresource");
            entity.Property(e => e.LsWaittime).HasColumnName("ls_waittime");
            entity.Property(e => e.LsWaittype)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ls_waittype");
        });

        modelBuilder.Entity<LspLinkDoSzybkiejPlatnosci>(entity =>
        {
            entity.HasKey(e => e.LspId);

            entity.ToTable("lsp__LinkDoSzybkiejPlatnosci");

            entity.Property(e => e.LspId)
                .ValueGeneratedNever()
                .HasColumnName("lsp_Id");
            entity.Property(e => e.LspDataZaplaty)
                .HasColumnType("datetime")
                .HasColumnName("lsp_DataZaplaty");
            entity.Property(e => e.LspIdApi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("lsp_IdAPI");
            entity.Property(e => e.LspIdCesji).HasColumnName("lsp_IdCesji");
            entity.Property(e => e.LspIdDokumentu).HasColumnName("lsp_IdDokumentu");
            entity.Property(e => e.LspIdKonfiguracjiSp).HasColumnName("lsp_IdKonfiguracjiSP");
            entity.Property(e => e.LspIdKontrahenta).HasColumnName("lsp_IdKontrahenta");
            entity.Property(e => e.LspIdPlatnosci)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("lsp_IdPlatnosci");
            entity.Property(e => e.LspKwota)
                .HasColumnType("money")
                .HasColumnName("lsp_Kwota");
            entity.Property(e => e.LspLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("lsp_Link");
            entity.Property(e => e.LspNumerDokumentu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lsp_NumerDokumentu");
            entity.Property(e => e.LspStatus).HasColumnName("lsp_Status");

            entity.HasOne(d => d.LspIdCesjiNavigation).WithMany(p => p.LspLinkDoSzybkiejPlatnoscis)
                .HasForeignKey(d => d.LspIdCesji)
                .HasConstraintName("FK_lsp__LinkDoSzybkiejPlatnosci_nz_Cesja");

            entity.HasOne(d => d.LspIdDokumentuNavigation).WithMany(p => p.LspLinkDoSzybkiejPlatnoscis)
                .HasForeignKey(d => d.LspIdDokumentu)
                .HasConstraintName("FK_lsp__LinkDoSzybkiejPlatnosci_dok__Dokument");

            entity.HasOne(d => d.LspIdKonfiguracjiSpNavigation).WithMany(p => p.LspLinkDoSzybkiejPlatnoscis)
                .HasForeignKey(d => d.LspIdKonfiguracjiSp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_lsp__LinkDoSzybkiejPlatnosci_sl_SzybkiePlatnosci");

            entity.HasOne(d => d.LspIdKontrahentaNavigation).WithMany(p => p.LspLinkDoSzybkiejPlatnoscis)
                .HasForeignKey(d => d.LspIdKontrahenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_lsp__LinkDoSzybkiejPlatnosci_kh__Kontrahent");
        });

        modelBuilder.Entity<MiKhPomijany>(entity =>
        {
            entity.HasKey(e => e.MikpId).HasName("PK__mi_KhPomijany");

            entity.ToTable("mi_KhPomijany");

            entity.Property(e => e.MikpId)
                .ValueGeneratedNever()
                .HasColumnName("mikp_Id");
            entity.Property(e => e.MikpIdKontrahent).HasColumnName("mikp_IdKontrahent");
            entity.Property(e => e.MikpIdParametr).HasColumnName("mikp_IdParametr");

            entity.HasOne(d => d.MikpIdKontrahentNavigation).WithMany(p => p.MiKhPomijanies)
                .HasForeignKey(d => d.MikpIdKontrahent)
                .HasConstraintName("FK__mi_KhPomijany_kh__Kontrahent");

            entity.HasOne(d => d.MikpIdParametrNavigation).WithMany(p => p.MiKhPomijanies)
                .HasForeignKey(d => d.MikpIdParametr)
                .HasConstraintName("FK__mi_KhPomijany_mi_SprzedazParametr");
        });

        modelBuilder.Entity<MiMapaAsortyment>(entity =>
        {
            entity.HasKey(e => e.MimId).HasName("PK__mi_MapaAsortyment");

            entity.ToTable("mi_MapaAsortyment");

            entity.Property(e => e.MimId)
                .ValueGeneratedNever()
                .HasColumnName("mim_Id");
            entity.Property(e => e.MimCenaNetto)
                .HasColumnType("money")
                .HasColumnName("mim_CenaNetto");
            entity.Property(e => e.MimIdParametru).HasColumnName("mim_IdParametru");
            entity.Property(e => e.MimIdProduktu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mim_IdProduktu");
            entity.Property(e => e.MimIdTowaru).HasColumnName("mim_IdTowaru");
            entity.Property(e => e.MimIdTowaruPromocyjnego)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("mim_IdTowaruPromocyjnego");
            entity.Property(e => e.MimOpisProduktu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mim_OpisProduktu");

            entity.HasOne(d => d.MimIdParametruNavigation).WithMany(p => p.MiMapaAsortyments)
                .HasForeignKey(d => d.MimIdParametru)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__mi_MapaAsortyment_mi_SprzedazParametr");

            entity.HasOne(d => d.MimIdTowaruNavigation).WithMany(p => p.MiMapaAsortymentMimIdTowaruNavigations)
                .HasForeignKey(d => d.MimIdTowaru)
                .HasConstraintName("FK__mi_MapaAsortyment_tw__Towar");

            entity.HasOne(d => d.MimIdTowaruPromocyjnegoNavigation).WithMany(p => p.MiMapaAsortymentMimIdTowaruPromocyjnegoNavigations)
                .HasForeignKey(d => d.MimIdTowaruPromocyjnego)
                .HasConstraintName("FK__mi_MapaAsortyment_tw__Towar_Promocyjny");
        });

        modelBuilder.Entity<MiSprzedaz>(entity =>
        {
            entity.HasKey(e => e.MisId).HasName("PK__mi_Sprzedaz");

            entity.ToTable("mi_Sprzedaz");

            entity.Property(e => e.MisId)
                .ValueGeneratedNever()
                .HasColumnName("mis_Id");
            entity.Property(e => e.MisDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataModyfikacji");
            entity.Property(e => e.MisDataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataPlatnosci");
            entity.Property(e => e.MisDataPobrania)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataPobrania");
            entity.Property(e => e.MisDataRozdzielenia)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataRozdzielenia");
            entity.Property(e => e.MisDataUtworzenia)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataUtworzenia");
            entity.Property(e => e.MisDokIdMaila).HasColumnName("mis_DokIdMaila");
            entity.Property(e => e.MisDokIdPowiazania).HasColumnName("mis_DokIdPowiazania");
            entity.Property(e => e.MisDokPapierowyIdAdresu).HasColumnName("mis_DokPapierowyIdAdresu");
            entity.Property(e => e.MisDokPrzyjeciaIdPowiazania).HasColumnName("mis_DokPrzyjeciaIdPowiazania");
            entity.Property(e => e.MisIdPartnera).HasColumnName("mis_IdPartnera");
            entity.Property(e => e.MisIdPlatnosci)
                .HasMaxLength(128)
                .HasColumnName("mis_IdPlatnosci");
            entity.Property(e => e.MisIdZamowienia).HasColumnName("mis_IdZamowienia");
            entity.Property(e => e.MisKhEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mis_KhEmail");
            entity.Property(e => e.MisKhIdAdresu).HasColumnName("mis_KhIdAdresu");
            entity.Property(e => e.MisKhIdPowiazania).HasColumnName("mis_KhIdPowiazania");
            entity.Property(e => e.MisKhIdentyfikator)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mis_KhIdentyfikator");
            entity.Property(e => e.MisKhTypIdentyfikatora)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mis_KhTypIdentyfikatora");
            entity.Property(e => e.MisOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mis_Opis");
            entity.Property(e => e.MisStatusKontrahenta).HasColumnName("mis_StatusKontrahenta");
            entity.Property(e => e.MisStatusMapowania).HasColumnName("mis_StatusMapowania");
            entity.Property(e => e.MisStatusObsluzeniaSerwisu).HasColumnName("mis_StatusObsluzeniaSerwisu");
            entity.Property(e => e.MisStatusPrzetworzenia).HasColumnName("mis_StatusPrzetworzenia");
            entity.Property(e => e.MisWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("mis_WartoscBrutto");
            entity.Property(e => e.MisWersjaPobrania)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("mis_WersjaPobrania");

            entity.HasOne(d => d.MisDokPapierowyIdAdresuNavigation).WithMany(p => p.MiSprzedazMisDokPapierowyIdAdresuNavigations)
                .HasForeignKey(d => d.MisDokPapierowyIdAdresu)
                .HasConstraintName("FK__mi_Sprzedaz_mi_SprzedazAdres_Dok");

            entity.HasOne(d => d.MisKhIdAdresuNavigation).WithMany(p => p.MiSprzedazMisKhIdAdresuNavigations)
                .HasForeignKey(d => d.MisKhIdAdresu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__mi_Sprzedaz_mi_SprzedazAdres");

            entity.HasOne(d => d.MisKhIdPowiazaniaNavigation).WithMany(p => p.MiSprzedazs)
                .HasForeignKey(d => d.MisKhIdPowiazania)
                .HasConstraintName("FK__mi_Sprzedaz_kh__Kontrahent");
        });

        modelBuilder.Entity<MiSprzedazAdre>(entity =>
        {
            entity.HasKey(e => e.MiaId).HasName("PK__mi_SprzedazAdres");

            entity.ToTable("mi_SprzedazAdres");

            entity.Property(e => e.MiaId)
                .ValueGeneratedNever()
                .HasColumnName("mia_Id");
            entity.Property(e => e.MiaKodPocztowy)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("mia_KodPocztowy");
            entity.Property(e => e.MiaMiejscowosc)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mia_Miejscowosc");
            entity.Property(e => e.MiaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mia_Nazwa");
            entity.Property(e => e.MiaPanstwo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mia_Panstwo");
            entity.Property(e => e.MiaUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("mia_Ulica");
        });

        modelBuilder.Entity<MiSprzedazParametr>(entity =>
        {
            entity.HasKey(e => e.MispId).HasName("PK__mi_SprzedazParametr");

            entity.ToTable("mi_SprzedazParametr");

            entity.Property(e => e.MispId)
                .ValueGeneratedNever()
                .HasColumnName("misp_Id");
            entity.Property(e => e.MispAutoPobieranie).HasColumnName("misp_AutoPobieranie");
            entity.Property(e => e.MispAutoPobieranieCzest).HasColumnName("misp_AutoPobieranieCzest");
            entity.Property(e => e.MispIdDostawcyPrzyjecia).HasColumnName("misp_IdDostawcyPrzyjecia");
            entity.Property(e => e.MispIdKarta).HasColumnName("misp_IdKarta");
            entity.Property(e => e.MispIdKatDokPrzyjecia).HasColumnName("misp_IdKatDokPrzyjecia");
            entity.Property(e => e.MispIdKatDokSprzedazy).HasColumnName("misp_IdKatDokSprzedazy");
            entity.Property(e => e.MispIdKredyt).HasColumnName("misp_IdKredyt");
            entity.Property(e => e.MispIdMagazynZrodlowy).HasColumnName("misp_IdMagazynZrodlowy");
            entity.Property(e => e.MispIdTerminKredytu).HasColumnName("misp_IdTerminKredytu");
            entity.Property(e => e.MispNieznaneJakoUj).HasColumnName("misp_NieznaneJakoUJ");
            entity.Property(e => e.MispTrybDopasowaniaKh).HasColumnName("misp_TrybDopasowaniaKh");
            entity.Property(e => e.MispTrybPlatnosci).HasColumnName("misp_TrybPlatnosci");
            entity.Property(e => e.MispTworzDokPrzyjecia)
                .HasDefaultValue(false)
                .HasColumnName("misp_TworzDokPrzyjecia");
            entity.Property(e => e.MispTworzKh).HasColumnName("misp_TworzKh");

            entity.HasOne(d => d.MispIdDostawcyPrzyjeciaNavigation).WithMany(p => p.MiSprzedazParametrs)
                .HasForeignKey(d => d.MispIdDostawcyPrzyjecia)
                .HasConstraintName("FK__mi_SprzedazParametr_kh__Kontrahent");

            entity.HasOne(d => d.MispIdKatDokPrzyjeciaNavigation).WithMany(p => p.MiSprzedazParametrMispIdKatDokPrzyjeciaNavigations)
                .HasForeignKey(d => d.MispIdKatDokPrzyjecia)
                .HasConstraintName("FK__mi_SprzedazParametr_sl_Kategoria_DokPrzyjecia");

            entity.HasOne(d => d.MispIdKatDokSprzedazyNavigation).WithMany(p => p.MiSprzedazParametrMispIdKatDokSprzedazyNavigations)
                .HasForeignKey(d => d.MispIdKatDokSprzedazy)
                .HasConstraintName("FK__mi_SprzedazParametr_sl_Kategoria_DokSprzedazy");

            entity.HasOne(d => d.MispIdMagazynZrodlowyNavigation).WithMany(p => p.MiSprzedazParametrs)
                .HasForeignKey(d => d.MispIdMagazynZrodlowy)
                .HasConstraintName("FK__mi_SprzedazParametr_sl_Magazyn");
        });

        modelBuilder.Entity<MiSprzedazPozycja>(entity =>
        {
            entity.HasKey(e => e.MipId).HasName("PK__mi_SprzedazPozycja");

            entity.ToTable("mi_SprzedazPozycja");

            entity.Property(e => e.MipId)
                .ValueGeneratedNever()
                .HasColumnName("mip_Id");
            entity.Property(e => e.MipCenaNetto)
                .HasColumnType("money")
                .HasColumnName("mip_CenaNetto");
            entity.Property(e => e.MipCenaNettoPartnera)
                .HasColumnType("money")
                .HasColumnName("mip_CenaNettoPartnera");
            entity.Property(e => e.MipCzyCenaPromocyjna)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("mip_CzyCenaPromocyjna");
            entity.Property(e => e.MipIdProduktu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mip_IdProduktu");
            entity.Property(e => e.MipIdSprzedazy).HasColumnName("mip_IdSprzedazy");
            entity.Property(e => e.MipIloscJednostek)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("mip_IloscJednostek");
            entity.Property(e => e.MipKodLicencji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mip_KodLicencji");
            entity.Property(e => e.MipOpisProduktu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mip_OpisProduktu");
            entity.Property(e => e.MipTypJednostek)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("mip_TypJednostek");

            entity.HasOne(d => d.MipIdSprzedazyNavigation).WithMany(p => p.MiSprzedazPozycjas)
                .HasForeignKey(d => d.MipIdSprzedazy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__mi_SprzedazPozycja_mi_Sprzedaz");
        });

        modelBuilder.Entity<MjMapowanieJednostek>(entity =>
        {
            entity.HasKey(e => e.MjId);

            entity.ToTable("mj_MapowanieJednostek");

            entity.Property(e => e.MjId)
                .ValueGeneratedNever()
                .HasColumnName("mj_Id");
            entity.Property(e => e.MjIdGrupy).HasColumnName("mj_IdGrupy");
            entity.Property(e => e.MjIdJednostki)
                .HasMaxLength(256)
                .HasColumnName("mj_IdJednostki");
        });

        modelBuilder.Entity<MkKorektum>(entity =>
        {
            entity.HasKey(e => e.KmkId);

            entity.ToTable("mk_Korekta");

            entity.Property(e => e.KmkId)
                .ValueGeneratedNever()
                .HasColumnName("kmk_Id");
            entity.Property(e => e.KmkData)
                .HasColumnType("datetime")
                .HasColumnName("kmk_Data");
            entity.Property(e => e.KmkIdKategoria).HasColumnName("kmk_IdKategoria");
            entity.Property(e => e.KmkIdKoszt).HasColumnName("kmk_IdKoszt");
            entity.Property(e => e.KmkKwota)
                .HasColumnType("money")
                .HasColumnName("kmk_Kwota");
            entity.Property(e => e.KmkKwotaPoKorekcie)
                .HasColumnType("money")
                .HasColumnName("kmk_KwotaPoKorekcie");
            entity.Property(e => e.KmkKwotaPrzedKorekta)
                .HasColumnType("money")
                .HasColumnName("kmk_KwotaPrzedKorekta");
            entity.Property(e => e.KmkNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kmk_Numer");
            entity.Property(e => e.KmkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kmk_Opis");
            entity.Property(e => e.KmkStatusKsiegowy).HasColumnName("kmk_StatusKsiegowy");

            entity.HasOne(d => d.KmkIdKategoriaNavigation).WithMany(p => p.MkKorekta)
                .HasForeignKey(d => d.KmkIdKategoria)
                .HasConstraintName("FK_mk_Korekta_sl_Kategoria");

            entity.HasOne(d => d.KmkIdKosztNavigation).WithMany(p => p.MkKorekta)
                .HasForeignKey(d => d.KmkIdKoszt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_mk_Korekta_mk_Koszt");
        });

        modelBuilder.Entity<MkKoszt>(entity =>
        {
            entity.HasKey(e => e.MkId).HasName("PK_rmk_Koszt");

            entity.ToTable("mk_Koszt");

            entity.Property(e => e.MkId)
                .ValueGeneratedNever()
                .HasColumnName("mk_Id");
            entity.Property(e => e.MkData)
                .HasColumnType("datetime")
                .HasColumnName("mk_Data");
            entity.Property(e => e.MkDokZrodlowy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mk_DokZrodlowy");
            entity.Property(e => e.MkIdKategoria).HasColumnName("mk_IdKategoria");
            entity.Property(e => e.MkIdMpk).HasColumnName("mk_IdMPK");
            entity.Property(e => e.MkInterwal)
                .HasDefaultValue(1)
                .HasColumnName("mk_Interwal");
            entity.Property(e => e.MkKwota)
                .HasColumnType("money")
                .HasColumnName("mk_Kwota");
            entity.Property(e => e.MkKwotaDokZrodl)
                .HasColumnType("money")
                .HasColumnName("mk_KwotaDokZrodl");
            entity.Property(e => e.MkKwotaPoKorektach)
                .HasColumnType("money")
                .HasColumnName("mk_KwotaPoKorektach");
            entity.Property(e => e.MkLiczbaRat).HasColumnName("mk_LiczbaRat");
            entity.Property(e => e.MkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mk_Nazwa");
            entity.Property(e => e.MkNrAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mk_NrAnalityka");
            entity.Property(e => e.MkNumer)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mk_Numer");
            entity.Property(e => e.MkOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("mk_OkresDo");
            entity.Property(e => e.MkOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("mk_OkresOd");
            entity.Property(e => e.MkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mk_Opis");
            entity.Property(e => e.MkPlanRozliczenia)
                .HasDefaultValue(true)
                .HasColumnName("mk_PlanRozliczenia");
            entity.Property(e => e.MkStatus).HasColumnName("mk_Status");
            entity.Property(e => e.MkStatusKsiegowy).HasColumnName("mk_StatusKsiegowy");

            entity.HasOne(d => d.MkIdKategoriaNavigation).WithMany(p => p.MkKoszts)
                .HasForeignKey(d => d.MkIdKategoria)
                .HasConstraintName("FK_mk_Koszt_sl_Kategoria");

            entity.HasOne(d => d.MkIdMpkNavigation).WithMany(p => p.MkKoszts)
                .HasForeignKey(d => d.MkIdMpk)
                .HasConstraintName("FK_mk_Koszt_st_MPK");
        });

        modelBuilder.Entity<MkPrzesuniecie>(entity =>
        {
            entity.HasKey(e => e.PmkId).HasName("PK_pmk_Przesuniecie");

            entity.ToTable("mk_Przesuniecie");

            entity.Property(e => e.PmkId)
                .ValueGeneratedNever()
                .HasColumnName("pmk_Id");
            entity.Property(e => e.PmkData)
                .HasColumnType("datetime")
                .HasColumnName("pmk_Data");
            entity.Property(e => e.PmkIdKategoria).HasColumnName("pmk_IdKategoria");
            entity.Property(e => e.PmkIdKoszt).HasColumnName("pmk_IdKoszt");
            entity.Property(e => e.PmkIdMpk).HasColumnName("pmk_IdMPK");
            entity.Property(e => e.PmkNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pmk_Numer");
            entity.Property(e => e.PmkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pmk_Opis");

            entity.HasOne(d => d.PmkIdKategoriaNavigation).WithMany(p => p.MkPrzesuniecies)
                .HasForeignKey(d => d.PmkIdKategoria)
                .HasConstraintName("FK_mk_Przesuniecie_sl_Kategoria");

            entity.HasOne(d => d.PmkIdKosztNavigation).WithMany(p => p.MkPrzesuniecies)
                .HasForeignKey(d => d.PmkIdKoszt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_mk_Przesuniecie_mk_Koszt");

            entity.HasOne(d => d.PmkIdMpkNavigation).WithMany(p => p.MkPrzesuniecies)
                .HasForeignKey(d => d.PmkIdMpk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_mk_Przesuniecie_st_MPK");
        });

        modelBuilder.Entity<MkRatum>(entity =>
        {
            entity.HasKey(e => e.RmkId).HasName("PK_rmk_Rata");

            entity.ToTable("mk_Rata");

            entity.Property(e => e.RmkId)
                .ValueGeneratedNever()
                .HasColumnName("rmk_Id");
            entity.Property(e => e.RmkData)
                .HasColumnType("datetime")
                .HasColumnName("rmk_Data");
            entity.Property(e => e.RmkIdKategoria).HasColumnName("rmk_IdKategoria");
            entity.Property(e => e.RmkIdKoszt).HasColumnName("rmk_IdKoszt");
            entity.Property(e => e.RmkKwota)
                .HasColumnType("money")
                .HasColumnName("rmk_Kwota");
            entity.Property(e => e.RmkNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rmk_Numer");
            entity.Property(e => e.RmkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rmk_Opis");
            entity.Property(e => e.RmkStatusKsiegowy).HasColumnName("rmk_StatusKsiegowy");
            entity.Property(e => e.RmkTyp).HasColumnName("rmk_Typ");

            entity.HasOne(d => d.RmkIdKategoriaNavigation).WithMany(p => p.MkRata)
                .HasForeignKey(d => d.RmkIdKategoria)
                .HasConstraintName("FK_mk_Rata_sl_Kategoria");

            entity.HasOne(d => d.RmkIdKosztNavigation).WithMany(p => p.MkRata)
                .HasForeignKey(d => d.RmkIdKoszt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_mk_Rata_mk_Koszt");
        });

        modelBuilder.Entity<Modyfikacja>(entity =>
        {
            entity.ToTable("__Modyfikacja");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Kolumna)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tabela)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Zrodlo)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NavParametry>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nav_Parametry");

            entity.Property(e => e.NvpDymekDodaj).HasColumnName("nvp_DymekDodaj");
            entity.Property(e => e.NvpDymekDrukuj).HasColumnName("nvp_DymekDrukuj");
            entity.Property(e => e.NvpDymekUsun).HasColumnName("nvp_DymekUsun");
            entity.Property(e => e.NvpDymekWczytaj).HasColumnName("nvp_DymekWczytaj");
            entity.Property(e => e.NvpDymekZapisz).HasColumnName("nvp_DymekZapisz");
            entity.Property(e => e.NvpId).HasColumnName("nvp_Id");
            entity.Property(e => e.NvpKolejnoscWzw)
                .HasColumnType("image")
                .HasColumnName("nvp_KolejnoscWzw");
            entity.Property(e => e.NvpLogowanieLicencji).HasColumnName("nvp_LogowanieLicencji");
            entity.Property(e => e.NvpProfilowanieKlientowStylGt).HasColumnName("nvp_ProfilowanieKlientowStylGT");
            entity.Property(e => e.NvpProfilowanieSlownikowTylkoLista).HasColumnName("nvp_ProfilowanieSlownikowTylkoLista");
        });

        modelBuilder.Entity<NetInfo>(entity =>
        {
            entity.HasKey(e => e.NeiId);

            entity.ToTable("net_Info");

            entity.Property(e => e.NeiId)
                .ValueGeneratedNever()
                .HasColumnName("nei_Id");
            entity.Property(e => e.NeiAccountingOfficeRegistrationData)
                .HasColumnType("image")
                .HasColumnName("nei_AccountingOfficeRegistrationData");
            entity.Property(e => e.NeiExtReportData)
                .HasColumnType("image")
                .HasColumnName("nei_ExtReportData");
            entity.Property(e => e.NeiIdOstatniejWiadomosci)
                .HasDefaultValue(-1)
                .HasColumnName("nei_IdOstatniejWiadomosci");
            entity.Property(e => e.NeiKursyData)
                .HasColumnType("datetime")
                .HasColumnName("nei_KursyData");
            entity.Property(e => e.NeiKursyUdane)
                .HasColumnType("datetime")
                .HasColumnName("nei_KursyUdane");
            entity.Property(e => e.NeiLic)
                .HasColumnType("text")
                .HasColumnName("nei_Lic");
            entity.Property(e => e.NeiLicInne)
                .HasColumnType("text")
                .HasColumnName("nei_LicInne");
            entity.Property(e => e.NeiOstatnieNieudaneKomputer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nei_OstatnieNieudaneKomputer");
            entity.Property(e => e.NeiOstatnieNieudanePolaczenie)
                .HasColumnType("datetime")
                .HasColumnName("nei_OstatnieNieudanePolaczenie");
            entity.Property(e => e.NeiOstatniePolaczenie)
                .HasColumnType("datetime")
                .HasColumnName("nei_OstatniePolaczenie");
            entity.Property(e => e.NeiOstatnieUdaneKomputer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nei_OstatnieUdaneKomputer");
            entity.Property(e => e.NeiOstatnieUdanePolaczenie)
                .HasColumnType("datetime")
                .HasColumnName("nei_OstatnieUdanePolaczenie");
            entity.Property(e => e.NeiWersjaParametrow)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nei_WersjaParametrow");
            entity.Property(e => e.NeiWersjaProgramuNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nei_WersjaProgramuNazwa");
            entity.Property(e => e.NeiWersjaProgramuNr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nei_WersjaProgramuNr");
            entity.Property(e => e.NeiWersjaProgramuPlatnaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nei_WersjaProgramuPlatnaNazwa");
            entity.Property(e => e.NeiWersjaProgramuPlatnaNr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nei_WersjaProgramuPlatnaNr");
            entity.Property(e => e.NeiZnanyNip).HasColumnName("nei_ZnanyNIP");
        });

        modelBuilder.Entity<NetParametr>(entity =>
        {
            entity.HasKey(e => e.NepId);

            entity.ToTable("net_Parametr");

            entity.Property(e => e.NepId)
                .ValueGeneratedNever()
                .HasColumnName("nep_Id");
            entity.Property(e => e.NepAutoAktualizacja)
                .HasDefaultValue(true)
                .HasColumnName("nep_AutoAktualizacja");
            entity.Property(e => e.NepOdstep)
                .HasDefaultValue(100)
                .HasColumnName("nep_Odstep");
            entity.Property(e => e.NepOdswiezLicencje).HasColumnName("nep_OdswiezLicencje");
            entity.Property(e => e.NepZainicjowane).HasColumnName("nep_Zainicjowane");
            entity.Property(e => e.NepZgoda).HasColumnName("nep_Zgoda");
        });

        modelBuilder.Entity<NetParametrInd>(entity =>
        {
            entity.HasKey(e => e.NepId);

            entity.ToTable("net_ParametrInd");

            entity.HasIndex(e => e.NepParamEwidId, "IX_net_ParametrInd").IsUnique();

            entity.Property(e => e.NepId)
                .ValueGeneratedNever()
                .HasColumnName("nep_Id");
            entity.Property(e => e.NepInfoMarketingowe)
                .HasDefaultValue(true)
                .HasColumnName("nep_InfoMarketingowe");
            entity.Property(e => e.NepInfoMerytoryczne)
                .HasDefaultValue(true)
                .HasColumnName("nep_InfoMerytoryczne");
            entity.Property(e => e.NepInfoTechniczne)
                .HasDefaultValue(true)
                .HasColumnName("nep_InfoTechniczne");
            entity.Property(e => e.NepParamEwidId).HasColumnName("nep_ParamEwidId");
            entity.Property(e => e.NepPokazujWiadomosciPrzez)
                .HasDefaultValue(-1)
                .HasColumnName("nep_PokazujWiadomosciPrzez");
            entity.Property(e => e.NepPowiadomKursy)
                .HasDefaultValue(true)
                .HasColumnName("nep_PowiadomKursy");
            entity.Property(e => e.NepPowiadomLicRozbieznosci)
                .HasDefaultValue(true)
                .HasColumnName("nep_PowiadomLicRozbieznosci");
            entity.Property(e => e.NepPowiadomLicWygasanie)
                .HasDefaultValue(true)
                .HasColumnName("nep_PowiadomLicWygasanie");
            entity.Property(e => e.NepPowiadomWersjaParametrow)
                .HasDefaultValue(true)
                .HasColumnName("nep_PowiadomWersjaParametrow");
            entity.Property(e => e.NepPowiadomWersjaProgramu)
                .HasDefaultValue(true)
                .HasColumnName("nep_PowiadomWersjaProgramu");

            entity.HasOne(d => d.NepParamEwid).WithOne(p => p.NetParametrInd)
                .HasForeignKey<NetParametrInd>(d => d.NepParamEwidId)
                .HasConstraintName("FK_net_ParametrInd_par__Ewid");
        });

        modelBuilder.Entity<NetParametrInst>(entity =>
        {
            entity.HasKey(e => e.NpiId);

            entity.ToTable("net_ParametrInst");

            entity.Property(e => e.NpiId)
                .ValueGeneratedNever()
                .HasColumnName("npi_Id");
            entity.Property(e => e.NpiInstalacjaSieciowa).HasColumnName("npi_InstalacjaSieciowa");
            entity.Property(e => e.NpiKomputer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("npi_Komputer");
            entity.Property(e => e.NpiNieProponujWersji)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("npi_NieProponujWersji");
            entity.Property(e => e.NpiPobierajAutomatycznie).HasColumnName("npi_PobierajAutomatycznie");
            entity.Property(e => e.NpiProponujInstalacje).HasColumnName("npi_ProponujInstalacje");
            entity.Property(e => e.NpiSciezka)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("npi_Sciezka");
            entity.Property(e => e.NpiUsuwajStarsze)
                .HasDefaultValue(true)
                .HasColumnName("npi_UsuwajStarsze");
            entity.Property(e => e.NpiUsuwajZainstalowane).HasColumnName("npi_UsuwajZainstalowane");
            entity.Property(e => e.NpiWybranyKomputer).HasColumnName("npi_WybranyKomputer");
        });

        modelBuilder.Entity<NetParametrInstKomputer>(entity =>
        {
            entity.HasKey(e => e.NpkKomputer);

            entity.ToTable("net_ParametrInstKomputer");

            entity.Property(e => e.NpkKomputer)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("npk_Komputer");
            entity.Property(e => e.NpkLokalnie).HasColumnName("npk_Lokalnie");
        });

        modelBuilder.Entity<NetParametrKomputer>(entity =>
        {
            entity.HasKey(e => e.NkoKomputer);

            entity.ToTable("net_ParametrKomputer");

            entity.Property(e => e.NkoKomputer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nko_Komputer");
            entity.Property(e => e.NkoAutoAktualizacja).HasColumnName("nko_AutoAktualizacja");
        });

        modelBuilder.Entity<NetWiadomosc>(entity =>
        {
            entity.HasKey(e => e.NewId);

            entity.ToTable("net_Wiadomosc", tb => tb.HasTrigger("tr_Wiadomosc_Inserting"));

            entity.Property(e => e.NewId)
                .ValueGeneratedNever()
                .HasColumnName("new_Id");
            entity.Property(e => e.NewAdresaci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("new_Adresaci");
            entity.Property(e => e.NewData)
                .HasColumnType("datetime")
                .HasColumnName("new_Data");
            entity.Property(e => e.NewTresc)
                .HasMaxLength(7000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("new_Tresc");
            entity.Property(e => e.NewTyp).HasColumnName("new_Typ");
            entity.Property(e => e.NewTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("new_Tytul");
            entity.Property(e => e.NewZrodloNip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("new_ZrodloNIP");
            entity.Property(e => e.NewZrodloTyp).HasColumnName("new_ZrodloTyp");
            entity.Property(e => e.NewZrodloUzytkownik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("new_ZrodloUzytkownik");
        });

        modelBuilder.Entity<NetWiadomoscBufor>(entity =>
        {
            entity.HasKey(e => e.NebId);

            entity.ToTable("net_WiadomoscBufor");

            entity.Property(e => e.NebId)
                .ValueGeneratedNever()
                .HasColumnName("neb_Id");
            entity.Property(e => e.NebData)
                .HasColumnType("datetime")
                .HasColumnName("neb_Data");
            entity.Property(e => e.NebWersjaMax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("neb_WersjaMax");
            entity.Property(e => e.NebWersjaMin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("neb_WersjaMin");
            entity.Property(e => e.NebWiadomosc)
                .HasColumnType("image")
                .HasColumnName("neb_Wiadomosc");
        });

        modelBuilder.Entity<NetWiadomoscCache>(entity =>
        {
            entity.HasKey(e => e.NecId);

            entity.ToTable("net_WiadomoscCache");

            entity.Property(e => e.NecId).HasColumnName("nec_Id");
            entity.Property(e => e.NecExtra1).HasColumnName("nec_Extra1");
            entity.Property(e => e.NecExtra2).HasColumnName("nec_Extra2");
            entity.Property(e => e.NecProgram).HasColumnName("nec_Program");
            entity.Property(e => e.NecTyp).HasColumnName("nec_Typ");
        });

        modelBuilder.Entity<NetWiadomoscFlaga>(entity =>
        {
            entity.HasKey(e => e.NefId);

            entity.ToTable("net_WiadomoscFlaga", tb => tb.HasTrigger("tr_WiadomoscFlaga_Inserting"));

            entity.Property(e => e.NefId).HasColumnName("nef_Id");
            entity.Property(e => e.NefDataPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("nef_DataPrzypomnienia");
            entity.Property(e => e.NefIdUzytkownika).HasColumnName("nef_IdUzytkownika");
            entity.Property(e => e.NefIdWiadomosci).HasColumnName("nef_IdWiadomosci");
            entity.Property(e => e.NefPobrano).HasColumnName("nef_Pobrano");
            entity.Property(e => e.NefWersjaOdczytania)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nef_WersjaOdczytania");
        });

        modelBuilder.Entity<NetWiadomoscWersja>(entity =>
        {
            entity.HasKey(e => e.NevId);

            entity.ToTable("net_WiadomoscWersja");

            entity.Property(e => e.NevId)
                .ValueGeneratedNever()
                .HasColumnName("nev_Id");
            entity.Property(e => e.NevNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nev_Nazwa");
            entity.Property(e => e.NevNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nev_Numer");
            entity.Property(e => e.NevTyp).HasColumnName("nev_Typ");
        });

        modelBuilder.Entity<NetWiadomoscZalacznik>(entity =>
        {
            entity.HasKey(e => e.NezId);

            entity.ToTable("net_WiadomoscZalacznik");

            entity.Property(e => e.NezId)
                .ValueGeneratedNever()
                .HasColumnName("nez_Id");
            entity.Property(e => e.NezIdWiadomosci).HasColumnName("nez_IdWiadomosci");
            entity.Property(e => e.NezNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nez_Nazwa");
            entity.Property(e => e.NezUrl)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nez_URL");
        });

        modelBuilder.Entity<NkPoleSzablonu>(entity =>
        {
            entity.HasKey(e => e.NdId).HasName("PK_nk_PoleDanych");

            entity.ToTable("nk_PoleSzablonu");

            entity.Property(e => e.NdId)
                .ValueGeneratedNever()
                .HasColumnName("nd_Id");
            entity.Property(e => e.NdCzcionka)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("nd_Czcionka");
            entity.Property(e => e.NdCzyCenaPoPromo).HasColumnName("nd_CzyCenaPoPromo");
            entity.Property(e => e.NdCzyCenaPoprzedniaLubZ30dni).HasColumnName("nd_CzyCenaPoprzedniaLubZ30Dni");
            entity.Property(e => e.NdCzyDuzaJm).HasColumnName("nd_CzyDuzaJM");
            entity.Property(e => e.NdCzyNumer).HasColumnName("nd_CzyNumer");
            entity.Property(e => e.NdCzyUsuwacZera).HasColumnName("nd_CzyUsuwacZera");
            entity.Property(e => e.NdCzyZaokr).HasColumnName("nd_CzyZaokr");
            entity.Property(e => e.NdIdPromocja)
                .HasDefaultValue(-1)
                .HasColumnName("nd_IdPromocja");
            entity.Property(e => e.NdIdSzablonu).HasColumnName("nd_IdSzablonu");
            entity.Property(e => e.NdIlePoPrzec).HasColumnName("nd_IlePoPrzec");
            entity.Property(e => e.NdNazwaPolaDanych)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nd_NazwaPolaDanych");
            entity.Property(e => e.NdOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nd_Opis");
            entity.Property(e => e.NdOpisPo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nd_OpisPo");
            entity.Property(e => e.NdPoziomCeny)
                .HasDefaultValue(-1)
                .HasColumnName("nd_PoziomCeny");
            entity.Property(e => e.NdSlownie).HasColumnName("nd_Slownie");
            entity.Property(e => e.NdSzer).HasColumnName("nd_Szer");
            entity.Property(e => e.NdWyrownanie).HasColumnName("nd_Wyrownanie");
            entity.Property(e => e.NdWys).HasColumnName("nd_Wys");
            entity.Property(e => e.NdX).HasColumnName("nd_x");
            entity.Property(e => e.NdY).HasColumnName("nd_y");

            entity.HasOne(d => d.NdIdSzablonuNavigation).WithMany(p => p.NkPoleSzablonus)
                .HasForeignKey(d => d.NdIdSzablonu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nk_PoleSzablonu_nk_Szablon");
        });

        modelBuilder.Entity<NkSzablon>(entity =>
        {
            entity.HasKey(e => e.NuId).HasName("PK_nk_UkladStrony");

            entity.ToTable("nk_Szablon");

            entity.Property(e => e.NuId)
                .ValueGeneratedNever()
                .HasColumnName("nu_Id");
            entity.Property(e => e.NuIdWzorca).HasColumnName("nu_IdWzorca");
            entity.Property(e => e.NuIdZrodlaDanych).HasColumnName("nu_IdZrodlaDanych");
            entity.Property(e => e.NuKolumny).HasColumnName("nu_Kolumny");
            entity.Property(e => e.NuMargGorny).HasColumnName("nu_MargGorny");
            entity.Property(e => e.NuMargLewy).HasColumnName("nu_MargLewy");
            entity.Property(e => e.NuNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nu_Nazwa");
            entity.Property(e => e.NuSzerNakl).HasColumnName("nu_SzerNakl");
            entity.Property(e => e.NuSzerOdstep).HasColumnName("nu_SzerOdstep");
            entity.Property(e => e.NuSzerStrony).HasColumnName("nu_SzerStrony");
            entity.Property(e => e.NuWiersze).HasColumnName("nu_Wiersze");
            entity.Property(e => e.NuWysNakl).HasColumnName("nu_WysNakl");
            entity.Property(e => e.NuWysOdstep).HasColumnName("nu_WysOdstep");
            entity.Property(e => e.NuWysStrony).HasColumnName("nu_WysStrony");

            entity.HasOne(d => d.NuIdWzorcaNavigation).WithMany(p => p.NkSzablons)
                .HasForeignKey(d => d.NuIdWzorca)
                .HasConstraintName("FK_nk_Szablon_nk_UkladWzorcowy");

            entity.HasOne(d => d.NuIdZrodlaDanychNavigation).WithMany(p => p.NkSzablons)
                .HasForeignKey(d => d.NuIdZrodlaDanych)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nk_Szablon_nk_ZrodloDanych");
        });

        modelBuilder.Entity<NkUkladWzorcowy>(entity =>
        {
            entity.HasKey(e => e.NuwId);

            entity.ToTable("nk_UkladWzorcowy");

            entity.Property(e => e.NuwId)
                .ValueGeneratedNever()
                .HasColumnName("nuw_Id");
            entity.Property(e => e.NuwKolumny).HasColumnName("nuw_Kolumny");
            entity.Property(e => e.NuwMargGorny).HasColumnName("nuw_MargGorny");
            entity.Property(e => e.NuwMargLewy).HasColumnName("nuw_MargLewy");
            entity.Property(e => e.NuwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nuw_Nazwa");
            entity.Property(e => e.NuwSzerNakl).HasColumnName("nuw_SzerNakl");
            entity.Property(e => e.NuwSzerOdstep).HasColumnName("nuw_SzerOdstep");
            entity.Property(e => e.NuwSzerStrony).HasColumnName("nuw_SzerStrony");
            entity.Property(e => e.NuwWiersze).HasColumnName("nuw_Wiersze");
            entity.Property(e => e.NuwWysNakl).HasColumnName("nuw_WysNakl");
            entity.Property(e => e.NuwWysOdstep).HasColumnName("nuw_WysOdstep");
            entity.Property(e => e.NuwWysStrony).HasColumnName("nuw_WysStrony");
        });

        modelBuilder.Entity<NkZestawDanych>(entity =>
        {
            entity.HasKey(e => e.NzwId).HasName("PK_nk_ZestawDanych_1");

            entity.ToTable("nk_ZestawDanych");

            entity.Property(e => e.NzwId)
                .ValueGeneratedNever()
                .HasColumnName("nzw_Id");
            entity.Property(e => e.NzwBinColumns)
                .HasColumnType("image")
                .HasColumnName("nzw_BinColumns");
            entity.Property(e => e.NzwBinListInfo)
                .HasColumnType("image")
                .HasColumnName("nzw_BinListInfo");
            entity.Property(e => e.NzwBinTables)
                .HasColumnType("image")
                .HasColumnName("nzw_BinTables");
            entity.Property(e => e.NzwBinVisibility)
                .HasColumnType("image")
                .HasColumnName("nzw_BinVisibility");
            entity.Property(e => e.NzwIdZrodlaDanych).HasColumnName("nzw_IdZrodlaDanych");
            entity.Property(e => e.NzwKontrolki)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nzw_Kontrolki");
            entity.Property(e => e.NzwLista).HasColumnName("nzw_Lista");
            entity.Property(e => e.NzwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nzw_Nazwa");

            entity.HasOne(d => d.NzwIdZrodlaDanychNavigation).WithMany(p => p.NkZestawDanyches)
                .HasForeignKey(d => d.NzwIdZrodlaDanych)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nk_ZestawDanych_nk_ZrodloDanych");
        });

        modelBuilder.Entity<NkZrodloDanych>(entity =>
        {
            entity.HasKey(e => e.NzrId);

            entity.ToTable("nk_ZrodloDanych");

            entity.Property(e => e.NzrId)
                .ValueGeneratedNever()
                .HasColumnName("nzr_Id");
            entity.Property(e => e.NzrGestor).HasColumnName("nzr_Gestor");
            entity.Property(e => e.NzrGratyfikant).HasColumnName("nzr_Gratyfikant");
            entity.Property(e => e.NzrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzr_Nazwa");
            entity.Property(e => e.NzrOrderBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nzr_OrderBy");
            entity.Property(e => e.NzrRachmistrz).HasColumnName("nzr_Rachmistrz");
            entity.Property(e => e.NzrRewizor).HasColumnName("nzr_Rewizor");
            entity.Property(e => e.NzrSelect)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("nzr_Select");
            entity.Property(e => e.NzrSort)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nzr_Sort");
            entity.Property(e => e.NzrSubiekt)
                .HasDefaultValue(true)
                .HasColumnName("nzr_Subiekt");
            entity.Property(e => e.NzrWidoczne)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nzr_Widoczne");
        });

        modelBuilder.Entity<NoCheckAddConstraint>(entity =>
        {
            entity.ToTable("__NoCheckAddConstraint");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<NotNotatka>(entity =>
        {
            entity.HasKey(e => e.NtId);

            entity.ToTable("not_Notatka");

            entity.Property(e => e.NtId)
                .ValueGeneratedNever()
                .HasColumnName("nt_Id");
            entity.Property(e => e.NtData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("nt_Data");
            entity.Property(e => e.NtIdObiektu).HasColumnName("nt_IdObiektu");
            entity.Property(e => e.NtOsoba)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nt_Osoba");
            entity.Property(e => e.NtTresc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nt_Tresc");
            entity.Property(e => e.NtTrescRtf)
                .HasColumnType("image")
                .HasColumnName("nt_TrescRTF");
            entity.Property(e => e.NtTypObiektu).HasColumnName("nt_TypObiektu");
            entity.Property(e => e.NtTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nt_Tytul");
        });

        modelBuilder.Entity<NrNrRez>(entity =>
        {
            entity.HasKey(e => e.RezId).HasName("PK_dok_NrRez");

            entity.ToTable("nr_NrRez");

            entity.Property(e => e.RezId).HasColumnName("rez_Id");
            entity.Property(e => e.RezDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("rez_DataWyst");
            entity.Property(e => e.RezDefiniowalnyId).HasColumnName("rez_DefiniowalnyId");
            entity.Property(e => e.RezNr).HasColumnName("rez_Nr");
            entity.Property(e => e.RezRejId).HasColumnName("rez_RejId");
            entity.Property(e => e.RezRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rez_Roz");
            entity.Property(e => e.RezTyp).HasColumnName("rez_Typ");
        });

        modelBuilder.Entity<NrNrStart>(entity =>
        {
            entity.HasKey(e => e.NsId);

            entity.ToTable("nr_NrStart");

            entity.Property(e => e.NsId)
                .ValueGeneratedNever()
                .HasColumnName("ns_Id");
            entity.Property(e => e.NsDefiniowalnyId).HasColumnName("ns_DefiniowalnyId");
            entity.Property(e => e.NsGranica).HasColumnName("ns_Granica");
            entity.Property(e => e.NsIdRokuObr).HasColumnName("ns_IdRokuObr");
            entity.Property(e => e.NsMiesiac).HasColumnName("ns_Miesiac");
            entity.Property(e => e.NsRejId).HasColumnName("ns_RejId");
            entity.Property(e => e.NsRodzaj).HasColumnName("ns_Rodzaj");
            entity.Property(e => e.NsRok).HasColumnName("ns_Rok");
            entity.Property(e => e.NsTyp).HasColumnName("ns_Typ");
        });

        modelBuilder.Entity<NrNrStartDkr>(entity =>
        {
            entity.HasKey(e => e.NsdId);

            entity.ToTable("nr_NrStartDkr");

            entity.Property(e => e.NsdId)
                .ValueGeneratedNever()
                .HasColumnName("nsd_Id");
            entity.Property(e => e.NsdGranica).HasColumnName("nsd_Granica");
            entity.Property(e => e.NsdIdRejestru).HasColumnName("nsd_IdRejestru");
            entity.Property(e => e.NsdIdRoku).HasColumnName("nsd_IdRoku");
            entity.Property(e => e.NsdMiesiac).HasColumnName("nsd_Miesiac");
            entity.Property(e => e.NsdRok).HasColumnName("nsd_Rok");

            entity.HasOne(d => d.NsdIdRejestruNavigation).WithMany(p => p.NrNrStartDkrs)
                .HasForeignKey(d => d.NsdIdRejestru)
                .HasConstraintName("FK_nr_NrStartDkr_sl_RejestrKsiegowy");

            entity.HasOne(d => d.NsdIdRokuNavigation).WithMany(p => p.NrNrStartDkrs)
                .HasForeignKey(d => d.NsdIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nr_NrStartDkr_nr_ParametrDkr");
        });

        modelBuilder.Entity<NrNrStartRk>(entity =>
        {
            entity.HasKey(e => e.NsrkId);

            entity.ToTable("nr_NrStartRK");

            entity.HasIndex(e => new { e.NsrkIdRoku, e.NsrkIdRejestru }, "IX_nr_NrStartRK").IsUnique();

            entity.Property(e => e.NsrkId)
                .ValueGeneratedNever()
                .HasColumnName("nsrk_Id");
            entity.Property(e => e.NsrkGranica).HasColumnName("nsrk_Granica");
            entity.Property(e => e.NsrkIdNrStart).HasColumnName("nsrk_IdNrStart");
            entity.Property(e => e.NsrkIdRejestru).HasColumnName("nsrk_IdRejestru");
            entity.Property(e => e.NsrkIdRoku).HasColumnName("nsrk_IdRoku");

            entity.HasOne(d => d.NsrkIdNrStartNavigation).WithMany(p => p.NrNrStartRks)
                .HasForeignKey(d => d.NsrkIdNrStart)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nr_NrStartRK_nr_NrStart");

            entity.HasOne(d => d.NsrkIdRejestruNavigation).WithMany(p => p.NrNrStartRks)
                .HasForeignKey(d => d.NsrkIdRejestru)
                .HasConstraintName("FK_nr_NrStartRK_sl_RejestrKsiegowy");
        });

        modelBuilder.Entity<NrParametr>(entity =>
        {
            entity.HasKey(e => new { e.NpTyp, e.NpDefiniowalnyId });

            entity.ToTable("nr_Parametr");

            entity.Property(e => e.NpTyp).HasColumnName("np_Typ");
            entity.Property(e => e.NpDefiniowalnyId).HasColumnName("np_DefiniowalnyId");
            entity.Property(e => e.NpNrDzien).HasColumnName("np_NrDzien");
            entity.Property(e => e.NpNrLuka).HasColumnName("np_NrLuka");
            entity.Property(e => e.NpNrMiesiac).HasColumnName("np_NrMiesiac");
            entity.Property(e => e.NpNrRodzaj).HasColumnName("np_NrRodzaj");
            entity.Property(e => e.NpNrRok).HasColumnName("np_NrRok");
            entity.Property(e => e.NpNrRoz).HasColumnName("np_NrRoz");
            entity.Property(e => e.NpNrSymbolRej).HasColumnName("np_NrSymbolRej");
            entity.Property(e => e.NpNrSymbolUzyt).HasColumnName("np_NrSymbolUzyt");
        });

        modelBuilder.Entity<NrParametrDkr>(entity =>
        {
            entity.HasKey(e => e.NpdIdRoku).HasName("PK_nr_ParametrDkr_1");

            entity.ToTable("nr_ParametrDkr");

            entity.Property(e => e.NpdIdRoku)
                .ValueGeneratedNever()
                .HasColumnName("npd_IdRoku");
            entity.Property(e => e.NpdNrLuka).HasColumnName("npd_NrLuka");
            entity.Property(e => e.NpdNrMiesiac).HasColumnName("npd_NrMiesiac");
            entity.Property(e => e.NpdNrRodzaj).HasColumnName("npd_NrRodzaj");
            entity.Property(e => e.NpdNrRok).HasColumnName("npd_NrRok");

            entity.HasOne(d => d.NpdIdRokuNavigation).WithOne(p => p.NrParametrDkr)
                .HasForeignKey<NrParametrDkr>(d => d.NpdIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nr_ParametrDkr_pd_RokObrotowy");
        });

        modelBuilder.Entity<NzCesja>(entity =>
        {
            entity.HasKey(e => e.NzcId);

            entity.ToTable("nz_Cesja");

            entity.HasIndex(e => e.NzcIdSplata, "IX_nz_Cesja");

            entity.HasIndex(e => e.NzcIdCesyjny, "IX_nz_Cesja_1");

            entity.Property(e => e.NzcId)
                .ValueGeneratedNever()
                .HasColumnName("nzc_Id");
            entity.Property(e => e.NzcIdCesyjny).HasColumnName("nzc_IdCesyjny");
            entity.Property(e => e.NzcIdSplata).HasColumnName("nzc_IdSplata");
            entity.Property(e => e.NzcNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nzc_Numer");
            entity.Property(e => e.NzcRodzaj).HasColumnName("nzc_Rodzaj");
            entity.Property(e => e.NzcStatusKsieg).HasColumnName("nzc_StatusKsieg");
            entity.Property(e => e.NzcTyp).HasColumnName("nzc_Typ");

            entity.HasOne(d => d.NzcIdCesyjnyNavigation).WithMany(p => p.NzCesjaNzcIdCesyjnyNavigations)
                .HasForeignKey(d => d.NzcIdCesyjny)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_Cesja_nz__Finanse_1");

            entity.HasOne(d => d.NzcIdSplataNavigation).WithMany(p => p.NzCesjaNzcIdSplataNavigations)
                .HasForeignKey(d => d.NzcIdSplata)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_Cesja_nz__Finanse");
        });

        modelBuilder.Entity<NzCesjaParametr>(entity =>
        {
            entity.HasKey(e => e.CpaId);

            entity.ToTable("nz_CesjaParametr");

            entity.Property(e => e.CpaId)
                .ValueGeneratedNever()
                .HasColumnName("cpa_Id");
            entity.Property(e => e.CpaDokHandlAuto).HasColumnName("cpa_DokHandlAuto");
            entity.Property(e => e.CpaDokHandlNpk).HasColumnName("cpa_DokHandlNPK");
            entity.Property(e => e.CpaDrukujPoZapisie)
                .HasDefaultValue(true)
                .HasColumnName("cpa_DrukujPoZapisie");
            entity.Property(e => e.CpaFormatNumId).HasColumnName("cpa_FormatNumId");
            entity.Property(e => e.CpaIdKategorii)
                .HasDefaultValue(-1)
                .HasColumnName("cpa_IdKategorii");
            entity.Property(e => e.CpaNrRozZdok)
                .HasDefaultValue(true)
                .HasColumnName("cpa_NrRozZDok");
            entity.Property(e => e.CpaParamEwidId).HasColumnName("cpa_ParamEwidId");
            entity.Property(e => e.CpaTerminalPlatniczy)
                .HasDefaultValue(false)
                .HasColumnName("cpa_TerminalPlatniczy");
            entity.Property(e => e.CpaTerminalPlatniczyAuto)
                .HasDefaultValue(false)
                .HasColumnName("cpa_TerminalPlatniczyAuto");

            entity.HasOne(d => d.CpaFormatNum).WithMany(p => p.NzCesjaParametrs)
                .HasForeignKey(d => d.CpaFormatNumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_CesjaParametr_sl_FormatNumeracji");
        });

        modelBuilder.Entity<NzCesjaParametrTp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nz_CesjaParametrTP");

            entity.HasIndex(e => new { e.CptpTypDok, e.CptpParamEwidId, e.CptpKomputer, e.CptpDefiniowalnyId }, "IX_nz_CesjaParametrTP").IsUnique();

            entity.Property(e => e.CptpDefiniowalnyId).HasColumnName("cptp_DefiniowalnyId");
            entity.Property(e => e.CptpId).HasColumnName("cptp_Id");
            entity.Property(e => e.CptpKomputer)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("cptp_Komputer");
            entity.Property(e => e.CptpParamEwidId).HasColumnName("cptp_ParamEwidId");
            entity.Property(e => e.CptpTerminalId).HasColumnName("cptp_TerminalId");
            entity.Property(e => e.CptpTypDok).HasColumnName("cptp_TypDok");

            entity.HasOne(d => d.CptpParamEwid).WithMany()
                .HasForeignKey(d => d.CptpParamEwidId)
                .HasConstraintName("FK_nz_CesjaParametrTP_par__Ewid");
        });

        modelBuilder.Entity<NzCesjaParametrySzybkiePlatnosci>(entity =>
        {
            entity.HasKey(e => e.CpspId);

            entity.ToTable("nz_CesjaParametrySzybkiePlatnosci");

            entity.Property(e => e.CpspId)
                .ValueGeneratedNever()
                .HasColumnName("cpsp_Id");
            entity.Property(e => e.CpspFormatNumId).HasColumnName("cpsp_FormatNumId");
            entity.Property(e => e.CpspIdKategorii).HasColumnName("cpsp_IdKategorii");
            entity.Property(e => e.CpspNrRozZdok).HasColumnName("cpsp_NrRozZDok");
            entity.Property(e => e.CpspParamEwidId).HasColumnName("cpsp_ParamEwidId");

            entity.HasOne(d => d.CpspFormatNum).WithMany(p => p.NzCesjaParametrySzybkiePlatnoscis)
                .HasForeignKey(d => d.CpspFormatNumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_CesjaParametrySzybkiePlatnosci_sl_FormatNumeracji");

            entity.HasOne(d => d.CpspParamEwid).WithMany(p => p.NzCesjaParametrySzybkiePlatnoscis)
                .HasForeignKey(d => d.CpspParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_CesjaParametrySzybkiePlatnosci_par__Ewid");
        });

        modelBuilder.Entity<NzFinanse>(entity =>
        {
            entity.HasKey(e => e.NzfId).IsClustered(false);

            entity.ToTable("nz__Finanse", tb =>
                {
                    tb.HasTrigger("tr_NzFinanse_DokKas");
                    tb.HasTrigger("tr_NzFinanse_Inserting");
                    tb.HasTrigger("tr_NzFinanse_OpBank");
                    tb.HasTrigger("tr_NzFinanse_Updating");
                });

            entity.HasIndex(e => new { e.NzfIdDokumentAuto, e.NzfPodtyp }, "IX_nz__Finanse");

            entity.HasIndex(e => new { e.NzfTypObiektu, e.NzfIdObiektu }, "IX_nz__Finanse_1");

            entity.HasIndex(e => e.NzfData, "IX_nz__Finanse_2");

            entity.HasIndex(e => new { e.NzfData, e.NzfTyp, e.NzfIdKasy, e.NzfNumer }, "IX_nz__Finanse_3");

            entity.HasIndex(e => e.NzfIdRozliczenia, "IX_nz__Finanse_nzf_IdRozliczenia");

            entity.HasIndex(e => e.NzfNumer, "IX_nz__Finanse_nzf_Numer");

            entity.Property(e => e.NzfId)
                .ValueGeneratedNever()
                .HasColumnName("nzf_Id");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataKursu");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDataUzgodnienia)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataUzgodnienia");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfGenerujTytulem).HasColumnName("nzf_GenerujTytulem");
            entity.Property(e => e.NzfGotowkowa).HasColumnName("nzf_Gotowkowa");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdBanku).HasColumnName("nzf_IdBanku");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKarta).HasColumnName("nzf_IdKarta");
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdRachunkuHist).HasColumnName("nzf_IdRachunkuHist");
            entity.Property(e => e.NzfIdRachunkuWirtualnego)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("nzf_IdRachunkuWirtualnego");
            entity.Property(e => e.NzfIdRozliczenia).HasColumnName("nzf_IdRozliczenia");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdSesjiKasowej)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("nzf_IdSesjiKasowej");
            entity.Property(e => e.NzfIdSyncDivision)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("nzf_IdSyncDivision");
            entity.Property(e => e.NzfIdTransakcjiVat).HasColumnName("nzf_IdTransakcjiVat");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfImport)
                .HasDefaultValue(0)
                .HasColumnName("nzf_Import");
            entity.Property(e => e.NzfIzbaCelna).HasColumnName("nzf_IzbaCelna");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasDefaultValue(1m)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfKwotaRachunkuVat)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("nzf_KwotaRachunkuVAT");
            entity.Property(e => e.NzfLiczbaJednostek)
                .HasDefaultValue(1)
                .HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumer).HasColumnName("nzf_Numer");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfObslugaRachunku).HasColumnName("nzf_ObslugaRachunku");
            entity.Property(e => e.NzfOdebral)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Odebral");
            entity.Property(e => e.NzfOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Opis");
            entity.Property(e => e.NzfPlatnoscKartaWoddziale).HasColumnName("nzf_PlatnoscKartaWOddziale");
            entity.Property(e => e.NzfPodIdentyfikacjaZobowiazania)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("nzf_PodIdentyfikacjaZobowiazania");
            entity.Property(e => e.NzfPodOkres)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_PodOkres");
            entity.Property(e => e.NzfPodSymbol)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_PodSymbol");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram)
                .HasDefaultValue(8)
                .HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzedplataOddzial).HasColumnName("nzf_PrzedplataOddzial");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfRodzajSplaty).HasColumnName("nzf_RodzajSplaty");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus)
                .HasDefaultValue(1)
                .HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTerminalId)
                .HasMaxLength(20)
                .HasColumnName("nzf_TermPlatTerminalId");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTransfer).HasColumnName("nzf_Transfer");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypKorekty)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("nzf_TypKorekty");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTypPrzelewu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength()
                .HasColumnName("nzf_TypPrzelewu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatRozliczanyPrzezUslugobiorce).HasColumnName("nzf_VatRozliczanyPrzezUslugobiorce");
            entity.Property(e => e.NzfVatpierwotny)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotny");
            entity.Property(e => e.NzfVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotnyWaluta");
            entity.Property(e => e.NzfVatpozostalo)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostalo");
            entity.Property(e => e.NzfVatpozostaloWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostaloWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWyslanaHb).HasColumnName("nzf_WyslanaHB");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.NzfZusdeklaracja)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSDeklaracja");
            entity.Property(e => e.NzfZusnrDecyzji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_ZUSNrDecyzji");
            entity.Property(e => e.NzfZusnrDeklaracji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSNrDeklaracji");
            entity.Property(e => e.NzfZuspodIdentyfikator)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSPodIdentyfikator");
            entity.Property(e => e.NzfZuspodTypIdentyfikatora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSPodTypIdentyfikatora");
            entity.Property(e => e.NzfZustypWplaty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSTypWplaty");

            entity.HasOne(d => d.NzfFlagaZmianaPersonel).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfFlagaZmianaPersonelId)
                .HasConstraintName("FK_nz__Finanse_pd_Uzytkownik");

            entity.HasOne(d => d.NzfIdAdresuNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdAdresu)
                .HasConstraintName("FK_nz__Finanse_adr__Ewid");

            entity.HasOne(d => d.NzfIdBankuNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdBanku)
                .HasConstraintName("FK_nz__Finanse_sl_WalutaBank");

            entity.HasOne(d => d.NzfIdDokumentAutoNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdDokumentAuto)
                .HasConstraintName("FK_nz__Finanse_dok__Dokument");

            entity.HasOne(d => d.NzfIdHistoriiAdresuNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdHistoriiAdresu)
                .HasConstraintName("FK_nz__Finanse_adr_Historia");

            entity.HasOne(d => d.NzfIdKasyNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdKasy)
                .HasConstraintName("FK_nz__Finanse_dks_Kasa");

            entity.HasOne(d => d.NzfIdKategoriiNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdKategorii)
                .HasConstraintName("FK_nz__Finanse_sl_Kategoria");

            entity.HasOne(d => d.NzfIdRachunkuNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdRachunku)
                .HasConstraintName("FK_nz__Finanse_rb__RachBankowy");

            entity.HasOne(d => d.NzfIdRachunkuHistNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdRachunkuHist)
                .HasConstraintName("FK_nz__Finanse_rb_RachBankowyHistoria");

            entity.HasOne(d => d.NzfIdRachunkuWirtualnegoNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdRachunkuWirtualnego)
                .HasConstraintName("FK_nz__Finanse_rb_RachBankowyWirtualny");

            entity.HasOne(d => d.NzfIdRozrachunkuNavigation).WithMany(p => p.InverseNzfIdRozrachunkuNavigation)
                .HasForeignKey(d => d.NzfIdRozrachunku)
                .HasConstraintName("FK_nz__Finanse_nz__Finanse");

            entity.HasOne(d => d.NzfIdSesjiKasowejNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdSesjiKasowej)
                .HasConstraintName("FK__nz__Finanse_sk_Sesja");

            entity.HasOne(d => d.NzfIdWalutyNavigation).WithMany(p => p.NzFinanses)
                .HasForeignKey(d => d.NzfIdWaluty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz__Finanse_sl_Waluta");
        });

        modelBuilder.Entity<NzFinanseHistoriaWindykacji>(entity =>
        {
            entity.HasKey(e => e.HwId);

            entity.ToTable("nz_FinanseHistoriaWindykacji");

            entity.Property(e => e.HwId).HasColumnName("hw_Id");
            entity.Property(e => e.HwData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("hw_Data");
            entity.Property(e => e.HwIdRozrachunku).HasColumnName("hw_IdRozrachunku");
            entity.Property(e => e.HwOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("hw_Opis");
            entity.Property(e => e.HwTyp)
                .HasDefaultValue(1)
                .HasColumnName("hw_Typ");

            entity.HasOne(d => d.HwIdRozrachunkuNavigation).WithMany(p => p.NzFinanseHistoriaWindykacjis)
                .HasForeignKey(d => d.HwIdRozrachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_FinanseHistoriaWindykacji_nz__Finanse");

            entity.HasOne(d => d.HwTypNavigation).WithMany(p => p.NzFinanseHistoriaWindykacjis)
                .HasForeignKey(d => d.HwTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_FinanseHistoriaWindykacji_nz_TypZdarzeniaWindykacyjnego");
        });

        modelBuilder.Entity<NzFinanseNotaPozycja>(entity =>
        {
            entity.HasKey(e => e.NztId).HasName("PK_nz_FinanseNotaPozycje");

            entity.ToTable("nz_FinanseNotaPozycja");

            entity.Property(e => e.NztId).HasColumnName("nzt_Id");
            entity.Property(e => e.NztDataDo)
                .HasColumnType("datetime")
                .HasColumnName("nzt_DataDo");
            entity.Property(e => e.NztDataOd)
                .HasColumnType("datetime")
                .HasColumnName("nzt_DataOd");
            entity.Property(e => e.NztIdNoty).HasColumnName("nzt_IdNoty");
            entity.Property(e => e.NztLiczbaDni).HasColumnName("nzt_LiczbaDni");
            entity.Property(e => e.NztOdsetki)
                .HasColumnType("money")
                .HasColumnName("nzt_Odsetki");
            entity.Property(e => e.NztStopa)
                .HasColumnType("money")
                .HasColumnName("nzt_Stopa");
            entity.Property(e => e.NztWartoscRozrachunku)
                .HasColumnType("money")
                .HasColumnName("nzt_WartoscRozrachunku");

            entity.HasOne(d => d.NztIdNotyNavigation).WithMany(p => p.NzFinanseNotaPozycjas)
                .HasForeignKey(d => d.NztIdNoty)
                .HasConstraintName("FK_nz_FinanseNotaPozycja_nz__Finanse");
        });

        modelBuilder.Entity<NzFinanseNotum>(entity =>
        {
            entity.HasKey(e => e.NoId);

            entity.ToTable("nz_FinanseNota");

            entity.Property(e => e.NoId)
                .ValueGeneratedNever()
                .HasColumnName("no_Id");
            entity.Property(e => e.NoData)
                .HasColumnType("datetime")
                .HasColumnName("no_Data");
            entity.Property(e => e.NoIdKategorii).HasColumnName("no_IdKategorii");
            entity.Property(e => e.NoIdNoty).HasColumnName("no_IdNoty");
            entity.Property(e => e.NoIdRozrachunku).HasColumnName("no_IdRozrachunku");
            entity.Property(e => e.NoOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasColumnName("no_Opis");
            entity.Property(e => e.NoStatusKsiegowy).HasColumnName("no_StatusKsiegowy");
            entity.Property(e => e.NoWartoscWalutaOdsetek)
                .HasColumnType("money")
                .HasColumnName("no_WartoscWalutaOdsetek");

            entity.HasOne(d => d.NoIdKategoriiNavigation).WithMany(p => p.NzFinanseNota)
                .HasForeignKey(d => d.NoIdKategorii)
                .HasConstraintName("FK_nz_FinanseNota_sl_Kategoria");

            entity.HasOne(d => d.NoIdNotyNavigation).WithMany(p => p.NzFinanseNotumNoIdNotyNavigations)
                .HasForeignKey(d => d.NoIdNoty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_FinanseNota_nz__Finanse1");

            entity.HasOne(d => d.NoIdRozrachunkuNavigation).WithMany(p => p.NzFinanseNotumNoIdRozrachunkuNavigations)
                .HasForeignKey(d => d.NoIdRozrachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_FinanseNota_nz__Finanse");
        });

        modelBuilder.Entity<NzFinanseSplataVat>(entity =>
        {
            entity.HasKey(e => e.NzvId);

            entity.ToTable("nz_FinanseSplataVat");

            entity.Property(e => e.NzvId)
                .ValueGeneratedNever()
                .HasColumnName("nzv_Id");
            entity.Property(e => e.NzvBrutto)
                .HasColumnType("money")
                .HasColumnName("nzv_Brutto");
            entity.Property(e => e.NzvIdFinSplata).HasColumnName("nzv_IdFinSplata");
            entity.Property(e => e.NzvIdStawkiVat).HasColumnName("nzv_IdStawkiVAT");
            entity.Property(e => e.NzvKwotaVat)
                .HasColumnType("money")
                .HasColumnName("nzv_KwotaVAT");
            entity.Property(e => e.NzvNetto)
                .HasColumnType("money")
                .HasColumnName("nzv_Netto");

            entity.HasOne(d => d.NzvIdFinSplataNavigation).WithMany(p => p.NzFinanseSplataVats)
                .HasForeignKey(d => d.NzvIdFinSplata)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_FinanseSplataVat_nz_FinanseSplata");

            entity.HasOne(d => d.NzvIdStawkiVatNavigation).WithMany(p => p.NzFinanseSplataVats)
                .HasForeignKey(d => d.NzvIdStawkiVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_FinanseSplataVat_sl_StawkaVAT");
        });

        modelBuilder.Entity<NzFinanseSplatum>(entity =>
        {
            entity.HasKey(e => e.NzsId);

            entity.ToTable("nz_FinanseSplata", tb =>
                {
                    tb.HasTrigger("AktualizacjaSplat_Delete");
                    tb.HasTrigger("AktualizacjaSplat_Insert");
                    tb.HasTrigger("AktualizacjaSplat_Update");
                });

            entity.HasIndex(e => e.NzsIdSplaty, "IX_nz_FinanseSplata");

            entity.HasIndex(e => e.NzsIdDlugu, "IX_nz_FinanseSplata_1");

            entity.Property(e => e.NzsId)
                .ValueGeneratedNever()
                .HasColumnName("nzs_Id");
            entity.Property(e => e.NzsAuto).HasColumnName("nzs_Auto");
            entity.Property(e => e.NzsAutoPrzeliczanie)
                .HasDefaultValue(true)
                .HasColumnName("nzs_AutoPrzeliczanie");
            entity.Property(e => e.NzsBrakKontroliSumy).HasColumnName("nzs_BrakKontroliSumy");
            entity.Property(e => e.NzsData)
                .HasColumnType("datetime")
                .HasColumnName("nzs_Data");
            entity.Property(e => e.NzsIdDlugu).HasColumnName("nzs_IdDlugu");
            entity.Property(e => e.NzsIdKategorii).HasColumnName("nzs_IdKategorii");
            entity.Property(e => e.NzsIdKompensaty).HasColumnName("nzs_IdKompensaty");
            entity.Property(e => e.NzsIdSplaty).HasColumnName("nzs_IdSplaty");
            entity.Property(e => e.NzsIdTransakcjiVat).HasColumnName("nzs_IdTransakcjiVat");
            entity.Property(e => e.NzsIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWaluty");
            entity.Property(e => e.NzsIdWalutyDlugu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWalutyDlugu");
            entity.Property(e => e.NzsMetodaKasowa).HasColumnName("nzs_MetodaKasowa");
            entity.Property(e => e.NzsPrzedplata).HasColumnName("nzs_Przedplata");
            entity.Property(e => e.NzsRodzaj).HasColumnName("nzs_Rodzaj");
            entity.Property(e => e.NzsStatusKsieg).HasColumnName("nzs_StatusKsieg");
            entity.Property(e => e.NzsTyp).HasColumnName("nzs_Typ");
            entity.Property(e => e.NzsVatRozliczanyPrzezUslugobiorce).HasColumnName("nzs_VatRozliczanyPrzezUslugobiorce");
            entity.Property(e => e.NzsVatdluguWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATDluguWaluta");
            entity.Property(e => e.NzsVatsplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATSplatyWaluta");
            entity.Property(e => e.NzsWartoscDluguPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscDluguPLN");
            entity.Property(e => e.NzsWartoscSplatyPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscSplatyPLN");
            entity.Property(e => e.NzsWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWaluta");
            entity.Property(e => e.NzsWartoscWalutaDlugu)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWalutaDlugu");
            entity.Property(e => e.NzsWylaczBadanieZgodnosci).HasColumnName("nzs_WylaczBadanieZgodnosci");

            entity.HasOne(d => d.NzsIdDluguNavigation).WithMany(p => p.NzFinanseSplatumNzsIdDluguNavigations)
                .HasForeignKey(d => d.NzsIdDlugu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_FinanseSplata_nz__Finanse1");

            entity.HasOne(d => d.NzsIdKategoriiNavigation).WithMany(p => p.NzFinanseSplata)
                .HasForeignKey(d => d.NzsIdKategorii)
                .HasConstraintName("FK_nz_FinanseSplata_sl_Kategoria");

            entity.HasOne(d => d.NzsIdSplatyNavigation).WithMany(p => p.NzFinanseSplatumNzsIdSplatyNavigations)
                .HasForeignKey(d => d.NzsIdSplaty)
                .HasConstraintName("FK_nz_FinanseSplata_nz__Finanse");
        });

        modelBuilder.Entity<NzKompensataPozycja>(entity =>
        {
            entity.HasKey(e => e.NzpId);

            entity.ToTable("nz_KompensataPozycja");

            entity.Property(e => e.NzpId)
                .ValueGeneratedNever()
                .HasColumnName("nzp_Id");
            entity.Property(e => e.NzpIdKompensaty).HasColumnName("nzp_IdKompensaty");
            entity.Property(e => e.NzpIdRozrachunku).HasColumnName("nzp_IdRozrachunku");
            entity.Property(e => e.NzpKwota)
                .HasColumnType("money")
                .HasColumnName("nzp_Kwota");

            entity.HasOne(d => d.NzpIdKompensatyNavigation).WithMany(p => p.NzKompensataPozycjas)
                .HasForeignKey(d => d.NzpIdKompensaty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_KompensataPozycja_nz_Kompensata");

            entity.HasOne(d => d.NzpIdRozrachunkuNavigation).WithMany(p => p.NzKompensataPozycjas)
                .HasForeignKey(d => d.NzpIdRozrachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_KompensataPozycja_nz__Finanse");
        });

        modelBuilder.Entity<NzKompensatum>(entity =>
        {
            entity.HasKey(e => e.NzkId);

            entity.ToTable("nz_Kompensata", tb => tb.HasTrigger("tr_NzKompensata_Inserting"));

            entity.Property(e => e.NzkId)
                .ValueGeneratedNever()
                .HasColumnName("nzk_Id");
            entity.Property(e => e.NzkDataRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("nzk_DataRealizacji");
            entity.Property(e => e.NzkDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("nzk_DataWystawienia");
            entity.Property(e => e.NzkIdHistoriiAdresu).HasColumnName("nzk_IdHistoriiAdresu");
            entity.Property(e => e.NzkIdKategorii).HasColumnName("nzk_IdKategorii");
            entity.Property(e => e.NzkIdObiektu).HasColumnName("nzk_IdObiektu");
            entity.Property(e => e.NzkIdPersonelu).HasColumnName("nzk_IdPersonelu");
            entity.Property(e => e.NzkImport).HasColumnName("nzk_Import");
            entity.Property(e => e.NzkNrPelny)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzk_NrPelny");
            entity.Property(e => e.NzkNumer).HasColumnName("nzk_Numer");
            entity.Property(e => e.NzkProgram).HasColumnName("nzk_Program");
            entity.Property(e => e.NzkStatus).HasColumnName("nzk_Status");
            entity.Property(e => e.NzkTypObiektu).HasColumnName("nzk_TypObiektu");
            entity.Property(e => e.NzkWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzk_Waluta");
            entity.Property(e => e.NzkWartosc)
                .HasColumnType("money")
                .HasColumnName("nzk_Wartosc");
            entity.Property(e => e.NzkWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzk_WartoscWaluta");
        });

        modelBuilder.Entity<NzKorektaPit>(entity =>
        {
            entity.HasKey(e => e.NkpId);

            entity.ToTable("nz_KorektaPIT");

            entity.Property(e => e.NkpId)
                .ValueGeneratedNever()
                .HasColumnName("nkp_Id");
            entity.Property(e => e.NkpData)
                .HasColumnType("datetime")
                .HasColumnName("nkp_Data");
            entity.Property(e => e.NkpIdRozrachunku).HasColumnName("nkp_IdRozrachunku");
            entity.Property(e => e.NkpKwota)
                .HasColumnType("money")
                .HasColumnName("nkp_Kwota");
            entity.Property(e => e.NkpKwotaSplat)
                .HasColumnType("money")
                .HasColumnName("nkp_KwotaSplat");
            entity.Property(e => e.NkpMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("nkp_Miesiac");
            entity.Property(e => e.NkpPozostaje)
                .HasColumnType("money")
                .HasColumnName("nkp_Pozostaje");
            entity.Property(e => e.NkpStatus).HasColumnName("nkp_Status");
            entity.Property(e => e.NkpSumaSplat)
                .HasColumnType("money")
                .HasColumnName("nkp_SumaSplat");
            entity.Property(e => e.NkpUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nkp_Uwagi");

            entity.HasOne(d => d.NkpIdRozrachunkuNavigation).WithMany(p => p.NzKorektaPits)
                .HasForeignKey(d => d.NkpIdRozrachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_KorektaPIT_nz__Finanse");
        });

        modelBuilder.Entity<NzKorektaZaliczenie>(entity =>
        {
            entity.HasKey(e => e.NkzId);

            entity.ToTable("nz_KorektaZaliczenie");

            entity.Property(e => e.NkzId)
                .ValueGeneratedNever()
                .HasColumnName("nkz_Id");
            entity.Property(e => e.NkzData)
                .HasColumnType("datetime")
                .HasColumnName("nkz_Data");
            entity.Property(e => e.NkzDataSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nkz_DataSplaty");
            entity.Property(e => e.NkzIdKorekta).HasColumnName("nkz_IdKorekta");
            entity.Property(e => e.NkzKwota)
                .HasColumnType("money")
                .HasColumnName("nkz_Kwota");
            entity.Property(e => e.NkzMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("nkz_Miesiac");
            entity.Property(e => e.NkzNieZaliczaj).HasColumnName("nkz_NieZaliczaj");
            entity.Property(e => e.NkzSumaSplat)
                .HasColumnType("money")
                .HasColumnName("nkz_SumaSplat");
            entity.Property(e => e.NkzUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nkz_Uwagi");

            entity.HasOne(d => d.NkzIdKorektaNavigation).WithMany(p => p.NzKorektaZaliczenies)
                .HasForeignKey(d => d.NkzIdKorekta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_KorektaZaliczenie_nz_KorektaPIT");
        });

        modelBuilder.Entity<NzOdsetkiKarne>(entity =>
        {
            entity.HasKey(e => e.OsId).HasName("PK_os_OdsetkiKarne");

            entity.ToTable("nz_OdsetkiKarne");

            entity.Property(e => e.OsId)
                .ValueGeneratedNever()
                .HasColumnName("os_Id");
            entity.Property(e => e.OsDataOd)
                .HasColumnType("datetime")
                .HasColumnName("os_DataOd");
            entity.Property(e => e.OsStopa)
                .HasColumnType("money")
                .HasColumnName("os_Stopa");
        });

        modelBuilder.Entity<NzPowiaznaniePp>(entity =>
        {
            entity.HasKey(e => new { e.NzpIdGlownyPp, e.NzpIdTechnicznyVat });

            entity.ToTable("nz_PowiaznaniePP");

            entity.Property(e => e.NzpIdGlownyPp).HasColumnName("nzp_IdGlownyPP");
            entity.Property(e => e.NzpIdTechnicznyVat).HasColumnName("nzp_IdTechnicznyVAT");
            entity.Property(e => e.NzpTypPowiazania).HasColumnName("nzp_TypPowiazania");

            entity.HasOne(d => d.NzpIdGlownyPpNavigation).WithMany(p => p.NzPowiaznaniePpNzpIdGlownyPpNavigations)
                .HasForeignKey(d => d.NzpIdGlownyPp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_PowiaznaniePP_nzp_IdGlownyPP");

            entity.HasOne(d => d.NzpIdTechnicznyVatNavigation).WithMany(p => p.NzPowiaznaniePpNzpIdTechnicznyVatNavigations)
                .HasForeignKey(d => d.NzpIdTechnicznyVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_PowiaznaniePP_nzp_IdTechnicznyVAT");
        });

        modelBuilder.Entity<NzRaportKasowy>(entity =>
        {
            entity.HasKey(e => e.RkId);

            entity.ToTable("nz_RaportKasowy", tb => tb.HasTrigger("tr_nz_RaportKasowy_rk_Nr"));

            entity.Property(e => e.RkId)
                .ValueGeneratedNever()
                .HasColumnName("rk_Id");
            entity.Property(e => e.RkData)
                .HasColumnType("datetime")
                .HasColumnName("rk_Data");
            entity.Property(e => e.RkDataZatwierdzenia)
                .HasColumnType("datetime")
                .HasColumnName("rk_DataZatwierdzenia");
            entity.Property(e => e.RkIdKasy).HasColumnName("rk_IdKasy");
            entity.Property(e => e.RkIdKategorii).HasColumnName("rk_IdKategorii");
            entity.Property(e => e.RkIdUtworzyl).HasColumnName("rk_IdUtworzyl");
            entity.Property(e => e.RkIdZatwierdzil).HasColumnName("rk_IdZatwierdzil");
            entity.Property(e => e.RkNr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rk_Nr");
            entity.Property(e => e.RkOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("rk_OkresDo");
            entity.Property(e => e.RkOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("rk_OkresOd");
            entity.Property(e => e.RkProgram)
                .HasDefaultValue(8)
                .HasColumnName("rk_Program");
            entity.Property(e => e.RkStatusKsiegowy).HasColumnName("rk_StatusKsiegowy");
            entity.Property(e => e.RkUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rk_Uwagi");
            entity.Property(e => e.RkZatwierdzony).HasColumnName("rk_Zatwierdzony");

            entity.HasOne(d => d.RkIdKasyNavigation).WithMany(p => p.NzRaportKasowies)
                .HasForeignKey(d => d.RkIdKasy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_RaportKasowy_dks_Kasa");

            entity.HasOne(d => d.RkIdKategoriiNavigation).WithMany(p => p.NzRaportKasowies)
                .HasForeignKey(d => d.RkIdKategorii)
                .HasConstraintName("FK_nz_RaportKasowy_sl_Kategoria");

            entity.HasOne(d => d.RkIdUtworzylNavigation).WithMany(p => p.NzRaportKasowyRkIdUtworzylNavigations)
                .HasForeignKey(d => d.RkIdUtworzyl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_RaportKasowy_pd_Uzytkownik_Utworzyl");

            entity.HasOne(d => d.RkIdZatwierdzilNavigation).WithMany(p => p.NzRaportKasowyRkIdZatwierdzilNavigations)
                .HasForeignKey(d => d.RkIdZatwierdzil)
                .HasConstraintName("FK_nz_RaportKasowy_pd_Uzytkownik_Zatwierdzil");
        });

        modelBuilder.Entity<NzRaportKasowyDokumentKasowy>(entity =>
        {
            entity.HasKey(e => e.RkdId);

            entity.ToTable("nz_RaportKasowyDokumentKasowy");

            entity.Property(e => e.RkdId)
                .ValueGeneratedNever()
                .HasColumnName("rkd_Id");
            entity.Property(e => e.RkdIdDk).HasColumnName("rkd_IdDK");
            entity.Property(e => e.RkdIdRk).HasColumnName("rkd_IdRK");
            entity.Property(e => e.RkdKorekta).HasColumnName("rkd_Korekta");
            entity.Property(e => e.RkdTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rkd_Tytulem");

            entity.HasOne(d => d.RkdIdDkNavigation).WithMany(p => p.NzRaportKasowyDokumentKasowies)
                .HasForeignKey(d => d.RkdIdDk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_RaportKasowyDokumentKasowy_nz__Finanse");

            entity.HasOne(d => d.RkdIdRkNavigation).WithMany(p => p.NzRaportKasowyDokumentKasowies)
                .HasForeignKey(d => d.RkdIdRk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_RaportKasowyDokumentKasowy_nz_RaportKasowy");
        });

        modelBuilder.Entity<NzRaportKasowyStan>(entity =>
        {
            entity.HasKey(e => e.RksId);

            entity.ToTable("nz_RaportKasowyStan");

            entity.Property(e => e.RksId)
                .ValueGeneratedNever()
                .HasColumnName("rks_Id");
            entity.Property(e => e.RksIdRaportu).HasColumnName("rks_IdRaportu");
            entity.Property(e => e.RksSaldo)
                .HasColumnType("money")
                .HasColumnName("rks_Saldo");
            entity.Property(e => e.RksStanPoczatkowy)
                .HasColumnType("money")
                .HasColumnName("rks_StanPoczatkowy");
            entity.Property(e => e.RksWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("rks_Waluta");

            entity.HasOne(d => d.RksIdRaportuNavigation).WithMany(p => p.NzRaportKasowyStans)
                .HasForeignKey(d => d.RksIdRaportu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_RaportKasowyStan_nz_RaportKasowy");

            entity.HasOne(d => d.RksWalutaNavigation).WithMany(p => p.NzRaportKasowyStans)
                .HasForeignKey(d => d.RksWaluta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_RaportKasowyStan_sl_Waluta_Symbol");
        });

        modelBuilder.Entity<NzRozDekret>(entity =>
        {
            entity.HasKey(e => new { e.NzdIdDekretu, e.NzdIdRozrachunku, e.NzdIdRoku, e.NzdStatus });

            entity.ToTable("nz_RozDekret");

            entity.HasIndex(e => e.NzdIdDekretu, "IX_nz_RozDekret_IdDekretu");

            entity.HasIndex(e => e.NzdIdRozrachunku, "IX_nz_RozDekret_IdRozrachunku");

            entity.Property(e => e.NzdIdDekretu).HasColumnName("nzd_IdDekretu");
            entity.Property(e => e.NzdIdRozrachunku).HasColumnName("nzd_IdRozrachunku");
            entity.Property(e => e.NzdIdRoku).HasColumnName("nzd_IdRoku");
            entity.Property(e => e.NzdStatus)
                .HasDefaultValue(1)
                .HasColumnName("nzd_Status");
            entity.Property(e => e.NzdPomniejsza).HasColumnName("nzd_Pomniejsza");

            entity.HasOne(d => d.NzdIdDekretuNavigation).WithMany(p => p.NzRozDekrets)
                .HasForeignKey(d => d.NzdIdDekretu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_RozDekret_dkr_Pozycja");

            entity.HasOne(d => d.NzdIdRozrachunkuNavigation).WithMany(p => p.NzRozDekrets)
                .HasForeignKey(d => d.NzdIdRozrachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_RozDekret_nz__Finanse");
        });

        modelBuilder.Entity<NzRozniceLog>(entity =>
        {
            entity.HasKey(e => e.RklId);

            entity.ToTable("nz_RozniceLog");

            entity.Property(e => e.RklId).HasColumnName("rkl_Id");
            entity.Property(e => e.RklDataDo)
                .HasColumnType("datetime")
                .HasColumnName("rkl_DataDo");
            entity.Property(e => e.RklDataOd)
                .HasColumnType("datetime")
                .HasColumnName("rkl_DataOd");
        });

        modelBuilder.Entity<NzSposobNaliczeniaOdsetek>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nz_SposobNaliczeniaOdsetek");

            entity.Property(e => e.SrDataDo)
                .HasColumnType("datetime")
                .HasColumnName("sr_DataDo");
            entity.Property(e => e.SrDataOd)
                .HasColumnType("datetime")
                .HasColumnName("sr_DataOd");
            entity.Property(e => e.SrIdRozrachunku).HasColumnName("sr_IdRozrachunku");
            entity.Property(e => e.SrLiczbaDni).HasColumnName("sr_LiczbaDni");
            entity.Property(e => e.SrOdsetki)
                .HasColumnType("money")
                .HasColumnName("sr_Odsetki");
            entity.Property(e => e.SrStopa)
                .HasColumnType("money")
                .HasColumnName("sr_Stopa");
            entity.Property(e => e.SrWartoscRozrachunku)
                .HasColumnType("money")
                .HasColumnName("sr_WartoscRozrachunku");
        });

        modelBuilder.Entity<NzSyncHistoriaRozliczeniaPozostalo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nz_SyncHistoriaRozliczeniaPozostalo");

            entity.Property(e => e.NzshrpIdDokumentAuto).HasColumnName("nzshrp_IdDokumentAuto");
            entity.Property(e => e.NzshrpRozrachId).HasColumnName("nzshrp_RozrachId");
            entity.Property(e => e.NzshrpWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzshrp_Waluta");
            entity.Property(e => e.NzshrpWartosc)
                .HasColumnType("money")
                .HasColumnName("nzshrp_Wartosc");
            entity.Property(e => e.NzshrpWartoscPln)
                .HasColumnType("money")
                .HasColumnName("nzshrp_WartoscPLN");
        });

        modelBuilder.Entity<NzSyncHistoriaRozliczenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nz_SyncHistoriaRozliczenia");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IdWalutyDokRozliczajacego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdWalutyRozRozliczanego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.NzsAuto).HasColumnName("nzs_Auto");
            entity.Property(e => e.NzsAutoPrzeliczanie).HasColumnName("nzs_AutoPrzeliczanie");
            entity.Property(e => e.NzsBrakKontroliSumy).HasColumnName("nzs_BrakKontroliSumy");
            entity.Property(e => e.NzsData)
                .HasColumnType("datetime")
                .HasColumnName("nzs_Data");
            entity.Property(e => e.NzsIdDlugu).HasColumnName("nzs_IdDlugu");
            entity.Property(e => e.NzsIdKategorii).HasColumnName("nzs_IdKategorii");
            entity.Property(e => e.NzsIdSplaty).HasColumnName("nzs_IdSplaty");
            entity.Property(e => e.NzsIdTransakcjiVat).HasColumnName("nzs_IdTransakcjiVat");
            entity.Property(e => e.NzsIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWaluty");
            entity.Property(e => e.NzsIdWalutyDlugu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWalutyDlugu");
            entity.Property(e => e.NzsMetodaKasowa).HasColumnName("nzs_MetodaKasowa");
            entity.Property(e => e.NzsPrzedplata).HasColumnName("nzs_Przedplata");
            entity.Property(e => e.NzsRodzaj).HasColumnName("nzs_Rodzaj");
            entity.Property(e => e.NzsStatusKsieg).HasColumnName("nzs_StatusKsieg");
            entity.Property(e => e.NzsTyp).HasColumnName("nzs_Typ");
            entity.Property(e => e.NzsVatdluguWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATDluguWaluta");
            entity.Property(e => e.NzsVatsplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATSplatyWaluta");
            entity.Property(e => e.NzsWartosc)
                .HasColumnType("money")
                .HasColumnName("nzs_Wartosc");
            entity.Property(e => e.NzsWartoscDluguPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscDluguPLN");
            entity.Property(e => e.NzsWartoscSplatyPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscSplatyPLN");
            entity.Property(e => e.NzsWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWaluta");
            entity.Property(e => e.NzsWartoscWalutaDlugu)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWalutaDlugu");
            entity.Property(e => e.NzsWylaczBadanieZgodnosci).HasColumnName("nzs_WylaczBadanieZgodnosci");
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotna).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotnaWaluta).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
        });

        modelBuilder.Entity<NzSyncHistoriaWiarygodnoscPlatnicza>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nz_SyncHistoriaWiarygodnoscPlatnicza");

            entity.Property(e => e.NzshwpData)
                .HasColumnType("datetime")
                .HasColumnName("nzshwp_Data");
            entity.Property(e => e.NzshwpDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzshwp_DataOstatniejSplaty");
            entity.Property(e => e.NzshwpDniSpoznienia)
                .HasColumnType("money")
                .HasColumnName("nzshwp_DniSpoznienia");
            entity.Property(e => e.NzshwpIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzshwp_IdWaluty");
            entity.Property(e => e.NzshwpKontrahentId).HasColumnName("nzshwp_KontrahentId");
            entity.Property(e => e.NzshwpKurs)
                .HasColumnType("money")
                .HasColumnName("nzshwp_Kurs");
            entity.Property(e => e.NzshwpNumerPelny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzshwp_NumerPelny");
            entity.Property(e => e.NzshwpTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzshwp_TerminPlatnosci");
            entity.Property(e => e.NzshwpWartosc)
                .HasColumnType("money")
                .HasColumnName("nzshwp_Wartosc");
            entity.Property(e => e.NzshwpWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzshwp_WartoscPierwotna");
            entity.Property(e => e.NzshwpWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzshwp_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzshwpWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzshwp_WartoscWaluta");
        });

        modelBuilder.Entity<NzSyncRozrachunkiKontrahentaRazem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nz_SyncRozrachunkiKontrahentaRazem");

            entity.Property(e => e.DataPobrania).HasColumnType("datetime");
            entity.Property(e => e.PersaldoNaleznosci).HasColumnType("money");
            entity.Property(e => e.PersaldoRozrachunkow).HasColumnType("money");
            entity.Property(e => e.PersaldoZobowiazan).HasColumnType("money");
            entity.Property(e => e.RazemNaleznosci).HasColumnType("money");
            entity.Property(e => e.RazemSplatyNaleznosci).HasColumnType("money");
            entity.Property(e => e.RazemSplatyZobowiazan).HasColumnType("money");
            entity.Property(e => e.RazemZobowiazania).HasColumnType("money");
        });

        modelBuilder.Entity<NzSyncRozrachunkiKontrahentum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nz_SyncRozrachunkiKontrahenta");

            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Uzytkownik)
                .HasMaxLength(51)
                .IsUnicode(false);
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotna).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotnaWaluta).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
        });

        modelBuilder.Entity<NzTypZdarzeniaWindykacyjnego>(entity =>
        {
            entity.HasKey(e => e.WtId);

            entity.ToTable("nz_TypZdarzeniaWindykacyjnego");

            entity.Property(e => e.WtId).HasColumnName("wt_Id");
            entity.Property(e => e.WtNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("wt_Nazwa");
            entity.Property(e => e.WtPonaglenie).HasColumnName("wt_Ponaglenie");
        });

        modelBuilder.Entity<NzWizardPp>(entity =>
        {
            entity.HasKey(e => e.NzppId).HasName("PK_nz_Wizard_nzpp_Id");

            entity.ToTable("nz_WizardPP");

            entity.Property(e => e.NzppId)
                .ValueGeneratedNever()
                .HasColumnName("nzpp_Id");
            entity.Property(e => e.NzppPrzypomnijPp)
                .HasDefaultValue(true)
                .HasColumnName("nzpp_PrzypomnijPP");
            entity.Property(e => e.NzppPrzypomnijPpdata)
                .HasColumnType("datetime")
                .HasColumnName("nzpp_PrzypomnijPPData");
        });

        modelBuilder.Entity<NzWyciagBankowy>(entity =>
        {
            entity.HasKey(e => e.WbId);

            entity.ToTable("nz_WyciagBankowy");

            entity.Property(e => e.WbId)
                .ValueGeneratedNever()
                .HasColumnName("wb_Id");
            entity.Property(e => e.WbData)
                .HasColumnType("datetime")
                .HasColumnName("wb_Data");
            entity.Property(e => e.WbDataZatwierdzenia)
                .HasColumnType("datetime")
                .HasColumnName("wb_DataZatwierdzenia");
            entity.Property(e => e.WbIdKategorii).HasColumnName("wb_IdKategorii");
            entity.Property(e => e.WbIdRachunku).HasColumnName("wb_IdRachunku");
            entity.Property(e => e.WbIdUtworzyl).HasColumnName("wb_IdUtworzyl");
            entity.Property(e => e.WbIdWyciaguHb).HasColumnName("wb_IdWyciaguHB");
            entity.Property(e => e.WbIdZatwierdzil).HasColumnName("wb_IdZatwierdzil");
            entity.Property(e => e.WbNr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wb_Nr");
            entity.Property(e => e.WbOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("wb_OkresDo");
            entity.Property(e => e.WbOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("wb_OkresOd");
            entity.Property(e => e.WbProgram)
                .HasDefaultValue(8)
                .HasColumnName("wb_Program");
            entity.Property(e => e.WbSaldoKoncowe)
                .HasColumnType("money")
                .HasColumnName("wb_SaldoKoncowe");
            entity.Property(e => e.WbSaldoPoczatkowe)
                .HasColumnType("money")
                .HasColumnName("wb_SaldoPoczatkowe");
            entity.Property(e => e.WbStatusKsiegowy).HasColumnName("wb_StatusKsiegowy");
            entity.Property(e => e.WbUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wb_Uwagi");
            entity.Property(e => e.WbZatwierdzony).HasColumnName("wb_Zatwierdzony");

            entity.HasOne(d => d.WbIdKategoriiNavigation).WithMany(p => p.NzWyciagBankowies)
                .HasForeignKey(d => d.WbIdKategorii)
                .HasConstraintName("FK_nz_WyciagBankowy_sl_Kategoria");

            entity.HasOne(d => d.WbIdRachunkuNavigation).WithMany(p => p.NzWyciagBankowies)
                .HasForeignKey(d => d.WbIdRachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_WyciagBankowy_rb__RachBankowy");

            entity.HasOne(d => d.WbIdUtworzylNavigation).WithMany(p => p.NzWyciagBankowyWbIdUtworzylNavigations)
                .HasForeignKey(d => d.WbIdUtworzyl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_WyciagBankowy_pd_Uzytkownik_Utworzyl");

            entity.HasOne(d => d.WbIdWyciaguHbNavigation).WithMany(p => p.NzWyciagBankowies)
                .HasForeignKey(d => d.WbIdWyciaguHb)
                .HasConstraintName("FK_nz_WyciagBankowy_hb_NaglowekIStopka");

            entity.HasOne(d => d.WbIdZatwierdzilNavigation).WithMany(p => p.NzWyciagBankowyWbIdZatwierdzilNavigations)
                .HasForeignKey(d => d.WbIdZatwierdzil)
                .HasConstraintName("FK_nz_WyciagBankowy_pd_Uzytkownik_Zatwierdzil");
        });

        modelBuilder.Entity<NzWyciagBankowyOperacjaBankowa>(entity =>
        {
            entity.HasKey(e => e.WboId);

            entity.ToTable("nz_WyciagBankowyOperacjaBankowa");

            entity.Property(e => e.WboId)
                .ValueGeneratedNever()
                .HasColumnName("wbo_Id");
            entity.Property(e => e.WboIdOb).HasColumnName("wbo_IdOB");
            entity.Property(e => e.WboIdWb).HasColumnName("wbo_IdWB");
            entity.Property(e => e.WboTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wbo_Tytulem");

            entity.HasOne(d => d.WboIdObNavigation).WithMany(p => p.NzWyciagBankowyOperacjaBankowas)
                .HasForeignKey(d => d.WboIdOb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_WyciagBankowyOperacjaBankowa_nz__Finanse");

            entity.HasOne(d => d.WboIdWbNavigation).WithMany(p => p.NzWyciagBankowyOperacjaBankowas)
                .HasForeignKey(d => d.WboIdWb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_nz_WyciagBankowyOperacjaBankowa_nz_WyciagBankowy");
        });

        modelBuilder.Entity<ObPowiazane>(entity =>
        {
            entity.HasKey(e => e.OpId).HasName("PK_ob_Powiazanie");

            entity.ToTable("ob_Powiazane");

            entity.Property(e => e.OpId)
                .ValueGeneratedNever()
                .HasColumnName("op_Id");
            entity.Property(e => e.OpIdOb).HasColumnName("op_IdOb");
            entity.Property(e => e.OpIdWskazywanego).HasColumnName("op_IdWskazywanego");
            entity.Property(e => e.OpOpisOb)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("op_OpisOb");
            entity.Property(e => e.OpOpisObiektu)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("op_OpisObiektu");
            entity.Property(e => e.OpOpisPowiazania)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("op_OpisPowiazania");
            entity.Property(e => e.OpOpisTypuOb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("op_OpisTypuOb");
            entity.Property(e => e.OpOpisTypuWskazywanego)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("op_OpisTypuWskazywanego");
            entity.Property(e => e.OpTypOb).HasColumnName("op_TypOb");
            entity.Property(e => e.OpTypWskazywanego).HasColumnName("op_TypWskazywanego");
        });

        modelBuilder.Entity<OdwOdWykSzablon>(entity =>
        {
            entity.HasKey(e => e.OdwId);

            entity.ToTable("odw_OdWykSzablon");

            entity.Property(e => e.OdwId)
                .ValueGeneratedNever()
                .HasColumnName("odw_Id");
            entity.Property(e => e.OdwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("odw_Nazwa");
            entity.Property(e => e.OdwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("odw_Opis");
            entity.Property(e => e.OdwTypOdWyk).HasColumnName("odw_TypOdWyk");
            entity.Property(e => e.OdwUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("odw_Uwagi");
            entity.Property(e => e.OdwZapytanieSql)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("odw_ZapytanieSQL");
        });

        modelBuilder.Entity<OdwOdWykTemp>(entity =>
        {
            entity.HasKey(e => e.OdwtId);

            entity.ToTable("odw_OdWykTemp");

            entity.Property(e => e.OdwtId).HasColumnName("odwt_Id");
            entity.Property(e => e.OdwtDokId).HasColumnName("odwt_DokId");
            entity.Property(e => e.OdwtOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("odwt_Opis");
        });

        modelBuilder.Entity<OssDaneVat>(entity =>
        {
            entity.HasKey(e => e.OvId);

            entity.ToTable("oss_DaneVAT");

            entity.HasIndex(e => e.OvIdEwid, "IX_oss_DaneVAT_IdEwid");

            entity.HasIndex(e => e.OvIdStawkiVat, "IX_oss_DaneVAT_IdStawkiVAT");

            entity.Property(e => e.OvId)
                .ValueGeneratedNever()
                .HasColumnName("ov_Id");
            entity.Property(e => e.OvBruttoEur)
                .HasColumnType("money")
                .HasColumnName("ov_BruttoEUR");
            entity.Property(e => e.OvBruttoPln)
                .HasColumnType("money")
                .HasColumnName("ov_BruttoPLN");
            entity.Property(e => e.OvIdEwid).HasColumnName("ov_IdEwid");
            entity.Property(e => e.OvIdStawkiVat).HasColumnName("ov_IdStawkiVAT");
            entity.Property(e => e.OvNettoEur)
                .HasColumnType("money")
                .HasColumnName("ov_NettoEUR");
            entity.Property(e => e.OvNettoPln)
                .HasColumnType("money")
                .HasColumnName("ov_NettoPLN");
            entity.Property(e => e.OvVatEur)
                .HasColumnType("money")
                .HasColumnName("ov_VatEUR");
            entity.Property(e => e.OvVatPln)
                .HasColumnType("money")
                .HasColumnName("ov_VatPLN");

            entity.HasOne(d => d.OvIdEw).WithMany(p => p.OssDaneVats)
                .HasForeignKey(d => d.OvIdEwid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_oss_DaneVAT_oss__Ewid");

            entity.HasOne(d => d.OvIdStawkiVatNavigation).WithMany(p => p.OssDaneVats)
                .HasForeignKey(d => d.OvIdStawkiVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_oss_DaneVAT_sl_StawkaVAT");
        });

        modelBuilder.Entity<OssEwid>(entity =>
        {
            entity.HasKey(e => e.OeId);

            entity.ToTable("oss__Ewid");

            entity.HasIndex(e => e.OeIdTypuEwidVat, "IX_oss__Ewid_IdTypuEwidVAT");

            entity.Property(e => e.OeId)
                .ValueGeneratedNever()
                .HasColumnName("oe_Id");
            entity.Property(e => e.OeAutoPrzeliczajVat)
                .HasDefaultValue(true)
                .HasColumnName("oe_AutoPrzeliczajVAT");
            entity.Property(e => e.OeBruttoEur)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("oe_BruttoEUR");
            entity.Property(e => e.OeBruttoPln)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("oe_BruttoPLN");
            entity.Property(e => e.OeDataKursuDeklaracjaVat)
                .HasColumnType("datetime")
                .HasColumnName("oe_DataKursuDeklaracjaVAT");
            entity.Property(e => e.OeDataKursuKsiegowanie)
                .HasColumnType("datetime")
                .HasColumnName("oe_DataKursuKsiegowanie");
            entity.Property(e => e.OeDataWpisu)
                .HasColumnType("datetime")
                .HasColumnName("oe_DataWpisu");
            entity.Property(e => e.OeDataZakDostawy)
                .HasColumnType("datetime")
                .HasColumnName("oe_DataZakDostawy");
            entity.Property(e => e.OeDataZaliczki)
                .HasColumnType("datetime")
                .HasColumnName("oe_DataZaliczki");
            entity.Property(e => e.OeDataZaplaty)
                .HasColumnType("datetime")
                .HasColumnName("oe_DataZaplaty");
            entity.Property(e => e.OeIdBankuDeklaracjaVat).HasColumnName("oe_IdBankuDeklaracjaVAT");
            entity.Property(e => e.OeIdBankuKsiegowanie).HasColumnName("oe_IdBankuKsiegowanie");
            entity.Property(e => e.OeIdDokImport).HasColumnName("oe_IdDokImport");
            entity.Property(e => e.OeIdKategorii).HasColumnName("oe_IdKategorii");
            entity.Property(e => e.OeIdKh).HasColumnName("oe_IdKh");
            entity.Property(e => e.OeIdObiektu).HasColumnName("oe_IdObiektu");
            entity.Property(e => e.OeIdPanstwaKonsumpcji).HasColumnName("oe_IdPanstwaKonsumpcji");
            entity.Property(e => e.OeIdPanstwaRozpWysylki)
                .HasDefaultValue(1)
                .HasColumnName("oe_IdPanstwaRozpWysylki");
            entity.Property(e => e.OeIdTerminPlatnosci).HasColumnName("oe_IdTerminPlatnosci");
            entity.Property(e => e.OeIdTypuEwidVat).HasColumnName("oe_IdTypuEwidVAT");
            entity.Property(e => e.OeImportPochodzenie).HasColumnName("oe_ImportPochodzenie");
            entity.Property(e => e.OeInfoDodatkowe)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("oe_InfoDodatkowe");
            entity.Property(e => e.OeKodPocztowyKh)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_KodPocztowyKh");
            entity.Property(e => e.OeKorekta).HasColumnName("oe_Korekta");
            entity.Property(e => e.OeKsiegowany)
                .HasDefaultValue(true)
                .HasColumnName("oe_Ksiegowany");
            entity.Property(e => e.OeKursDeklaracjaVat)
                .HasColumnType("money")
                .HasColumnName("oe_KursDeklaracjaVAT");
            entity.Property(e => e.OeKursKsiegowanie)
                .HasColumnType("money")
                .HasColumnName("oe_KursKsiegowanie");
            entity.Property(e => e.OeKwartalKorekty).HasColumnName("oe_KwartalKorekty");
            entity.Property(e => e.OeKwotaZaliczki)
                .HasColumnType("money")
                .HasColumnName("oe_KwotaZaliczki");
            entity.Property(e => e.OeKwotaZaplaty)
                .HasColumnType("money")
                .HasColumnName("oe_KwotaZaplaty");
            entity.Property(e => e.OeLiczbaJednostekDeklaracjaVat).HasColumnName("oe_LiczbaJednostekDeklaracjaVAT");
            entity.Property(e => e.OeLiczbaJednostekKsiegowanie).HasColumnName("oe_LiczbaJednostekKsiegowanie");
            entity.Property(e => e.OeMiastoKh)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_MiastoKh");
            entity.Property(e => e.OeMiesiacOdliczVat)
                .HasColumnType("datetime")
                .HasColumnName("oe_MiesiacOdliczVAT");
            entity.Property(e => e.OeNazwaKh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_NazwaKh");
            entity.Property(e => e.OeNazwaPelnaKh)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_NazwaPelnaKh");
            entity.Property(e => e.OeNettoEur)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("oe_NettoEUR");
            entity.Property(e => e.OeNettoPln)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("oe_NettoPLN");
            entity.Property(e => e.OeNieWliczanyDoPb).HasColumnName("oe_NieWliczanyDoPB");
            entity.Property(e => e.OeNipkh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_NIPKh");
            entity.Property(e => e.OeNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("oe_NrDokumentu");
            entity.Property(e => e.OeOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_Opis");
            entity.Property(e => e.OeRodzajKursuDeklaracjaVat).HasColumnName("oe_RodzajKursuDeklaracjaVAT");
            entity.Property(e => e.OeRodzajKursuKsiegowanie).HasColumnName("oe_RodzajKursuKsiegowanie");
            entity.Property(e => e.OeRokKorekty).HasColumnName("oe_RokKorekty");
            entity.Property(e => e.OeSymbolKh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_SymbolKh");
            entity.Property(e => e.OeTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("oe_TerminPlatnosci");
            entity.Property(e => e.OeTransakcjaVat).HasColumnName("oe_TransakcjaVAT");
            entity.Property(e => e.OeTypDokImport).HasColumnName("oe_TypDokImport");
            entity.Property(e => e.OeTypObiektu).HasColumnName("oe_TypObiektu");
            entity.Property(e => e.OeUlicaKh)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_UlicaKh");
            entity.Property(e => e.OeUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oe_Uwagi");
            entity.Property(e => e.OeVatEur)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("oe_VatEUR");
            entity.Property(e => e.OeVatPln)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("oe_VatPLN");
            entity.Property(e => e.OeWalutaDokumentu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("oe_WalutaDokumentu");
            entity.Property(e => e.OeWalutaZaliczki)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("oe_WalutaZaliczki");
            entity.Property(e => e.OeWalutaZaplaty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("oe_WalutaZaplaty");

            entity.HasOne(d => d.OeIdBankuDeklaracjaVatNavigation).WithMany(p => p.OssEwidOeIdBankuDeklaracjaVatNavigations)
                .HasForeignKey(d => d.OeIdBankuDeklaracjaVat)
                .HasConstraintName("FK_oss__Ewid_sl_WalutaBank_1");

            entity.HasOne(d => d.OeIdBankuKsiegowanieNavigation).WithMany(p => p.OssEwidOeIdBankuKsiegowanieNavigations)
                .HasForeignKey(d => d.OeIdBankuKsiegowanie)
                .HasConstraintName("FK_oss__Ewid_sl_WalutaBank_2");

            entity.HasOne(d => d.OeIdKategoriiNavigation).WithMany(p => p.OssEwids)
                .HasForeignKey(d => d.OeIdKategorii)
                .HasConstraintName("FK_oss__Ewid_sl_Kategorie");

            entity.HasOne(d => d.OeIdKhNavigation).WithMany(p => p.OssEwids)
                .HasForeignKey(d => d.OeIdKh)
                .HasConstraintName("FK_oss__Ewid_kh__Kontrahent");

            entity.HasOne(d => d.OeIdPanstwaKonsumpcjiNavigation).WithMany(p => p.OssEwidOeIdPanstwaKonsumpcjiNavigations)
                .HasForeignKey(d => d.OeIdPanstwaKonsumpcji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_oss__Ewid_sl_Panstwo_1");

            entity.HasOne(d => d.OeIdPanstwaRozpWysylkiNavigation).WithMany(p => p.OssEwidOeIdPanstwaRozpWysylkiNavigations)
                .HasForeignKey(d => d.OeIdPanstwaRozpWysylki)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_oss__Ewid_sl_Panstwo_2");

            entity.HasOne(d => d.OeIdTerminPlatnosciNavigation).WithMany(p => p.OssEwids)
                .HasForeignKey(d => d.OeIdTerminPlatnosci)
                .HasConstraintName("FK_oss__Ewid_sl_FormaPlatnosci");

            entity.HasOne(d => d.OeIdTypuEwidVatNavigation).WithMany(p => p.OssEwids)
                .HasForeignKey(d => d.OeIdTypuEwidVat)
                .HasConstraintName("FK_oss__Ewid_sl_EwidVatOss");
        });

        modelBuilder.Entity<OssParametr>(entity =>
        {
            entity.HasKey(e => e.OsspId);

            entity.ToTable("oss_Parametr");

            entity.HasIndex(e => e.OsspParamEwidId, "IX_oss_Parametr").IsUnique();

            entity.Property(e => e.OsspId)
                .ValueGeneratedNever()
                .HasColumnName("ossp_Id");
            entity.Property(e => e.OsspDataZaplatyWgPola)
                .HasDefaultValue(1)
                .HasColumnName("ossp_DataZaplatyWgPola");
            entity.Property(e => e.OsspKontrolaUniqNrDokumentu)
                .HasDefaultValue(true)
                .HasColumnName("ossp_KontrolaUniqNrDokumentu");
            entity.Property(e => e.OsspKsDataWpisu)
                .HasDefaultValue(4)
                .HasColumnName("ossp_KsDataWpisu");
            entity.Property(e => e.OsspKsDataZdGosp)
                .HasDefaultValue(4)
                .HasColumnName("ossp_KsDataZdGosp");
            entity.Property(e => e.OsspKsKolumna)
                .HasDefaultValue(7)
                .HasColumnName("ossp_KsKolumna");
            entity.Property(e => e.OsspKsWgParam)
                .HasDefaultValue(true)
                .HasColumnName("ossp_KsWgParam");
            entity.Property(e => e.OsspOstrzegajBrakKontrahentaNaDokumencie)
                .HasDefaultValue(true)
                .HasColumnName("ossp_OstrzegajBrakKontrahentaNaDokumencie");
            entity.Property(e => e.OsspOstrzegajBrakKontrahentaWkartotece)
                .HasDefaultValue(true)
                .HasColumnName("ossp_OstrzegajBrakKontrahentaWKartotece");
            entity.Property(e => e.OsspParamEwidId).HasColumnName("ossp_ParamEwidId");
            entity.Property(e => e.OsspPrzeniesienieDatyWystawienia)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzeniesienieDatyWystawienia");
            entity.Property(e => e.OsspPrzeniesienieWartosciBrutto).HasColumnName("ossp_PrzeniesienieWartosciBrutto");
            entity.Property(e => e.OsspPrzepisywanieDatyWystawienia)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieDatyWystawienia");
            entity.Property(e => e.OsspPrzepisywanieDatyZakDostawy)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieDatyZakDostawy");
            entity.Property(e => e.OsspPrzepisywanieEwidVat)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieEwidVAT");
            entity.Property(e => e.OsspPrzepisywanieInformacjiDodatkowych)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieInformacjiDodatkowych");
            entity.Property(e => e.OsspPrzepisywanieKategorii)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieKategorii");
            entity.Property(e => e.OsspPrzepisywanieKh)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieKh");
            entity.Property(e => e.OsspPrzepisywanieMiesiacaNaliczenia)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieMiesiacaNaliczenia");
            entity.Property(e => e.OsspPrzepisywanieOpisu)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieOpisu");
            entity.Property(e => e.OsspPrzepisywaniePanstwaKonsumpcji)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywaniePanstwaKonsumpcji");
            entity.Property(e => e.OsspPrzepisywaniePanstwaRozpWysylki)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywaniePanstwaRozpWysylki");
            entity.Property(e => e.OsspPrzepisywanieTerminuPlatnosci)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieTerminuPlatnosci");
            entity.Property(e => e.OsspPrzepisywanieTransakcjiVat)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieTransakcjiVAT");
            entity.Property(e => e.OsspPrzepisywanieWalutyDokumentu)
                .HasDefaultValue(true)
                .HasColumnName("ossp_PrzepisywanieWalutyDokumentu");
            entity.Property(e => e.OsspUzupelnienieDatyZaplaty).HasColumnName("ossp_UzupelnienieDatyZaplaty");

            entity.HasOne(d => d.OsspParamEwid).WithOne(p => p.OssParametr)
                .HasForeignKey<OssParametr>(d => d.OsspParamEwidId)
                .HasConstraintName("FK_oss_Parametr_par__Ewid");
        });

        modelBuilder.Entity<OssPozycja>(entity =>
        {
            entity.HasKey(e => e.OepId);

            entity.ToTable("oss_Pozycja");

            entity.Property(e => e.OepId)
                .ValueGeneratedNever()
                .HasColumnName("oep_Id");
            entity.Property(e => e.OepIdEwVat).HasColumnName("oep_IdEwVat");
            entity.Property(e => e.OepIlosc)
                .HasColumnType("money")
                .HasColumnName("oep_Ilosc");
            entity.Property(e => e.OepJednostkaMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("oep_JednostkaMiary");
            entity.Property(e => e.OepNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oep_Nazwa");
            entity.Property(e => e.OepWartoscNetto)
                .HasColumnType("money")
                .HasColumnName("oep_WartoscNetto");

            entity.HasOne(d => d.OepIdEwVatNavigation).WithMany(p => p.OssPozycjas)
                .HasForeignKey(d => d.OepIdEwVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_oss_Pozycja_oss__Ewid");
        });

        modelBuilder.Entity<ParEwid>(entity =>
        {
            entity.HasKey(e => e.PeId);

            entity.ToTable("par__Ewid");

            entity.Property(e => e.PeId)
                .ValueGeneratedNever()
                .HasColumnName("pe_Id");
            entity.Property(e => e.PeDomyslne).HasColumnName("pe_Domyslne");
            entity.Property(e => e.PeIdTypu).HasColumnName("pe_IdTypu");
            entity.Property(e => e.PeNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pe_Nazwa");
            entity.Property(e => e.PeStatusNowosci).HasColumnName("pe_StatusNowosci");

            entity.HasOne(d => d.PeIdTypuNavigation).WithMany(p => p.ParEwids)
                .HasForeignKey(d => d.PeIdTypu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_par__Ewid_par_Typ");

            entity.HasMany(d => d.PepIdUzytkownikas).WithMany(p => p.PepIdObiektus)
                .UsingEntity<Dictionary<string, object>>(
                    "ParEwidProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PepIdUzytkownika")
                        .HasConstraintName("FK_par_EwidProfil_pd_Uzytkownik"),
                    l => l.HasOne<ParEwid>().WithMany()
                        .HasForeignKey("PepIdObiektu")
                        .HasConstraintName("FK_par_EwidProfil_par__Ewid"),
                    j =>
                    {
                        j.HasKey("PepIdObiektu", "PepIdUzytkownika");
                        j.ToTable("par_EwidProfil");
                        j.IndexerProperty<int>("PepIdObiektu").HasColumnName("pep_IdObiektu");
                        j.IndexerProperty<int>("PepIdUzytkownika").HasColumnName("pep_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<ParTyp>(entity =>
        {
            entity.HasKey(e => e.PtId);

            entity.ToTable("par_Typ");

            entity.Property(e => e.PtId)
                .ValueGeneratedNever()
                .HasColumnName("pt_Id");
            entity.Property(e => e.PtAppObjId).HasColumnName("pt_AppObjId");
            entity.Property(e => e.PtIndywidualizowalny)
                .HasDefaultValue(true)
                .HasColumnName("pt_Indywidualizowalny");
            entity.Property(e => e.PtNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pt_Nazwa");
            entity.Property(e => e.PtOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pt_Opis");
            entity.Property(e => e.PtProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pt_ProgId");
            entity.Property(e => e.PtProgIdCtx).HasColumnName("pt_ProgIdCtx");
            entity.Property(e => e.PtProgramy)
                .HasDefaultValueSql("(0xFFFFFFFF)")
                .HasColumnName("pt_Programy");
            entity.Property(e => e.PtStatusNowosci).HasColumnName("pt_StatusNowosci");
            entity.Property(e => e.PtUkryte).HasColumnName("pt_Ukryte");

            entity.HasMany(d => d.PtpIdUzytkownikas).WithMany(p => p.PtpIdObiektus)
                .UsingEntity<Dictionary<string, object>>(
                    "ParTypProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PtpIdUzytkownika")
                        .HasConstraintName("FK_par_TypProfil_pd_Uzytkownik"),
                    l => l.HasOne<ParTyp>().WithMany()
                        .HasForeignKey("PtpIdObiektu")
                        .HasConstraintName("FK_par_TypProfil_par_Typ"),
                    j =>
                    {
                        j.HasKey("PtpIdObiektu", "PtpIdUzytkownika");
                        j.ToTable("par_TypProfil");
                        j.IndexerProperty<int>("PtpIdObiektu").HasColumnName("ptp_IdObiektu");
                        j.IndexerProperty<int>("PtpIdUzytkownika").HasColumnName("ptp_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<PbDokument>(entity =>
        {
            entity.HasKey(e => e.PbdId).HasName("PK_pb__Dokumenty");

            entity.ToTable("pb__Dokument");

            entity.Property(e => e.PbdId)
                .ValueGeneratedNever()
                .HasColumnName("pbd_Id");
            entity.Property(e => e.PbdDataDokumentu)
                .HasDefaultValueSql("('20200101')")
                .HasColumnType("datetime")
                .HasColumnName("pbd_DataDokumentu");
            entity.Property(e => e.PbdDataPrzeslania)
                .HasDefaultValueSql("('20200101')")
                .HasColumnType("datetime")
                .HasColumnName("pbd_DataPrzeslania");
            entity.Property(e => e.PbdDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("pbd_DataWystawienia");
            entity.Property(e => e.PbdDataZakonczeniaDostawy)
                .HasColumnType("datetime")
                .HasColumnName("pbd_DataZakonczeniaDostawy");
            entity.Property(e => e.PbdDopasowanieSchematu).HasColumnName("pbd_DopasowanieSchematu");
            entity.Property(e => e.PbdIdDokumentuWprowadzonego).HasColumnName("pbd_IdDokumentuWprowadzonego");
            entity.Property(e => e.PbdIdGrupaDokumentu).HasColumnName("pbd_IdGrupaDokumentu");
            entity.Property(e => e.PbdIdKategorii).HasColumnName("pbd_IdKategorii");
            entity.Property(e => e.PbdIdKontrahenta).HasColumnName("pbd_IdKontrahenta");
            entity.Property(e => e.PbdIdSchematuImportu).HasColumnName("pbd_IdSchematuImportu");
            entity.Property(e => e.PbdMiesiacRozliczeniowy)
                .HasDefaultValueSql("('20200101')")
                .HasColumnType("datetime")
                .HasColumnName("pbd_MiesiacRozliczeniowy");
            entity.Property(e => e.PbdNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pbd_Nazwa");
            entity.Property(e => e.PbdNotatka)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pbd_Notatka");
            entity.Property(e => e.PbdNumerDokumentu)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pbd_NumerDokumentu");
            entity.Property(e => e.PbdNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("pbd_NumerKSeF");
            entity.Property(e => e.PbdOrientacjaStron)
                .HasColumnType("image")
                .HasColumnName("pbd_OrientacjaStron");
            entity.Property(e => e.PbdPowodOdrzucenia)
                .IsUnicode(false)
                .HasColumnName("pbd_PowodOdrzucenia");
            entity.Property(e => e.PbdRodzajDokumentuGlownego)
                .HasDefaultValue(1)
                .HasColumnName("pbd_RodzajDokumentuGlownego");
            entity.Property(e => e.PbdRodzajFaktury)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("pbd_RodzajFaktury");
            entity.Property(e => e.PbdSchematZatwierdzony).HasColumnName("pbd_SchematZatwierdzony");
            entity.Property(e => e.PbdStatus).HasColumnName("pbd_Status");
            entity.Property(e => e.PbdStatusOcr).HasColumnName("pbd_StatusOcr");
            entity.Property(e => e.PbdTrybWprowadzania)
                .HasDefaultValue(1)
                .HasColumnName("pbd_TrybWprowadzania");
            entity.Property(e => e.PbdTypDokumentu).HasColumnName("pbd_TypDokumentu");
            entity.Property(e => e.PbdTypDokumentuGlownego).HasColumnName("pbd_TypDokumentuGlownego");
            entity.Property(e => e.PbdTypDokumentuPowiazanego).HasColumnName("pbd_TypDokumentuPowiazanego");
            entity.Property(e => e.PbdTypDokumentuWprowadzonego).HasColumnName("pbd_TypDokumentuWprowadzonego");
            entity.Property(e => e.PbdWprowadzDokument)
                .HasDefaultValue(true)
                .HasColumnName("pbd_WprowadzDokument");

            entity.HasOne(d => d.PbdIdGrupaDokumentuNavigation).WithMany(p => p.PbDokuments)
                .HasForeignKey(d => d.PbdIdGrupaDokumentu)
                .HasConstraintName("FK_pb__Dokument_sl_GrupaDokumentow");

            entity.HasOne(d => d.PbdIdKategoriiNavigation).WithMany(p => p.PbDokuments)
                .HasForeignKey(d => d.PbdIdKategorii)
                .HasConstraintName("FK_pb__Dokument_sl_Kategoria");

            entity.HasOne(d => d.PbdIdKontrahentaNavigation).WithMany(p => p.PbDokuments)
                .HasForeignKey(d => d.PbdIdKontrahenta)
                .HasConstraintName("FK_pb__Dokument_kh__Kontrahent");

            entity.HasOne(d => d.PbdIdSchematuImportuNavigation).WithMany(p => p.PbDokuments)
                .HasForeignKey(d => d.PbdIdSchematuImportu)
                .HasConstraintName("FK_pb__Dokument_im_SchematImportu");
        });

        modelBuilder.Entity<PbKatalogBlokadum>(entity =>
        {
            entity.HasKey(e => new { e.PbbKatalogStacja, e.PbbKatalogSciezka });

            entity.ToTable("pb_KatalogBlokada", tb =>
                {
                    tb.HasTrigger("pb_KatalogBlokada_OnDelete");
                    tb.HasTrigger("pb_KatalogBlokada_OnInsert");
                });

            entity.Property(e => e.PbbKatalogStacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pbb_KatalogStacja");
            entity.Property(e => e.PbbKatalogSciezka)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pbb_KatalogSciezka");
            entity.Property(e => e.PbbUzytkownikNazwa)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pbb_UzytkownikNazwa");
            entity.Property(e => e.PbbUzytkownikStacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pbb_UzytkownikStacja");
        });

        modelBuilder.Entity<PbParametr>(entity =>
        {
            entity.HasKey(e => e.PbparId);

            entity.ToTable("pb_Parametr");

            entity.Property(e => e.PbparId)
                .ValueGeneratedNever()
                .HasColumnName("pbpar_Id");
            entity.Property(e => e.PbparBlokadaPobierania).HasColumnName("pbpar_BlokadaPobierania");
            entity.Property(e => e.PbparMaksRozmiar)
                .HasDefaultValue(150)
                .HasColumnName("pbpar_MaksRozmiar");
            entity.Property(e => e.PbparPobierajPlikiNaWejscie)
                .HasDefaultValue(true)
                .HasColumnName("pbpar_PobierajPlikiNaWejscie");
        });

        modelBuilder.Entity<PbPlik>(entity =>
        {
            entity.HasKey(e => e.PbpId);

            entity.ToTable("pb_Plik");

            entity.Property(e => e.PbpId)
                .ValueGeneratedNever()
                .HasColumnName("pbp_Id");
            entity.Property(e => e.PbpData)
                .HasColumnType("datetime")
                .HasColumnName("pbp_Data");
            entity.Property(e => e.PbpIdBiura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .UseCollation("Polish_BIN")
                .HasColumnName("pbp_IdBiura");
            entity.Property(e => e.PbpIdDokumentu).HasColumnName("pbp_IdDokumentu");
            entity.Property(e => e.PbpKolejnosc).HasColumnName("pbp_Kolejnosc");
            entity.Property(e => e.PbpKomentarz)
                .IsUnicode(false)
                .HasColumnName("pbp_Komentarz");
            entity.Property(e => e.PbpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pbp_Nazwa");
            entity.Property(e => e.PbpOcr)
                .HasColumnType("image")
                .HasColumnName("pbp_Ocr");
            entity.Property(e => e.PbpRozmiar).HasColumnName("pbp_Rozmiar");

            entity.HasOne(d => d.PbpIdDokumentuNavigation).WithMany(p => p.PbPliks)
                .HasForeignKey(d => d.PbpIdDokumentu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pb_Plik_pb__Dokument");
        });

        modelBuilder.Entity<PdBlokadaObiekt>(entity =>
        {
            entity.HasKey(e => e.BloId).HasName("PK__pd_Bloka__F40B808E67D51339");

            entity.ToTable("pd_BlokadaObiekt");

            entity.Property(e => e.BloId)
                .ValueGeneratedNever()
                .HasColumnName("blo_Id");
            entity.Property(e => e.BloData)
                .HasColumnType("datetime")
                .HasColumnName("blo_Data");
            entity.Property(e => e.BloDataQuattro)
                .HasColumnType("datetime")
                .HasColumnName("blo_DataQuattro");
            entity.Property(e => e.BloDataRew)
                .HasColumnType("datetime")
                .HasColumnName("blo_DataRew");
            entity.Property(e => e.BloOffset).HasColumnName("blo_Offset");
            entity.Property(e => e.BloParamEwidId).HasColumnName("blo_ParamEwidId");
            entity.Property(e => e.BloTyp).HasColumnName("blo_Typ");
            entity.Property(e => e.BloTypObiektu).HasColumnName("blo_TypObiektu");
            entity.Property(e => e.BloTypObiektuEx).HasColumnName("blo_TypObiektuEx");

            entity.HasOne(d => d.BloParamEwid).WithMany(p => p.PdBlokadaObiekts)
                .HasPrincipalKey(p => p.BlParamEwidId)
                .HasForeignKey(d => d.BloParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_BlokadaObiekt_pd_Blokada");
        });

        modelBuilder.Entity<PdBlokadaObiektGrupa>(entity =>
        {
            entity.HasKey(e => e.BogrId);

            entity.ToTable("pd_BlokadaObiektGrupa");

            entity.Property(e => e.BogrId)
                .ValueGeneratedNever()
                .HasColumnName("bogr_Id");
            entity.Property(e => e.BogrIdGrupy).HasColumnName("bogr_IdGrupy");
            entity.Property(e => e.BogrTypObiektu).HasColumnName("bogr_TypObiektu");
            entity.Property(e => e.BogrTypObiektuEx).HasColumnName("bogr_TypObiektuEx");

            entity.HasOne(d => d.BogrIdGrupyNavigation).WithMany(p => p.PdBlokadaObiektGrupas)
                .HasForeignKey(d => d.BogrIdGrupy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_BlokadaObiektGrupa_sl_GrupaBlokadyObiektu");
        });

        modelBuilder.Entity<PdBlokadum>(entity =>
        {
            entity.HasKey(e => e.BlId);

            entity.ToTable("pd_Blokada");

            entity.HasIndex(e => e.BlParamEwidId, "IX_pd_Blokada").IsUnique();

            entity.Property(e => e.BlId)
                .ValueGeneratedNever()
                .HasColumnName("bl_Id");
            entity.Property(e => e.BlBlokadaRew)
                .HasColumnType("datetime")
                .HasColumnName("bl_BlokadaRew");
            entity.Property(e => e.BlBlokadaSubiekt)
                .HasColumnType("datetime")
                .HasColumnName("bl_BlokadaSubiekt");
            entity.Property(e => e.BlDataQuattro)
                .HasColumnType("datetime")
                .HasColumnName("bl_DataQuattro");
            entity.Property(e => e.BlOffset).HasColumnName("bl_Offset");
            entity.Property(e => e.BlParamEwidId).HasColumnName("bl_ParamEwidId");
            entity.Property(e => e.BlTyp).HasColumnName("bl_Typ");

            entity.HasOne(d => d.BlParamEwid).WithOne(p => p.PdBlokadum)
                .HasForeignKey<PdBlokadum>(d => d.BlParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_Blokada_par__Ewid");
        });

        modelBuilder.Entity<PdDokument>(entity =>
        {
            entity.HasKey(e => e.PdkId);

            entity.ToTable("pd_Dokument");

            entity.HasIndex(e => e.PdkIdPodmiotu, "IX_pd_Dokument_IdPodmiotu");

            entity.Property(e => e.PdkId)
                .ValueGeneratedNever()
                .HasColumnName("pdk_Id");
            entity.Property(e => e.PdkDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("pdk_DataModyfikacji");
            entity.Property(e => e.PdkIdKategorii).HasColumnName("pdk_IdKategorii");
            entity.Property(e => e.PdkIdPersonelu).HasColumnName("pdk_IdPersonelu");
            entity.Property(e => e.PdkIdPodmiotu).HasColumnName("pdk_IdPodmiotu");
            entity.Property(e => e.PdkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pdk_Nazwa");
            entity.Property(e => e.PdkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pdk_Opis");
            entity.Property(e => e.PdkTresc)
                .HasColumnType("image")
                .HasColumnName("pdk_Tresc");
            entity.Property(e => e.PdkTyp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pdk_Typ");
            entity.Property(e => e.PdkZablokowany).HasColumnName("pdk_Zablokowany");

            entity.HasOne(d => d.PdkIdKategoriiNavigation).WithMany(p => p.PdDokuments)
                .HasForeignKey(d => d.PdkIdKategorii)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_Dokument_sl_KategoriaDokumentu");

            entity.HasOne(d => d.PdkIdPersoneluNavigation).WithMany(p => p.PdDokuments)
                .HasForeignKey(d => d.PdkIdPersonelu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_Dokument_pd_Uzytkownik");

            entity.HasOne(d => d.PdkIdPodmiotuNavigation).WithMany(p => p.PdDokuments)
                .HasForeignKey(d => d.PdkIdPodmiotu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_Dokument_pd__Podmiot");
        });

        modelBuilder.Entity<PdFobo>(entity =>
        {
            entity.HasKey(e => e.FbId);

            entity.ToTable("pd_Fobos");

            entity.Property(e => e.FbId)
                .ValueGeneratedNever()
                .HasColumnName("fb_Id");
            entity.Property(e => e.FbBusinessId).HasColumnName("fb_BusinessId");
            entity.Property(e => e.FbEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fb_Email");
            entity.Property(e => e.FbFileOutputPath)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("fb_FileOutputPath");
            entity.Property(e => e.FbMoveToOutput).HasColumnName("fb_MoveToOutput");
            entity.Property(e => e.FbSharedServices).HasColumnName("fb_SharedServices");
        });

        modelBuilder.Entity<PdKonwersjaInfo>(entity =>
        {
            entity.HasKey(e => e.KiId);

            entity.ToTable("pd_KonwersjaInfo");

            entity.Property(e => e.KiId).HasColumnName("ki_Id");
            entity.Property(e => e.KiDataKonwersji)
                .HasColumnType("datetime")
                .HasColumnName("ki_DataKonwersji");
            entity.Property(e => e.KiKonwersjaOdlaczanieId).HasColumnName("ki_KonwersjaOdlaczanieId");
            entity.Property(e => e.KiWersjaDo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ki_WersjaDo");
            entity.Property(e => e.KiWersjaProgramu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ki_WersjaProgramu");

            entity.HasOne(d => d.KiKonwersjaOdlaczanie).WithMany(p => p.PdKonwersjaInfos)
                .HasForeignKey(d => d.KiKonwersjaOdlaczanieId)
                .HasConstraintName("FK_pd_KonwersjaInfo_pd_KonwersjaOdlaczanie");
        });

        modelBuilder.Entity<PdKonwersjaOdlaczanie>(entity =>
        {
            entity.HasKey(e => e.KbId);

            entity.ToTable("pd_KonwersjaOdlaczanie", tb => tb.HasTrigger("tr_PdKonwersjaOdlaczanie_Inserting_Updating"));

            entity.Property(e => e.KbId).HasColumnName("kb_Id");
            entity.Property(e => e.KbAktywne).HasColumnName("kb_Aktywne");
            entity.Property(e => e.KbDodatkoweInfo)
                .HasMaxLength(256)
                .HasColumnName("kb_DodatkoweInfo");
            entity.Property(e => e.KbGodzinaDodania)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("kb_GodzinaDodania");
            entity.Property(e => e.KbKonwersjaRozp).HasColumnName("kb_KonwersjaRozp");
            entity.Property(e => e.KbOsobaKonwertujaca)
                .HasMaxLength(50)
                .HasColumnName("kb_OsobaKonwertujaca");
            entity.Property(e => e.KbZaIleAkcja)
                .HasDefaultValue(5)
                .HasColumnName("kb_ZaIleAkcja");
        });

        modelBuilder.Entity<PdOdlaczanie>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pd_Odlaczanie");

            entity.Property(e => e.PdoData)
                .HasColumnType("datetime")
                .HasColumnName("pdo_Data");
            entity.Property(e => e.PdoKomputer)
                .HasMaxLength(128)
                .IsFixedLength()
                .HasColumnName("pdo_Komputer");
            entity.Property(e => e.PdoProces)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("pdo_Proces");
        });

        modelBuilder.Entity<PdOkre>(entity =>
        {
            entity.HasKey(e => e.OkrId);

            entity.ToTable("pd_Okres");

            entity.HasIndex(e => e.OkrDataDo, "IX_pd_Okres_Do").IsUnique();

            entity.HasIndex(e => e.OkrDataOd, "IX_pd_Okres_Od").IsUnique();

            entity.Property(e => e.OkrId)
                .ValueGeneratedNever()
                .HasColumnName("okr_Id");
            entity.Property(e => e.OkrAktywny)
                .HasDefaultValue(true)
                .HasColumnName("okr_Aktywny");
            entity.Property(e => e.OkrDataDo)
                .HasColumnType("datetime")
                .HasColumnName("okr_DataDo");
            entity.Property(e => e.OkrDataOd)
                .HasColumnType("datetime")
                .HasColumnName("okr_DataOd");
            entity.Property(e => e.OkrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("okr_Nazwa");
            entity.Property(e => e.OkrTypOkresu)
                .HasDefaultValue(3)
                .HasColumnName("okr_TypOkresu");
        });

        modelBuilder.Entity<PdOstrzezenium>(entity =>
        {
            entity.HasKey(e => new { e.OstNumerProgramowy, e.OstIdUzytkownika }).HasName("PK__pd_Ostrzezenia");

            entity.ToTable("pd_Ostrzezenia");

            entity.Property(e => e.OstNumerProgramowy).HasColumnName("ost_NumerProgramowy");
            entity.Property(e => e.OstIdUzytkownika).HasColumnName("ost_IdUzytkownika");
            entity.Property(e => e.OstNiePokazujWiecejFlagi).HasColumnName("ost_NiePokazujWiecejFlagi");
            entity.Property(e => e.OstPokazujRazDlaWszystkich).HasColumnName("ost_PokazujRazDlaWszystkich");

            entity.HasOne(d => d.OstIdUzytkownikaNavigation).WithMany(p => p.PdOstrzezenia)
                .HasForeignKey(d => d.OstIdUzytkownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_Ostrzezenia_pd_Uzytkownik");
        });

        modelBuilder.Entity<PdParametr>(entity =>
        {
            entity.HasKey(e => e.PdpId).HasName("PK_pd_Parametry");

            entity.ToTable("pd_Parametr");

            entity.Property(e => e.PdpId)
                .ValueGeneratedNever()
                .HasColumnName("pdp_Id");
            entity.Property(e => e.PdpArchDataOst)
                .HasColumnType("datetime")
                .HasColumnName("pdp_ArchDataOst");
            entity.Property(e => e.PdpArchInterwal)
                .HasDefaultValue(0)
                .HasColumnName("pdp_ArchInterwal");
            entity.Property(e => e.PdpArchKomputer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pdp_ArchKomputer");
            entity.Property(e => e.PdpArchNaWybrKomp).HasColumnName("pdp_ArchNaWybrKomp");
            entity.Property(e => e.PdpArchNaZakoncz)
                .HasDefaultValue(true)
                .HasColumnName("pdp_ArchNaZakoncz");
            entity.Property(e => e.PdpArchOkresowa).HasColumnName("pdp_ArchOkresowa");
            entity.Property(e => e.PdpArchPokazUst)
                .HasDefaultValue(true)
                .HasColumnName("pdp_ArchPokazUst");
            entity.Property(e => e.PdpArchPytaj)
                .HasDefaultValue(true)
                .HasColumnName("pdp_ArchPytaj");
            entity.Property(e => e.PdpArchUzytkOst)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pdp_ArchUzytkOst");
            entity.Property(e => e.PdpCzasBlok).HasColumnName("pdp_CzasBlok");
        });

        modelBuilder.Entity<PdParametrHaslo>(entity =>
        {
            entity.HasKey(e => e.PhaId);

            entity.ToTable("pd_ParametrHaslo");

            entity.Property(e => e.PhaId)
                .ValueGeneratedNever()
                .HasColumnName("pha_Id");
            entity.Property(e => e.PhaCyfry).HasColumnName("pha_Cyfry");
            entity.Property(e => e.PhaDlugosc).HasColumnName("pha_Dlugosc");
            entity.Property(e => e.PhaMaleLitery).HasColumnName("pha_MaleLitery");
            entity.Property(e => e.PhaParamEwidId).HasColumnName("pha_ParamEwidId");
            entity.Property(e => e.PhaWielkieLitery).HasColumnName("pha_WielkieLitery");
            entity.Property(e => e.PhaZmiana).HasColumnName("pha_Zmiana");
            entity.Property(e => e.PhaZmianaDni).HasColumnName("pha_ZmianaDni");
            entity.Property(e => e.PhaZnakiSpecjalne).HasColumnName("pha_ZnakiSpecjalne");

            entity.HasOne(d => d.PhaParamEwid).WithMany(p => p.PdParametrHaslos)
                .HasForeignKey(d => d.PhaParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_ParametrHaslo_par__Ewid");
        });

        modelBuilder.Entity<PdParametrHist>(entity =>
        {
            entity.HasKey(e => e.ParId);

            entity.ToTable("pd_ParametrHist");

            entity.Property(e => e.ParId).HasColumnName("par_Id");
            entity.Property(e => e.ParAbonament).HasColumnName("par_Abonament");
            entity.Property(e => e.ParNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("par_Nazwa");
            entity.Property(e => e.ParWartoscBool).HasColumnName("par_WartoscBool");
            entity.Property(e => e.ParWartoscCy)
                .HasColumnType("money")
                .HasColumnName("par_WartoscCy");
            entity.Property(e => e.ParWartoscDate)
                .HasColumnType("datetime")
                .HasColumnName("par_WartoscDate");
            entity.Property(e => e.ParWartoscLong).HasColumnName("par_WartoscLong");
            entity.Property(e => e.ParWartoscString)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("par_WartoscString");
            entity.Property(e => e.ParWazneDo)
                .HasColumnType("datetime")
                .HasColumnName("par_WazneDo");
            entity.Property(e => e.ParWazneOd)
                .HasColumnType("datetime")
                .HasColumnName("par_WazneOd");
        });

        modelBuilder.Entity<PdPodmiot>(entity =>
        {
            entity.HasKey(e => e.PdId);

            entity.ToTable("pd__Podmiot");

            entity.Property(e => e.PdId)
                .ValueGeneratedNever()
                .HasColumnName("pd_Id");
            entity.Property(e => e.PdAbonPokazDymki)
                .HasDefaultValue(true)
                .HasColumnName("pd_AbonPokazDymki");
            entity.Property(e => e.PdAnkDemo).HasColumnName("pd_AnkDemo");
            entity.Property(e => e.PdCrm).HasColumnName("pd_CRM");
            entity.Property(e => e.PdCzyUstawionoDateRozpDzial).HasColumnName("pd_CzyUstawionoDateRozpDzial");
            entity.Property(e => e.PdDaneDemo).HasColumnName("pd_DaneDemo");
            entity.Property(e => e.PdDataRejestracji)
                .HasColumnType("datetime")
                .HasColumnName("pd_DataRejestracji");
            entity.Property(e => e.PdDataRezygnacjiZryczaltu)
                .HasColumnType("datetime")
                .HasColumnName("pd_DataRezygnacjiZRyczaltu");
            entity.Property(e => e.PdDataRozpDzial)
                .HasColumnType("datetime")
                .HasColumnName("pd_DataRozpDzial");
            entity.Property(e => e.PdDisableScripts)
                .HasDefaultValue(true)
                .HasColumnName("pd_DisableScripts");
            entity.Property(e => e.PdDmn).HasColumnName("pd_DMN");
            entity.Property(e => e.PdDzHandlowa).HasColumnName("pd_DzHandlowa");
            entity.Property(e => e.PdDzProdukcyjna).HasColumnName("pd_DzProdukcyjna");
            entity.Property(e => e.PdDzUslugowa).HasColumnName("pd_DzUslugowa");
            entity.Property(e => e.PdEbankSaldo).HasColumnName("pd_EBankSaldo");
            entity.Property(e => e.PdEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_Email");
            entity.Property(e => e.PdFormaPrawna).HasColumnName("pd_FormaPrawna");
            entity.Property(e => e.PdIdWlasciciela).HasColumnName("pd_IdWlasciciela");
            entity.Property(e => e.PdInfoHtml)
                .HasMaxLength(6000)
                .HasDefaultValueSql("(CONVERT([varbinary](6000),'',(0)))")
                .HasColumnName("pd_InfoHtml");
            entity.Property(e => e.PdKasa).HasColumnName("pd_Kasa");
            entity.Property(e => e.PdKatDkr).HasColumnName("pd_KatDkr");
            entity.Property(e => e.PdKlientEmail).HasColumnName("pd_KlientEmail");
            entity.Property(e => e.PdKmr).HasColumnName("pd_KMR");
            entity.Property(e => e.PdKodEkd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_KodEKD");
            entity.Property(e => e.PdKodKgn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_KodKGN");
            entity.Property(e => e.PdKonto).HasColumnName("pd_Konto");
            entity.Property(e => e.PdLicCentrala).HasColumnName("pd_LicCentrala");
            entity.Property(e => e.PdLicEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicEmail");
            entity.Property(e => e.PdLicFaks)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicFaks");
            entity.Property(e => e.PdLicIdGminy).HasColumnName("pd_LicIdGminy");
            entity.Property(e => e.PdLicInneDane).HasColumnName("pd_LicInneDane");
            entity.Property(e => e.PdLicKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicKod");
            entity.Property(e => e.PdLicKorInneDane)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnName("pd_LicKorInneDane");
            entity.Property(e => e.PdLicKorKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicKorKod");
            entity.Property(e => e.PdLicKorMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicKorMiejscowosc");
            entity.Property(e => e.PdLicKorNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicKorNazwa");
            entity.Property(e => e.PdLicKorOsobaOdp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicKorOsobaOdp");
            entity.Property(e => e.PdLicKorUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicKorUlica");
            entity.Property(e => e.PdLicKorWojewodztwo)
                .HasDefaultValue(-1)
                .HasColumnName("pd_LicKorWojewodztwo");
            entity.Property(e => e.PdLicMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicMiejscowosc");
            entity.Property(e => e.PdLicNazwaFirmy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicNazwaFirmy");
            entity.Property(e => e.PdLicNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicNIP");
            entity.Property(e => e.PdLicOsobaOdp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicOsobaOdp");
            entity.Property(e => e.PdLicTelefon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicTelefon");
            entity.Property(e => e.PdLicUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicUlica");
            entity.Property(e => e.PdLicUzInneDane).HasColumnName("pd_LicUzInneDane");
            entity.Property(e => e.PdLicUzKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicUzKod");
            entity.Property(e => e.PdLicUzMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicUzMiejscowosc");
            entity.Property(e => e.PdLicUzOsobaOdp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicUzOsobaOdp");
            entity.Property(e => e.PdLicUzTelefon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicUzTelefon");
            entity.Property(e => e.PdLicUzUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_LicUzUlica");
            entity.Property(e => e.PdLicWojewodztwo)
                .HasDefaultValue(-1)
                .HasColumnName("pd_LicWojewodztwo");
            entity.Property(e => e.PdMiesiacPierwszejWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("pd_MiesiacPierwszejWyplaty");
            entity.Property(e => e.PdNazwaDlaPlatnika)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_NazwaDlaPlatnika");
            entity.Property(e => e.PdNazwaRejestru)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_NazwaRejestru");
            entity.Property(e => e.PdNipue)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_NIPUE");
            entity.Property(e => e.PdNrBdo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_NrBDO");
            entity.Property(e => e.PdNrKrs)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_NrKRS");
            entity.Property(e => e.PdNrPdmPosredniczacego)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("pd_NrPdmPosredniczacego");
            entity.Property(e => e.PdNumerRejestru)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_NumerRejestru");
            entity.Property(e => e.PdObraz)
                .HasColumnType("image")
                .HasColumnName("pd_Obraz");
            entity.Property(e => e.PdOpisDzialalnosci)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_OpisDzialalnosci");
            entity.Property(e => e.PdOrganRejestrowy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_OrganRejestrowy");
            entity.Property(e => e.PdOrganZaloz)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_OrganZaloz");
            entity.Property(e => e.PdOsobaFizyczna).HasColumnName("pd_OsobaFizyczna");
            entity.Property(e => e.PdPlanKontWylaczAkt).HasColumnName("pd_PlanKontWylaczAkt");
            entity.Property(e => e.PdPlatKarSprzedaz).HasColumnName("pd_PlatKarSprzedaz");
            entity.Property(e => e.PdPlatKarZakup).HasColumnName("pd_PlatKarZakup");
            entity.Property(e => e.PdPlatOdrocz).HasColumnName("pd_PlatOdrocz");
            entity.Property(e => e.PdPodVatzarejestrowanyWue).HasColumnName("pd_PodVATZarejestrowanyWUE");
            entity.Property(e => e.PdRachBankowy).HasColumnName("pd_RachBankowy");
            entity.Property(e => e.PdRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pd_Regon");
            entity.Property(e => e.PdRodzajZmianyFormyOpodatkowania).HasColumnName("pd_RodzajZmianyFormyOpodatkowania");
            entity.Property(e => e.PdRokBoHopGrat).HasColumnName("pd_RokBoHopGrat");
            entity.Property(e => e.PdTelemetriaPlusZgoda).HasColumnName("pd_TelemetriaPlusZgoda");
            entity.Property(e => e.PdTelemetriaPlusZgodaPytano)
                .HasColumnType("datetime")
                .HasColumnName("pd_TelemetriaPlusZgodaPytano");
            entity.Property(e => e.PdTelemetriaZgoda).HasColumnName("pd_TelemetriaZgoda");
            entity.Property(e => e.PdTelemetriaZgodaPytano)
                .HasColumnType("datetime")
                .HasColumnName("pd_TelemetriaZgodaPytano");
            entity.Property(e => e.PdTypDzialalnosci).HasColumnName("pd_TypDzialalnosci");
            entity.Property(e => e.PdTypKadr).HasColumnName("pd_TypKadr");
            entity.Property(e => e.PdTypKsiegowosci).HasColumnName("pd_TypKsiegowosci");
            entity.Property(e => e.PdTypPdmAkcyzowego).HasColumnName("pd_TypPdmAkcyzowego");
            entity.Property(e => e.PdUrzSkarbowy).HasColumnName("pd_UrzSkarbowy");
            entity.Property(e => e.PdUtworzonoZbazy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pd_UtworzonoZBazy");
            entity.Property(e => e.PdUtworzonoZpodmiotu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pd_UtworzonoZPodmiotu");
            entity.Property(e => e.PdUzywajNipJakoNrAkcyzowy).HasColumnName("pd_UzywajNipJakoNrAkcyzowy");
            entity.Property(e => e.PdWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pd_WWW");

            entity.HasOne(d => d.PdIdWlascicielaNavigation).WithMany(p => p.PdPodmiots)
                .HasForeignKey(d => d.PdIdWlasciciela)
                .HasConstraintName("FK_pd__Podmiot_pd_Wspolnik");
        });

        modelBuilder.Entity<PdProdukt>(entity =>
        {
            entity.HasKey(e => e.EprId);

            entity.ToTable("pd_Produkt");

            entity.Property(e => e.EprId)
                .ValueGeneratedNever()
                .HasColumnName("epr_Id");
            entity.Property(e => e.EprLiczbaStanowisk).HasColumnName("epr_LiczbaStanowisk");
            entity.Property(e => e.EprNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("epr_Nazwa");
            entity.Property(e => e.EprStatusNowosci).HasColumnName("epr_StatusNowosci");

            entity.HasMany(d => d.PfIdUzytkownikas).WithMany(p => p.PfIdObiektus2)
                .UsingEntity<Dictionary<string, object>>(
                    "PdProduktProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_pd_ProduktProfil_pd_Uzytkownik"),
                    l => l.HasOne<PdProdukt>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_pd_ProduktProfil_pd_Produkt"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("pd_ProduktProfil");
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<PdRokObrotowy>(entity =>
        {
            entity.HasKey(e => e.RobrId);

            entity.ToTable("pd_RokObrotowy", tb =>
                {
                    tb.HasTrigger("pd_RokObrotowy_DodajPDz");
                    tb.HasTrigger("pd_RokObrotowy_DodajParametryNrDkr");
                    tb.HasTrigger("pd_RokObrotowy_DodajParametryPK");
                });

            entity.HasIndex(e => e.RobrDataDo, "IX_pd_RokObrotowy_Do").IsUnique();

            entity.HasIndex(e => e.RobrDataOd, "IX_pd_RokObrotowy_Od").IsUnique();

            entity.Property(e => e.RobrId)
                .ValueGeneratedNever()
                .HasColumnName("robr_Id");
            entity.Property(e => e.RobrDataDo)
                .HasColumnType("datetime")
                .HasColumnName("robr_DataDo");
            entity.Property(e => e.RobrDataOd)
                .HasColumnType("datetime")
                .HasColumnName("robr_DataOd");
            entity.Property(e => e.RobrDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("robr_DataZamkniecia");
            entity.Property(e => e.RobrIdObiektu)
                .HasDefaultValue(1)
                .HasColumnName("robr_IdObiektu");
            entity.Property(e => e.RobrIdZamykajacego).HasColumnName("robr_IdZamykajacego");
            entity.Property(e => e.RobrPlatnoscCit).HasColumnName("robr_PlatnoscCIT");
            entity.Property(e => e.RobrSpKomandCitOdMaja).HasColumnName("robr_SpKomandCitOdMaja");
            entity.Property(e => e.RobrSposobRozliczaniaCit).HasColumnName("robr_SposobRozliczaniaCIT");
            entity.Property(e => e.RobrStosujCitulgowy).HasColumnName("robr_StosujCITUlgowy");
            entity.Property(e => e.RobrSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("robr_Symbol");
            entity.Property(e => e.RobrWariantPp).HasColumnName("robr_WariantPP");
            entity.Property(e => e.RobrWariantRzs).HasColumnName("robr_WariantRZS");
            entity.Property(e => e.RobrZaliczkaPonizejTys)
                .HasDefaultValue(true)
                .HasColumnName("robr_ZaliczkaPonizejTys");
            entity.Property(e => e.RobrZamkniety).HasColumnName("robr_Zamkniety");
            entity.Property(e => e.RobrZpikNumeracja).HasColumnName("robr_ZpikNumeracja");
            entity.Property(e => e.RobrZpikNumeracjaStart)
                .HasDefaultValue(1)
                .HasColumnName("robr_ZpikNumeracjaStart");
            entity.Property(e => e.RobrZrodloSprawozdaniaPorownywanego).HasColumnName("robr_zrodloSprawozdaniaPorownywanego");

            entity.HasOne(d => d.RobrIdZamykajacegoNavigation).WithMany(p => p.PdRokObrotowies)
                .HasForeignKey(d => d.RobrIdZamykajacego)
                .HasConstraintName("FK_pd_RokObrotowy_pd_Uzytkownik");

            entity.HasOne(d => d.RobrWariantPpNavigation).WithMany(p => p.PdRokObrotowyRobrWariantPpNavigations)
                .HasForeignKey(d => d.RobrWariantPp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_RokObrotowy_sf_Sprawozdanie1");

            entity.HasOne(d => d.RobrWariantRzsNavigation).WithMany(p => p.PdRokObrotowyRobrWariantRzsNavigations)
                .HasForeignKey(d => d.RobrWariantRzs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_RokObrotowy_sf_Sprawozdanie");

            entity.HasMany(d => d.SfsnIdSprawozdania).WithMany(p => p.SfsnIdRokuObrotowegos)
                .UsingEntity<Dictionary<string, object>>(
                    "SfSprawozdanieNiewidoczne",
                    r => r.HasOne<SfSprawozdanie>().WithMany()
                        .HasForeignKey("SfsnIdSprawozdania")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_sf_SprawozdanieNiewidoczne_sf_Sprawozdanie"),
                    l => l.HasOne<PdRokObrotowy>().WithMany()
                        .HasForeignKey("SfsnIdRokuObrotowego")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_sf_SprawozdanieNiewidoczne_pd_RokObrotowy"),
                    j =>
                    {
                        j.HasKey("SfsnIdRokuObrotowego", "SfsnIdSprawozdania");
                        j.ToTable("sf_SprawozdanieNiewidoczne");
                        j.IndexerProperty<int>("SfsnIdRokuObrotowego").HasColumnName("sfsn_IdRokuObrotowego");
                        j.IndexerProperty<int>("SfsnIdSprawozdania").HasColumnName("sfsn_IdSprawozdania");
                    });
        });

        modelBuilder.Entity<PdRozszerzeniaUzytkownika>(entity =>
        {
            entity.HasKey(e => e.RuId).HasName("PK_RozszerzeniaUzytkownika");

            entity.ToTable("pd_RozszerzeniaUzytkownika");

            entity.Property(e => e.RuId)
                .ValueGeneratedNever()
                .HasColumnName("ru_Id");
            entity.Property(e => e.RuNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ru_Nazwa");
            entity.Property(e => e.RuOpis)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("ru_Opis");
            entity.Property(e => e.RuSkryptPoKonwersji)
                .HasColumnType("image")
                .HasColumnName("ru_SkryptPoKonwersji");
            entity.Property(e => e.RuSkryptPrzedKonwersja)
                .HasColumnType("image")
                .HasColumnName("ru_SkryptPrzedKonwersja");
            entity.Property(e => e.RuWersjaRozszerzenia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ru_WersjaRozszerzenia");
            entity.Property(e => e.RuWersjaZainstalowania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ru_WersjaZainstalowania");
        });

        modelBuilder.Entity<PdSesja>(entity =>
        {
            entity.HasKey(e => e.SsSpid).HasName("PK_pd_sesja");

            entity.ToTable("pd_Sesja", tb => tb.HasTrigger("tr_pdSesja_Updating"));

            entity.Property(e => e.SsSpid)
                .ValueGeneratedNever()
                .HasColumnName("ss_spid");
            entity.Property(e => e.SsApid).HasColumnName("ss_apid");
            entity.Property(e => e.SsData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ss_data");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.SsHid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ss_hid");
            entity.Property(e => e.SsIgnore).HasColumnName("ss_ignore");
            entity.Property(e => e.SsMagId).HasColumnName("ss_mag_id");
            entity.Property(e => e.SsRokObrId).HasColumnName("ss_rok_obr_id");
            entity.Property(e => e.SsUid).HasColumnName("ss_uid");
        });

        modelBuilder.Entity<PdStatystyka>(entity =>
        {
            entity.HasKey(e => e.PdsId);

            entity.ToTable("pd_Statystyka");

            entity.Property(e => e.PdsId)
                .ValueGeneratedNever()
                .HasColumnName("pds_Id");
            entity.Property(e => e.PdsData)
                .HasColumnType("datetime")
                .HasColumnName("pds_Data");
            entity.Property(e => e.PdsRaport)
                .HasColumnType("text")
                .HasColumnName("pds_Raport");
            entity.Property(e => e.PdsStatus).HasColumnName("pds_Status");
        });

        modelBuilder.Entity<PdUlubione>(entity =>
        {
            entity.HasKey(e => e.UlId);

            entity.ToTable("pd_Ulubione");

            entity.Property(e => e.UlId).HasColumnName("ul_Id");
            entity.Property(e => e.UlIdElementu).HasColumnName("ul_IdElementu");
            entity.Property(e => e.UlIdUzytkownika).HasColumnName("ul_IdUzytkownika");
            entity.Property(e => e.UlRodzajElementu).HasColumnName("ul_RodzajElementu");

            entity.HasOne(d => d.UlIdUzytkownikaNavigation).WithMany(p => p.PdUlubiones)
                .HasForeignKey(d => d.UlIdUzytkownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_Ulubione_pd_Uzytkownik");
        });

        modelBuilder.Entity<PdUprawnienie>(entity =>
        {
            entity.HasKey(e => e.UprId);

            entity.ToTable("pd_Uprawnienie");

            entity.Property(e => e.UprId)
                .ValueGeneratedNever()
                .HasColumnName("upr_Id");
            entity.Property(e => e.UprChecked).HasColumnName("upr_Checked");
            entity.Property(e => e.UprMagazynowe).HasColumnName("upr_Magazynowe");
            entity.Property(e => e.UprModul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("upr_Modul");
            entity.Property(e => e.UprNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("upr_Nazwa");
            entity.Property(e => e.UprProgram).HasColumnName("upr_Program");
            entity.Property(e => e.UprStatusNowosci).HasColumnName("upr_StatusNowosci");
            entity.Property(e => e.UprStatusNowosciM).HasColumnName("upr_StatusNowosciM");
            entity.Property(e => e.UprUkryte).HasColumnName("upr_Ukryte");
        });

        modelBuilder.Entity<PdUzytkMagazyn>(entity =>
        {
            entity.HasKey(e => e.UzmIdUzytkownika);

            entity.ToTable("pd_UzytkMagazyn");

            entity.Property(e => e.UzmIdUzytkownika)
                .ValueGeneratedNever()
                .HasColumnName("uzm_IdUzytkownika");
            entity.Property(e => e.UzmIdMagazynu).HasColumnName("uzm_IdMagazynu");

            entity.HasOne(d => d.UzmIdMagazynuNavigation).WithMany(p => p.PdUzytkMagazyns)
                .HasForeignKey(d => d.UzmIdMagazynu)
                .HasConstraintName("FK_pd_UzytkMagazyn_sl_Magazyn");

            entity.HasOne(d => d.UzmIdUzytkownikaNavigation).WithOne(p => p.PdUzytkMagazyn)
                .HasForeignKey<PdUzytkMagazyn>(d => d.UzmIdUzytkownika)
                .HasConstraintName("FK_pd_UzytkMagazyn_pd_Uzytkownik");
        });

        modelBuilder.Entity<PdUzytkModulHist>(entity =>
        {
            entity.HasKey(e => new { e.UzmhIdUzytkownika, e.UzmhPozycja });

            entity.ToTable("pd_UzytkModulHist");

            entity.Property(e => e.UzmhIdUzytkownika).HasColumnName("uzmh_IdUzytkownika");
            entity.Property(e => e.UzmhPozycja).HasColumnName("uzmh_Pozycja");
            entity.Property(e => e.UzmhAdresStrony)
                .HasMaxLength(2083)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzmh_AdresStrony");
            entity.Property(e => e.UzmhAktywny).HasColumnName("uzmh_Aktywny");
            entity.Property(e => e.UzmhClsid).HasColumnName("uzmh_CLSID");
            entity.Property(e => e.UzmhIdModulu).HasColumnName("uzmh_IdModulu");
            entity.Property(e => e.UzmhKontekst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzmh_Kontekst");
            entity.Property(e => e.UzmhNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzmh_Nazwa");
            entity.Property(e => e.UzmhTypKontekstu).HasColumnName("uzmh_TypKontekstu");
            entity.Property(e => e.UzmhTytulStrony)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzmh_TytulStrony");

            entity.HasOne(d => d.UzmhIdModuluNavigation).WithMany(p => p.PdUzytkModulHists)
                .HasForeignKey(d => d.UzmhIdModulu)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_pd_UzytkModulHist_ui_Modul");

            entity.HasOne(d => d.UzmhIdUzytkownikaNavigation).WithMany(p => p.PdUzytkModulHists)
                .HasForeignKey(d => d.UzmhIdUzytkownika)
                .HasConstraintName("FK_pd_UzytkModulHist_pd_Uzytkownik");
        });

        modelBuilder.Entity<PdUzytkOkre>(entity =>
        {
            entity.HasKey(e => e.UzoIdUzytkownika);

            entity.ToTable("pd_UzytkOkres");

            entity.Property(e => e.UzoIdUzytkownika)
                .ValueGeneratedNever()
                .HasColumnName("uzo_IdUzytkownika");
            entity.Property(e => e.UzoIdOkresu).HasColumnName("uzo_IdOkresu");

            entity.HasOne(d => d.UzoIdOkresuNavigation).WithMany(p => p.PdUzytkOkres)
                .HasForeignKey(d => d.UzoIdOkresu)
                .HasConstraintName("FK_pd_UzytkOkres_pd_Okres");

            entity.HasOne(d => d.UzoIdUzytkownikaNavigation).WithOne(p => p.PdUzytkOkre)
                .HasForeignKey<PdUzytkOkre>(d => d.UzoIdUzytkownika)
                .HasConstraintName("FK_pd_UzytkOkres_pd_Uzytkownik");
        });

        modelBuilder.Entity<PdUzytkParam>(entity =>
        {
            entity.HasKey(e => e.UzpIdUzytkownika);

            entity.ToTable("pd_UzytkParam");

            entity.Property(e => e.UzpIdUzytkownika)
                .ValueGeneratedNever()
                .HasColumnName("uzp_IdUzytkownika");
            entity.Property(e => e.UzpDataGestor)
                .HasColumnType("datetime")
                .HasColumnName("uzp_DataGestor");
            entity.Property(e => e.UzpDataGratyfikant)
                .HasColumnType("datetime")
                .HasColumnName("uzp_DataGratyfikant");
            entity.Property(e => e.UzpDataRachmistrz)
                .HasColumnType("datetime")
                .HasColumnName("uzp_DataRachmistrz");
            entity.Property(e => e.UzpDataRewizor)
                .HasColumnType("datetime")
                .HasColumnName("uzp_DataRewizor");
            entity.Property(e => e.UzpDataSubiekt)
                .HasColumnType("datetime")
                .HasColumnName("uzp_DataSubiekt");
            entity.Property(e => e.UzpInfoAboGestor)
                .HasColumnType("datetime")
                .HasColumnName("uzp_InfoAboGestor");
            entity.Property(e => e.UzpInfoAboGratyfikant)
                .HasColumnType("datetime")
                .HasColumnName("uzp_InfoAboGratyfikant");
            entity.Property(e => e.UzpInfoAboRachmistrz)
                .HasColumnType("datetime")
                .HasColumnName("uzp_InfoAboRachmistrz");
            entity.Property(e => e.UzpInfoAboRewizor)
                .HasColumnType("datetime")
                .HasColumnName("uzp_InfoAboRewizor");
            entity.Property(e => e.UzpInfoAboSubiekt)
                .HasColumnType("datetime")
                .HasColumnName("uzp_InfoAboSubiekt");
            entity.Property(e => e.UzpPrzypAboGestor)
                .HasColumnType("datetime")
                .HasColumnName("uzp_PrzypAboGestor");
            entity.Property(e => e.UzpPrzypAboGratyfikant)
                .HasColumnType("datetime")
                .HasColumnName("uzp_PrzypAboGratyfikant");
            entity.Property(e => e.UzpPrzypAboRachmistrz)
                .HasColumnType("datetime")
                .HasColumnName("uzp_PrzypAboRachmistrz");
            entity.Property(e => e.UzpPrzypAboRewizor)
                .HasColumnType("datetime")
                .HasColumnName("uzp_PrzypAboRewizor");
            entity.Property(e => e.UzpPrzypAboSubiekt)
                .HasColumnType("datetime")
                .HasColumnName("uzp_PrzypAboSubiekt");
            entity.Property(e => e.UzpPrzypAboWerGestor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzp_PrzypAboWerGestor");
            entity.Property(e => e.UzpPrzypAboWerGratyfikant)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzp_PrzypAboWerGratyfikant");
            entity.Property(e => e.UzpPrzypAboWerRachmistrz)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzp_PrzypAboWerRachmistrz");
            entity.Property(e => e.UzpPrzypAboWerRewizor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzp_PrzypAboWerRewizor");
            entity.Property(e => e.UzpPrzypAboWerSubiekt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uzp_PrzypAboWerSubiekt");
            entity.Property(e => e.UzpPrzypGestor).HasColumnName("uzp_PrzypGestor");
            entity.Property(e => e.UzpPrzypGratyfikant).HasColumnName("uzp_PrzypGratyfikant");
            entity.Property(e => e.UzpPrzypRachmistrz).HasColumnName("uzp_PrzypRachmistrz");
            entity.Property(e => e.UzpPrzypRewizor).HasColumnName("uzp_PrzypRewizor");
            entity.Property(e => e.UzpPrzypSubiekt).HasColumnName("uzp_PrzypSubiekt");

            entity.HasOne(d => d.UzpIdUzytkownikaNavigation).WithOne(p => p.PdUzytkParam)
                .HasForeignKey<PdUzytkParam>(d => d.UzpIdUzytkownika)
                .HasConstraintName("FK_pd_UzytkParam_pd_Uzytkownik");
        });

        modelBuilder.Entity<PdUzytkRok>(entity =>
        {
            entity.HasKey(e => e.UzrIdUzytkownika);

            entity.ToTable("pd_UzytkRok");

            entity.Property(e => e.UzrIdUzytkownika)
                .ValueGeneratedNever()
                .HasColumnName("uzr_IdUzytkownika");
            entity.Property(e => e.UzrIdRoku).HasColumnName("uzr_IdRoku");

            entity.HasOne(d => d.UzrIdRokuNavigation).WithMany(p => p.PdUzytkRoks)
                .HasForeignKey(d => d.UzrIdRoku)
                .HasConstraintName("FK_pd_UzytkRok_pd_RokObrotowy");

            entity.HasOne(d => d.UzrIdUzytkownikaNavigation).WithOne(p => p.PdUzytkRok)
                .HasForeignKey<PdUzytkRok>(d => d.UzrIdUzytkownika)
                .HasConstraintName("FK_pd_UzytkRok_pd_Uzytkownik");
        });

        modelBuilder.Entity<PdUzytkUpraw>(entity =>
        {
            entity.HasKey(e => e.UzupId);

            entity.ToTable("pd_UzytkUpraw");

            entity.Property(e => e.UzupId)
                .ValueGeneratedNever()
                .HasColumnName("uzup_Id");
            entity.Property(e => e.UzupUprawId).HasColumnName("uzup_UprawId");
            entity.Property(e => e.UzupUzytkId).HasColumnName("uzup_UzytkId");
        });

        modelBuilder.Entity<PdUzytkUprawMag>(entity =>
        {
            entity.HasKey(e => e.UzupmId);

            entity.ToTable("pd_UzytkUprawMag");

            entity.Property(e => e.UzupmId)
                .ValueGeneratedNever()
                .HasColumnName("uzupm_Id");
            entity.Property(e => e.UzupmMagId).HasColumnName("uzupm_MagId");
            entity.Property(e => e.UzupmUprawId).HasColumnName("uzupm_UprawId");
            entity.Property(e => e.UzupmUzytkId).HasColumnName("uzupm_UzytkId");
        });

        modelBuilder.Entity<PdUzytkownik>(entity =>
        {
            entity.HasKey(e => e.UzId);

            entity.ToTable("pd_Uzytkownik", tb =>
                {
                    tb.HasTrigger("pd_Uzytkownik_DodajUzMag");
                    tb.HasTrigger("pd_Uzytkownik_DodajUzOkr");
                    tb.HasTrigger("pd_Uzytkownik_DodajUzRok");
                    tb.HasTrigger("tr_pd_Uzytkownik_Deleting");
                    tb.HasTrigger("tr_pd_Uzytkownik_Inserting_Updating");
                });

            entity.HasIndex(e => e.UzIdentyfikator, "IX_pd_Uzytkownik_Ident").IsUnique();

            entity.Property(e => e.UzId)
                .ValueGeneratedNever()
                .HasColumnName("uz_Id");
            entity.Property(e => e.UzAlarmyInterwal).HasColumnName("uz_AlarmyInterwal");
            entity.Property(e => e.UzBlokadaKasy).HasColumnName("uz_BlokadaKasy");
            entity.Property(e => e.UzDataHasla)
                .HasColumnType("datetime")
                .HasColumnName("uz_DataHasla");
            entity.Property(e => e.UzDataPonownegoPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("uz_DataPonownegoPrzypomnienia");
            entity.Property(e => e.UzDomena)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uz_Domena");
            entity.Property(e => e.UzEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uz_EMail");
            entity.Property(e => e.UzGaduGadu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uz_GaduGadu");
            entity.Property(e => e.UzHaslo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uz_Haslo");
            entity.Property(e => e.UzIdGrupy).HasColumnName("uz_IdGrupy");
            entity.Property(e => e.UzIdKasy).HasColumnName("uz_IdKasy");
            entity.Property(e => e.UzIdKompozycji).HasColumnName("uz_IdKompozycji");
            entity.Property(e => e.UzIdMagazynu).HasColumnName("uz_IdMagazynu");
            entity.Property(e => e.UzIdPracownika).HasColumnName("uz_IdPracownika");
            entity.Property(e => e.UzIdentyfikator)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("uz_Identyfikator");
            entity.Property(e => e.UzImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uz_Imie");
            entity.Property(e => e.UzKlientEmail).HasColumnName("uz_KlientEmail");
            entity.Property(e => e.UzLimitStanowisk).HasColumnName("uz_LimitStanowisk");
            entity.Property(e => e.UzLogin)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uz_Login");
            entity.Property(e => e.UzLokalizacja)
                .HasMaxLength(256)
                .HasColumnName("uz_Lokalizacja");
            entity.Property(e => e.UzLokalizacjaPokazuj)
                .HasDefaultValue(true)
                .HasColumnName("uz_LokalizacjaPokazuj");
            entity.Property(e => e.UzNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("uz_Nazwisko");
            entity.Property(e => e.UzOstatnieKontoEmail).HasColumnName("uz_OstatnieKontoEmail");
            entity.Property(e => e.UzPodnoszenieUprawnienUserId).HasColumnName("uz_PodnoszenieUprawnienUserId");
            entity.Property(e => e.UzPracaZdalna).HasColumnName("uz_PracaZdalna");
            entity.Property(e => e.UzPrefiksOsobisty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uz_PrefiksOsobisty");
            entity.Property(e => e.UzProgram)
                .HasDefaultValue(1)
                .HasColumnName("uz_Program");
            entity.Property(e => e.UzRodzajInfoOwierszachListy)
                .HasDefaultValue(1)
                .HasColumnName("uz_RodzajInfoOWierszachListy");
            entity.Property(e => e.UzShowTutorialSms)
                .HasDefaultValue(true)
                .HasColumnName("uz_ShowTutorialSMS");
            entity.Property(e => e.UzSkype)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uz_Skype");
            entity.Property(e => e.UzStatus)
                .HasDefaultValue(true)
                .HasColumnName("uz_Status");
            entity.Property(e => e.UzStatusPrzypomnieniaZmianyVat)
                .HasDefaultValue(3)
                .HasColumnName("uz_StatusPrzypomnieniaZmianyVAT");
            entity.Property(e => e.UzUruchomCentralke).HasColumnName("uz_UruchomCentralke");
            entity.Property(e => e.UzZmianaHasla).HasColumnName("uz_ZmianaHasla");

            entity.HasOne(d => d.UzIdGrupyNavigation).WithMany(p => p.PdUzytkowniks)
                .HasForeignKey(d => d.UzIdGrupy)
                .HasConstraintName("FK_pd_Uzytkownik_sl_GrupaUz");

            entity.HasOne(d => d.UzIdKasyNavigation).WithMany(p => p.PdUzytkowniks)
                .HasForeignKey(d => d.UzIdKasy)
                .HasConstraintName("FK_pd_Uzytkownik_dks_Kasa");

            entity.HasOne(d => d.UzIdKompozycjiNavigation).WithMany(p => p.PdUzytkowniks)
                .HasForeignKey(d => d.UzIdKompozycji)
                .HasConstraintName("FK_pd_Uzytkownik_ui__Kompozycja");

            entity.HasOne(d => d.UzIdMagazynuNavigation).WithMany(p => p.PdUzytkowniks)
                .HasForeignKey(d => d.UzIdMagazynu)
                .HasConstraintName("FK_pd_Uzytkownik_sl_Magazyn");

            entity.HasOne(d => d.UzIdPracownikaNavigation).WithMany(p => p.PdUzytkowniks)
                .HasForeignKey(d => d.UzIdPracownika)
                .HasConstraintName("FK_pd_Uzytkownik_pr_Pracownik");

            entity.HasMany(d => d.ZpfIdObiektus).WithMany(p => p.ZpfIdUzytkownikas)
                .UsingEntity<Dictionary<string, object>>(
                    "SlRodzajZasobuProfil",
                    r => r.HasOne<SlRodzajZasobu>().WithMany()
                        .HasForeignKey("ZpfIdObiektu")
                        .HasConstraintName("FK_sl_RodzajZasobuProfil_sl_RodzajZasobu"),
                    l => l.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("ZpfIdUzytkownika")
                        .HasConstraintName("FK_sl_RodzajZasobuProfil_pd_Uzytkownik"),
                    j =>
                    {
                        j.HasKey("ZpfIdUzytkownika", "ZpfIdObiektu");
                        j.ToTable("sl_RodzajZasobuProfil");
                        j.IndexerProperty<int>("ZpfIdUzytkownika").HasColumnName("zpf_IdUzytkownika");
                        j.IndexerProperty<int>("ZpfIdObiektu").HasColumnName("zpf_IdObiektu");
                    });
        });

        modelBuilder.Entity<PdUzytkownikOddzial>(entity =>
        {
            entity.HasKey(e => e.PduoId);

            entity.ToTable("pd_UzytkownikOddzial");

            entity.Property(e => e.PduoId)
                .ValueGeneratedNever()
                .HasColumnName("pduo_Id");
            entity.Property(e => e.PduoIdOddzial).HasColumnName("pduo_IdOddzial");
            entity.Property(e => e.PduoIdUzytkownik).HasColumnName("pduo_IdUzytkownik");

            entity.HasOne(d => d.PduoIdOddzialNavigation).WithMany(p => p.PdUzytkownikOddzials)
                .HasForeignKey(d => d.PduoIdOddzial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_UzytkownikOddzial_sl_Oddzialy");

            entity.HasOne(d => d.PduoIdUzytkownikNavigation).WithMany(p => p.PdUzytkownikOddzials)
                .HasForeignKey(d => d.PduoIdUzytkownik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_UzytkownikOddzial_pd_Uzytkownik");
        });

        modelBuilder.Entity<PdWspolnik>(entity =>
        {
            entity.HasKey(e => e.PwId);

            entity.ToTable("pd_Wspolnik", tb =>
                {
                    tb.HasTrigger("tr_PdWspolnik_Deleting");
                    tb.HasTrigger("tr_PdWspolnik_Inserting");
                    tb.HasTrigger("tr_PdWspolnik_Updating");
                });

            entity.Property(e => e.PwId)
                .ValueGeneratedNever()
                .HasColumnName("pw_Id");
            entity.Property(e => e.PwAktywny)
                .HasDefaultValue(true)
                .HasColumnName("pw_Aktywny");
            entity.Property(e => e.PwCzyUstawionoDatePoczatkuWeryfikacjiNaliczenSklZus).HasColumnName("pw_CzyUstawionoDatePoczatkuWeryfikacjiNaliczenSklZUS");
            entity.Property(e => e.PwCzyZalPit28).HasColumnName("pw_CzyZalPit28");
            entity.Property(e => e.PwDataPoczatkuWeryfikacjiNaliczenSklZus)
                .HasColumnType("datetime")
                .HasColumnName("pw_DataPoczatkuWeryfikacjiNaliczenSklZUS");
            entity.Property(e => e.PwDataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("pw_DataUrodzenia");
            entity.Property(e => e.PwEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_Email");
            entity.Property(e => e.PwGenDeklaracja).HasColumnName("pw_GenDeklaracja");
            entity.Property(e => e.PwIdRachunkuWirtualnego).HasColumnName("pw_IdRachunkuWirtualnego");
            entity.Property(e => e.PwIdUs).HasColumnName("pw_IdUS");
            entity.Property(e => e.PwIdWspolnika).HasColumnName("pw_IdWspolnika");
            entity.Property(e => e.PwIdentyfikacjaPodatkowa)
                .HasDefaultValue(1)
                .HasColumnName("pw_IdentyfikacjaPodatkowa");
            entity.Property(e => e.PwImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_Imie");
            entity.Property(e => e.PwImie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_Imie2");
            entity.Property(e => e.PwMiejsceUrodzenia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_MiejsceUrodzenia");
            entity.Property(e => e.PwNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_Nazwisko");
            entity.Property(e => e.PwNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_NIP");
            entity.Property(e => e.PwNrAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_NrAnalityka");
            entity.Property(e => e.PwNumerIdentyfikatora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_NumerIdentyfikatora");
            entity.Property(e => e.PwObywatelstwo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_Obywatelstwo");
            entity.Property(e => e.PwOdliczajUlgePodatkowa)
                .HasDefaultValue(true)
                .HasColumnName("pw_OdliczajUlgePodatkowa");
            entity.Property(e => e.PwOdliczajUlgePodatkowaWdeklRocznych)
                .HasDefaultValue(true)
                .HasColumnName("pw_OdliczajUlgePodatkowaWDeklRocznych");
            entity.Property(e => e.PwOstrzegajPrzekroczenieWiekuFp).HasColumnName("pw_OstrzegajPrzekroczenieWiekuFP");
            entity.Property(e => e.PwPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pw_Pesel");
            entity.Property(e => e.PwPodstawaChWyIndywidualna).HasColumnName("pw_PodstawaChWyIndywidualna");
            entity.Property(e => e.PwPodstawaSpolIndywidualna).HasColumnName("pw_PodstawaSpolIndywidualna");
            entity.Property(e => e.PwPodstawaZdrIndywidualna).HasColumnName("pw_PodstawaZdrIndywidualna");
            entity.Property(e => e.PwPrawoDoEmer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pw_PrawoDoEmer");
            entity.Property(e => e.PwPrzejscieZliniowegoNaSkaleW2022).HasColumnName("pw_PrzejscieZLiniowegoNaSkaleW2022");
            entity.Property(e => e.PwRodzaj).HasColumnName("pw_Rodzaj");
            entity.Property(e => e.PwSklFpKoszty)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklFP_Koszty");
            entity.Property(e => e.PwSklFpNaliczanie)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklFP_Naliczanie");
            entity.Property(e => e.PwSklMcNaliczania).HasColumnName("pw_Skl_McNaliczania");
            entity.Property(e => e.PwSklUbezpChorKoszty)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpChor_Koszty");
            entity.Property(e => e.PwSklUbezpChorNaliczanie)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpChor_Naliczanie");
            entity.Property(e => e.PwSklUbezpChorPit5).HasColumnName("pw_SklUbezpChor_Pit5");
            entity.Property(e => e.PwSklUbezpEmKoszty)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpEm_Koszty");
            entity.Property(e => e.PwSklUbezpEmNaliczanie)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpEm_Naliczanie");
            entity.Property(e => e.PwSklUbezpEmPit5).HasColumnName("pw_SklUbezpEm_Pit5");
            entity.Property(e => e.PwSklUbezpRentKoszty)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpRent_Koszty");
            entity.Property(e => e.PwSklUbezpRentNaliczanie)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpRent_Naliczanie");
            entity.Property(e => e.PwSklUbezpRentPit5).HasColumnName("pw_SklUbezpRent_Pit5");
            entity.Property(e => e.PwSklUbezpWypKoszty)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpWyp_Koszty");
            entity.Property(e => e.PwSklUbezpWypNaliczanie)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpWyp_Naliczanie");
            entity.Property(e => e.PwSklUbezpWypPit5).HasColumnName("pw_SklUbezpWyp_Pit5");
            entity.Property(e => e.PwSklUbezpZdrKoszty).HasColumnName("pw_SklUbezpZdr_Koszty");
            entity.Property(e => e.PwSklUbezpZdrNaliczanie)
                .HasDefaultValue(true)
                .HasColumnName("pw_SklUbezpZdr_Naliczanie");
            entity.Property(e => e.PwSklUbezpZdrPit5)
                .HasDefaultValue(2)
                .HasColumnName("pw_SklUbezpZdr_Pit5");
            entity.Property(e => e.PwStopienNiepelnosprawnosci)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pw_StopienNiepelnosprawnosci");
            entity.Property(e => e.PwStopienNiepelnosprawnosciDo)
                .HasColumnType("datetime")
                .HasColumnName("pw_StopienNiepelnosprawnosciDo");
            entity.Property(e => e.PwStopienNiepelnosprawnosciOd)
                .HasColumnType("datetime")
                .HasColumnName("pw_StopienNiepelnosprawnosciOd");
            entity.Property(e => e.PwStopienNiezdolnosciDoPracy)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pw_StopienNiezdolnosciDoPracy");
            entity.Property(e => e.PwStopienNiezdolnosciDoPracyDo)
                .HasColumnType("datetime")
                .HasColumnName("pw_StopienNiezdolnosciDoPracyDo");
            entity.Property(e => e.PwStopienNiezdolnosciDoPracyOd)
                .HasColumnType("datetime")
                .HasColumnName("pw_StopienNiezdolnosciDoPracyOd");
            entity.Property(e => e.PwTypIdentyfikatora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("0")
                .IsFixedLength()
                .HasColumnName("pw_TypIdentyfikatora");
            entity.Property(e => e.PwTytulUbezpieczenia)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("pw_TytulUbezpieczenia");
            entity.Property(e => e.PwUdzial)
                .HasColumnType("money")
                .HasColumnName("pw_Udzial");
            entity.Property(e => e.PwZaliczkaPonizejTys)
                .HasDefaultValue(true)
                .HasColumnName("pw_ZaliczkaPonizejTys");
            entity.Property(e => e.PwZasPielegKwota)
                .HasColumnType("money")
                .HasColumnName("pw_ZasPielegKwota");
            entity.Property(e => e.PwZasPielegLiczbaOsob).HasColumnName("pw_ZasPielegLiczbaOsob");
            entity.Property(e => e.PwZasRodzKwota)
                .HasColumnType("money")
                .HasColumnName("pw_ZasRodzKwota");
            entity.Property(e => e.PwZasRodzLiczbaOsob).HasColumnName("pw_ZasRodzLiczbaOsob");
            entity.Property(e => e.PwZasWychKwota)
                .HasColumnType("money")
                .HasColumnName("pw_ZasWychKwota");
            entity.Property(e => e.PwZasWychLiczbaOsob).HasColumnName("pw_ZasWychLiczbaOsob");
            entity.Property(e => e.PwZmianaSklUbezpPit5).HasColumnName("pw_ZmianaSklUbezpPit5");

            entity.HasOne(d => d.PwIdRachunkuWirtualnegoNavigation).WithMany(p => p.PdWspolniks)
                .HasForeignKey(d => d.PwIdRachunkuWirtualnego)
                .HasConstraintName("FK_pd_Wspolnik_rb_RachBankowyWirtualny");

            entity.HasOne(d => d.PwIdUsNavigation).WithMany(p => p.PdWspolniks)
                .HasForeignKey(d => d.PwIdUs)
                .HasConstraintName("FK_pd_Wspolnik_is__Instytucja");

            entity.HasOne(d => d.PwIdWspolnikaNavigation).WithMany(p => p.InversePwIdWspolnikaNavigation)
                .HasForeignKey(d => d.PwIdWspolnika)
                .HasConstraintName("FK_pd_Wspolnik_pd_Wspolnik");

            entity.HasOne(d => d.PwPrawoDoEmerNavigation).WithMany(p => p.PdWspolniks)
                .HasPrincipalKey(p => p.PdeKod)
                .HasForeignKey(d => d.PwPrawoDoEmer)
                .HasConstraintName("FK_pd_Wspolnik_sl_PrawoDoEmerytury");

            entity.HasOne(d => d.PwStopienNiepelnosprawnosciNavigation).WithMany(p => p.PdWspolniks)
                .HasPrincipalKey(p => p.StnKod)
                .HasForeignKey(d => d.PwStopienNiepelnosprawnosci)
                .HasConstraintName("FK_pd_Wspolnik_sl_StopienNiepelnosprawnosci");

            entity.HasOne(d => d.PwStopienNiezdolnosciDoPracyNavigation).WithMany(p => p.PdWspolniks)
                .HasPrincipalKey(p => p.StnpKod)
                .HasForeignKey(d => d.PwStopienNiezdolnosciDoPracy)
                .HasConstraintName("FK_pd_Wspolnik_sl_StopienNiezdolnosciDoPracy");

            entity.HasOne(d => d.PwTypIdentyfikatoraNavigation).WithMany(p => p.PdWspolniks)
                .HasPrincipalKey(p => p.TidKod)
                .HasForeignKey(d => d.PwTypIdentyfikatora)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_Wspolnik_sl_TypIdentyfikatora");

            entity.HasOne(d => d.PwTytulUbezpieczeniaNavigation).WithMany(p => p.PdWspolniks)
                .HasPrincipalKey(p => p.TuKod)
                .HasForeignKey(d => d.PwTytulUbezpieczenia)
                .HasConstraintName("FK_pd_Wspolnik_sl_TytulUbezpieczenia");
        });

        modelBuilder.Entity<PdWspolnikPodatek>(entity =>
        {
            entity.HasKey(e => e.PwrId);

            entity.ToTable("pd_WspolnikPodatek");

            entity.Property(e => e.PwrId)
                .ValueGeneratedNever()
                .HasColumnName("pwr_Id");
            entity.Property(e => e.PwrCzyNaliczacUlgeDlaKlasySredniejWzaliczce).HasColumnName("pwr_CzyNaliczacUlgeDlaKlasySredniejWZaliczce");
            entity.Property(e => e.PwrIdWspolnika).HasColumnName("pwr_IdWspolnika");
            entity.Property(e => e.PwrPlatnosc).HasColumnName("pwr_Platnosc");
            entity.Property(e => e.PwrRokOd).HasColumnName("pwr_RokOd");
            entity.Property(e => e.PwrWartosc).HasColumnName("pwr_Wartosc");
            entity.Property(e => e.PwrZaliczkaOdliczajZdr).HasColumnName("pwr_ZaliczkaOdliczajZdr");
            entity.Property(e => e.PwrZaliczkaUproszczona).HasColumnName("pwr_ZaliczkaUproszczona");

            entity.HasOne(d => d.PwrIdWspolnikaNavigation).WithMany(p => p.PdWspolnikPodateks)
                .HasForeignKey(d => d.PwrIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_WspolnikPodatek_pd_Wspolnik");
        });

        modelBuilder.Entity<PdWspolnikPodstawa>(entity =>
        {
            entity.HasKey(e => e.PwpId);

            entity.ToTable("pd_WspolnikPodstawa");

            entity.Property(e => e.PwpId)
                .ValueGeneratedNever()
                .HasColumnName("pwp_Id");
            entity.Property(e => e.PwpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("pwp_DataOd");
            entity.Property(e => e.PwpIdWspolnika).HasColumnName("pwp_IdWspolnika");
            entity.Property(e => e.PwpTyp).HasColumnName("pwp_Typ");
            entity.Property(e => e.PwpWartosc)
                .HasColumnType("money")
                .HasColumnName("pwp_Wartosc");

            entity.HasOne(d => d.PwpIdWspolnikaNavigation).WithMany(p => p.PdWspolnikPodstawas)
                .HasForeignKey(d => d.PwpIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_WspolnikPodstawa_pd_Wspolnik");
        });

        modelBuilder.Entity<PdWspolnikSkladka>(entity =>
        {
            entity.HasKey(e => e.PwsId);

            entity.ToTable("pd_WspolnikSkladka");

            entity.Property(e => e.PwsId)
                .ValueGeneratedNever()
                .HasColumnName("pws_Id");
            entity.Property(e => e.PwsDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("pws_DataKsiegowania");
            entity.Property(e => e.PwsDataZaplaty)
                .HasColumnType("datetime")
                .HasColumnName("pws_DataZaplaty");
            entity.Property(e => e.PwsFormaPrawna).HasColumnName("pws_FormaPrawna");
            entity.Property(e => e.PwsIdDekretu).HasColumnName("pws_IdDekretu");
            entity.Property(e => e.PwsIdKategorii).HasColumnName("pws_IdKategorii");
            entity.Property(e => e.PwsIdKsiegi).HasColumnName("pws_IdKsiegi");
            entity.Property(e => e.PwsIdWspOsWspolpracujacej).HasColumnName("pws_IdWspOsWspolpracujacej");
            entity.Property(e => e.PwsIdWspolnika).HasColumnName("pws_IdWspolnika");
            entity.Property(e => e.PwsKwotaDoDoplaty)
                .HasColumnType("money")
                .HasColumnName("pws_KwotaDoDoplaty");
            entity.Property(e => e.PwsKwotaDoZwrotu)
                .HasColumnType("money")
                .HasColumnName("pws_KwotaDoZwrotu");
            entity.Property(e => e.PwsKwotaDochoduZpoprzedniegoMiesiaca)
                .HasColumnType("money")
                .HasColumnName("pws_KwotaDochoduZPoprzedniegoMiesiaca");
            entity.Property(e => e.PwsKwotaPrzychodowZzeszlegoRoku)
                .HasColumnType("money")
                .HasColumnName("pws_KwotaPrzychodowZZeszlegoRoku");
            entity.Property(e => e.PwsMiesiac).HasColumnName("pws_Miesiac");
            entity.Property(e => e.PwsMozliwoscEdycjiWspolnika).HasColumnName("pws_MozliwoscEdycjiWspolnika");
            entity.Property(e => e.PwsPodstawaChWy)
                .HasColumnType("money")
                .HasColumnName("pws_PodstawaChWy");
            entity.Property(e => e.PwsPodstawaEmRe)
                .HasColumnType("money")
                .HasColumnName("pws_PodstawaEmRe");
            entity.Property(e => e.PwsPodstawaEmRePrzekroczona).HasColumnName("pws_PodstawaEmRePrzekroczona");
            entity.Property(e => e.PwsPodstawaZdr)
                .HasColumnType("money")
                .HasColumnName("pws_PodstawaZdr");
            entity.Property(e => e.PwsRazemZdr)
                .HasComputedColumnSql("(([pws_SkladkaZdr1]+[pws_SkladkaZdr2])+[pws_SkladkaZdr3])", false)
                .HasColumnType("money")
                .HasColumnName("pws_RazemZdr");
            entity.Property(e => e.PwsRocznaKwotaDochodu)
                .HasColumnType("money")
                .HasColumnName("pws_RocznaKwotaDochodu");
            entity.Property(e => e.PwsRocznaKwotaPodatkuNaleznego)
                .HasColumnType("money")
                .HasColumnName("pws_RocznaKwotaPodatkuNaleznego");
            entity.Property(e => e.PwsRocznaPodstawaSkladkiZdrowotnej)
                .HasColumnType("money")
                .HasColumnName("pws_RocznaPodstawaSkladkiZdrowotnej");
            entity.Property(e => e.PwsRocznaSkladkaZdrowotna)
                .HasColumnType("money")
                .HasColumnName("pws_RocznaSkladkaZdrowotna");
            entity.Property(e => e.PwsRodzajNaliczenia).HasColumnName("pws_RodzajNaliczenia");
            entity.Property(e => e.PwsRok).HasColumnName("pws_Rok");
            entity.Property(e => e.PwsRozlicznieWedlugPrzychZzeszlegoRoku).HasColumnName("pws_RozlicznieWedlugPrzychZZeszlegoRoku");
            entity.Property(e => e.PwsSkladkaChor)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaChor");
            entity.Property(e => e.PwsSkladkaEm)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaEm");
            entity.Property(e => e.PwsSkladkaFp)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaFP");
            entity.Property(e => e.PwsSkladkaRazem)
                .HasComputedColumnSql("((((((([pws_SkladkaEm]+[pws_SkladkaRe])+[pws_SkladkaChor])+[pws_SkladkaWyp])+[pws_SkladkaFP])+[pws_SkladkaZdr1])+[pws_SkladkaZdr2])+[pws_SkladkaZdr3])", false)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaRazem");
            entity.Property(e => e.PwsSkladkaRazemSpolFp)
                .HasComputedColumnSql("(((([pws_SkladkaEm]+[pws_SkladkaRe])+[pws_SkladkaChor])+[pws_SkladkaWyp])+[pws_SkladkaFP])", false)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaRazemSpolFP");
            entity.Property(e => e.PwsSkladkaRe)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaRe");
            entity.Property(e => e.PwsSkladkaWyp)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaWyp");
            entity.Property(e => e.PwsSkladkaZdr1)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaZdr1");
            entity.Property(e => e.PwsSkladkaZdr2)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaZdr2");
            entity.Property(e => e.PwsSkladkaZdr3)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkaZdr3");
            entity.Property(e => e.PwsSkladkiSpol)
                .HasComputedColumnSql("((([pws_SkladkaEm]+[pws_SkladkaRe])+[pws_SkladkaChor])+[pws_SkladkaWyp])", false)
                .HasColumnType("money")
                .HasColumnName("pws_SkladkiSpol");
            entity.Property(e => e.PwsStatusKsiegowy).HasColumnName("pws_StatusKsiegowy");
            entity.Property(e => e.PwsSumaMiesiecznychNaleznychZaliczek)
                .HasColumnType("money")
                .HasColumnName("pws_SumaMiesiecznychNaleznychZaliczek");
            entity.Property(e => e.PwsSumaPrzychodow)
                .HasColumnType("money")
                .HasColumnName("pws_SumaPrzychodow");
            entity.Property(e => e.PwsTrybNaliczenia).HasColumnName("pws_TrybNaliczenia");
            entity.Property(e => e.PwsZaksiegowaneSkladki).HasColumnName("pws_ZaksiegowaneSkladki");
            entity.Property(e => e.PwsZaplacono).HasColumnName("pws_Zaplacono");

            entity.HasOne(d => d.PwsIdKategoriiNavigation).WithMany(p => p.PdWspolnikSkladkas)
                .HasForeignKey(d => d.PwsIdKategorii)
                .HasConstraintName("FK_pd_WspolnikSkladka_sl_Kategoria");

            entity.HasOne(d => d.PwsIdWspOsWspolpracujacejNavigation).WithMany(p => p.PdWspolnikSkladkaPwsIdWspOsWspolpracujacejNavigations)
                .HasForeignKey(d => d.PwsIdWspOsWspolpracujacej)
                .HasConstraintName("FK_pd_WspolnikSkladka_pd_Wspolnik_child");

            entity.HasOne(d => d.PwsIdWspolnikaNavigation).WithMany(p => p.PdWspolnikSkladkaPwsIdWspolnikaNavigations)
                .HasForeignKey(d => d.PwsIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_WspolnikSkladka_pd_Wspolnik");
        });

        modelBuilder.Entity<PdWspolnikSposobSkladka>(entity =>
        {
            entity.HasKey(e => e.PwssId).HasName("PK_pw_Skladka");

            entity.ToTable("pd_WspolnikSposobSkladka");

            entity.Property(e => e.PwssId)
                .ValueGeneratedNever()
                .HasColumnName("pwss_Id");
            entity.Property(e => e.PwssDo)
                .HasColumnType("datetime")
                .HasColumnName("pwss_Do");
            entity.Property(e => e.PwssIdWspolnika).HasColumnName("pwss_IdWspolnika");
            entity.Property(e => e.PwssLiczbaDni).HasColumnName("pwss_LiczbaDni");
            entity.Property(e => e.PwssMiesiecznyDochod)
                .HasColumnType("money")
                .HasColumnName("pwss_MiesiecznyDochod");
            entity.Property(e => e.PwssMiesiecznyPrzychod)
                .HasColumnType("money")
                .HasColumnName("pwss_MiesiecznyPrzychod");
            entity.Property(e => e.PwssOd)
                .HasColumnType("datetime")
                .HasColumnName("pwss_Od");
            entity.Property(e => e.PwssPodstawa)
                .HasColumnType("money")
                .HasColumnName("pwss_Podstawa");
            entity.Property(e => e.PwssPodstawaZdr)
                .HasColumnType("money")
                .HasColumnName("pwss_PodstawaZdr");
            entity.Property(e => e.PwssRocznyDochod)
                .HasColumnType("money")
                .HasColumnName("pwss_RocznyDochod");
            entity.Property(e => e.PwssRocznyPrzychod)
                .HasColumnType("money")
                .HasColumnName("pwss_RocznyPrzychod");
            entity.Property(e => e.PwssRocznyPrzychodZdr)
                .HasColumnType("money")
                .HasColumnName("pwss_RocznyPrzychodZdr");
            entity.Property(e => e.PwssSklFp).HasColumnName("pwss_SklFP");
            entity.Property(e => e.PwssSklUbezpChor).HasColumnName("pwss_SklUbezpChor");
            entity.Property(e => e.PwssSklUbezpEm).HasColumnName("pwss_SklUbezpEm");
            entity.Property(e => e.PwssSklUbezpRent).HasColumnName("pwss_SklUbezpRent");
            entity.Property(e => e.PwssSklUbezpWyp).HasColumnName("pwss_SklUbezpWyp");
            entity.Property(e => e.PwssSklUbezpZdr).HasColumnName("pwss_SklUbezpZdr");
            entity.Property(e => e.PwssTypSkladki).HasColumnName("pwss_TypSkladki");
            entity.Property(e => e.PwssTypSkladkiZdr).HasColumnName("pwss_TypSkladkiZdr");
            entity.Property(e => e.PwssWspolczynnik)
                .HasColumnType("money")
                .HasColumnName("pwss_Wspolczynnik");

            entity.HasOne(d => d.PwssIdWspolnikaNavigation).WithMany(p => p.PdWspolnikSposobSkladkas)
                .HasForeignKey(d => d.PwssIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_WspolnikSposobSkladka_pd_Wspolnik");
        });

        modelBuilder.Entity<PdWspolnikSwiadczenie>(entity =>
        {
            entity.HasKey(e => e.PwwId).HasName("PK_pd_WspolnikSwiadczenia");

            entity.ToTable("pd_WspolnikSwiadczenie");

            entity.Property(e => e.PwwId)
                .ValueGeneratedNever()
                .HasColumnName("pww_Id");
            entity.Property(e => e.PwwDataDo)
                .HasColumnType("datetime")
                .HasColumnName("pww_DataDo");
            entity.Property(e => e.PwwDataOd)
                .HasColumnType("datetime")
                .HasColumnName("pww_DataOd");
            entity.Property(e => e.PwwIdWspolnika).HasColumnName("pww_IdWspolnika");
            entity.Property(e => e.PwwKodChoroby)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("pww_KodChoroby");
            entity.Property(e => e.PwwKodSwiadczenia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("pww_KodSwiadczenia");
            entity.Property(e => e.PwwKwota)
                .HasColumnType("money")
                .HasColumnName("pww_Kwota");
            entity.Property(e => e.PwwLiczbaDni).HasColumnName("pww_LiczbaDni");
            entity.Property(e => e.PwwMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("pww_Miesiac");

            entity.HasOne(d => d.PwwIdWspolnikaNavigation).WithMany(p => p.PdWspolnikSwiadczenies)
                .HasForeignKey(d => d.PwwIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_WspolnikSwiadczenie_pd_Wspolnik");

            entity.HasOne(d => d.PwwKodSwiadczeniaNavigation).WithMany(p => p.PdWspolnikSwiadczenies)
                .HasForeignKey(d => d.PwwKodSwiadczenia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_WspolnikSwiadczenie_sl_KodSwiadczenia");
        });

        modelBuilder.Entity<PdWspolnikUlgiPit0>(entity =>
        {
            entity.HasKey(e => e.PwupId);

            entity.ToTable("pd_WspolnikUlgiPIT0");

            entity.Property(e => e.PwupId)
                .ValueGeneratedNever()
                .HasColumnName("pwup_Id");
            entity.Property(e => e.PwupDataDo)
                .HasColumnType("datetime")
                .HasColumnName("pwup_DataDo");
            entity.Property(e => e.PwupDataKoncowaNieznana).HasColumnName("pwup_DataKoncowaNieznana");
            entity.Property(e => e.PwupDataOd)
                .HasColumnType("datetime")
                .HasColumnName("pwup_DataOd");
            entity.Property(e => e.PwupIdWspolnika).HasColumnName("pwup_IdWspolnika");
            entity.Property(e => e.PwupKsiegowane).HasColumnName("pwup_Ksiegowane");
            entity.Property(e => e.PwupUlgaDlaSeniora).HasColumnName("pwup_UlgaDlaSeniora");
            entity.Property(e => e.PwupUlgaNaPowrot).HasColumnName("pwup_UlgaNaPowrot");
            entity.Property(e => e.PwupUlgaRodzina4Plus).HasColumnName("pwup_UlgaRodzina4PLUS");

            entity.HasOne(d => d.PwupIdWspolnikaNavigation).WithMany(p => p.PdWspolnikUlgiPit0s)
                .HasForeignKey(d => d.PwupIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pd_WspolnikUlgiPIT0_pd_Wspolnik");
        });

        modelBuilder.Entity<PgnPluginSql>(entity =>
        {
            entity.HasKey(e => e.PgnsId).HasName("PK__pgn_PluginSql");

            entity.ToTable("pgn_PluginSql");

            entity.Property(e => e.PgnsId)
                .ValueGeneratedNever()
                .HasColumnName("pgns_Id");
            entity.Property(e => e.PgnsDefinicja)
                .HasColumnType("text")
                .HasColumnName("pgns_Definicja");
            entity.Property(e => e.PgnsNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pgns_Nazwa");
            entity.Property(e => e.PgnsTyp).HasColumnName("pgns_Typ");
            entity.Property(e => e.PgnsTytulDialoguParametrow)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pgns_TytulDialoguParametrow");
        });

        modelBuilder.Entity<PkDomyslnaKlasyfikacjaKont>(entity =>
        {
            entity.HasKey(e => e.PdkkNr);

            entity.ToTable("pk_DomyslnaKlasyfikacjaKont");

            entity.Property(e => e.PdkkNr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("pdkk_Nr");
            entity.Property(e => e.PdkkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pdkk_Nazwa");
        });

        modelBuilder.Entity<PkKartoteka>(entity =>
        {
            entity.HasKey(e => e.KwId);

            entity.ToTable("pk_Kartoteka");

            entity.Property(e => e.KwId)
                .ValueGeneratedNever()
                .HasColumnName("kw_Id");
            entity.Property(e => e.KwDlugoscAnalityki).HasColumnName("kw_DlugoscAnalityki");
            entity.Property(e => e.KwFiltr1).HasColumnName("kw_Filtr1");
            entity.Property(e => e.KwFiltr2).HasColumnName("kw_Filtr2");
            entity.Property(e => e.KwFiltr3).HasColumnName("kw_Filtr3");
            entity.Property(e => e.KwFiltrSql)
                .HasColumnType("text")
                .HasColumnName("kw_FiltrSql");
            entity.Property(e => e.KwFiltruj1).HasColumnName("kw_Filtruj1");
            entity.Property(e => e.KwFiltruj2).HasColumnName("kw_Filtruj2");
            entity.Property(e => e.KwFiltruj3).HasColumnName("kw_Filtruj3");
            entity.Property(e => e.KwFiltrujSql).HasColumnName("kw_FiltrujSql");
            entity.Property(e => e.KwIdZrodla).HasColumnName("kw_IdZrodla");
            entity.Property(e => e.KwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kw_Nazwa");
            entity.Property(e => e.KwTyp).HasColumnName("kw_Typ");
            entity.Property(e => e.KwWbudowana).HasColumnName("kw_Wbudowana");
            entity.Property(e => e.KwZablokowana).HasColumnName("kw_Zablokowana");
        });

        modelBuilder.Entity<PkKartotekaPozycja>(entity =>
        {
            entity.HasKey(e => e.KwpId);

            entity.ToTable("pk_KartotekaPozycja");

            entity.Property(e => e.KwpId)
                .ValueGeneratedNever()
                .HasColumnName("kwp_Id");
            entity.Property(e => e.KwpIdKartoteki).HasColumnName("kwp_IdKartoteki");
            entity.Property(e => e.KwpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwp_Nazwa");
            entity.Property(e => e.KwpNrAnalityki)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kwp_NrAnalityki");

            entity.HasOne(d => d.KwpIdKartotekiNavigation).WithMany(p => p.PkKartotekaPozycjas)
                .HasForeignKey(d => d.KwpIdKartoteki)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pk_KartotekaPozycja_pk_Kartoteka");
        });

        modelBuilder.Entity<PkKlasyfikacjaKont>(entity =>
        {
            entity.HasKey(e => e.PkkId);

            entity.ToTable("pk_KlasyfikacjaKont");

            entity.Property(e => e.PkkId)
                .ValueGeneratedNever()
                .HasColumnName("pkk_Id");
            entity.Property(e => e.PkkIdRokuObrotowego).HasColumnName("pkk_IdRokuObrotowego");
            entity.Property(e => e.PkkKategoria)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComputedColumnSql("(substring([pkk_Nr],(1),(2)))", false)
                .HasColumnName("pkk_Kategoria");
            entity.Property(e => e.PkkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pkk_Nazwa");
            entity.Property(e => e.PkkNr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("pkk_Nr");
            entity.Property(e => e.PkkTyp).HasColumnName("pkk_Typ");
            entity.Property(e => e.PkkZespol)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComputedColumnSql("(substring([pkk_Nr],(1),(1)))", false)
                .HasColumnName("pkk_Zespol");

            entity.HasOne(d => d.PkkIdRokuObrotowegoNavigation).WithMany(p => p.PkKlasyfikacjaKonts)
                .HasForeignKey(d => d.PkkIdRokuObrotowego)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pk_KlasyfikacjaKont_pd_RokObrotowy");
        });

        modelBuilder.Entity<PkParametry>(entity =>
        {
            entity.HasKey(e => e.KspIdRoku).HasName("PK_pk_KontaSpecjalne");

            entity.ToTable("pk_Parametry");

            entity.Property(e => e.KspIdRoku)
                .ValueGeneratedNever()
                .HasColumnName("ksp_IdRoku");
            entity.Property(e => e.KspDodatnichRoznicKurs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_DodatnichRoznicKurs");
            entity.Property(e => e.KspKompDroznicKurs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_KompDRoznicKurs");
            entity.Property(e => e.KspKompUroznicKurs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_KompURoznicKurs");
            entity.Property(e => e.KspKorektaZaokraglen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_KorektaZaokraglen");
            entity.Property(e => e.KspKosztyDroznicKurs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_KosztyDRoznicKurs");
            entity.Property(e => e.KspKosztyUroznicKurs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_KosztyURoznicKurs");
            entity.Property(e => e.KspNiezrDodatnichRoznicKursFin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_NiezrDodatnichRoznicKursFin");
            entity.Property(e => e.KspNiezrUjemnychRoznicKursFin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_NiezrUjemnychRoznicKursFin");
            entity.Property(e => e.KspNiezrealizowanychDroznicKurs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_NiezrealizowanychDRoznicKurs");
            entity.Property(e => e.KspNiezrealizowanychUroznicKurs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_NiezrealizowanychURoznicKurs");
            entity.Property(e => e.KspNkkDost).HasColumnName("ksp_NKK_Dost");
            entity.Property(e => e.KspNkkGrTow).HasColumnName("ksp_NKK_GrTow");
            entity.Property(e => e.KspNkkInIst).HasColumnName("ksp_NKK_InIst");
            entity.Property(e => e.KspNkkKasa).HasColumnName("ksp_NKK_Kasa");
            entity.Property(e => e.KspNkkMag).HasColumnName("ksp_NKK_Mag");
            entity.Property(e => e.KspNkkMk).HasColumnName("ksp_NKK_MK");
            entity.Property(e => e.KspNkkMpk).HasColumnName("ksp_NKK_MPK");
            entity.Property(e => e.KspNkkOdb).HasColumnName("ksp_NKK_Odb");
            entity.Property(e => e.KspNkkPojazdy).HasColumnName("ksp_NKK_Pojazdy");
            entity.Property(e => e.KspNkkPpk).HasColumnName("ksp_NKK_PPK");
            entity.Property(e => e.KspNkkPrac).HasColumnName("ksp_NKK_Prac");
            entity.Property(e => e.KspNkkRb).HasColumnName("ksp_NKK_RB");
            entity.Property(e => e.KspNkkSt).HasColumnName("ksp_NKK_ST");
            entity.Property(e => e.KspNkkUs).HasColumnName("ksp_NKK_US");
            entity.Property(e => e.KspNkkWniP).HasColumnName("ksp_NKK_WNiP");
            entity.Property(e => e.KspNkkWsp).HasColumnName("ksp_NKK_Wsp");
            entity.Property(e => e.KspNkkZlecenia).HasColumnName("ksp_NKK_Zlecenia");
            entity.Property(e => e.KspNkkZus)
                .HasDefaultValue(0)
                .HasColumnName("ksp_NKK_ZUS");
            entity.Property(e => e.KspPrzychPrzyszlychOkr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_PrzychPrzyszlychOkr");
            entity.Property(e => e.KspRozliczanieKosztow)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_RozliczanieKosztow");
            entity.Property(e => e.KspRozliczeniaMokrKosztow)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_RozliczeniaMOkrKosztow");
            entity.Property(e => e.KspRozrachDostDet)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("99999")
                .HasColumnName("ksp_RozrachDostDet");
            entity.Property(e => e.KspRozrachOdbDet)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("99999")
                .HasColumnName("ksp_RozrachOdbDet");
            entity.Property(e => e.KspUjemnychRoznicKurs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_UjemnychRoznicKurs");
            entity.Property(e => e.KspZrealDodatnichRoznicKursFin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_ZrealDodatnichRoznicKursFin");
            entity.Property(e => e.KspZrealUjemnychRoznicKursFin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ksp_ZrealUjemnychRoznicKursFin");

            entity.HasOne(d => d.KspIdRokuNavigation).WithOne(p => p.PkParametry)
                .HasForeignKey<PkParametry>(d => d.KspIdRoku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pk_Parametry_pd_RokObrotowy");
        });

        modelBuilder.Entity<PkPlanKont>(entity =>
        {
            entity.HasKey(e => e.KoId);

            entity.ToTable("pk_PlanKont", tb =>
                {
                    tb.HasTrigger("tr_PkPlanKont_Deleting");
                    tb.HasTrigger("tr_PkPlanKont_Inserting");
                    tb.HasTrigger("tr_PkPlanKont_Updating");
                });

            entity.HasIndex(e => new { e.KoId, e.KoIdRokuObrotowego, e.KoNr, e.KoNazwa }, "IX_pk_PlanKont_1");

            entity.HasIndex(e => new { e.KoIdKartoteki, e.KoIdElementuKartoteki }, "IX_pk_PlanKont_IdElementuKart");

            entity.HasIndex(e => new { e.KoIdRokuObrotowego, e.KoNr }, "IX_pk_PlanKont_Rok_Nr").IsUnique();

            entity.Property(e => e.KoId)
                .ValueGeneratedNever()
                .HasColumnName("ko_Id");
            entity.Property(e => e.KoBilansowe).HasColumnName("ko_Bilansowe");
            entity.Property(e => e.KoIdBiezacejKartoteki).HasColumnName("ko_IdBiezacejKartoteki");
            entity.Property(e => e.KoIdElementuKartoteki).HasColumnName("ko_IdElementuKartoteki");
            entity.Property(e => e.KoIdKartoteki).HasColumnName("ko_IdKartoteki");
            entity.Property(e => e.KoIdKartoteki01).HasColumnName("ko_IdKartoteki01");
            entity.Property(e => e.KoIdKartoteki02).HasColumnName("ko_IdKartoteki02");
            entity.Property(e => e.KoIdKartoteki03).HasColumnName("ko_IdKartoteki03");
            entity.Property(e => e.KoIdKartoteki04).HasColumnName("ko_IdKartoteki04");
            entity.Property(e => e.KoIdKartoteki05).HasColumnName("ko_IdKartoteki05");
            entity.Property(e => e.KoIdKategorii).HasColumnName("ko_IdKategorii");
            entity.Property(e => e.KoIdRokuObrotowego).HasColumnName("ko_IdRokuObrotowego");
            entity.Property(e => e.KoIdStawkiVat).HasColumnName("ko_IdStawkiVAT");
            entity.Property(e => e.KoJestLisciem)
                .HasDefaultValue(true)
                .HasColumnName("ko_JestLisciem");
            entity.Property(e => e.KoKartotekowe).HasColumnName("ko_Kartotekowe");
            entity.Property(e => e.KoKategoriaWymagana).HasColumnName("ko_KategoriaWymagana");
            entity.Property(e => e.KoNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ko_Nazwa");
            entity.Property(e => e.KoNazwaObca1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ko_NazwaObca1");
            entity.Property(e => e.KoNazwaObca2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ko_NazwaObca2");
            entity.Property(e => e.KoNr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ko_Nr");
            entity.Property(e => e.KoOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ko_Opis");
            entity.Property(e => e.KoPodlegaWycenie).HasColumnName("ko_PodlegaWycenie");
            entity.Property(e => e.KoPowiazane).HasColumnName("ko_Powiazane");
            entity.Property(e => e.KoPozabilansowe).HasColumnName("ko_Pozabilansowe");
            entity.Property(e => e.KoPoziom).HasColumnName("ko_Poziom");
            entity.Property(e => e.KoRozrachObjId).HasColumnName("ko_RozrachObj_Id");
            entity.Property(e => e.KoRozrachObjTyp).HasColumnName("ko_RozrachObj_Typ");
            entity.Property(e => e.KoRozrachunkowe).HasColumnName("ko_Rozrachunkowe");
            entity.Property(e => e.KoSyntetyka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComputedColumnSql("(substring([ko_Nr],(1),(3)))", false)
                .HasColumnName("ko_Syntetyka");
            entity.Property(e => e.KoWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ko_Waluta");
            entity.Property(e => e.KoWalutowe).HasColumnName("ko_Walutowe");
            entity.Property(e => e.KoWynikowe).HasColumnName("ko_Wynikowe");

            entity.HasOne(d => d.KoIdBiezacejKartotekiNavigation).WithMany(p => p.PkPlanKontKoIdBiezacejKartotekiNavigations).HasForeignKey(d => d.KoIdBiezacejKartoteki);

            entity.HasOne(d => d.KoIdKartotekiNavigation).WithMany(p => p.PkPlanKontKoIdKartotekiNavigations)
                .HasForeignKey(d => d.KoIdKartoteki)
                .HasConstraintName("FK_pk_PlanKont_pk_Kartoteka");

            entity.HasOne(d => d.KoIdKartoteki01Navigation).WithMany(p => p.PkPlanKontKoIdKartoteki01Navigations)
                .HasForeignKey(d => d.KoIdKartoteki01)
                .HasConstraintName("FK_pk_PlanKont_pk_Kartoteka_Level_01");

            entity.HasOne(d => d.KoIdKartoteki02Navigation).WithMany(p => p.PkPlanKontKoIdKartoteki02Navigations)
                .HasForeignKey(d => d.KoIdKartoteki02)
                .HasConstraintName("FK_pk_PlanKont_pk_Kartoteka_Level_02");

            entity.HasOne(d => d.KoIdKartoteki03Navigation).WithMany(p => p.PkPlanKontKoIdKartoteki03Navigations)
                .HasForeignKey(d => d.KoIdKartoteki03)
                .HasConstraintName("FK_pk_PlanKont_pk_Kartoteka_Level_03");

            entity.HasOne(d => d.KoIdKartoteki04Navigation).WithMany(p => p.PkPlanKontKoIdKartoteki04Navigations)
                .HasForeignKey(d => d.KoIdKartoteki04)
                .HasConstraintName("FK_pk_PlanKont_pk_Kartoteka_Level_04");

            entity.HasOne(d => d.KoIdKartoteki05Navigation).WithMany(p => p.PkPlanKontKoIdKartoteki05Navigations)
                .HasForeignKey(d => d.KoIdKartoteki05)
                .HasConstraintName("FK_pk_PlanKont_pk_Kartoteka_Level_05");

            entity.HasOne(d => d.KoIdRokuObrotowegoNavigation).WithMany(p => p.PkPlanKonts)
                .HasForeignKey(d => d.KoIdRokuObrotowego)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pk_PlanKont_pd_RokObrotowy");

            entity.HasOne(d => d.KoIdStawkiVatNavigation).WithMany(p => p.PkPlanKonts)
                .HasForeignKey(d => d.KoIdStawkiVat)
                .HasConstraintName("FK_pk_PlanKont_sl_StawkaVAT");

            entity.HasOne(d => d.KoRozrachObjTypNavigation).WithMany(p => p.PkPlanKontKoRozrachObjTypNavigations)
                .HasForeignKey(d => d.KoRozrachObjTyp)
                .HasConstraintName("FK_pk_PlanKont_pk_Kartoteka_ObjRozrachunkowy");
        });

        modelBuilder.Entity<PkWzorzec>(entity =>
        {
            entity.HasKey(e => new { e.KowNr, e.KowDlaJednoosobowej });

            entity.ToTable("pk_Wzorzec");

            entity.Property(e => e.KowNr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kow_Nr");
            entity.Property(e => e.KowDlaJednoosobowej).HasColumnName("kow_DlaJednoosobowej");
            entity.Property(e => e.KowBilansowe).HasColumnName("kow_Bilansowe");
            entity.Property(e => e.KowDlaDzHandlowej)
                .HasDefaultValue(true)
                .HasColumnName("kow_DlaDzHandlowej");
            entity.Property(e => e.KowDlaDzProdukcyjnej)
                .HasDefaultValue(true)
                .HasColumnName("kow_DlaDzProdukcyjnej");
            entity.Property(e => e.KowDlaDzUslugowej)
                .HasDefaultValue(true)
                .HasColumnName("kow_DlaDzUslugowej");
            entity.Property(e => e.KowDlaSpCywilnej)
                .HasDefaultValue(true)
                .HasColumnName("kow_DlaSpCywilnej");
            entity.Property(e => e.KowDlaSpHandlowej)
                .HasDefaultValue(true)
                .HasColumnName("kow_DlaSpHandlowej");
            entity.Property(e => e.KowIdKartoteki).HasColumnName("kow_IdKartoteki");
            entity.Property(e => e.KowIdKartoteki01).HasColumnName("kow_IdKartoteki01");
            entity.Property(e => e.KowIdKartoteki02).HasColumnName("kow_IdKartoteki02");
            entity.Property(e => e.KowIdKartoteki03).HasColumnName("kow_IdKartoteki03");
            entity.Property(e => e.KowIdKartoteki04).HasColumnName("kow_IdKartoteki04");
            entity.Property(e => e.KowIdKartoteki05).HasColumnName("kow_IdKartoteki05");
            entity.Property(e => e.KowIdStawkiVat).HasColumnName("kow_IdStawkiVAT");
            entity.Property(e => e.KowNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kow_Nazwa");
            entity.Property(e => e.KowPowiazane).HasColumnName("kow_Powiazane");
            entity.Property(e => e.KowPozabilansowe).HasColumnName("kow_Pozabilansowe");
            entity.Property(e => e.KowPoziom).HasColumnName("kow_Poziom");
            entity.Property(e => e.KowRozrachunkowe).HasColumnName("kow_Rozrachunkowe");
            entity.Property(e => e.KowWynikowe).HasColumnName("kow_Wynikowe");

            entity.HasOne(d => d.KowIdKartotekiNavigation).WithMany(p => p.PkWzorzecs)
                .HasForeignKey(d => d.KowIdKartoteki)
                .HasConstraintName("FK_pk_Wzorzec_pk_Kartoteka");

            entity.HasOne(d => d.KowIdStawkiVatNavigation).WithMany(p => p.PkWzorzecs)
                .HasForeignKey(d => d.KowIdStawkiVat)
                .HasConstraintName("FK_pk_Wzorzec_sl_StawkaVAT");
        });

        modelBuilder.Entity<PlListaPlac>(entity =>
        {
            entity.HasKey(e => e.LpId);

            entity.ToTable("pl_ListaPlac");

            entity.HasIndex(e => e.LpNumer, "IX_pl_ListaPlacNumer").IsUnique();

            entity.Property(e => e.LpId)
                .ValueGeneratedNever()
                .HasColumnName("lp_Id");
            entity.Property(e => e.LpData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("lp_Data");
            entity.Property(e => e.LpDataWplatyPpk)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("lp_DataWplatyPPK");
            entity.Property(e => e.LpDataWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataWyplaty");
            entity.Property(e => e.LpDataZus)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataZUS");
            entity.Property(e => e.LpGlowna)
                .HasDefaultValue(true)
                .HasColumnName("lp_Glowna");
            entity.Property(e => e.LpIdKategorii).HasColumnName("lp_IdKategorii");
            entity.Property(e => e.LpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lp_Numer");
            entity.Property(e => e.LpRokPrzychodu).HasColumnName("lp_RokPrzychodu");
            entity.Property(e => e.LpStatusImportu).HasColumnName("lp_StatusImportu");
            entity.Property(e => e.LpStatusImportuPpk).HasColumnName("lp_StatusImportuPPK");
            entity.Property(e => e.LpStatusImportuSkladek).HasColumnName("lp_StatusImportuSkladek");
            entity.Property(e => e.LpTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lp_Tytul");
            entity.Property(e => e.LpZatwierdzona).HasColumnName("lp_Zatwierdzona");

            entity.HasOne(d => d.LpIdKategoriiNavigation).WithMany(p => p.PlListaPlacs)
                .HasForeignKey(d => d.LpIdKategorii)
                .HasConstraintName("FK_pl_ListaPlac_sl_Kategoria");
        });

        modelBuilder.Entity<PlParametrUmowyCp>(entity =>
        {
            entity.HasKey(e => e.PucpId).HasName("PK_pl_ParametryUmowyCP");

            entity.ToTable("pl_ParametrUmowyCP");

            entity.Property(e => e.PucpId)
                .ValueGeneratedNever()
                .HasColumnName("pucp_Id");
            entity.Property(e => e.PucpGenerowanyRaport)
                .HasDefaultValue(1)
                .HasColumnName("pucp_GenerowanyRaport");
            entity.Property(e => e.PucpPrzelewKwota)
                .HasColumnType("money")
                .HasColumnName("pucp_PrzelewKwota");
            entity.Property(e => e.PucpPrzelewNaKonto).HasColumnName("pucp_PrzelewNaKonto");
            entity.Property(e => e.PucpRachKup)
                .HasDefaultValue(20m)
                .HasColumnType("money")
                .HasColumnName("pucp_RachKUP");
            entity.Property(e => e.PucpRachPodatek)
                .HasDefaultValue(19m)
                .HasColumnType("money")
                .HasColumnName("pucp_RachPodatek");
            entity.Property(e => e.PucpSkladkaFgsp).HasColumnName("pucp_SkladkaFGSP");
            entity.Property(e => e.PucpSkladkaFp).HasColumnName("pucp_SkladkaFP");
            entity.Property(e => e.PucpSkladkaUbezpChor)
                .HasDefaultValue(true)
                .HasColumnName("pucp_SkladkaUbezpChor");
            entity.Property(e => e.PucpSkladkaUbezpEm)
                .HasDefaultValue(true)
                .HasColumnName("pucp_SkladkaUbezpEm");
            entity.Property(e => e.PucpSkladkaUbezpRe)
                .HasDefaultValue(true)
                .HasColumnName("pucp_SkladkaUbezpRe");
            entity.Property(e => e.PucpSkladkaUbezpWyp)
                .HasDefaultValue(true)
                .HasColumnName("pucp_SkladkaUbezpWyp");
            entity.Property(e => e.PucpSkladkaUbezpZdr)
                .HasDefaultValue(true)
                .HasColumnName("pucp_SkladkaUbezpZdr");
        });

        modelBuilder.Entity<PlParametrUmowyOprace>(entity =>
        {
            entity.HasKey(e => e.PupId).HasName("PK_pl_ParametryUmowyOPrace");

            entity.ToTable("pl_ParametrUmowyOPrace");

            entity.Property(e => e.PupId)
                .HasDefaultValue(1)
                .HasColumnName("pup_Id");
            entity.Property(e => e.PupGenerowanyRaport)
                .HasDefaultValue(1)
                .HasColumnName("pup_GenerowanyRaport");
            entity.Property(e => e.PupKosztyUzyskania).HasColumnName("pup_KosztyUzyskania");
            entity.Property(e => e.PupPrzelewKwota)
                .HasColumnType("money")
                .HasColumnName("pup_PrzelewKwota");
            entity.Property(e => e.PupPrzelewNaKonto).HasColumnName("pup_PrzelewNaKonto");
        });

        modelBuilder.Entity<PlRachunekDoUmowyCp>(entity =>
        {
            entity.HasKey(e => e.RuId);

            entity.ToTable("pl_RachunekDoUmowyCP");

            entity.Property(e => e.RuId)
                .ValueGeneratedNever()
                .HasColumnName("ru_Id");
            entity.Property(e => e.RuDataWplatyPpk)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("ru_DataWplatyPPK");
            entity.Property(e => e.RuDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataWystawienia");
            entity.Property(e => e.RuDataZus)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataZUS");
            entity.Property(e => e.RuFgsp)
                .HasColumnType("money")
                .HasColumnName("ru_FGSP");
            entity.Property(e => e.RuFp)
                .HasColumnType("money")
                .HasColumnName("ru_FP");
            entity.Property(e => e.RuIdKategorii).HasColumnName("ru_IdKategorii");
            entity.Property(e => e.RuIdOsobyWyst).HasColumnName("ru_IdOsobyWyst");
            entity.Property(e => e.RuIdUmowy).HasColumnName("ru_IdUmowy");
            entity.Property(e => e.RuKosztUzysk)
                .HasColumnType("money")
                .HasColumnName("ru_KosztUzysk");
            entity.Property(e => e.RuKosztUzyskProcent)
                .HasColumnType("money")
                .HasColumnName("ru_KosztUzyskProcent");
            entity.Property(e => e.RuKwota)
                .HasColumnType("money")
                .HasColumnName("ru_Kwota");
            entity.Property(e => e.RuKwotaBrutto)
                .HasColumnType("money")
                .HasColumnName("ru_KwotaBrutto");
            entity.Property(e => e.RuKwotaNetto)
                .HasColumnType("money")
                .HasColumnName("ru_KwotaNetto");
            entity.Property(e => e.RuMiesiecznaUlgaPodatkowa)
                .HasColumnType("money")
                .HasColumnName("ru_MiesiecznaUlgaPodatkowa");
            entity.Property(e => e.RuNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ru_Numer");
            entity.Property(e => e.RuObciazeniePracodawcy)
                .HasColumnType("money")
                .HasColumnName("ru_ObciazeniePracodawcy");
            entity.Property(e => e.RuPodatek)
                .HasColumnType("money")
                .HasColumnName("ru_Podatek");
            entity.Property(e => e.RuPodatekProcent)
                .HasColumnType("money")
                .HasColumnName("ru_PodatekProcent");
            entity.Property(e => e.RuPodstPpk)
                .HasColumnType("money")
                .HasColumnName("ru_PodstPPK");
            entity.Property(e => e.RuPodstUbEmerRent)
                .HasColumnType("money")
                .HasColumnName("ru_PodstUbEmerRent");
            entity.Property(e => e.RuPodstUbEmerRentPrzekroczona).HasColumnName("ru_PodstUbEmerRentPrzekroczona");
            entity.Property(e => e.RuPodstUbZdr)
                .HasColumnType("money")
                .HasColumnName("ru_PodstUbZdr");
            entity.Property(e => e.RuPodstUbZdrZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("ru_PodstUbZdrZeZwolnionych");
            entity.Property(e => e.RuPodstawaOpodatkowania)
                .HasColumnType("money")
                .HasColumnName("ru_PodstawaOpodatkowania");
            entity.Property(e => e.RuPonizejLimituPit8b).HasColumnName("ru_PonizejLimituPIT8B");
            entity.Property(e => e.RuPracownikOtrzymuje)
                .HasColumnType("money")
                .HasColumnName("ru_PracownikOtrzymuje");
            entity.Property(e => e.RuPrzelew)
                .HasColumnType("money")
                .HasColumnName("ru_Przelew");
            entity.Property(e => e.RuPrzychodObjetyZwolnieniemZpit)
                .HasColumnType("money")
                .HasColumnName("ru_PrzychodObjetyZwolnieniemZPIT");
            entity.Property(e => e.RuRodzajUlgi).HasColumnName("ru_RodzajUlgi");
            entity.Property(e => e.RuRokPrzychodu).HasColumnName("ru_RokPrzychodu");
            entity.Property(e => e.RuRyczalt).HasColumnName("ru_Ryczalt");
            entity.Property(e => e.RuStatusImportu).HasColumnName("ru_StatusImportu");
            entity.Property(e => e.RuStatusImportuPpk).HasColumnName("ru_StatusImportuPPK");
            entity.Property(e => e.RuStatusImportuSkladek).HasColumnName("ru_StatusImportuSkladek");
            entity.Property(e => e.RuUbezpZdrowotne)
                .HasColumnType("money")
                .HasColumnName("ru_UbezpZdrowotne");
            entity.Property(e => e.RuUbezpZdrowotne2)
                .HasColumnType("money")
                .HasColumnName("ru_UbezpZdrowotne2");
            entity.Property(e => e.RuWplataDodatkPracodawcyPpk)
                .HasColumnType("money")
                .HasColumnName("ru_WplataDodatkPracodawcyPPK");
            entity.Property(e => e.RuWplataDodatkPracownikaPpk)
                .HasColumnType("money")
                .HasColumnName("ru_WplataDodatkPracownikaPPK");
            entity.Property(e => e.RuWplataPodstPracodawcyPpk)
                .HasColumnType("money")
                .HasColumnName("ru_WplataPodstPracodawcyPPK");
            entity.Property(e => e.RuWplataPodstPracownikaPpk)
                .HasColumnType("money")
                .HasColumnName("ru_WplataPodstPracownikaPPK");
            entity.Property(e => e.RuWplataPracodawcyPpkdoPodatku)
                .HasColumnType("money")
                .HasColumnName("ru_WplataPracodawcyPPKDoPodatku");
            entity.Property(e => e.RuWplataPracodawcyPpkdoPodatkuOryg)
                .HasColumnType("money")
                .HasColumnName("ru_WplataPracodawcyPPKDoPodatkuOryg");
            entity.Property(e => e.RuWplataPracodawcyPpkzeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("ru_WplataPracodawcyPPKZeZwolnionych");
            entity.Property(e => e.RuZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatek");
            entity.Property(e => e.RuZaliczkaNaPodatekBilans)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatekBilans");
            entity.Property(e => e.RuZaliczkaNaPodatekOryginalna)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatekOryginalna");
            entity.Property(e => e.RuZaliczkaNaPodatekWirtualna)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatekWirtualna");
            entity.Property(e => e.RuZusPracZdrZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("ru_ZusPracZdrZeZwolnionych");
            entity.Property(e => e.RuZusPracZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("ru_ZusPracZeZwolnionych");
            entity.Property(e => e.RuZuschorPrac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSChorPrac");
            entity.Property(e => e.RuZusemer1Firma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSEmer1Firma");
            entity.Property(e => e.RuZusemer1Prac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSEmer1Prac");
            entity.Property(e => e.RuZusemer2Prac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSEmer2Prac");
            entity.Property(e => e.RuZusfirma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSFirma");
            entity.Property(e => e.RuZusprac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSPrac");
            entity.Property(e => e.RuZusrazem)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSRazem");
            entity.Property(e => e.RuZusrentFirma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSRentFirma");
            entity.Property(e => e.RuZusrentPrac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSRentPrac");
            entity.Property(e => e.RuZuswypFirma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSWypFirma");

            entity.HasOne(d => d.RuIdKategoriiNavigation).WithMany(p => p.PlRachunekDoUmowyCps)
                .HasForeignKey(d => d.RuIdKategorii)
                .HasConstraintName("FK_pl_RachunekDoUmowyCP_sl_Kategoria");

            entity.HasOne(d => d.RuIdOsobyWystNavigation).WithMany(p => p.PlRachunekDoUmowyCps)
                .HasForeignKey(d => d.RuIdOsobyWyst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_RachunekDoUmowyCP_pd_Uzytkownik");

            entity.HasOne(d => d.RuIdUmowyNavigation).WithMany(p => p.PlRachunekDoUmowyCps)
                .HasForeignKey(d => d.RuIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_Rachunki_pl_UmowyCywilnoprawne");
        });

        modelBuilder.Entity<PlTag>(entity =>
        {
            entity.HasKey(e => e.TagId);

            entity.ToTable("pl_Tag");

            entity.HasIndex(e => e.TagTekst, "IX_pl_Tag").IsUnique();

            entity.Property(e => e.TagId).HasColumnName("tag_Id");
            entity.Property(e => e.TagEkstra).HasColumnName("tag_Ekstra");
            entity.Property(e => e.TagGrupa).HasColumnName("tag_Grupa");
            entity.Property(e => e.TagPole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tag_Pole");
            entity.Property(e => e.TagTabela)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tag_Tabela");
            entity.Property(e => e.TagTekst)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tag_Tekst");
        });

        modelBuilder.Entity<PlUmowaCp>(entity =>
        {
            entity.HasKey(e => e.UcpId);

            entity.ToTable("pl_UmowaCP");

            entity.Property(e => e.UcpId)
                .ValueGeneratedNever()
                .HasColumnName("ucp_Id");
            entity.Property(e => e.UcpCzyNaliczacZaliczke)
                .HasDefaultValue(true)
                .HasColumnName("ucp_CzyNaliczacZaliczke");
            entity.Property(e => e.UcpCzyOdliczacUlge).HasColumnName("ucp_CzyOdliczacUlge");
            entity.Property(e => e.UcpCzyOdraczacPoborZaliczki)
                .HasDefaultValue(true)
                .HasColumnName("ucp_CzyOdraczacPoborZaliczki");
            entity.Property(e => e.UcpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ucp_DataDo");
            entity.Property(e => e.UcpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ucp_DataOd");
            entity.Property(e => e.UcpDataRozwiazania)
                .HasColumnType("datetime")
                .HasColumnName("ucp_DataRozwiazania");
            entity.Property(e => e.UcpGenerowanyRaport)
                .HasDefaultValue(1)
                .HasColumnName("ucp_GenerowanyRaport");
            entity.Property(e => e.UcpIdPracownika).HasColumnName("ucp_IdPracownika");
            entity.Property(e => e.UcpKwota)
                .HasColumnType("money")
                .HasColumnName("ucp_Kwota");
            entity.Property(e => e.UcpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ucp_Numer");
            entity.Property(e => e.UcpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ucp_Opis");
            entity.Property(e => e.UcpPowodRozwiazania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ucp_PowodRozwiazania");
            entity.Property(e => e.UcpPrzelewKwota)
                .HasColumnType("money")
                .HasColumnName("ucp_PrzelewKwota");
            entity.Property(e => e.UcpPrzelewNaKonto).HasColumnName("ucp_PrzelewNaKonto");
            entity.Property(e => e.UcpRodzaj).HasColumnName("ucp_Rodzaj");
            entity.Property(e => e.UcpRozwiazana).HasColumnName("ucp_Rozwiazana");
            entity.Property(e => e.UcpSkladkaFgsp)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaFGSP");
            entity.Property(e => e.UcpSkladkaFp)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaFP");
            entity.Property(e => e.UcpSkladkaUbezpChor)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpChor");
            entity.Property(e => e.UcpSkladkaUbezpEm)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpEm");
            entity.Property(e => e.UcpSkladkaUbezpRe)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpRe");
            entity.Property(e => e.UcpSkladkaUbezpWyp)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpWyp");
            entity.Property(e => e.UcpSkladkaUbezpZdr)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpZdr");
            entity.Property(e => e.UcpTresc)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("ucp_Tresc");
            entity.Property(e => e.UcpTytulUbezp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ucp_TytulUbezp");
            entity.Property(e => e.UcpUmowaZlecenie).HasColumnName("ucp_UmowaZlecenie");
            entity.Property(e => e.UcpWymiarUlgiPodatkowej)
                .HasDefaultValue(4)
                .HasColumnName("ucp_WymiarUlgiPodatkowej");
            entity.Property(e => e.UcpZwolnienieZpodatku).HasColumnName("ucp_ZwolnienieZPodatku");

            entity.HasOne(d => d.UcpIdPracownikaNavigation).WithMany(p => p.PlUmowaCps)
                .HasForeignKey(d => d.UcpIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_UmowyCywilnoprawne_pr_Pracownik");

            entity.HasOne(d => d.UcpTytulUbezpNavigation).WithMany(p => p.PlUmowaCps)
                .HasPrincipalKey(p => p.TuKod)
                .HasForeignKey(d => d.UcpTytulUbezp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_UmowaCP_sl_TytulUbezpieczenia");
        });

        modelBuilder.Entity<PlUmowaOprace>(entity =>
        {
            entity.HasKey(e => e.UpId);

            entity.ToTable("pl_UmowaOPrace");

            entity.Property(e => e.UpId)
                .ValueGeneratedNever()
                .HasColumnName("up_Id");
            entity.Property(e => e.UpCzyNaliczacFgsp)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacFGSP");
            entity.Property(e => e.UpCzyNaliczacFp)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacFP");
            entity.Property(e => e.UpCzyNaliczacPodatek)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacPodatek");
            entity.Property(e => e.UpCzyNaliczacUlgeDlaKlasySredniej)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacUlgeDlaKlasySredniej");
            entity.Property(e => e.UpCzyOdliczacUlge)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyOdliczacUlge");
            entity.Property(e => e.UpCzyOdraczacPoborZaliczki)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyOdraczacPoborZaliczki");
            entity.Property(e => e.UpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("up_DataDo");
            entity.Property(e => e.UpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("up_DataOd");
            entity.Property(e => e.UpDataRozwiazania)
                .HasColumnType("datetime")
                .HasColumnName("up_DataRozwiazania");
            entity.Property(e => e.UpEtatLicznik)
                .HasDefaultValue(1)
                .HasColumnName("up_EtatLicznik");
            entity.Property(e => e.UpEtatMianownik)
                .HasDefaultValue(1)
                .HasColumnName("up_EtatMianownik");
            entity.Property(e => e.UpGenerowanyRaport)
                .HasDefaultValue(1)
                .HasColumnName("up_GenerowanyRaport");
            entity.Property(e => e.UpIdPracownika).HasColumnName("up_IdPracownika");
            entity.Property(e => e.UpKosztyUzyskania).HasColumnName("up_KosztyUzyskania");
            entity.Property(e => e.UpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("up_Numer");
            entity.Property(e => e.UpPowodRozwiazania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("up_PowodRozwiazania");
            entity.Property(e => e.UpPrzelewKwota)
                .HasColumnType("money")
                .HasColumnName("up_PrzelewKwota");
            entity.Property(e => e.UpPrzelewNaKonto).HasColumnName("up_PrzelewNaKonto");
            entity.Property(e => e.UpRodzaj).HasColumnName("up_Rodzaj");
            entity.Property(e => e.UpRozwiazana).HasColumnName("up_Rozwiazana");
            entity.Property(e => e.UpTresc)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("up_Tresc");
            entity.Property(e => e.UpTytulUbezp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("up_TytulUbezp");
            entity.Property(e => e.UpWymiarUlgiPodatkowej)
                .HasDefaultValue(5)
                .HasColumnName("up_WymiarUlgiPodatkowej");

            entity.HasOne(d => d.UpIdPracownikaNavigation).WithMany(p => p.PlUmowaOpraces)
                .HasForeignKey(d => d.UpIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_UmowyOPrace_pr_Pracownik");

            entity.HasOne(d => d.UpTytulUbezpNavigation).WithMany(p => p.PlUmowaOpraces)
                .HasPrincipalKey(p => p.TuKod)
                .HasForeignKey(d => d.UpTytulUbezp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_UmowaOPrace_sl_TytulUbezpieczenia");
        });

        modelBuilder.Entity<PlUmowaOpraceSkladnik>(entity =>
        {
            entity.HasKey(e => e.UpsId);

            entity.ToTable("pl_UmowaOPraceSkladnik");

            entity.Property(e => e.UpsId)
                .ValueGeneratedNever()
                .HasColumnName("ups_Id");
            entity.Property(e => e.UpsDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ups_DataDo");
            entity.Property(e => e.UpsDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ups_DataOd");
            entity.Property(e => e.UpsIdUmowy).HasColumnName("ups_IdUmowy");
            entity.Property(e => e.UpsIdWzorca).HasColumnName("ups_IdWzorca");
            entity.Property(e => e.UpsNazwaSkladnika)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ups_NazwaSkladnika");
            entity.Property(e => e.UpsParametr)
                .HasDefaultValue(1m)
                .HasColumnType("money")
                .HasColumnName("ups_Parametr");
            entity.Property(e => e.UpsWartosc)
                .HasColumnType("money")
                .HasColumnName("ups_Wartosc");

            entity.HasOne(d => d.UpsIdUmowyNavigation).WithMany(p => p.PlUmowaOpraceSkladniks)
                .HasForeignKey(d => d.UpsIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_UmowaOPraceSkladnik_pl_UmowaOPrace");

            entity.HasOne(d => d.UpsIdWzorcaNavigation).WithMany(p => p.PlUmowaOpraceSkladniks)
                .HasForeignKey(d => d.UpsIdWzorca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_UmowaOPraceSkladnik_sl_WzorzecSkladnikaPlacowego");
        });

        modelBuilder.Entity<PlWyplataDataZaliczki>(entity =>
        {
            entity.HasKey(e => e.WdzId);

            entity.ToTable("pl_WyplataDataZaliczki");

            entity.HasIndex(e => new { e.WdzIdPracownika, e.WdzRok, e.WdzMiesiac }, "IX_pl_WyplataDataZaliczki").IsUnique();

            entity.Property(e => e.WdzId)
                .ValueGeneratedNever()
                .HasColumnName("wdz_Id");
            entity.Property(e => e.WdzData)
                .HasColumnType("datetime")
                .HasColumnName("wdz_Data");
            entity.Property(e => e.WdzIdPracownika).HasColumnName("wdz_IdPracownika");
            entity.Property(e => e.WdzMiesiac).HasColumnName("wdz_Miesiac");
            entity.Property(e => e.WdzRok).HasColumnName("wdz_Rok");

            entity.HasOne(d => d.WdzIdPracownikaNavigation).WithMany(p => p.PlWyplataDataZaliczkis)
                .HasForeignKey(d => d.WdzIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_WyplataDataZaliczki_pr_Pracownik");
        });

        modelBuilder.Entity<PlWyplataSkladnik>(entity =>
        {
            entity.HasKey(e => e.WypsId);

            entity.ToTable("pl_WyplataSkladnik");

            entity.Property(e => e.WypsId)
                .ValueGeneratedNever()
                .HasColumnName("wyps_Id");
            entity.Property(e => e.WypsIdWyplaty).HasColumnName("wyps_IdWyplaty");
            entity.Property(e => e.WypsIdWzorca).HasColumnName("wyps_IdWzorca");
            entity.Property(e => e.WypsNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wyps_Nazwa");
            entity.Property(e => e.WypsParametr)
                .HasColumnType("money")
                .HasColumnName("wyps_Parametr");
            entity.Property(e => e.WypsWartosc)
                .HasColumnType("money")
                .HasColumnName("wyps_Wartosc");

            entity.HasOne(d => d.WypsIdWyplatyNavigation).WithMany(p => p.PlWyplataSkladniks)
                .HasForeignKey(d => d.WypsIdWyplaty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_SkladnikiWyplaty_pl_Wyplaty");

            entity.HasOne(d => d.WypsIdWzorcaNavigation).WithMany(p => p.PlWyplataSkladniks)
                .HasForeignKey(d => d.WypsIdWzorca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_SkladnikiWyplaty_pl_SkladnikiPlacowe");
        });

        modelBuilder.Entity<PlWyplatum>(entity =>
        {
            entity.HasKey(e => e.WypId);

            entity.ToTable("pl_Wyplata");

            entity.Property(e => e.WypId)
                .ValueGeneratedNever()
                .HasColumnName("wyp_Id");
            entity.Property(e => e.WypBrAkord)
                .HasColumnType("money")
                .HasColumnName("wyp_BrAkord");
            entity.Property(e => e.WypBrDodatekFunkc)
                .HasColumnType("money")
                .HasColumnName("wyp_BrDodatekFunkc");
            entity.Property(e => e.WypBrDodatekZaWarUciazliw)
                .HasColumnType("money")
                .HasColumnName("wyp_BrDodatekZaWarUciazliw");
            entity.Property(e => e.WypBrDodatekZaWysluge)
                .HasColumnType("money")
                .HasColumnName("wyp_BrDodatekZaWysluge");
            entity.Property(e => e.WypBrEkwiwalentZaUrlop)
                .HasColumnType("money")
                .HasColumnName("wyp_BrEkwiwalentZaUrlop");
            entity.Property(e => e.WypBrGodzNadliczbowe)
                .HasColumnType("money")
                .HasColumnName("wyp_BrGodzNadliczbowe");
            entity.Property(e => e.WypBrGodzNocne)
                .HasColumnType("money")
                .HasColumnName("wyp_BrGodzNocne");
            entity.Property(e => e.WypBrInneChWy)
                .HasColumnType("money")
                .HasColumnName("wyp_BrInneChWy");
            entity.Property(e => e.WypBrInneEmRe)
                .HasColumnType("money")
                .HasColumnName("wyp_BrInneEmRe");
            entity.Property(e => e.WypBrInnePrac)
                .HasColumnType("money")
                .HasColumnName("wyp_BrInnePrac");
            entity.Property(e => e.WypBrInneZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_BrInneZdr");
            entity.Property(e => e.WypBrInneZus)
                .HasColumnType("money")
                .HasColumnName("wyp_BrInneZus");
            entity.Property(e => e.WypBrNagrodaRegul)
                .HasColumnType("money")
                .HasColumnName("wyp_BrNagrodaRegul");
            entity.Property(e => e.WypBrPodstawa)
                .HasColumnType("money")
                .HasColumnName("wyp_BrPodstawa");
            entity.Property(e => e.WypBrPremiaProcOdPodst)
                .HasColumnType("money")
                .HasColumnName("wyp_BrPremiaProcOdPodst");
            entity.Property(e => e.WypBrPremiaUznaniowa)
                .HasColumnType("money")
                .HasColumnName("wyp_BrPremiaUznaniowa");
            entity.Property(e => e.WypBrProwizja)
                .HasColumnType("money")
                .HasColumnName("wyp_BrProwizja");
            entity.Property(e => e.WypBrSwiadczRehabilit)
                .HasColumnType("money")
                .HasColumnName("wyp_BrSwiadczRehabilit");
            entity.Property(e => e.WypBrWynagrChorob)
                .HasColumnType("money")
                .HasColumnName("wyp_BrWynagrChorob");
            entity.Property(e => e.WypBrWynagrUrlop)
                .HasColumnType("money")
                .HasColumnName("wyp_BrWynagrUrlop");
            entity.Property(e => e.WypBrZasilekChorobowy)
                .HasColumnType("money")
                .HasColumnName("wyp_BrZasilekChorobowy");
            entity.Property(e => e.WypBrZasilekMacierzynski)
                .HasColumnType("money")
                .HasColumnName("wyp_BrZasilekMacierzynski");
            entity.Property(e => e.WypBrZasilekOpiekunczy)
                .HasColumnType("money")
                .HasColumnName("wyp_BrZasilekOpiekunczy");
            entity.Property(e => e.WypBrZasilekWyrownawczy)
                .HasColumnType("money")
                .HasColumnName("wyp_BrZasilekWyrownawczy");
            entity.Property(e => e.WypBrZasilkiZus)
                .HasColumnType("money")
                .HasColumnName("wyp_BrZasilkiZUS");
            entity.Property(e => e.WypBruttoDuze)
                .HasColumnType("money")
                .HasColumnName("wyp_BruttoDuze");
            entity.Property(e => e.WypBruttoMale)
                .HasColumnType("money")
                .HasColumnName("wyp_BruttoMale");
            entity.Property(e => e.WypFgsp)
                .HasColumnType("money")
                .HasColumnName("wyp_FGSP");
            entity.Property(e => e.WypFp)
                .HasColumnType("money")
                .HasColumnName("wyp_Fp");
            entity.Property(e => e.WypIdListyPlac).HasColumnName("wyp_IdListyPlac");
            entity.Property(e => e.WypIdOsobyWyst).HasColumnName("wyp_IdOsobyWyst");
            entity.Property(e => e.WypIdUmowy).HasColumnName("wyp_IdUmowy");
            entity.Property(e => e.WypKosztUzysk)
                .HasColumnType("money")
                .HasColumnName("wyp_KosztUzysk");
            entity.Property(e => e.WypKosztUzyskDekl)
                .HasColumnType("money")
                .HasColumnName("wyp_KosztUzyskDekl");
            entity.Property(e => e.WypNeDoplaty)
                .HasColumnType("money")
                .HasColumnName("wyp_NeDoplaty");
            entity.Property(e => e.WypNeInnePrac)
                .HasColumnType("money")
                .HasColumnName("wyp_NeInnePrac");
            entity.Property(e => e.WypNeInneZus)
                .HasColumnType("money")
                .HasColumnName("wyp_NeInneZus");
            entity.Property(e => e.WypNePotracenia)
                .HasColumnType("money")
                .HasColumnName("wyp_NePotracenia");
            entity.Property(e => e.WypNeRazem)
                .HasColumnType("money")
                .HasColumnName("wyp_NeRazem");
            entity.Property(e => e.WypNeZasilekPielegnacyjny)
                .HasColumnType("money")
                .HasColumnName("wyp_NeZasilekPielegnacyjny");
            entity.Property(e => e.WypNeZasilekPogrzebowy)
                .HasColumnType("money")
                .HasColumnName("wyp_NeZasilekPogrzebowy");
            entity.Property(e => e.WypNeZasilekPorodowy)
                .HasColumnType("money")
                .HasColumnName("wyp_NeZasilekPorodowy");
            entity.Property(e => e.WypNeZasilekRodzinny)
                .HasColumnType("money")
                .HasColumnName("wyp_NeZasilekRodzinny");
            entity.Property(e => e.WypNeZasilekWychowawczy)
                .HasColumnType("money")
                .HasColumnName("wyp_NeZasilekWychowawczy");
            entity.Property(e => e.WypNeZasilkiZus)
                .HasColumnType("money")
                .HasColumnName("wyp_NeZasilkiZUS");
            entity.Property(e => e.WypNetto)
                .HasColumnType("money")
                .HasColumnName("wyp_Netto");
            entity.Property(e => e.WypObciazeniePracodawcy)
                .HasColumnType("money")
                .HasColumnName("wyp_ObciazeniePracodawcy");
            entity.Property(e => e.WypOdliczenia)
                .HasColumnType("money")
                .HasColumnName("wyp_Odliczenia");
            entity.Property(e => e.WypOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wyp_Opis");
            entity.Property(e => e.WypPodatek)
                .HasColumnType("money")
                .HasColumnName("wyp_Podatek");
            entity.Property(e => e.WypPodstPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstPPK");
            entity.Property(e => e.WypPodstUbChWyZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbChWyZeZwolnionych");
            entity.Property(e => e.WypPodstUbChorWyp)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbChorWyp");
            entity.Property(e => e.WypPodstUbEmReZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmReZeZwolnionych");
            entity.Property(e => e.WypPodstUbEmerRent)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmerRent");
            entity.Property(e => e.WypPodstUbEmerRentPrzekroczona).HasColumnName("wyp_PodstUbEmerRentPrzekroczona");
            entity.Property(e => e.WypPodstUbZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbZdr");
            entity.Property(e => e.WypPodstUbZdrZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbZdrZeZwolnionych");
            entity.Property(e => e.WypPodstawaOpodatkowania)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstawaOpodatkowania");
            entity.Property(e => e.WypPodstawaUlgiDlaKlasySredniej)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstawaUlgiDlaKlasySredniej");
            entity.Property(e => e.WypPracownikOtrzymuje)
                .HasColumnType("money")
                .HasColumnName("wyp_PracownikOtrzymuje");
            entity.Property(e => e.WypPrzelew)
                .HasColumnType("money")
                .HasColumnName("wyp_Przelew");
            entity.Property(e => e.WypPrzychodObjetyZwolnieniemZpit)
                .HasColumnType("money")
                .HasColumnName("wyp_PrzychodObjetyZwolnieniemZPIT");
            entity.Property(e => e.WypRodzajUlgi).HasColumnName("wyp_RodzajUlgi");
            entity.Property(e => e.WypUbezpZdrowotne)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotne");
            entity.Property(e => e.WypUbezpZdrowotne2)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotne2");
            entity.Property(e => e.WypUlgaDlaKlasySredniej)
                .HasColumnType("money")
                .HasColumnName("wyp_UlgaDlaKlasySredniej");
            entity.Property(e => e.WypWplataDodatkPracodawcyPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataDodatkPracodawcyPPK");
            entity.Property(e => e.WypWplataDodatkPracownikaPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataDodatkPracownikaPPK");
            entity.Property(e => e.WypWplataPodstPracodawcyPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataPodstPracodawcyPPK");
            entity.Property(e => e.WypWplataPodstPracownikaPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataPodstPracownikaPPK");
            entity.Property(e => e.WypWplataPracodawcyPpkdoPodatku)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataPracodawcyPPKDoPodatku");
            entity.Property(e => e.WypWplataPracodawcyPpkdoPodatkuOryg)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataPracodawcyPPKDoPodatkuOryg");
            entity.Property(e => e.WypWplataPracodawcyPpkzeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataPracodawcyPPKZeZwolnionych");
            entity.Property(e => e.WypZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatek");
            entity.Property(e => e.WypZaliczkaNaPodatekBilans)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatekBilans");
            entity.Property(e => e.WypZaliczkaNaPodatekOryginalna)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatekOryginalna");
            entity.Property(e => e.WypZaliczkaNaPodatekWirtualna)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatekWirtualna");
            entity.Property(e => e.WypZus)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUS");
            entity.Property(e => e.WypZusChorPrac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusChorPrac");
            entity.Property(e => e.WypZusEmer1Firma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusEmer1Firma");
            entity.Property(e => e.WypZusEmer1Prac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusEmer1Prac");
            entity.Property(e => e.WypZusEmer2Prac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusEmer2Prac");
            entity.Property(e => e.WypZusPracChWyZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusPracChWyZeZwolnionych");
            entity.Property(e => e.WypZusPracEmReZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusPracEmReZeZwolnionych");
            entity.Property(e => e.WypZusPracZdrZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusPracZdrZeZwolnionych");
            entity.Property(e => e.WypZusRentFirma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusRentFirma");
            entity.Property(e => e.WypZusRentPrac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusRentPrac");
            entity.Property(e => e.WypZusWypFirma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusWypFirma");
            entity.Property(e => e.WypZusfirma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSFirma");
            entity.Property(e => e.WypZusprac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSPrac");
            entity.Property(e => e.WypZusrazem)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSRazem");
            entity.Property(e => e.WypZuszasilki)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSZasilki");

            entity.HasOne(d => d.WypIdListyPlacNavigation).WithMany(p => p.PlWyplata)
                .HasForeignKey(d => d.WypIdListyPlac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_Wyplaty_pl_ListaPlac");

            entity.HasOne(d => d.WypIdOsobyWystNavigation).WithMany(p => p.PlWyplata)
                .HasForeignKey(d => d.WypIdOsobyWyst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_Wyplata_pd_Uzytkownik");

            entity.HasOne(d => d.WypIdUmowyNavigation).WithMany(p => p.PlWyplata)
                .HasForeignKey(d => d.WypIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pl_Wyplaty_pl_UmowyOPrace");
        });

        modelBuilder.Entity<PlbEcpParametr>(entity =>
        {
            entity.HasKey(e => e.EcppId);

            entity.ToTable("plb_EcpParametr");

            entity.Property(e => e.EcppId)
                .ValueGeneratedNever()
                .HasColumnName("ecpp_ID");
            entity.Property(e => e.EcppDniWolneDoUrlopowego).HasColumnName("ecpp_DniWolneDoUrlopowego");
            entity.Property(e => e.EcppGodzinyPonadwymiarowe).HasColumnName("ecpp_GodzinyPonadwymiarowe");
            entity.Property(e => e.EcppLiczbaDniWynChor)
                .HasDefaultValue(33)
                .HasColumnName("ecpp_LiczbaDniWynChor");
            entity.Property(e => e.EcppLiczbaDniWynChorPoLatach)
                .HasDefaultValue(14)
                .HasColumnName("ecpp_LiczbaDniWynChorPoLatach");
            entity.Property(e => e.EcppNadliczboweGodziny).HasColumnName("ecpp_NadliczboweGodziny");
            entity.Property(e => e.EcppNadliczboweNocneProcent)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("ecpp_NadliczboweNocneProcent");
            entity.Property(e => e.EcppNadliczbowePierwszeProcent)
                .HasDefaultValue(50m)
                .HasColumnType("money")
                .HasColumnName("ecpp_NadliczbowePierwszeProcent");
            entity.Property(e => e.EcppNadliczboweProcent)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("ecpp_NadliczboweProcent");
            entity.Property(e => e.EcppNadliczboweSkladnik).HasColumnName("ecpp_NadliczboweSkladnik");
            entity.Property(e => e.EcppNadliczboweSwiateczneJak)
                .HasDefaultValue(1)
                .HasColumnName("ecpp_NadliczboweSwiateczneJak");
            entity.Property(e => e.EcppNadliczboweSwiateczneProcent)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("ecpp_NadliczboweSwiateczneProcent");
            entity.Property(e => e.EcppNadliczboweWolneJak)
                .HasDefaultValue(1)
                .HasColumnName("ecpp_NadliczboweWolneJak");
            entity.Property(e => e.EcppNadliczboweWolneProcent)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("ecpp_NadliczboweWolneProcent");
            entity.Property(e => e.EcppNieprzepracowaneZrodloGodzin)
                .HasDefaultValue(2)
                .HasColumnName("ecpp_NieprzepracowaneZrodloGodzin");
            entity.Property(e => e.EcppNocneJak)
                .HasDefaultValue(1)
                .HasColumnName("ecpp_NocneJak");
            entity.Property(e => e.EcppNocneProcent)
                .HasDefaultValue(20m)
                .HasColumnType("money")
                .HasColumnName("ecpp_NocneProcent");
            entity.Property(e => e.EcppNocneZrodloGodzin)
                .HasDefaultValue(2)
                .HasColumnName("ecpp_NocneZrodloGodzin");
            entity.Property(e => e.EcppPotracenieChor).HasColumnName("ecpp_PotracenieChor");
            entity.Property(e => e.EcppUzupPrzeprDzien)
                .HasDefaultValue(true)
                .HasColumnName("ecpp_UzupPrzeprDzien");
            entity.Property(e => e.EcppWiekPracDniWynChorPoLatach)
                .HasDefaultValue(50)
                .HasColumnName("ecpp_WiekPracDniWynChorPoLatach");
            entity.Property(e => e.EcppZaokrWynChor)
                .HasDefaultValue(2)
                .HasColumnName("ecpp_ZaokrWynChor");
            entity.Property(e => e.EcppZaokrZasilkow)
                .HasDefaultValue(1)
                .HasColumnName("ecpp_ZaokrZasilkow");
            entity.Property(e => e.EcppZerujWynGdyMcNieobecnosci)
                .HasDefaultValue(true)
                .HasColumnName("ecpp_ZerujWynGdyMcNieobecnosci");
        });

        modelBuilder.Entity<PlbGodzinyNormatywne>(entity =>
        {
            entity.HasKey(e => e.PlbgnId);

            entity.ToTable("plb_GodzinyNormatywne");

            entity.HasIndex(e => new { e.PlbgnRok, e.PlbgnMiesiac }, "UQ_plb_GodzinyNormatywne").IsUnique();

            entity.Property(e => e.PlbgnId).HasColumnName("plbgn_Id");
            entity.Property(e => e.PlbgnGodziny).HasColumnName("plbgn_Godziny");
            entity.Property(e => e.PlbgnMiesiac).HasColumnName("plbgn_Miesiac");
            entity.Property(e => e.PlbgnRok).HasColumnName("plbgn_Rok");
            entity.Property(e => e.PlbgnZmienione).HasColumnName("plbgn_Zmienione");
        });

        modelBuilder.Entity<PlbListaPlac>(entity =>
        {
            entity.HasKey(e => e.LpId);

            entity.ToTable("plb_ListaPlac");

            entity.Property(e => e.LpId)
                .ValueGeneratedNever()
                .HasColumnName("lp_Id");
            entity.Property(e => e.LpAutomatyczna)
                .HasDefaultValue(true)
                .HasColumnName("lp_Automatyczna");
            entity.Property(e => e.LpCzyPrzychodZaInnyRok).HasColumnName("lp_CzyPrzychodZaInnyRok");
            entity.Property(e => e.LpDataSkladek)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataSkladek");
            entity.Property(e => e.LpDataWplatyPpk)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("lp_DataWplatyPPK");
            entity.Property(e => e.LpDataWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataWyplaty");
            entity.Property(e => e.LpDataZaliczek)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataZaliczek");
            entity.Property(e => e.LpIdDefinicjiLp).HasColumnName("lp_IdDefinicjiLP");
            entity.Property(e => e.LpIdKategorii).HasColumnName("lp_IdKategorii");
            entity.Property(e => e.LpMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("lp_Miesiac");
            entity.Property(e => e.LpNumer)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lp_Numer");
            entity.Property(e => e.LpRokPrzychodu).HasColumnName("lp_RokPrzychodu");
            entity.Property(e => e.LpStatusKsiegowyLp).HasColumnName("lp_StatusKsiegowyLP");
            entity.Property(e => e.LpStatusKsiegowyPpk).HasColumnName("lp_StatusKsiegowyPPK");
            entity.Property(e => e.LpStatusKsiegowySkladki).HasColumnName("lp_StatusKsiegowySkladki");
            entity.Property(e => e.LpStatusKsiegowyZaliczki).HasColumnName("lp_StatusKsiegowyZaliczki");
            entity.Property(e => e.LpTytul)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lp_Tytul");
            entity.Property(e => e.LpZatwierdzona).HasColumnName("lp_Zatwierdzona");
            entity.Property(e => e.LpZmianaDatyWyplatyData)
                .HasColumnType("datetime")
                .HasColumnName("lp_ZmianaDatyWyplatyData");
            entity.Property(e => e.LpZmianaDatyWyplatyKto).HasColumnName("lp_ZmianaDatyWyplatyKto");

            entity.HasOne(d => d.LpIdKategoriiNavigation).WithMany(p => p.PlbListaPlacs)
                .HasForeignKey(d => d.LpIdKategorii)
                .HasConstraintName("FK_plb_ListaPlac_sl_Kategoria");

            entity.HasOne(d => d.LpZmianaDatyWyplatyKtoNavigation).WithMany(p => p.PlbListaPlacs)
                .HasForeignKey(d => d.LpZmianaDatyWyplatyKto)
                .HasConstraintName("FK_plb_ListaPlac_pd_Uzytkownik");
        });

        modelBuilder.Entity<PlbParametr>(entity =>
        {
            entity.HasKey(e => e.GpId);

            entity.ToTable("plb_Parametr");

            entity.Property(e => e.GpId)
                .ValueGeneratedNever()
                .HasColumnName("gp_Id");
            entity.Property(e => e.GpBlokujOperBankoweWsubiekcie).HasColumnName("gp_BlokujOperBankoweWSubiekcie");
            entity.Property(e => e.GpBlokujWydrukUjemnejWyplaty)
                .HasDefaultValue(true)
                .HasColumnName("gp_BlokujWydrukUjemnejWyplaty");
            entity.Property(e => e.GpDofinansowanieSkladek).HasColumnName("gp_DofinansowanieSkladek");
            entity.Property(e => e.GpDzienPrzekazaniaSkladek)
                .HasDefaultValue(120)
                .HasColumnName("gp_DzienPrzekazaniaSkladek");
            entity.Property(e => e.GpKosztyIpodOdZasRachunki).HasColumnName("gp_KosztyIPodOdZasRachunki");
            entity.Property(e => e.GpKreatorKorektNowyLadPrzypominaj)
                .HasColumnType("datetime")
                .HasColumnName("gp_KreatorKorektNowyLadPrzypominaj");
            entity.Property(e => e.GpKupPoZwolnieniu).HasColumnName("gp_KupPoZwolnieniu");
            entity.Property(e => e.GpLiczbaUbezpieczonych).HasColumnName("gp_LiczbaUbezpieczonych");
            entity.Property(e => e.GpLimitWiekuFpfgspkobiet)
                .HasDefaultValue(55)
                .HasColumnName("gp_LimitWiekuFPFGSPKobiet");
            entity.Property(e => e.GpLimitWiekuFpfgspmezczyzn)
                .HasDefaultValue(60)
                .HasColumnName("gp_LimitWiekuFPFGSPMezczyzn");
            entity.Property(e => e.GpMcPierwszejWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("gp_McPierwszejWyplaty");
            entity.Property(e => e.GpMiesSkladStale).HasColumnName("gp_MiesSkladStale");
            entity.Property(e => e.GpMiesSkladZmienne)
                .HasDefaultValue(3)
                .HasColumnName("gp_MiesSkladZmienne");
            entity.Property(e => e.GpNaliczajNieobecnosciPlatne).HasColumnName("gp_NaliczajNieobecnosciPlatne");
            entity.Property(e => e.GpNieNaliczajFpfgsp)
                .HasDefaultValue(true)
                .HasColumnName("gp_NieNaliczajFPFGSP");
            entity.Property(e => e.GpNieUwzglUlgPodPoZwoln)
                .HasDefaultValue(true)
                .HasColumnName("gp_NieUwzglUlgPodPoZwoln");
            entity.Property(e => e.GpNieUzupPodstChorUcznia)
                .HasDefaultValue(true)
                .HasColumnName("gp_NieUzupPodstChorUcznia");
            entity.Property(e => e.GpOgraniczenieSklZdrOdZalNaPodatek).HasColumnName("gp_OgraniczenieSklZdrOdZalNaPodatek");
            entity.Property(e => e.GpPrzeliczajSkladkiZus).HasColumnName("gp_PrzeliczajSkladkiZUS");
            entity.Property(e => e.GpRodzajUbezpieczenia)
                .HasDefaultValue(2)
                .HasColumnName("gp_RodzajUbezpieczenia");
            entity.Property(e => e.GpRokStartu).HasColumnName("gp_RokStartu");
            entity.Property(e => e.GpUwzgledniajKosztyIulge).HasColumnName("gp_UwzgledniajKosztyIUlge");
            entity.Property(e => e.GpWersjaPlatnika).HasColumnName("gp_WersjaPlatnika");
            entity.Property(e => e.GpWysylajNrDowodu)
                .HasDefaultValue(true)
                .HasColumnName("gp_WysylajNrDowodu");
            entity.Property(e => e.GpZ3bezEdycji)
                .HasDefaultValue(true)
                .HasColumnName("gp_Z3BezEdycji");
            entity.Property(e => e.GpZaokraglanieSkladkiZdr)
                .HasDefaultValue(true)
                .HasColumnName("gp_ZaokraglanieSkladkiZdr");
            entity.Property(e => e.GpZasilkiWyplaca).HasColumnName("gp_ZasilkiWyplaca");
        });

        modelBuilder.Entity<PlbParametrWyplaty>(entity =>
        {
            entity.HasKey(e => e.GpId);

            entity.ToTable("plb_ParametrWyplaty");

            entity.HasIndex(e => e.GpParamEwidId, "IX_plb_ParametrWyplaty").IsUnique();

            entity.Property(e => e.GpId)
                .ValueGeneratedNever()
                .HasColumnName("gp_Id");
            entity.Property(e => e.GpParamEwidId).HasColumnName("gp_ParamEwidId");
            entity.Property(e => e.GpSpNalPodstWynUrl).HasColumnName("gp_SpNalPodstWynUrl");
            entity.Property(e => e.GpSpOblDefSkl).HasColumnName("gp_SpOblDefSkl");
            entity.Property(e => e.GpWypGenerujZadanie).HasColumnName("gp_WypGenerujZadanie");
            entity.Property(e => e.GpWypOpisZadania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gp_WypOpisZadania");

            entity.HasOne(d => d.GpParamEwid).WithOne(p => p.PlbParametrWyplaty)
                .HasForeignKey<PlbParametrWyplaty>(d => d.GpParamEwidId)
                .HasConstraintName("FK_plb_ParametrWyplaty_par__Ewid");
        });

        modelBuilder.Entity<PlbPracownikZespol>(entity =>
        {
            entity.HasKey(e => e.PlbpzId);

            entity.ToTable("plb_PracownikZespol");

            entity.HasIndex(e => new { e.PlbpzIdPracownika, e.PlbpzIdZespolu }, "CK_plb_PracownikZespol_Unique").IsUnique();

            entity.Property(e => e.PlbpzId)
                .ValueGeneratedNever()
                .HasColumnName("plbpz_Id");
            entity.Property(e => e.PlbpzIdPracownika).HasColumnName("plbpz_IdPracownika");
            entity.Property(e => e.PlbpzIdZespolu).HasColumnName("plbpz_IdZespolu");

            entity.HasOne(d => d.PlbpzIdPracownikaNavigation).WithMany(p => p.PlbPracownikZespols)
                .HasForeignKey(d => d.PlbpzIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_PracownikZespol_pr_Pracownik");

            entity.HasOne(d => d.PlbpzIdZespoluNavigation).WithMany(p => p.PlbPracownikZespols)
                .HasForeignKey(d => d.PlbpzIdZespolu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_PracownikZespol_sl_ZespolPrac");
        });

        modelBuilder.Entity<PlbRachunekDoUmowyCp>(entity =>
        {
            entity.HasKey(e => e.RuId);

            entity.ToTable("plb_RachunekDoUmowyCP");

            entity.Property(e => e.RuId)
                .ValueGeneratedNever()
                .HasColumnName("ru_Id");
            entity.Property(e => e.RuAkord)
                .HasColumnType("money")
                .HasColumnName("ru_Akord");
            entity.Property(e => e.RuBruttoDuze)
                .HasColumnType("money")
                .HasColumnName("ru_BruttoDuze");
            entity.Property(e => e.RuBruttoMale)
                .HasColumnType("money")
                .HasColumnName("ru_BruttoMale");
            entity.Property(e => e.RuBudzetMacEmer)
                .HasColumnType("money")
                .HasColumnName("ru_BudzetMacEmer");
            entity.Property(e => e.RuBudzetMacPodstEmRe)
                .HasColumnType("money")
                .HasColumnName("ru_BudzetMacPodstEmRe");
            entity.Property(e => e.RuBudzetMacPodstZdr)
                .HasColumnType("money")
                .HasColumnName("ru_BudzetMacPodstZdr");
            entity.Property(e => e.RuBudzetMacRent)
                .HasColumnType("money")
                .HasColumnName("ru_BudzetMacRent");
            entity.Property(e => e.RuBudzetMacZdr)
                .HasColumnType("money")
                .HasColumnName("ru_BudzetMacZdr");
            entity.Property(e => e.RuBylKwprzelewWydruk).HasColumnName("ru_BylKWPrzelewWydruk");
            entity.Property(e => e.RuDataHarm)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataHarm");
            entity.Property(e => e.RuDataSkladek)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataSkladek");
            entity.Property(e => e.RuDataWplatyPpk)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("ru_DataWplatyPPK");
            entity.Property(e => e.RuDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataWystawienia");
            entity.Property(e => e.RuDataZaliczek)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataZaliczek");
            entity.Property(e => e.RuDoReki)
                .HasColumnType("money")
                .HasColumnName("ru_DoReki");
            entity.Property(e => e.RuDodatekRodzinny)
                .HasColumnType("money")
                .HasColumnName("ru_DodatekRodzinny");
            entity.Property(e => e.RuDodatkiNieopodatkowane)
                .HasColumnType("money")
                .HasColumnName("ru_DodatkiNieopodatkowane");
            entity.Property(e => e.RuEcpmiesiac)
                .HasColumnType("datetime")
                .HasColumnName("ru_ECPMiesiac");
            entity.Property(e => e.RuFep)
                .HasColumnType("money")
                .HasColumnName("ru_FEP");
            entity.Property(e => e.RuFgsp)
                .HasColumnType("money")
                .HasColumnName("ru_FGSP");
            entity.Property(e => e.RuFlagi).HasColumnName("ru_Flagi");
            entity.Property(e => e.RuFp)
                .HasColumnType("money")
                .HasColumnName("ru_FP");
            entity.Property(e => e.RuGodzinyPracyMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("ru_GodzinyPracyMiesiac");
            entity.Property(e => e.RuIdHarmonogramu).HasColumnName("ru_IdHarmonogramu");
            entity.Property(e => e.RuIdKategorii).HasColumnName("ru_IdKategorii");
            entity.Property(e => e.RuIdOsobyWyst).HasColumnName("ru_IdOsobyWyst");
            entity.Property(e => e.RuIdTresciRachunku).HasColumnName("ru_IdTresciRachunku");
            entity.Property(e => e.RuIdUmowy).HasColumnName("ru_IdUmowy");
            entity.Property(e => e.RuKosztUzysk)
                .HasColumnType("money")
                .HasColumnName("ru_KosztUzysk");
            entity.Property(e => e.RuKosztUzyskProcent)
                .HasColumnType("money")
                .HasColumnName("ru_KosztUzyskProcent");
            entity.Property(e => e.RuKosztyAutorskie).HasColumnName("ru_KosztyAutorskie");
            entity.Property(e => e.RuKwotaRachunku)
                .HasColumnType("money")
                .HasColumnName("ru_KwotaRachunku");
            entity.Property(e => e.RuMiesiecznaUlgaPodatkowa)
                .HasColumnType("money")
                .HasColumnName("ru_MiesiecznaUlgaPodatkowa");
            entity.Property(e => e.RuNeRazem)
                .HasColumnType("money")
                .HasColumnName("ru_NeRazem");
            entity.Property(e => e.RuNetto)
                .HasColumnType("money")
                .HasColumnName("ru_Netto");
            entity.Property(e => e.RuNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ru_Numer");
            entity.Property(e => e.RuObciazeniePracodawcy)
                .HasColumnType("money")
                .HasColumnName("ru_ObciazeniePracodawcy");
            entity.Property(e => e.RuOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ru_Opis");
            entity.Property(e => e.RuPit8c).HasColumnName("ru_PIT8C");
            entity.Property(e => e.RuPodatek)
                .HasColumnType("money")
                .HasColumnName("ru_Podatek");
            entity.Property(e => e.RuPodatekProcent)
                .HasColumnType("money")
                .HasColumnName("ru_PodatekProcent");
            entity.Property(e => e.RuPodstPpk)
                .HasColumnType("money")
                .HasColumnName("ru_PodstPPK");
            entity.Property(e => e.RuPodstUbChorWyp)
                .HasColumnType("money")
                .HasColumnName("ru_PodstUbChorWyp");
            entity.Property(e => e.RuPodstUbEmerRent)
                .HasColumnType("money")
                .HasColumnName("ru_PodstUbEmerRent");
            entity.Property(e => e.RuPodstUbEmerRentPrzekroczona).HasColumnName("ru_PodstUbEmerRentPrzekroczona");
            entity.Property(e => e.RuPodstUbWyp)
                .HasColumnType("money")
                .HasColumnName("ru_PodstUbWyp");
            entity.Property(e => e.RuPodstUbZdr)
                .HasColumnType("money")
                .HasColumnName("ru_PodstUbZdr");
            entity.Property(e => e.RuPodstUbZdrZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("ru_PodstUbZdrZeZwolnionych");
            entity.Property(e => e.RuPodstawaOpodatkowania)
                .HasColumnType("money")
                .HasColumnName("ru_PodstawaOpodatkowania");
            entity.Property(e => e.RuPotraceniaNetto)
                .HasColumnType("money")
                .HasColumnName("ru_PotraceniaNetto");
            entity.Property(e => e.RuPracownikOtrzymuje)
                .HasColumnType("money")
                .HasColumnName("ru_PracownikOtrzymuje");
            entity.Property(e => e.RuProwizja)
                .HasColumnType("money")
                .HasColumnName("ru_Prowizja");
            entity.Property(e => e.RuPrzelew)
                .HasColumnType("money")
                .HasColumnName("ru_Przelew");
            entity.Property(e => e.RuPrzychodObjetyZwolnieniemZpit)
                .HasColumnType("money")
                .HasColumnName("ru_PrzychodObjetyZwolnieniemZPIT");
            entity.Property(e => e.RuRodzajPrzychodu).HasColumnName("ru_RodzajPrzychodu");
            entity.Property(e => e.RuRodzajUlgi).HasColumnName("ru_RodzajUlgi");
            entity.Property(e => e.RuRokPrzychodu).HasColumnName("ru_RokPrzychodu");
            entity.Property(e => e.RuRozliczaAkordy).HasColumnName("ru_RozliczaAkordy");
            entity.Property(e => e.RuRozliczaEcp).HasColumnName("ru_RozliczaECP");
            entity.Property(e => e.RuRozliczaEwGodz).HasColumnName("ru_RozliczaEwGodz");
            entity.Property(e => e.RuRozliczaProwizje).HasColumnName("ru_RozliczaProwizje");
            entity.Property(e => e.RuRyczalt).HasColumnName("ru_Ryczalt");
            entity.Property(e => e.RuSledzWersja)
                .HasDefaultValue(1)
                .HasColumnName("ru_SledzWersja");
            entity.Property(e => e.RuStatus).HasColumnName("ru_Status");
            entity.Property(e => e.RuStatusImportuPpk).HasColumnName("ru_StatusImportuPPK");
            entity.Property(e => e.RuStatusImportuRachunku).HasColumnName("ru_StatusImportuRachunku");
            entity.Property(e => e.RuStatusImportuSkladek).HasColumnName("ru_StatusImportuSkladek");
            entity.Property(e => e.RuStatusImportuZaliczek).HasColumnName("ru_StatusImportuZaliczek");
            entity.Property(e => e.RuSwiadczenieRehab)
                .HasColumnType("money")
                .HasColumnName("ru_SwiadczenieRehab");
            entity.Property(e => e.RuUbezpZdrowotne)
                .HasColumnType("money")
                .HasColumnName("ru_UbezpZdrowotne");
            entity.Property(e => e.RuUbezpZdrowotne2)
                .HasColumnType("money")
                .HasColumnName("ru_UbezpZdrowotne2");
            entity.Property(e => e.RuUnikaniePodwojnegoOpodatkowania).HasColumnName("ru_UnikaniePodwojnegoOpodatkowania");
            entity.Property(e => e.RuWplataDodatkPracodawcyPpk)
                .HasColumnType("money")
                .HasColumnName("ru_WplataDodatkPracodawcyPPK");
            entity.Property(e => e.RuWplataDodatkPracownikaPpk)
                .HasColumnType("money")
                .HasColumnName("ru_WplataDodatkPracownikaPPK");
            entity.Property(e => e.RuWplataPodstPracodawcyPpk)
                .HasColumnType("money")
                .HasColumnName("ru_WplataPodstPracodawcyPPK");
            entity.Property(e => e.RuWplataPodstPracownikaPpk)
                .HasColumnType("money")
                .HasColumnName("ru_WplataPodstPracownikaPPK");
            entity.Property(e => e.RuWplataPracodawcyPpkdoPodatku)
                .HasColumnType("money")
                .HasColumnName("ru_WplataPracodawcyPPKDoPodatku");
            entity.Property(e => e.RuZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatek");
            entity.Property(e => e.RuZaliczkaNaPodatekBilans)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatekBilans");
            entity.Property(e => e.RuZaliczkaNaPodatekOryginalna)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatekOryginalna");
            entity.Property(e => e.RuZaliczkaNaPodatekWirtualna)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatekWirtualna");
            entity.Property(e => e.RuZasilekChorobowy)
                .HasColumnType("money")
                .HasColumnName("ru_ZasilekChorobowy");
            entity.Property(e => e.RuZasilekMacierzynski)
                .HasColumnType("money")
                .HasColumnName("ru_ZasilekMacierzynski");
            entity.Property(e => e.RuZasilekOpiekunczy)
                .HasColumnType("money")
                .HasColumnName("ru_ZasilekOpiekunczy");
            entity.Property(e => e.RuZasilekPielegnacyjny)
                .HasColumnType("money")
                .HasColumnName("ru_ZasilekPielegnacyjny");
            entity.Property(e => e.RuZasilekRodzinny)
                .HasColumnType("money")
                .HasColumnName("ru_ZasilekRodzinny");
            entity.Property(e => e.RuZatwierdzony).HasColumnName("ru_Zatwierdzony");
            entity.Property(e => e.RuZus)
                .HasColumnType("money")
                .HasColumnName("ru_ZUS");
            entity.Property(e => e.RuZusPracZdrZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("ru_ZusPracZdrZeZwolnionych");
            entity.Property(e => e.RuZusPracZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("ru_ZusPracZeZwolnionych");
            entity.Property(e => e.RuZuschorPrac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSChorPrac");
            entity.Property(e => e.RuZusemer1Firma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSEmer1Firma");
            entity.Property(e => e.RuZusemer1Prac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSEmer1Prac");
            entity.Property(e => e.RuZusemer2Firma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSEmer2Firma");
            entity.Property(e => e.RuZusemer2Prac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSEmer2Prac");
            entity.Property(e => e.RuZusfirma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSFirma");
            entity.Property(e => e.RuZusprac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSPrac");
            entity.Property(e => e.RuZusrazem)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSRazem");
            entity.Property(e => e.RuZusrentFirma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSRentFirma");
            entity.Property(e => e.RuZusrentPrac)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSRentPrac");
            entity.Property(e => e.RuZusrozliczenie)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSRozliczenie");
            entity.Property(e => e.RuZuswypFirma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSWypFirma");
            entity.Property(e => e.RuZuszasilki)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSZasilki");

            entity.HasOne(d => d.RuIdHarmonogramuNavigation).WithMany(p => p.PlbRachunekDoUmowyCps)
                .HasForeignKey(d => d.RuIdHarmonogramu)
                .HasConstraintName("FK_plb_RachunekDoUmowyCP_plb_UmowaCPHarmonogram");

            entity.HasOne(d => d.RuIdKategoriiNavigation).WithMany(p => p.PlbRachunekDoUmowyCps)
                .HasForeignKey(d => d.RuIdKategorii)
                .HasConstraintName("FK_plb_RachunekDoUmowyCP_sl_Kategoria");

            entity.HasOne(d => d.RuIdOsobyWystNavigation).WithMany(p => p.PlbRachunekDoUmowyCps)
                .HasForeignKey(d => d.RuIdOsobyWyst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_RachunekDoUmowyCP_pd_Uzytkownik");

            entity.HasOne(d => d.RuIdTresciRachunkuNavigation).WithMany(p => p.PlbRachunekDoUmowyCps)
                .HasForeignKey(d => d.RuIdTresciRachunku)
                .HasConstraintName("FK_plb_RachunekDoUmowyCP_sl_GratTrescDok");
        });

        modelBuilder.Entity<PlbSkladnik>(entity =>
        {
            entity.HasKey(e => e.SpId).HasName("PK_pl_Skladnik");

            entity.ToTable("plb_Skladnik");

            entity.Property(e => e.SpId)
                .ValueGeneratedNever()
                .HasColumnName("sp_Id");
            entity.Property(e => e.SpAktywny)
                .HasDefaultValue(true)
                .HasColumnName("sp_Aktywny");
            entity.Property(e => e.SpAutoPotracenie).HasColumnName("sp_AutoPotracenie");
            entity.Property(e => e.SpCykl).HasColumnName("sp_Cykl");
            entity.Property(e => e.SpDoKwotyChor)
                .HasDefaultValue(true)
                .HasColumnName("sp_DoKwotyChor");
            entity.Property(e => e.SpDoKwotyUrl)
                .HasDefaultValue(true)
                .HasColumnName("sp_DoKwotyUrl");
            entity.Property(e => e.SpDoPodstChWy)
                .HasDefaultValue(true)
                .HasColumnName("sp_DoPodstChWy");
            entity.Property(e => e.SpDoPodstEmRe)
                .HasDefaultValue(true)
                .HasColumnName("sp_DoPodstEmRe");
            entity.Property(e => e.SpDoPodstJub)
                .HasDefaultValue(true)
                .HasColumnName("sp_DoPodstJub");
            entity.Property(e => e.SpDoPodstZdr)
                .HasDefaultValue(true)
                .HasColumnName("sp_DoPodstZdr");
            entity.Property(e => e.SpIdInstytucji).HasColumnName("sp_IdInstytucji");
            entity.Property(e => e.SpIgnorujDzienDatUmowy).HasColumnName("sp_IgnorujDzienDatUmowy");
            entity.Property(e => e.SpKwmpk).HasColumnName("sp_KWMPK");
            entity.Property(e => e.SpKwtyp).HasColumnName("sp_KWTyp");
            entity.Property(e => e.SpKwwspolczynnik)
                .HasDefaultValue(1)
                .HasColumnName("sp_KWWspolczynnik");
            entity.Property(e => e.SpKwzlecenie).HasColumnName("sp_KWZlecenie");
            entity.Property(e => e.SpNazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sp_Nazwa");
            entity.Property(e => e.SpNazwaNaWydruku)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sp_NazwaNaWydruku");
            entity.Property(e => e.SpNieNaliczacDodatekNadgodziny).HasColumnName("sp_NieNaliczacDodatekNadgodziny");
            entity.Property(e => e.SpNieOgrSklZdr).HasColumnName("sp_NieOgrSklZdr");
            entity.Property(e => e.SpNieUwzglDoMinimalnej).HasColumnName("sp_NieUwzglDoMinimalnej");
            entity.Property(e => e.SpNieUwzglWsprGus).HasColumnName("sp_NieUwzglWSprGUS");
            entity.Property(e => e.SpNieUwzglZaswOwynagrodzeniu).HasColumnName("sp_NieUwzglZaswOWynagrodzeniu");
            entity.Property(e => e.SpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sp_Opis");
            entity.Property(e => e.SpOpodatkowany)
                .HasDefaultValue(true)
                .HasColumnName("sp_Opodatkowany");
            entity.Property(e => e.SpPlatnyPrzez).HasColumnName("sp_PlatnyPrzez");
            entity.Property(e => e.SpPorownajZeStawkaZaszeregowania).HasColumnName("sp_PorownajZeStawkaZaszeregowania");
            entity.Property(e => e.SpPrawaAutorskie).HasColumnName("sp_PrawaAutorskie");
            entity.Property(e => e.SpRodzaj).HasColumnName("sp_Rodzaj");
            entity.Property(e => e.SpTyp).HasColumnName("sp_Typ");
            entity.Property(e => e.SpUlgaDlaKlasySredniej).HasColumnName("sp_UlgaDlaKlasySredniej");
            entity.Property(e => e.SpUwzglNadgodziny)
                .HasDefaultValue(true)
                .HasColumnName("sp_UwzglNadgodziny");
            entity.Property(e => e.SpUwzglNocne)
                .HasDefaultValue(true)
                .HasColumnName("sp_UwzglNocne");
            entity.Property(e => e.SpUwzglWpodstPrzestoj).HasColumnName("sp_UwzglWPodstPrzestoj");
            entity.Property(e => e.SpUwzgledniajAtrybutyDniGodzin).HasColumnName("sp_UwzgledniajAtrybutyDniGodzin");
            entity.Property(e => e.SpWartoscZero).HasColumnName("sp_WartoscZero");
            entity.Property(e => e.SpWylaczonyZpotKom).HasColumnName("sp_WylaczonyZPotKom");
            entity.Property(e => e.SpZmiennosc).HasColumnName("sp_Zmiennosc");
            entity.Property(e => e.SpZwolnienieZpodatku).HasColumnName("sp_ZwolnienieZPodatku");
            entity.Property(e => e.SpZwolnienieZpodatkuDlaMlodych).HasColumnName("sp_ZwolnienieZPodatkuDlaMlodych");

            entity.HasOne(d => d.SpIdInstytucjiNavigation).WithMany(p => p.PlbSkladniks)
                .HasForeignKey(d => d.SpIdInstytucji)
                .HasConstraintName("FK_plb_Skladnik_is__Instytucja");

            entity.HasOne(d => d.SpKwmpkNavigation).WithMany(p => p.PlbSkladniks)
                .HasForeignKey(d => d.SpKwmpk)
                .HasConstraintName("FK_plb_Skladnik_st_MPK");

            entity.HasOne(d => d.SpKwzlecenieNavigation).WithMany(p => p.PlbSkladniks)
                .HasForeignKey(d => d.SpKwzlecenie)
                .HasConstraintName("FK_plb_Skladnik_zlp__Zlecenie");
        });

        modelBuilder.Entity<PlbSkladnikAbsencja>(entity =>
        {
            entity.HasKey(e => e.SpaId).HasName("PK_pl_SkladnikAbsencja");

            entity.ToTable("plb_SkladnikAbsencja");

            entity.Property(e => e.SpaId)
                .ValueGeneratedNever()
                .HasColumnName("spa_Id");
            entity.Property(e => e.SpaIdSkladnika).HasColumnName("spa_IdSkladnika");
            entity.Property(e => e.SpaPomniejszaj).HasColumnName("spa_Pomniejszaj");
            entity.Property(e => e.SpaTypAbsencji).HasColumnName("spa_TypAbsencji");
            entity.Property(e => e.SpaUwzglKwotaChor).HasColumnName("spa_UwzglKwotaChor");
            entity.Property(e => e.SpaUwzglPodstChWy).HasColumnName("spa_UwzglPodstChWy");
            entity.Property(e => e.SpaUwzglPodstEmRe).HasColumnName("spa_UwzglPodstEmRe");
            entity.Property(e => e.SpaUwzglPodstZdr).HasColumnName("spa_UwzglPodstZdr");

            entity.HasOne(d => d.SpaIdSkladnikaNavigation).WithMany(p => p.PlbSkladnikAbsencjas)
                .HasForeignKey(d => d.SpaIdSkladnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_SkladnikAbsencja_plb_Skladnik");
        });

        modelBuilder.Entity<PlbSkladnikDefinicja>(entity =>
        {
            entity.HasKey(e => e.SpdId).HasName("PK_pl_SkladnikDefinicja");

            entity.ToTable("plb_SkladnikDefinicja");

            entity.Property(e => e.SpdId)
                .ValueGeneratedNever()
                .HasColumnName("spd_Id");
            entity.Property(e => e.SpdDataDo)
                .HasColumnType("datetime")
                .HasColumnName("spd_DataDo");
            entity.Property(e => e.SpdDataOd)
                .HasColumnType("datetime")
                .HasColumnName("spd_DataOd");
            entity.Property(e => e.SpdIdSkladnika).HasColumnName("spd_IdSkladnika");
            entity.Property(e => e.SpdIdSkladnikaNaUmowie).HasColumnName("spd_IdSkladnikaNaUmowie");
            entity.Property(e => e.SpdOdZawsze).HasColumnName("spd_OdZawsze");
            entity.Property(e => e.SpdOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("spd_Opis");
            entity.Property(e => e.SpdSkrypt)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("spd_Skrypt");
            entity.Property(e => e.SpdTyp).HasColumnName("spd_Typ");
            entity.Property(e => e.SpdTypObiektu).HasColumnName("spd_TypObiektu");
            entity.Property(e => e.SpdWartosc)
                .HasColumnType("money")
                .HasColumnName("spd_Wartosc");

            entity.HasOne(d => d.SpdIdSkladnikaNavigation).WithMany(p => p.PlbSkladnikDefinicjas)
                .HasForeignKey(d => d.SpdIdSkladnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_SkladnikDefinicja_plb_Skladnik");
        });

        modelBuilder.Entity<PlbSkladnikDefinicjaKlocek>(entity =>
        {
            entity.HasKey(e => e.SpdkId).HasName("PK_pl_SkladnikDefinicjaKlocek");

            entity.ToTable("plb_SkladnikDefinicjaKlocek");

            entity.Property(e => e.SpdkId)
                .ValueGeneratedNever()
                .HasColumnName("spdk_Id");
            entity.Property(e => e.SpdkDefinicja)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("spdk_Definicja");
            entity.Property(e => e.SpdkIdDefinicji).HasColumnName("spdk_IdDefinicji");
            entity.Property(e => e.SpdkParamStr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("spdk_ParamStr");
            entity.Property(e => e.SpdkTyp).HasColumnName("spdk_Typ");
            entity.Property(e => e.SpdkWartoscCy)
                .HasColumnType("money")
                .HasColumnName("spdk_WartoscCy");
            entity.Property(e => e.SpdkWartoscInt).HasColumnName("spdk_WartoscInt");
        });

        modelBuilder.Entity<PlbSkryptParametr>(entity =>
        {
            entity.HasKey(e => e.SkrpId);

            entity.ToTable("plb_SkryptParametr");

            entity.Property(e => e.SkrpId)
                .ValueGeneratedNever()
                .HasColumnName("skrp_Id");
            entity.Property(e => e.SkrpBinaria)
                .HasColumnType("image")
                .HasColumnName("skrp_Binaria");
            entity.Property(e => e.SkrpJezyk).HasColumnName("skrp_Jezyk");
            entity.Property(e => e.SkrpKodIc)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("skrp_KodIC");
            entity.Property(e => e.SkrpKodIn)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("skrp_KodIN");
            entity.Property(e => e.SkrpKodOn)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("skrp_KodON");
            entity.Property(e => e.SkrpReferencje)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("skrp_Referencje");
            entity.Property(e => e.SkrpUsing)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("skrp_Using");
        });

        modelBuilder.Entity<PlbSzablonLp>(entity =>
        {
            entity.HasKey(e => e.SlpId).HasName("PK_pl_SzablonLP");

            entity.ToTable("plb_SzablonLP");

            entity.Property(e => e.SlpId)
                .ValueGeneratedNever()
                .HasColumnName("slp_Id");
            entity.Property(e => e.SlpDataPrzekazaniaSkladek).HasColumnName("slp_DataPrzekazaniaSkladek");
            entity.Property(e => e.SlpDataPrzekazaniaZaliczek).HasColumnName("slp_DataPrzekazaniaZaliczek");
            entity.Property(e => e.SlpDataWyplaty).HasColumnName("slp_DataWyplaty");
            entity.Property(e => e.SlpFormatNazwy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slp_FormatNazwy");
            entity.Property(e => e.SlpFormatNumeru)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slp_FormatNumeru");
            entity.Property(e => e.SlpIdKategorii).HasColumnName("slp_IdKategorii");
            entity.Property(e => e.SlpIdSzablonuNazwyLp).HasColumnName("slp_IdSzablonuNazwyLP");
            entity.Property(e => e.SlpIdSzablonuNumeruLp)
                .HasDefaultValueSql("('')")
                .HasColumnName("slp_IdSzablonuNumeruLP");
            entity.Property(e => e.SlpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slp_Nazwa");
            entity.Property(e => e.SlpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slp_Opis");
            entity.Property(e => e.SlpTekst)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slp_Tekst");

            entity.HasOne(d => d.SlpIdSzablonuNazwyLpNavigation).WithMany(p => p.PlbSzablonLpSlpIdSzablonuNazwyLpNavigations)
                .HasForeignKey(d => d.SlpIdSzablonuNazwyLp)
                .HasConstraintName("FK_plb_SzablonLP_sl_FormatNumeracji");

            entity.HasOne(d => d.SlpIdSzablonuNumeruLpNavigation).WithMany(p => p.PlbSzablonLpSlpIdSzablonuNumeruLpNavigations)
                .HasForeignKey(d => d.SlpIdSzablonuNumeruLp)
                .HasConstraintName("FK_plb_SzablonLP_sl_FormatNumeracji1");
        });

        modelBuilder.Entity<PlbSzablonZp>(entity =>
        {
            entity.HasKey(e => e.ZplId);

            entity.ToTable("plb_SzablonZP");

            entity.Property(e => e.ZplId)
                .ValueGeneratedNever()
                .HasColumnName("zpl_Id");
            entity.Property(e => e.ZplIdSzablonuListPlac).HasColumnName("zpl_IdSzablonuListPlac");
            entity.Property(e => e.ZplMcWyplacania1)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania1");
            entity.Property(e => e.ZplMcWyplacania10)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania10");
            entity.Property(e => e.ZplMcWyplacania11)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania11");
            entity.Property(e => e.ZplMcWyplacania12)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania12");
            entity.Property(e => e.ZplMcWyplacania2)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania2");
            entity.Property(e => e.ZplMcWyplacania3)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania3");
            entity.Property(e => e.ZplMcWyplacania4)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania4");
            entity.Property(e => e.ZplMcWyplacania5)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania5");
            entity.Property(e => e.ZplMcWyplacania6)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania6");
            entity.Property(e => e.ZplMcWyplacania7)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania7");
            entity.Property(e => e.ZplMcWyplacania8)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania8");
            entity.Property(e => e.ZplMcWyplacania9)
                .HasDefaultValue(true)
                .HasColumnName("zpl_McWyplacania9");
            entity.Property(e => e.ZplNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpl_Nazwa");
            entity.Property(e => e.ZplOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpl_Opis");
            entity.Property(e => e.ZplRozliczacAkordy)
                .HasDefaultValue(true)
                .HasColumnName("zpl_RozliczacAkordy");
            entity.Property(e => e.ZplRozliczacEcp)
                .HasDefaultValue(true)
                .HasColumnName("zpl_RozliczacECP");
            entity.Property(e => e.ZplRozliczacNadgodziny)
                .HasDefaultValue(true)
                .HasColumnName("zpl_RozliczacNadgodziny");
            entity.Property(e => e.ZplRozliczacNaliczeniaPotracenia)
                .HasDefaultValue(true)
                .HasColumnName("zpl_RozliczacNaliczeniaPotracenia");
            entity.Property(e => e.ZplRozliczacPotraceniaKomornicze).HasColumnName("zpl_RozliczacPotraceniaKomornicze");
            entity.Property(e => e.ZplRozliczacProwizje)
                .HasDefaultValue(true)
                .HasColumnName("zpl_RozliczacProwizje");
            entity.Property(e => e.ZplUzupelniacDoMinimalnej).HasColumnName("zpl_UzupelniacDoMinimalnej");
        });

        modelBuilder.Entity<PlbSzablonZpskladnik>(entity =>
        {
            entity.HasKey(e => e.SzskId).HasName("PK_pl_SzablonZPSkladnik");

            entity.ToTable("plb_SzablonZPSkladnik");

            entity.Property(e => e.SzskId)
                .ValueGeneratedNever()
                .HasColumnName("szsk_Id");
            entity.Property(e => e.SzskIdSkladnika).HasColumnName("szsk_IdSkladnika");
            entity.Property(e => e.SzskIdSzablonu).HasColumnName("szsk_IdSzablonu");

            entity.HasOne(d => d.SzskIdSkladnikaNavigation).WithMany(p => p.PlbSzablonZpskladniks)
                .HasForeignKey(d => d.SzskIdSkladnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_SzablonZPSkladnik_plb_Skladnik");

            entity.HasOne(d => d.SzskIdSzablonuNavigation).WithMany(p => p.PlbSzablonZpskladniks)
                .HasForeignKey(d => d.SzskIdSzablonu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_SzablonZPSkladnik_plb_SzablonZP");
        });

        modelBuilder.Entity<PlbUmowa>(entity =>
        {
            entity.HasKey(e => e.UpId);

            entity.ToTable("plb_Umowa");

            entity.Property(e => e.UpId)
                .ValueGeneratedNever()
                .HasColumnName("up_Id");
            entity.Property(e => e.UpCelZawarcia)
                .HasMaxLength(1050)
                .IsUnicode(false)
                .HasColumnName("up_CelZawarcia");
            entity.Property(e => e.UpCzasOczekNaZasChorob).HasColumnName("up_CzasOczekNaZasChorob");
            entity.Property(e => e.UpCzyKontrolowacLimitPracyZdalnejOkazjonalnej).HasColumnName("up_CzyKontrolowacLimitPracyZdalnejOkazjonalnej");
            entity.Property(e => e.UpCzyLiczycAutoFp).HasColumnName("up_CzyLiczycAutoFP");
            entity.Property(e => e.UpCzyNaliczacChor)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacChor");
            entity.Property(e => e.UpCzyNaliczacEmer)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacEmer");
            entity.Property(e => e.UpCzyNaliczacFep)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacFEP");
            entity.Property(e => e.UpCzyNaliczacFgsp)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacFGSP");
            entity.Property(e => e.UpCzyNaliczacFp)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacFP");
            entity.Property(e => e.UpCzyNaliczacPodatek)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacPodatek");
            entity.Property(e => e.UpCzyNaliczacRent)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacRent");
            entity.Property(e => e.UpCzyNaliczacUlgeDlaKlasySredniej)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacUlgeDlaKlasySredniej");
            entity.Property(e => e.UpCzyNaliczacWyp)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacWyp");
            entity.Property(e => e.UpCzyNaliczacZaliczke)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacZaliczke");
            entity.Property(e => e.UpCzyNaliczacZdr)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyNaliczacZdr");
            entity.Property(e => e.UpCzyOdliczacUlge)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyOdliczacUlge");
            entity.Property(e => e.UpCzyOdraczacPoborZaliczki)
                .HasDefaultValue(true)
                .HasColumnName("up_CzyOdraczacPoborZaliczki");
            entity.Property(e => e.UpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("up_DataDo");
            entity.Property(e => e.UpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("up_DataOd");
            entity.Property(e => e.UpDataRozwiazania)
                .HasColumnType("datetime")
                .HasColumnName("up_DataRozwiazania");
            entity.Property(e => e.UpDataZawarcia)
                .HasColumnType("datetime")
                .HasColumnName("up_DataZawarcia");
            entity.Property(e => e.UpGenerowanyRaport)
                .HasDefaultValue(1)
                .HasColumnName("up_GenerowanyRaport");
            entity.Property(e => e.UpIdPracZastepowanego).HasColumnName("up_IdPracZastepowanego");
            entity.Property(e => e.UpIdPracownika).HasColumnName("up_IdPracownika");
            entity.Property(e => e.UpIdSzablonu).HasColumnName("up_IdSzablonu");
            entity.Property(e => e.UpIdZawodu).HasColumnName("up_IdZawodu");
            entity.Property(e => e.UpIndywidLiczbaDniWynChor)
                .HasDefaultValue(33)
                .HasColumnName("up_IndywidLiczbaDniWynChor");
            entity.Property(e => e.UpIndywidSkalaPodatk).HasColumnName("up_IndywidSkalaPodatk");
            entity.Property(e => e.UpIndywidWynChor).HasColumnName("up_IndywidWynChor");
            entity.Property(e => e.UpIndywidWynMin).HasColumnName("up_IndywidWynMin");
            entity.Property(e => e.UpIndywidWynMinKwota)
                .HasColumnType("money")
                .HasColumnName("up_IndywidWynMinKwota");
            entity.Property(e => e.UpIndywidZfss).HasColumnName("up_IndywidZFSS");
            entity.Property(e => e.UpIndywidZfsskwota)
                .HasColumnType("money")
                .HasColumnName("up_IndywidZFSSKwota");
            entity.Property(e => e.UpIspkoszty)
                .HasColumnType("money")
                .HasColumnName("up_ISPKoszty");
            entity.Property(e => e.UpIspliczbaProgow)
                .HasDefaultValue(3)
                .HasColumnName("up_ISPLiczbaProgow");
            entity.Property(e => e.UpIspprog1)
                .HasColumnType("money")
                .HasColumnName("up_ISPProg1");
            entity.Property(e => e.UpIspprog2)
                .HasColumnType("money")
                .HasColumnName("up_ISPProg2");
            entity.Property(e => e.UpIspstopa1)
                .HasColumnType("money")
                .HasColumnName("up_ISPStopa1");
            entity.Property(e => e.UpIspstopa2)
                .HasColumnType("money")
                .HasColumnName("up_ISPStopa2");
            entity.Property(e => e.UpIspstopa3)
                .HasColumnType("money")
                .HasColumnName("up_ISPStopa3");
            entity.Property(e => e.UpIspulgaMiesieczna)
                .HasColumnType("money")
                .HasColumnName("up_ISPUlgaMiesieczna");
            entity.Property(e => e.UpIspulgaRoczna)
                .HasColumnType("money")
                .HasColumnName("up_ISPUlgaRoczna");
            entity.Property(e => e.UpKodPracyWszczChar)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("up_KodPracyWSzczChar");
            entity.Property(e => e.UpKodZawodu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("up_KodZawodu");
            entity.Property(e => e.UpKosztyUzyskania).HasColumnName("up_KosztyUzyskania");
            entity.Property(e => e.UpLiczbaDniWykorzystUrlopu).HasColumnName("up_LiczbaDniWykorzystUrlopu");
            entity.Property(e => e.UpNaliczanieZaliczki)
                .HasDefaultValue(2)
                .HasColumnName("up_NaliczanieZaliczki");
            entity.Property(e => e.UpNieUwzglWpfron).HasColumnName("up_NieUwzglWPfron");
            entity.Property(e => e.UpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("up_Numer");
            entity.Property(e => e.UpOkresPracySzczDo)
                .HasColumnType("datetime")
                .HasColumnName("up_OkresPracySzczDo");
            entity.Property(e => e.UpOkresPracySzczOd)
                .HasColumnType("datetime")
                .HasColumnName("up_OkresPracySzczOd");
            entity.Property(e => e.UpPowodRozwiazaniaId).HasColumnName("up_PowodRozwiazaniaId");
            entity.Property(e => e.UpPrzelewKwota)
                .HasColumnType("money")
                .HasColumnName("up_PrzelewKwota");
            entity.Property(e => e.UpPrzelewNaKonto).HasColumnName("up_PrzelewNaKonto");
            entity.Property(e => e.UpPrzelewProcent)
                .HasColumnType("money")
                .HasColumnName("up_PrzelewProcent");
            entity.Property(e => e.UpPrzelewRachunekId).HasColumnName("up_PrzelewRachunekId");
            entity.Property(e => e.UpPrzenLiczbaDniChorob).HasColumnName("up_PrzenLiczbaDniChorob");
            entity.Property(e => e.UpRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("up_Rodzaj");
            entity.Property(e => e.UpRozwiazana).HasColumnName("up_Rozwiazana");
            entity.Property(e => e.UpSposobRozliczaniaAbsencji)
                .HasDefaultValue(1)
                .HasColumnName("up_SposobRozliczaniaAbsencji");
            entity.Property(e => e.UpSposobRozliczaniaNadgodzin)
                .HasDefaultValue(1)
                .HasColumnName("up_SposobRozliczaniaNadgodzin");
            entity.Property(e => e.UpSposobRozliczaniaPoZbilansowaniu)
                .HasDefaultValue(2)
                .HasColumnName("up_SposobRozliczaniaPoZbilansowaniu");
            entity.Property(e => e.UpSposobRozliczaniaUrlopu).HasColumnName("up_SposobRozliczaniaUrlopu");
            entity.Property(e => e.UpTresc)
                .HasColumnType("image")
                .HasColumnName("up_Tresc");
            entity.Property(e => e.UpTrescIndywidualna).HasColumnName("up_TrescIndywidualna");
            entity.Property(e => e.UpTytulUbezp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("up_TytulUbezp");
            entity.Property(e => e.UpUczen).HasColumnName("up_Uczen");
            entity.Property(e => e.UpWymiarUlgiPodatkowej)
                .HasDefaultValue(5)
                .HasColumnName("up_WymiarUlgiPodatkowej");

            entity.HasOne(d => d.UpIdSzablonuNavigation).WithMany(p => p.PlbUmowas)
                .HasForeignKey(d => d.UpIdSzablonu)
                .HasConstraintName("FK_plb_Umowa_sl_GratTrescDok");

            entity.HasOne(d => d.UpPowodRozwiazania).WithMany(p => p.PlbUmowas)
                .HasForeignKey(d => d.UpPowodRozwiazaniaId)
                .HasConstraintName("FK_plb_Umowa_sl_GratPrzyczynaRozwUmowy");
        });

        modelBuilder.Entity<PlbUmowaCp>(entity =>
        {
            entity.HasKey(e => e.UcpId);

            entity.ToTable("plb_UmowaCP");

            entity.Property(e => e.UcpId)
                .ValueGeneratedNever()
                .HasColumnName("ucp_Id");
            entity.Property(e => e.UcpCzasOczekNaZasChorob).HasColumnName("ucp_CzasOczekNaZasChorob");
            entity.Property(e => e.UcpCzyLiczycAutoFp).HasColumnName("ucp_CzyLiczycAutoFP");
            entity.Property(e => e.UcpCzyNaliczacZaliczke)
                .HasDefaultValue(true)
                .HasColumnName("ucp_CzyNaliczacZaliczke");
            entity.Property(e => e.UcpCzyOdliczacUlge).HasColumnName("ucp_CzyOdliczacUlge");
            entity.Property(e => e.UcpCzyOdraczacPoborZaliczki)
                .HasDefaultValue(true)
                .HasColumnName("ucp_CzyOdraczacPoborZaliczki");
            entity.Property(e => e.UcpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ucp_DataDo");
            entity.Property(e => e.UcpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ucp_DataOd");
            entity.Property(e => e.UcpDataRozwiazania)
                .HasColumnType("datetime")
                .HasColumnName("ucp_DataRozwiazania");
            entity.Property(e => e.UcpDataZawarcia)
                .HasColumnType("datetime")
                .HasColumnName("ucp_DataZawarcia");
            entity.Property(e => e.UcpGenerowanaDeklaracjaZus)
                .HasDefaultValue(1)
                .HasColumnName("ucp_GenerowanaDeklaracjaZUS");
            entity.Property(e => e.UcpIdDeklaracjiZusRud).HasColumnName("ucp_IdDeklaracjiZUS_RUD");
            entity.Property(e => e.UcpIdDzialu).HasColumnName("ucp_IdDzialu");
            entity.Property(e => e.UcpIdFmtNumeracjiRachunkow).HasColumnName("ucp_IdFmtNumeracjiRachunkow");
            entity.Property(e => e.UcpIdPracownika).HasColumnName("ucp_IdPracownika");
            entity.Property(e => e.UcpIdPrzyczynaRozwiazania).HasColumnName("ucp_IdPrzyczynaRozwiazania");
            entity.Property(e => e.UcpIdRachBankowyPracownika).HasColumnName("ucp_IdRachBankowyPracownika");
            entity.Property(e => e.UcpIdSlownikZawodu).HasColumnName("ucp_IdSlownikZawodu");
            entity.Property(e => e.UcpIdSzablonuRachunku).HasColumnName("ucp_IdSzablonuRachunku");
            entity.Property(e => e.UcpIdSzablonuUmowy).HasColumnName("ucp_IdSzablonuUmowy");
            entity.Property(e => e.UcpKontrolujStawkeMinimalna).HasColumnName("ucp_KontrolujStawkeMinimalna");
            entity.Property(e => e.UcpKosztyAutorskie).HasColumnName("ucp_KosztyAutorskie");
            entity.Property(e => e.UcpKosztyUzyskaniaKwota)
                .HasColumnType("money")
                .HasColumnName("ucp_KosztyUzyskaniaKwota");
            entity.Property(e => e.UcpKosztyUzyskaniaMetoda)
                .HasDefaultValue(1)
                .HasColumnName("ucp_KosztyUzyskaniaMetoda");
            entity.Property(e => e.UcpKosztyUzyskaniaProcent)
                .HasColumnType("money")
                .HasColumnName("ucp_KosztyUzyskaniaProcent");
            entity.Property(e => e.UcpKwota)
                .HasColumnType("money")
                .HasColumnName("ucp_Kwota");
            entity.Property(e => e.UcpKwotaRachNaKonto)
                .HasColumnType("money")
                .HasColumnName("ucp_KwotaRachNaKonto");
            entity.Property(e => e.UcpNaCzas)
                .HasDefaultValue(2)
                .HasColumnName("ucp_NaCzas");
            entity.Property(e => e.UcpNaliczanieZaliczki)
                .HasDefaultValue(2)
                .HasColumnName("ucp_NaliczanieZaliczki");
            entity.Property(e => e.UcpNieKontrolujSkladek).HasColumnName("ucp_NieKontrolujSkladek");
            entity.Property(e => e.UcpNieOgraniczajKwotyChorobowego).HasColumnName("ucp_NieOgraniczajKwotyChorobowego");
            entity.Property(e => e.UcpNieOgraniczajKwotyZdrowotnego).HasColumnName("ucp_NieOgraniczajKwotyZdrowotnego");
            entity.Property(e => e.UcpNiePomniejszajPodstawyOpodatkowania).HasColumnName("ucp_NiePomniejszajPodstawyOpodatkowania");
            entity.Property(e => e.UcpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ucp_Numer");
            entity.Property(e => e.UcpOgraniczKwoteRachunkow).HasColumnName("ucp_OgraniczKwoteRachunkow");
            entity.Property(e => e.UcpPracaSzczegCharOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("ucp_PracaSzczegCharOkresDo");
            entity.Property(e => e.UcpPracaSzczegCharOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("ucp_PracaSzczegCharOkresOd");
            entity.Property(e => e.UcpProcentRachNaKonto)
                .HasColumnType("money")
                .HasColumnName("ucp_ProcentRachNaKonto");
            entity.Property(e => e.UcpPrzelewRachNaKonto)
                .HasDefaultValue(1)
                .HasColumnName("ucp_PrzelewRachNaKonto");
            entity.Property(e => e.UcpRachKategoria).HasColumnName("ucp_Rach_Kategoria");
            entity.Property(e => e.UcpRodzajPrzychodu).HasColumnName("ucp_RodzajPrzychodu");
            entity.Property(e => e.UcpRodzajUmowy)
                .HasDefaultValue(1)
                .HasColumnName("ucp_RodzajUmowy");
            entity.Property(e => e.UcpRozwiazana).HasColumnName("ucp_Rozwiazana");
            entity.Property(e => e.UcpSkladkaFep).HasColumnName("ucp_SkladkaFEP");
            entity.Property(e => e.UcpSkladkaFgsp)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaFGSP");
            entity.Property(e => e.UcpSkladkaFp)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaFP");
            entity.Property(e => e.UcpSkladkaUbezpChor)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpChor");
            entity.Property(e => e.UcpSkladkaUbezpEm)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpEm");
            entity.Property(e => e.UcpSkladkaUbezpRe)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpRe");
            entity.Property(e => e.UcpSkladkaUbezpWyp)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpWyp");
            entity.Property(e => e.UcpSkladkaUbezpZdr)
                .HasDefaultValue(true)
                .HasColumnName("ucp_SkladkaUbezpZdr");
            entity.Property(e => e.UcpSzablonUmowy)
                .HasColumnType("image")
                .HasColumnName("ucp_SzablonUmowy");
            entity.Property(e => e.UcpSzablonUmowyIndywidualny).HasColumnName("ucp_SzablonUmowyIndywidualny");
            entity.Property(e => e.UcpSzczegoly)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ucp_Szczegoly");
            entity.Property(e => e.UcpTytul)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ucp_Tytul");
            entity.Property(e => e.UcpUnikaniePodwojnegoOpodatkowania).HasColumnName("ucp_UnikaniePodwojnegoOpodatkowania");
            entity.Property(e => e.UcpWymiarUlgiPodatkowej)
                .HasDefaultValue(4)
                .HasColumnName("ucp_WymiarUlgiPodatkowej");
            entity.Property(e => e.UcpZgloszenieZusRud).HasColumnName("ucp_ZgloszenieZUS_RUD");
            entity.Property(e => e.UcpZryczaltowanyPodatek)
                .HasColumnType("money")
                .HasColumnName("ucp_ZryczaltowanyPodatek");
            entity.Property(e => e.UcpZuskodPracySzczegCharakter)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ucp_ZUSKodPracySzczegCharakter");
            entity.Property(e => e.UcpZuskodZawodu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ucp_ZUSKodZawodu");
            entity.Property(e => e.UcpZustytulUbezpieczenia)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ucp_ZUSTytulUbezpieczenia");
            entity.Property(e => e.UcpZwolnienieZpodatku).HasColumnName("ucp_ZwolnienieZPodatku");

            entity.HasOne(d => d.UcpIdDzialuNavigation).WithMany(p => p.PlbUmowaCps)
                .HasForeignKey(d => d.UcpIdDzialu)
                .HasConstraintName("FK_plb_UmowaCP_sl_Dzial");

            entity.HasOne(d => d.UcpIdFmtNumeracjiRachunkowNavigation).WithMany(p => p.PlbUmowaCps)
                .HasForeignKey(d => d.UcpIdFmtNumeracjiRachunkow)
                .HasConstraintName("FK_plb_UmowaCP_sl_FormatNumeracji");

            entity.HasOne(d => d.UcpIdPrzyczynaRozwiazaniaNavigation).WithMany(p => p.PlbUmowaCps)
                .HasForeignKey(d => d.UcpIdPrzyczynaRozwiazania)
                .HasConstraintName("FK_plb_UmowaCP_sl_GratPrzyczynaRozwUmowy");

            entity.HasOne(d => d.UcpIdSzablonuRachunkuNavigation).WithMany(p => p.PlbUmowaCpUcpIdSzablonuRachunkuNavigations)
                .HasForeignKey(d => d.UcpIdSzablonuRachunku)
                .HasConstraintName("FK_plb_UmowaCP_sl_GratTrescDok_Rachunek");

            entity.HasOne(d => d.UcpIdSzablonuUmowyNavigation).WithMany(p => p.PlbUmowaCpUcpIdSzablonuUmowyNavigations)
                .HasForeignKey(d => d.UcpIdSzablonuUmowy)
                .HasConstraintName("FK_plb_UmowaCP_sl_GratTrescDok_Umowa");

            entity.HasOne(d => d.UcpRachKategoriaNavigation).WithMany(p => p.PlbUmowaCps)
                .HasForeignKey(d => d.UcpRachKategoria)
                .HasConstraintName("FK_plb_UmowaCP_sl_Kategoria");

            entity.HasOne(d => d.UcpZustytulUbezpieczeniaNavigation).WithMany(p => p.PlbUmowaCps)
                .HasPrincipalKey(p => p.TuKod)
                .HasForeignKey(d => d.UcpZustytulUbezpieczenia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaCP_sl_TytulUbezpieczenia");
        });

        modelBuilder.Entity<PlbUmowaCpParametry>(entity =>
        {
            entity.HasKey(e => e.UpId);

            entity.ToTable("plb_UmowaCP_Parametry");

            entity.Property(e => e.UpId)
                .ValueGeneratedNever()
                .HasColumnName("up_Id");
            entity.Property(e => e.UpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("up_Nazwa");
        });

        modelBuilder.Entity<PlbUmowaCpParametryZestaw>(entity =>
        {
            entity.HasKey(e => e.UpzId);

            entity.ToTable("plb_UmowaCP_Parametry_Zestaw");

            entity.Property(e => e.UpzId)
                .ValueGeneratedNever()
                .HasColumnName("upz_Id");
            entity.Property(e => e.UpzCzyNaliczacZaliczke)
                .HasDefaultValue(true)
                .HasColumnName("upz_CzyNaliczacZaliczke");
            entity.Property(e => e.UpzDomyslny).HasColumnName("upz_Domyslny");
            entity.Property(e => e.UpzIdParametrow).HasColumnName("upz_IdParametrow");
            entity.Property(e => e.UpzKontrolujStawkeMinimalna).HasColumnName("upz_KontrolujStawkeMinimalna");
            entity.Property(e => e.UpzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("upz_Nazwa");
            entity.Property(e => e.UpzRachIdFmtNumeru).HasColumnName("upz_Rach_IdFmtNumeru");
            entity.Property(e => e.UpzRachKategoria).HasColumnName("upz_Rach_Kategoria");
            entity.Property(e => e.UpzRachKosztyAutorskie).HasColumnName("upz_Rach_KosztyAutorskie");
            entity.Property(e => e.UpzRachKwotaRachNaKonto)
                .HasColumnType("money")
                .HasColumnName("upz_Rach_KwotaRachNaKonto");
            entity.Property(e => e.UpzRachNaliczajChorobowy).HasColumnName("upz_Rach_Naliczaj_Chorobowy");
            entity.Property(e => e.UpzRachNaliczajEmertyalny).HasColumnName("upz_Rach_Naliczaj_Emertyalny");
            entity.Property(e => e.UpzRachNaliczajFep).HasColumnName("upz_Rach_Naliczaj_FEP");
            entity.Property(e => e.UpzRachNaliczajFgsp)
                .HasDefaultValue(true)
                .HasColumnName("upz_Rach_Naliczaj_FGSP");
            entity.Property(e => e.UpzRachNaliczajFp)
                .HasDefaultValue(true)
                .HasColumnName("upz_Rach_Naliczaj_FP");
            entity.Property(e => e.UpzRachNaliczajRentowy).HasColumnName("upz_Rach_Naliczaj_Rentowy");
            entity.Property(e => e.UpzRachNaliczajWypadkowy).HasColumnName("upz_Rach_Naliczaj_Wypadkowy");
            entity.Property(e => e.UpzRachNaliczajZdrowotny).HasColumnName("upz_Rach_Naliczaj_Zdrowotny");
            entity.Property(e => e.UpzRachPodwojneOpodatkowanie).HasColumnName("upz_Rach_Podwojne_Opodatkowanie");
            entity.Property(e => e.UpzRachPomniejszaniePodstawy).HasColumnName("upz_Rach_Pomniejszanie_Podstawy");
            entity.Property(e => e.UpzRachProcentRachNaKonto)
                .HasColumnType("money")
                .HasColumnName("upz_Rach_ProcentRachNaKonto");
            entity.Property(e => e.UpzRachPrzelewRachNaKonto)
                .HasDefaultValue(1)
                .HasColumnName("upz_Rach_PrzelewRachNaKonto");
            entity.Property(e => e.UpzRachRodzajPrzychodu)
                .HasDefaultValue(1)
                .HasColumnName("upz_Rach_RodzajPrzychodu");
            entity.Property(e => e.UpzRachRyczaltKosztyKwota)
                .HasColumnType("money")
                .HasColumnName("upz_Rach_Ryczalt_Koszty_Kwota");
            entity.Property(e => e.UpzRachRyczaltKosztyMetoda)
                .HasDefaultValue(1)
                .HasColumnName("upz_Rach_Ryczalt_Koszty_Metoda");
            entity.Property(e => e.UpzRachRyczaltKosztyProcent)
                .HasDefaultValue(20m)
                .HasColumnType("money")
                .HasColumnName("upz_Rach_Ryczalt_Koszty_Procent");
            entity.Property(e => e.UpzRachRyczaltPodatek)
                .HasDefaultValue(19m)
                .HasColumnType("money")
                .HasColumnName("upz_Rach_Ryczalt_Podatek");
            entity.Property(e => e.UpzRachTrescRachunku).HasColumnName("upz_Rach_TrescRachunku");
            entity.Property(e => e.UpzRachZwolnienieZPodatku).HasColumnName("upz_Rach_Zwolnienie_Z_Podatku");
            entity.Property(e => e.UpzUmowaGenerowanaDeklaracjaZus)
                .HasDefaultValue(1)
                .HasColumnName("upz_Umowa_GenerowanaDeklaracjaZUS");
            entity.Property(e => e.UpzUmowaIdFmtNumeru).HasColumnName("upz_Umowa_IdFmtNumeru");
            entity.Property(e => e.UpzUmowaIdTresci).HasColumnName("upz_Umowa_IdTresci");
            entity.Property(e => e.UpzUmowaOgraniczSumeRach).HasColumnName("upz_Umowa_OgraniczSumeRach");
            entity.Property(e => e.UpzUmowaRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("upz_Umowa_Rodzaj");
            entity.Property(e => e.UpzUmowaTytulUbezpieczenia).HasColumnName("upz_Umowa_TytulUbezpieczenia");
            entity.Property(e => e.UpzUmowaZgloszenieZusRud).HasColumnName("upz_Umowa_Zgloszenie_ZUS_RUD");

            entity.HasOne(d => d.UpzIdParametrowNavigation).WithMany(p => p.PlbUmowaCpParametryZestaws)
                .HasForeignKey(d => d.UpzIdParametrow)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaCP_Parametry_Zestaw_plb_UmowaCP_Parametry");

            entity.HasOne(d => d.UpzRachIdFmtNumeruNavigation).WithMany(p => p.PlbUmowaCpParametryZestawUpzRachIdFmtNumeruNavigations)
                .HasForeignKey(d => d.UpzRachIdFmtNumeru)
                .HasConstraintName("FK_plb_UmowaCP_Parametry_Zestaw_sl_FormatNumeracji_Rach");

            entity.HasOne(d => d.UpzRachKategoriaNavigation).WithMany(p => p.PlbUmowaCpParametryZestaws)
                .HasForeignKey(d => d.UpzRachKategoria)
                .HasConstraintName("FK_plb_UmowaCP_Parametry_Zestaw_sl_Kategoria");

            entity.HasOne(d => d.UpzRachTrescRachunkuNavigation).WithMany(p => p.PlbUmowaCpParametryZestawUpzRachTrescRachunkuNavigations)
                .HasForeignKey(d => d.UpzRachTrescRachunku)
                .HasConstraintName("FK_plb_UmowaCP_Parametry_Zestaw_sl_GratTrescDok1");

            entity.HasOne(d => d.UpzUmowaIdFmtNumeruNavigation).WithMany(p => p.PlbUmowaCpParametryZestawUpzUmowaIdFmtNumeruNavigations)
                .HasForeignKey(d => d.UpzUmowaIdFmtNumeru)
                .HasConstraintName("FK_plb_UmowaCP_Parametry_Zestaw_sl_FormatNumeracji_Umowa");

            entity.HasOne(d => d.UpzUmowaIdTresciNavigation).WithMany(p => p.PlbUmowaCpParametryZestawUpzUmowaIdTresciNavigations)
                .HasForeignKey(d => d.UpzUmowaIdTresci)
                .HasConstraintName("FK_plb_UmowaCP_Parametry_Zestaw_sl_GratTrescDok");

            entity.HasOne(d => d.UpzUmowaTytulUbezpieczeniaNavigation).WithMany(p => p.PlbUmowaCpParametryZestaws)
                .HasForeignKey(d => d.UpzUmowaTytulUbezpieczenia)
                .HasConstraintName("FK_plb_UmowaCP_Parametry_Zestaw_sl_TytulUbezpieczenia");
        });

        modelBuilder.Entity<PlbUmowaCpgodzPrzepr>(entity =>
        {
            entity.HasKey(e => e.UpgpId);

            entity.ToTable("plb_UmowaCPGodzPrzepr");

            entity.Property(e => e.UpgpId)
                .ValueGeneratedNever()
                .HasColumnName("upgp_Id");
            entity.Property(e => e.UpgpDataWpisu)
                .HasColumnType("datetime")
                .HasColumnName("upgp_DataWpisu");
            entity.Property(e => e.UpgpIdUmowy).HasColumnName("upgp_IdUmowy");
            entity.Property(e => e.UpgpLiczbaGodzin).HasColumnName("upgp_LiczbaGodzin");
            entity.Property(e => e.UpgpMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("upgp_Miesiac");
            entity.Property(e => e.UpgpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("upgp_Opis");

            entity.HasOne(d => d.UpgpIdUmowyNavigation).WithMany(p => p.PlbUmowaCpgodzPrzeprs)
                .HasForeignKey(d => d.UpgpIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaCPGodzPrzepr_plb_UmowaCP");
        });

        modelBuilder.Entity<PlbUmowaCpharmonogram>(entity =>
        {
            entity.HasKey(e => e.UchId);

            entity.ToTable("plb_UmowaCPHarmonogram");

            entity.Property(e => e.UchId)
                .ValueGeneratedNever()
                .HasColumnName("uch_Id");
            entity.Property(e => e.UchDataRachData)
                .HasColumnType("datetime")
                .HasColumnName("uch_DataRachData");
            entity.Property(e => e.UchDataRachDzien)
                .HasDefaultValue(1)
                .HasColumnName("uch_DataRachDzien");
            entity.Property(e => e.UchDataRachDzienTygodnia)
                .HasDefaultValue(1)
                .HasColumnName("uch_DataRachDzienTygodnia");
            entity.Property(e => e.UchDataRachKorekta).HasColumnName("uch_DataRachKorekta");
            entity.Property(e => e.UchIdSzablonuWydruku).HasColumnName("uch_IdSzablonuWydruku");
            entity.Property(e => e.UchIdUmowy).HasColumnName("uch_IdUmowy");
            entity.Property(e => e.UchKwotaDodatkowNieopodatkowanych)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaDodatkowNieopodatkowanych");
            entity.Property(e => e.UchKwotaDodatkuRodzinnego)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaDodatkuRodzinnego");
            entity.Property(e => e.UchKwotaPotracen)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaPotracen");
            entity.Property(e => e.UchKwotaRachunku)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaRachunku");
            entity.Property(e => e.UchKwotaZasilkuPielegnacyjnego)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaZasilkuPielegnacyjnego");
            entity.Property(e => e.UchKwotaZasilkuPogrzebowego)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaZasilkuPogrzebowego");
            entity.Property(e => e.UchKwotaZasilkuPorodowego)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaZasilkuPorodowego");
            entity.Property(e => e.UchKwotaZasilkuRodzinnego)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaZasilkuRodzinnego");
            entity.Property(e => e.UchKwotaZasilkuSwiadczeniaReh)
                .HasColumnType("money")
                .HasColumnName("uch_KwotaZasilkuSwiadczeniaReh");
            entity.Property(e => e.UchNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uch_Nazwa");
            entity.Property(e => e.UchOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("uch_OkresDo");
            entity.Property(e => e.UchOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("uch_OkresOd");
            entity.Property(e => e.UchOkresSposobOkreslenia).HasColumnName("uch_OkresSposobOkreslenia");
            entity.Property(e => e.UchOkresWydluzOkres).HasColumnName("uch_OkresWydluzOkres");
            entity.Property(e => e.UchRodzajCyklu).HasColumnName("uch_RodzajCyklu");
            entity.Property(e => e.UchRodzajPozycji)
                .HasDefaultValue(1)
                .HasColumnName("uch_RodzajPozycji");
            entity.Property(e => e.UchRodzajPrzychodu).HasColumnName("uch_RodzajPrzychodu");
            entity.Property(e => e.UchRozliczAkordy).HasColumnName("uch_RozliczAkordy");
            entity.Property(e => e.UchRozliczEcp).HasColumnName("uch_RozliczECP");
            entity.Property(e => e.UchRozliczEcpmiesiac)
                .HasDefaultValue(1)
                .HasColumnName("uch_RozliczECPMiesiac");
            entity.Property(e => e.UchRozliczEwidGodzinPracy).HasColumnName("uch_RozliczEwidGodzinPracy");
            entity.Property(e => e.UchRozliczEwidGodzinPracyMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("uch_RozliczEwidGodzinPracyMiesiac");
            entity.Property(e => e.UchRozliczProwizje).HasColumnName("uch_RozliczProwizje");
            entity.Property(e => e.UchRyczalt).HasColumnName("uch_Ryczalt");

            entity.HasOne(d => d.UchIdSzablonuWydrukuNavigation).WithMany(p => p.PlbUmowaCpharmonograms)
                .HasForeignKey(d => d.UchIdSzablonuWydruku)
                .HasConstraintName("FK_plb_UmowaCPHarmonogram_sl_GratTrescDok");
        });

        modelBuilder.Entity<PlbUmowaCpprzelewy>(entity =>
        {
            entity.HasKey(e => e.UcppId);

            entity.ToTable("plb_UmowaCPPrzelewy");

            entity.Property(e => e.UcppId)
                .ValueGeneratedNever()
                .HasColumnName("ucpp_Id");
            entity.Property(e => e.UcppIdRachunku).HasColumnName("ucpp_IdRachunku");
            entity.Property(e => e.UcppIdUmowy).HasColumnName("ucpp_IdUmowy");
            entity.Property(e => e.UcppKwota)
                .HasColumnType("money")
                .HasColumnName("ucpp_Kwota");
            entity.Property(e => e.UcppMetodaPrzelewu).HasColumnName("ucpp_MetodaPrzelewu");
            entity.Property(e => e.UcppPriorytet).HasColumnName("ucpp_Priorytet");
            entity.Property(e => e.UcppProcent)
                .HasColumnType("money")
                .HasColumnName("ucpp_Procent");

            entity.HasOne(d => d.UcppIdRachunkuNavigation).WithMany(p => p.PlbUmowaCpprzelewies)
                .HasForeignKey(d => d.UcppIdRachunku)
                .HasConstraintName("FK_plb_UmowaCPPrzelewy_rb__RachBankowy");

            entity.HasOne(d => d.UcppIdUmowyNavigation).WithMany(p => p.PlbUmowaCpprzelewies)
                .HasForeignKey(d => d.UcppIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaCPPrzelewy_plb_UmowaCPPrzelewy");
        });

        modelBuilder.Entity<PlbUmowaDzialStanowisko>(entity =>
        {
            entity.HasKey(e => e.UdzId);

            entity.ToTable("plb_UmowaDzialStanowisko");

            entity.Property(e => e.UdzId)
                .ValueGeneratedNever()
                .HasColumnName("udz_Id");
            entity.Property(e => e.UdzCzyNaliczacFep).HasColumnName("udz_CzyNaliczacFEP");
            entity.Property(e => e.UdzDataDo)
                .HasColumnType("datetime")
                .HasColumnName("udz_DataDo");
            entity.Property(e => e.UdzDataOd)
                .HasColumnType("datetime")
                .HasColumnName("udz_DataOd");
            entity.Property(e => e.UdzIdDzialu).HasColumnName("udz_IdDzialu");
            entity.Property(e => e.UdzIdKategorii).HasColumnName("udz_IdKategorii");
            entity.Property(e => e.UdzIdKoduPracyWszczChar).HasColumnName("udz_IdKoduPracyWSzczChar");
            entity.Property(e => e.UdzIdStanowiska).HasColumnName("udz_IdStanowiska");
            entity.Property(e => e.UdzIdUmowy).HasColumnName("udz_IdUmowy");
            entity.Property(e => e.UdzPracaNauczycielska).HasColumnName("udz_PracaNauczycielska");
            entity.Property(e => e.UdzSzkolnictwoSpecjalne).HasColumnName("udz_SzkolnictwoSpecjalne");
            entity.Property(e => e.UdzTypPracyNauczycielskiej).HasColumnName("udz_TypPracyNauczycielskiej");
            entity.Property(e => e.UdzWymiarZajec).HasColumnName("udz_WymiarZajec");

            entity.HasOne(d => d.UdzIdDzialuNavigation).WithMany(p => p.PlbUmowaDzialStanowiskos)
                .HasForeignKey(d => d.UdzIdDzialu)
                .HasConstraintName("FK_plb_UmowaDzialStanowisko_sl_Dzial");

            entity.HasOne(d => d.UdzIdKoduPracyWszczCharNavigation).WithMany(p => p.PlbUmowaDzialStanowiskos)
                .HasForeignKey(d => d.UdzIdKoduPracyWszczChar)
                .HasConstraintName("FK_plb_UmowaDzialStanowisko_sl_PracaSzczegolnyCharakter");

            entity.HasOne(d => d.UdzIdStanowiskaNavigation).WithMany(p => p.PlbUmowaDzialStanowiskos)
                .HasForeignKey(d => d.UdzIdStanowiska)
                .HasConstraintName("FK_plb_UmowaDzialStanowisko_sl_Stanowisko");

            entity.HasOne(d => d.UdzIdUmowyNavigation).WithMany(p => p.PlbUmowaDzialStanowiskos)
                .HasForeignKey(d => d.UdzIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaDzialStanowisko_plb_Umowa");
        });

        modelBuilder.Entity<PlbUmowaKalendarz>(entity =>
        {
            entity.HasKey(e => e.UkId).HasName("PK_Table1");

            entity.ToTable("plb_UmowaKalendarz");

            entity.Property(e => e.UkId)
                .ValueGeneratedNever()
                .HasColumnName("uk_Id");
            entity.Property(e => e.UkDataDo)
                .HasColumnType("datetime")
                .HasColumnName("uk_DataDo");
            entity.Property(e => e.UkDataOd)
                .HasColumnType("datetime")
                .HasColumnName("uk_DataOd");
            entity.Property(e => e.UkDodatekZaNadgodzinyPo)
                .HasDefaultValue(480)
                .HasColumnName("uk_DodatekZaNadgodzinyPo");
            entity.Property(e => e.UkIdKalendarza).HasColumnName("uk_IdKalendarza");
            entity.Property(e => e.UkIdUmowy).HasColumnName("uk_IdUmowy");
            entity.Property(e => e.UkWymiarDobowy)
                .HasDefaultValue(480)
                .HasColumnName("uk_WymiarDobowy");
            entity.Property(e => e.UkWymiarLicznik)
                .HasDefaultValue(1)
                .HasColumnName("uk_WymiarLicznik");
            entity.Property(e => e.UkWymiarMianownik)
                .HasDefaultValue(1)
                .HasColumnName("uk_WymiarMianownik");

            entity.HasOne(d => d.UkIdUmowyNavigation).WithMany(p => p.PlbUmowaKalendarzs)
                .HasForeignKey(d => d.UkIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaKalendarz_plb_Umowa");
        });

        modelBuilder.Entity<PlbUmowaParametr>(entity =>
        {
            entity.HasKey(e => e.UppId);

            entity.ToTable("plb_UmowaParametr");

            entity.HasIndex(e => e.UppParamEwidId, "IX_plb_UmowaParametr").IsUnique();

            entity.Property(e => e.UppId)
                .ValueGeneratedNever()
                .HasColumnName("upp_Id");
            entity.Property(e => e.UppCzyNaliczacUlgeDlaKlasySredniej)
                .HasDefaultValue(1)
                .HasColumnName("upp_CzyNaliczacUlgeDlaKlasySredniej");
            entity.Property(e => e.UppCzyOdraczacPoborZaliczki)
                .HasDefaultValue(true)
                .HasColumnName("upp_CzyOdraczacPoborZaliczki");
            entity.Property(e => e.UppFormatNumeru).HasColumnName("upp_FormatNumeru");
            entity.Property(e => e.UppIdKalendarza).HasColumnName("upp_IdKalendarza");
            entity.Property(e => e.UppKosztyUzyskania).HasColumnName("upp_KosztyUzyskania");
            entity.Property(e => e.UppParamEwidId).HasColumnName("upp_ParamEwidId");
            entity.Property(e => e.UppPrzelewKwota)
                .HasColumnType("money")
                .HasColumnName("upp_PrzelewKwota");
            entity.Property(e => e.UppPrzelewNaKonto).HasColumnName("upp_PrzelewNaKonto");
            entity.Property(e => e.UppPrzelewProcent)
                .HasColumnType("money")
                .HasColumnName("upp_PrzelewProcent");
            entity.Property(e => e.UppRaportZus).HasColumnName("upp_RaportZUS");
            entity.Property(e => e.UppTresc).HasColumnName("upp_Tresc");
            entity.Property(e => e.UppWymiarLicznik).HasColumnName("upp_WymiarLicznik");
            entity.Property(e => e.UppWymiarMianownik).HasColumnName("upp_WymiarMianownik");

            entity.HasOne(d => d.UppFormatNumeruNavigation).WithMany(p => p.PlbUmowaParametrs)
                .HasForeignKey(d => d.UppFormatNumeru)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaParametr_sl_FormatNumeracji");

            entity.HasOne(d => d.UppIdKalendarzaNavigation).WithMany(p => p.PlbUmowaParametrs)
                .HasForeignKey(d => d.UppIdKalendarza)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaParametr_sl_Kalendarz");

            entity.HasOne(d => d.UppParamEwid).WithOne(p => p.PlbUmowaParametr)
                .HasForeignKey<PlbUmowaParametr>(d => d.UppParamEwidId)
                .HasConstraintName("FK_plb_UmowaParametr_par__Ewid");
        });

        modelBuilder.Entity<PlbUmowaPrzelewy>(entity =>
        {
            entity.HasKey(e => e.UpppId);

            entity.ToTable("plb_UmowaPrzelewy");

            entity.Property(e => e.UpppId)
                .ValueGeneratedNever()
                .HasColumnName("uppp_Id");
            entity.Property(e => e.UpppIdRachunku).HasColumnName("uppp_IdRachunku");
            entity.Property(e => e.UpppIdUmowy).HasColumnName("uppp_IdUmowy");
            entity.Property(e => e.UpppKwota)
                .HasColumnType("money")
                .HasColumnName("uppp_Kwota");
            entity.Property(e => e.UpppMetodaPrzelewu).HasColumnName("uppp_MetodaPrzelewu");
            entity.Property(e => e.UpppPriorytet).HasColumnName("uppp_Priorytet");
            entity.Property(e => e.UpppProcent)
                .HasColumnType("money")
                .HasColumnName("uppp_Procent");

            entity.HasOne(d => d.UpppIdRachunkuNavigation).WithMany(p => p.PlbUmowaPrzelewies)
                .HasForeignKey(d => d.UpppIdRachunku)
                .HasConstraintName("FK_plb_UmowaPrzelewy_rb__RachBankowy");

            entity.HasOne(d => d.UpppIdUmowyNavigation).WithMany(p => p.PlbUmowaPrzelewies)
                .HasForeignKey(d => d.UpppIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaPrzelewy_plb_Umowa");
        });

        modelBuilder.Entity<PlbUmowaSkladnik>(entity =>
        {
            entity.HasKey(e => e.UpsId).HasName("PK_plb_UmowaOPraceSkladnik");

            entity.ToTable("plb_UmowaSkladnik");

            entity.Property(e => e.UpsId)
                .ValueGeneratedNever()
                .HasColumnName("ups_Id");
            entity.Property(e => e.UpsIdSkladnika).HasColumnName("ups_IdSkladnika");
            entity.Property(e => e.UpsIdUmowy).HasColumnName("ups_IdUmowy");
            entity.Property(e => e.UpsSkladnikDrukowany).HasColumnName("ups_SkladnikDrukowany");

            entity.HasOne(d => d.UpsIdSkladnikaNavigation).WithMany(p => p.PlbUmowaSkladniks)
                .HasForeignKey(d => d.UpsIdSkladnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaSkladnik_plb_Skladnik");

            entity.HasOne(d => d.UpsIdUmowyNavigation).WithMany(p => p.PlbUmowaSkladniks)
                .HasForeignKey(d => d.UpsIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaSkladnik_plb_Umowa");
        });

        modelBuilder.Entity<PlbUmowaWyjatekCzasuPracy>(entity =>
        {
            entity.HasKey(e => e.UwcpId).HasName("PK__plb_UmowaWyjatek__4420F751");

            entity.ToTable("plb_UmowaWyjatekCzasuPracy");

            entity.Property(e => e.UwcpId)
                .ValueGeneratedNever()
                .HasColumnName("uwcp_Id");
            entity.Property(e => e.UwcpData)
                .HasColumnType("datetime")
                .HasColumnName("uwcp_Data");
            entity.Property(e => e.UwcpGodzinyPracyOd).HasColumnName("uwcp_GodzinyPracyOd");
            entity.Property(e => e.UwcpIdAtrybut).HasColumnName("uwcp_IdAtrybut");
            entity.Property(e => e.UwcpIdUmowy).HasColumnName("uwcp_IdUmowy");
            entity.Property(e => e.UwcpIleDzienne).HasColumnName("uwcp_IleDzienne");
            entity.Property(e => e.UwcpIleNocne).HasColumnName("uwcp_IleNocne");
            entity.Property(e => e.UwcpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uwcp_Nazwa");
            entity.Property(e => e.UwcpRodzaj).HasColumnName("uwcp_Rodzaj");
            entity.Property(e => e.UwcpTypDniaWolnego).HasColumnName("uwcp_TypDniaWolnego");
            entity.Property(e => e.UwcpTypPracy).HasColumnName("uwcp_TypPracy");
            entity.Property(e => e.UwcpUstawowy).HasColumnName("uwcp_Ustawowy");

            entity.HasOne(d => d.UwcpIdUmowyNavigation).WithMany(p => p.PlbUmowaWyjatekCzasuPracies)
                .HasForeignKey(d => d.UwcpIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaWyjatekCzasuPracy_plb_Umowa");

            entity.HasOne(d => d.UwcpTypDniaWolnegoNavigation).WithMany(p => p.PlbUmowaWyjatekCzasuPracies)
                .HasForeignKey(d => d.UwcpTypDniaWolnego)
                .HasConstraintName("FK_plb_UmowaWyjatekCzasuPracy_sl_TypDniaWolnego");
        });

        modelBuilder.Entity<PlbUmowaWyjatekCzasuPracyOkre>(entity =>
        {
            entity.HasKey(e => e.UwgId).HasName("PK_sl_UmowaWyjatekCzasuPracyOkres");

            entity.ToTable("plb_UmowaWyjatekCzasuPracyOkres");

            entity.Property(e => e.UwgId)
                .ValueGeneratedNever()
                .HasColumnName("uwg_Id");
            entity.Property(e => e.UwgDo).HasColumnName("uwg_Do");
            entity.Property(e => e.UwgIdAtrybutuGodzin)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("uwg_IdAtrybutuGodzin");
            entity.Property(e => e.UwgIdWyj).HasColumnName("uwg_IdWyj");
            entity.Property(e => e.UwgOd).HasColumnName("uwg_Od");
            entity.Property(e => e.UwgPoraDnia).HasColumnName("uwg_PoraDnia");

            entity.HasOne(d => d.UwgIdAtrybutuGodzinNavigation).WithMany(p => p.PlbUmowaWyjatekCzasuPracyOkres)
                .HasForeignKey(d => d.UwgIdAtrybutuGodzin)
                .HasConstraintName("FK_plb_UmowaWyjatekCzasuPracyOkres_sl_AtrybutGodzinowy");
        });

        modelBuilder.Entity<PlbUmowaZestaw>(entity =>
        {
            entity.HasKey(e => e.UpzId);

            entity.ToTable("plb_UmowaZestaw");

            entity.Property(e => e.UpzId)
                .ValueGeneratedNever()
                .HasColumnName("upz_Id");
            entity.Property(e => e.UpzIdSzablonuLp).HasColumnName("upz_IdSzablonuLP");
            entity.Property(e => e.UpzIdUmowy).HasColumnName("upz_IdUmowy");
            entity.Property(e => e.UpzMcWyplacania1)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania1");
            entity.Property(e => e.UpzMcWyplacania10)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania10");
            entity.Property(e => e.UpzMcWyplacania11)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania11");
            entity.Property(e => e.UpzMcWyplacania12)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania12");
            entity.Property(e => e.UpzMcWyplacania2)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania2");
            entity.Property(e => e.UpzMcWyplacania3)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania3");
            entity.Property(e => e.UpzMcWyplacania4)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania4");
            entity.Property(e => e.UpzMcWyplacania5)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania5");
            entity.Property(e => e.UpzMcWyplacania6)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania6");
            entity.Property(e => e.UpzMcWyplacania7)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania7");
            entity.Property(e => e.UpzMcWyplacania8)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania8");
            entity.Property(e => e.UpzMcWyplacania9)
                .HasDefaultValue(true)
                .HasColumnName("upz_McWyplacania9");
            entity.Property(e => e.UpzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("upz_Nazwa");
            entity.Property(e => e.UpzOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("upz_Opis");
            entity.Property(e => e.UpzRozliczacAkordy)
                .HasDefaultValue(true)
                .HasColumnName("upz_RozliczacAkordy");
            entity.Property(e => e.UpzRozliczacEcp)
                .HasDefaultValue(true)
                .HasColumnName("upz_RozliczacECP");
            entity.Property(e => e.UpzRozliczacNadgodziny)
                .HasDefaultValue(true)
                .HasColumnName("upz_RozliczacNadgodziny");
            entity.Property(e => e.UpzRozliczacNaliczeniaPotracenia)
                .HasDefaultValue(true)
                .HasColumnName("upz_RozliczacNaliczeniaPotracenia");
            entity.Property(e => e.UpzRozliczacPotraceniaKomornicze).HasColumnName("upz_RozliczacPotraceniaKomornicze");
            entity.Property(e => e.UpzRozliczacProwizje)
                .HasDefaultValue(true)
                .HasColumnName("upz_RozliczacProwizje");
            entity.Property(e => e.UpzUzupelniacDoMinimalnej).HasColumnName("upz_UzupelniacDoMinimalnej");

            entity.HasOne(d => d.UpzIdSzablonuLpNavigation).WithMany(p => p.PlbUmowaZestaws)
                .HasForeignKey(d => d.UpzIdSzablonuLp)
                .HasConstraintName("FK_plb_UmowaZestaw_plb_SzablonLP");

            entity.HasOne(d => d.UpzIdUmowyNavigation).WithMany(p => p.PlbUmowaZestaws)
                .HasForeignKey(d => d.UpzIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_UmowaZestaw_plb_Umowa");
        });

        modelBuilder.Entity<PlbUmowaZestawSkladnik>(entity =>
        {
            entity.HasKey(e => e.UpzsId);

            entity.ToTable("plb_UmowaZestawSkladnik");

            entity.Property(e => e.UpzsId)
                .ValueGeneratedNever()
                .HasColumnName("upzs_Id");
            entity.Property(e => e.UpzsIdSkladnika).HasColumnName("upzs_IdSkladnika");
            entity.Property(e => e.UpzsIdZestawu).HasColumnName("upzs_IdZestawu");
        });

        modelBuilder.Entity<PlbWyplataSkladnik>(entity =>
        {
            entity.HasKey(e => e.WypsId).HasName("PK_plb");

            entity.ToTable("plb_WyplataSkladnik");

            entity.Property(e => e.WypsId)
                .ValueGeneratedNever()
                .HasColumnName("wyps_Id");
            entity.Property(e => e.WypsBylKwprzelewWydruk).HasColumnName("wyps_BylKWPrzelewWydruk");
            entity.Property(e => e.WypsCzyPotracenieKomornicze).HasColumnName("wyps_CzyPotracenieKomornicze");
            entity.Property(e => e.WypsIdSkladnika).HasColumnName("wyps_IdSkladnika");
            entity.Property(e => e.WypsIdWyplaty).HasColumnName("wyps_IdWyplaty");
            entity.Property(e => e.WypsKwotaChWy)
                .HasColumnType("money")
                .HasColumnName("wyps_KwotaChWy");
            entity.Property(e => e.WypsKwotaDoChor)
                .HasColumnType("money")
                .HasColumnName("wyps_KwotaDoChor");
            entity.Property(e => e.WypsKwotaDoUrl)
                .HasColumnType("money")
                .HasColumnName("wyps_KwotaDoUrl");
            entity.Property(e => e.WypsKwotaEmRe)
                .HasColumnType("money")
                .HasColumnName("wyps_KwotaEmRe");
            entity.Property(e => e.WypsKwotaFep)
                .HasColumnType("money")
                .HasColumnName("wyps_KwotaFEP");
            entity.Property(e => e.WypsKwotaZdr)
                .HasColumnType("money")
                .HasColumnName("wyps_KwotaZdr");
            entity.Property(e => e.WypsNazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wyps_Nazwa");
            entity.Property(e => e.WypsNieOgrSklZdr).HasColumnName("wyps_NieOgrSklZdr");
            entity.Property(e => e.WypsOpodatkowany)
                .HasDefaultValue(true)
                .HasColumnName("wyps_Opodatkowany");
            entity.Property(e => e.WypsPodstawaChWyDoChorobowego)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("money")
                .HasColumnName("wyps_PodstawaChWyDoChorobowego");
            entity.Property(e => e.WypsPodstawaEmReDoChorobowego)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("money")
                .HasColumnName("wyps_PodstawaEmReDoChorobowego");
            entity.Property(e => e.WypsTyp).HasColumnName("wyps_Typ");
            entity.Property(e => e.WypsWartoscDoChorobowego)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("money")
                .HasColumnName("wyps_WartoscDoChorobowego");
            entity.Property(e => e.WypsWartoscFin)
                .HasColumnType("money")
                .HasColumnName("wyps_WartoscFin");
            entity.Property(e => e.WypsWartoscNom)
                .HasColumnType("money")
                .HasColumnName("wyps_WartoscNom");
            entity.Property(e => e.WypsZwolnienieZpodatku).HasColumnName("wyps_ZwolnienieZPodatku");
            entity.Property(e => e.WypsZwolnienieZpodatkuDlaMlodych).HasColumnName("wyps_ZwolnienieZPodatkuDlaMlodych");

            entity.HasOne(d => d.WypsIdSkladnikaNavigation).WithMany(p => p.PlbWyplataSkladniks)
                .HasForeignKey(d => d.WypsIdSkladnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_WyplataSkladnik_plb_Skladnik");

            entity.HasOne(d => d.WypsIdWyplatyNavigation).WithMany(p => p.PlbWyplataSkladniks)
                .HasForeignKey(d => d.WypsIdWyplaty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_WyplataSkladnik_plb_Wyplata");
        });

        modelBuilder.Entity<PlbWyplatum>(entity =>
        {
            entity.HasKey(e => e.WypId).HasName("PK_pl_WyplataGt");

            entity.ToTable("plb_Wyplata");

            entity.Property(e => e.WypId)
                .ValueGeneratedNever()
                .HasColumnName("wyp_Id");
            entity.Property(e => e.WypBruttoDuze)
                .HasColumnType("money")
                .HasColumnName("wyp_BruttoDuze");
            entity.Property(e => e.WypBruttoDuzeOdl)
                .HasColumnType("money")
                .HasColumnName("wyp_BruttoDuzeOdl");
            entity.Property(e => e.WypBruttoMale)
                .HasColumnType("money")
                .HasColumnName("wyp_BruttoMale");
            entity.Property(e => e.WypBudzetMacEmer)
                .HasColumnType("money")
                .HasColumnName("wyp_BudzetMacEmer");
            entity.Property(e => e.WypBudzetMacPodstEmRe)
                .HasColumnType("money")
                .HasColumnName("wyp_BudzetMacPodstEmRe");
            entity.Property(e => e.WypBudzetMacRent)
                .HasColumnType("money")
                .HasColumnName("wyp_BudzetMacRent");
            entity.Property(e => e.WypBudzetWychEmer)
                .HasColumnType("money")
                .HasColumnName("wyp_BudzetWychEmer");
            entity.Property(e => e.WypBudzetWychPodstEmRe)
                .HasColumnType("money")
                .HasColumnName("wyp_BudzetWychPodstEmRe");
            entity.Property(e => e.WypBudzetWychPodstZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_BudzetWychPodstZdr");
            entity.Property(e => e.WypBudzetWychRent)
                .HasColumnType("money")
                .HasColumnName("wyp_BudzetWychRent");
            entity.Property(e => e.WypBudzetWychZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_BudzetWychZdr");
            entity.Property(e => e.WypBylKwprzelewWydruk).HasColumnName("wyp_BylKWPrzelewWydruk");
            entity.Property(e => e.WypCzyKorygowana).HasColumnName("wyp_CzyKorygowana");
            entity.Property(e => e.WypCzyWchodziDoWyznaczaniaChor)
                .HasDefaultValue(true)
                .HasColumnName("wyp_CzyWchodziDoWyznaczaniaChor");
            entity.Property(e => e.WypDoReki)
                .HasColumnType("money")
                .HasColumnName("wyp_DoReki");
            entity.Property(e => e.WypFep)
                .HasColumnType("money")
                .HasColumnName("wyp_FEP");
            entity.Property(e => e.WypFgsp)
                .HasColumnType("money")
                .HasColumnName("wyp_FGSP");
            entity.Property(e => e.WypFlagi).HasColumnName("wyp_Flagi");
            entity.Property(e => e.WypFp)
                .HasColumnType("money")
                .HasColumnName("wyp_Fp");
            entity.Property(e => e.WypIdListyPlac).HasColumnName("wyp_IdListyPlac");
            entity.Property(e => e.WypIdOsobyWyst).HasColumnName("wyp_IdOsobyWyst");
            entity.Property(e => e.WypIdUmowy).HasColumnName("wyp_IdUmowy");
            entity.Property(e => e.WypIdZestawu).HasColumnName("wyp_IdZestawu");
            entity.Property(e => e.WypKorektaKiedy)
                .HasColumnType("datetime")
                .HasColumnName("wyp_KorektaKiedy");
            entity.Property(e => e.WypKorektaKto).HasColumnName("wyp_KorektaKto");
            entity.Property(e => e.WypKosztUzysk)
                .HasColumnType("money")
                .HasColumnName("wyp_KosztUzysk");
            entity.Property(e => e.WypKosztUzysk50)
                .HasColumnType("money")
                .HasColumnName("wyp_KosztUzysk50");
            entity.Property(e => e.WypKosztUzyskDekl)
                .HasColumnType("money")
                .HasColumnName("wyp_KosztUzyskDekl");
            entity.Property(e => e.WypKosztUzyskDeklRoczne)
                .HasColumnType("money")
                .HasColumnName("wyp_KosztUzyskDeklRoczne");
            entity.Property(e => e.WypKosztUzyskMc)
                .HasColumnType("money")
                .HasColumnName("wyp_KosztUzyskMc");
            entity.Property(e => e.WypKwotaChorobowego)
                .HasColumnType("money")
                .HasColumnName("wyp_KwotaChorobowego");
            entity.Property(e => e.WypKwotaUrlopowegoStale)
                .HasColumnType("money")
                .HasColumnName("wyp_KwotaUrlopowegoStale");
            entity.Property(e => e.WypKwotaUrlopowegoZmienne)
                .HasColumnType("money")
                .HasColumnName("wyp_KwotaUrlopowegoZmienne");
            entity.Property(e => e.WypKwotaWylaczonaZpodstawySkladekZus)
                .HasColumnType("money")
                .HasColumnName("wyp_KwotaWylaczonaZPodstawySkladekZUS");
            entity.Property(e => e.WypKwotaZwolnieniaZpodatkuInne)
                .HasColumnType("money")
                .HasColumnName("wyp_KwotaZwolnieniaZPodatkuInne");
            entity.Property(e => e.WypLiczbaDniUrlopowego).HasColumnName("wyp_LiczbaDniUrlopowego");
            entity.Property(e => e.WypLiczbaDniWynChorobowego).HasColumnName("wyp_LiczbaDniWynChorobowego");
            entity.Property(e => e.WypLiczbaDniZasChorobowego).HasColumnName("wyp_LiczbaDniZasChorobowego");
            entity.Property(e => e.WypLiczbaGodzinUrlopowego).HasColumnName("wyp_LiczbaGodzinUrlopowego");
            entity.Property(e => e.WypMcPodstChorDo)
                .HasColumnType("datetime")
                .HasColumnName("wyp_McPodstChorDo");
            entity.Property(e => e.WypMcPodstChorOd)
                .HasColumnType("datetime")
                .HasColumnName("wyp_McPodstChorOd");
            entity.Property(e => e.WypNeFirma)
                .HasColumnType("money")
                .HasColumnName("wyp_NeFirma");
            entity.Property(e => e.WypNeFirmaNaliczenia)
                .HasColumnType("money")
                .HasColumnName("wyp_NeFirmaNaliczenia");
            entity.Property(e => e.WypNeFirmaPotracenia)
                .HasColumnType("money")
                .HasColumnName("wyp_NeFirmaPotracenia");
            entity.Property(e => e.WypNeRazem)
                .HasColumnType("money")
                .HasColumnName("wyp_NeRazem");
            entity.Property(e => e.WypNetto)
                .HasColumnType("money")
                .HasColumnName("wyp_Netto");
            entity.Property(e => e.WypObciazeniePracodawcy)
                .HasColumnType("money")
                .HasColumnName("wyp_ObciazeniePracodawcy");
            entity.Property(e => e.WypOdliczenia)
                .HasColumnType("money")
                .HasColumnName("wyp_Odliczenia");
            entity.Property(e => e.WypOdliczeniaZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_OdliczeniaZeZwolnionych");
            entity.Property(e => e.WypOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wyp_Opis");
            entity.Property(e => e.WypPierwDzienZasChor).HasColumnName("wyp_PierwDzienZasChor");
            entity.Property(e => e.WypPodatek)
                .HasColumnType("money")
                .HasColumnName("wyp_Podatek");
            entity.Property(e => e.WypPodstChorob)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstChorob");
            entity.Property(e => e.WypPodstChorob30)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstChorob30");
            entity.Property(e => e.WypPodstPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstPPK");
            entity.Property(e => e.WypPodstUbChWyNieodlNieogr)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbChWyNieodlNieogr");
            entity.Property(e => e.WypPodstUbChWyOdl)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbChWyOdl");
            entity.Property(e => e.WypPodstUbChWyZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbChWyZeZwolnionych");
            entity.Property(e => e.WypPodstUbChWyZeZwolnionychZeZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbChWyZeZwolnionychZeZdr");
            entity.Property(e => e.WypPodstUbChorWyp)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbChorWyp");
            entity.Property(e => e.WypPodstUbEmReNieodlNieogr)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmReNieodlNieogr");
            entity.Property(e => e.WypPodstUbEmReOdl)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmReOdl");
            entity.Property(e => e.WypPodstUbEmReZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmReZeZwolnionych");
            entity.Property(e => e.WypPodstUbEmReZeZwolnionychZeZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmReZeZwolnionychZeZdr");
            entity.Property(e => e.WypPodstUbEmerRent)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmerRent");
            entity.Property(e => e.WypPodstUbEmerRentOryg)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmerRentOryg");
            entity.Property(e => e.WypPodstUbEmerRentPrzekroczona).HasColumnName("wyp_PodstUbEmerRentPrzekroczona");
            entity.Property(e => e.WypPodstUbFep)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbFEP");
            entity.Property(e => e.WypPodstUbFeporyg)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbFEPOryg");
            entity.Property(e => e.WypPodstUbFepprzekroczona).HasColumnName("wyp_PodstUbFEPPrzekroczona");
            entity.Property(e => e.WypPodstUbZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbZdr");
            entity.Property(e => e.WypPodstUbZdrNieodlNieogr)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbZdrNieodlNieogr");
            entity.Property(e => e.WypPodstUbZdrOdl)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbZdrOdl");
            entity.Property(e => e.WypPodstUbZdrZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbZdrZeZwolnionych");
            entity.Property(e => e.WypPodstUrlopSt0)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUrlopSt0");
            entity.Property(e => e.WypPodstUrlopSt12)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUrlopSt12");
            entity.Property(e => e.WypPodstUrlopSt3)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUrlopSt3");
            entity.Property(e => e.WypPodstUrlopZm12)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUrlopZm12");
            entity.Property(e => e.WypPodstUrlopZm3)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUrlopZm3");
            entity.Property(e => e.WypPodstawaOpodatkowania)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstawaOpodatkowania");
            entity.Property(e => e.WypPodstawaUlgiDlaKlasySredniej)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstawaUlgiDlaKlasySredniej");
            entity.Property(e => e.WypPracownikOtrzymuje)
                .HasColumnType("money")
                .HasColumnName("wyp_PracownikOtrzymuje");
            entity.Property(e => e.WypPrzelew)
                .HasColumnType("money")
                .HasColumnName("wyp_Przelew");
            entity.Property(e => e.WypPrzychodObjetyZwolnieniemZpit)
                .HasColumnType("money")
                .HasColumnName("wyp_PrzychodObjetyZwolnieniemZPIT");
            entity.Property(e => e.WypRodzajUlgi).HasColumnName("wyp_RodzajUlgi");
            entity.Property(e => e.WypRozliczaAkordy).HasColumnName("wyp_RozliczaAkordy");
            entity.Property(e => e.WypRozliczaEcp).HasColumnName("wyp_RozliczaECP");
            entity.Property(e => e.WypRozliczaNadgodziny).HasColumnName("wyp_RozliczaNadgodziny");
            entity.Property(e => e.WypRozliczaNalPotr).HasColumnName("wyp_RozliczaNalPotr");
            entity.Property(e => e.WypRozliczaPotraceniaKomornicze).HasColumnName("wyp_RozliczaPotraceniaKomornicze");
            entity.Property(e => e.WypRozliczaProwizje).HasColumnName("wyp_RozliczaProwizje");
            entity.Property(e => e.WypSledz)
                .HasColumnType("text")
                .HasColumnName("wyp_Sledz");
            entity.Property(e => e.WypSledzWersja).HasColumnName("wyp_SledzWersja");
            entity.Property(e => e.WypSposobPrzeliczania).HasColumnName("wyp_SposobPrzeliczania");
            entity.Property(e => e.WypStatDniChoroby).HasColumnName("wyp_StatDniChoroby");
            entity.Property(e => e.WypStatDniDoPodstChorWyplKoryg).HasColumnName("wyp_StatDniDoPodstChorWyplKoryg");
            entity.Property(e => e.WypStatDniDoPrzepr).HasColumnName("wyp_StatDniDoPrzepr");
            entity.Property(e => e.WypStatDniMiesiaca).HasColumnName("wyp_StatDniMiesiaca");
            entity.Property(e => e.WypStatDniNieobNieusp).HasColumnName("wyp_StatDniNieobNieusp");
            entity.Property(e => e.WypStatDniNieobUspNiepl).HasColumnName("wyp_StatDniNieobUspNiepl");
            entity.Property(e => e.WypStatDniNieobUspPl).HasColumnName("wyp_StatDniNieobUspPl");
            entity.Property(e => e.WypStatDniOpieki).HasColumnName("wyp_StatDniOpieki");
            entity.Property(e => e.WypStatDniOpiekiNadDzieckiem).HasColumnName("wyp_StatDniOpiekiNadDzieckiem");
            entity.Property(e => e.WypStatDniPoszPracy).HasColumnName("wyp_StatDniPoszPracy");
            entity.Property(e => e.WypStatDniPrzepr).HasColumnName("wyp_StatDniPrzepr");
            entity.Property(e => e.WypStatDniSluzby).HasColumnName("wyp_StatDniSluzby");
            entity.Property(e => e.WypStatDniUrlBezpl).HasColumnName("wyp_StatDniUrlBezpl");
            entity.Property(e => e.WypStatDniUrlMac).HasColumnName("wyp_StatDniUrlMac");
            entity.Property(e => e.WypStatDniUrlWych).HasColumnName("wyp_StatDniUrlWych");
            entity.Property(e => e.WypStatDniUrlWyp).HasColumnName("wyp_StatDniUrlWyp");
            entity.Property(e => e.WypStatDniUrlopSilaWyzsza).HasColumnName("wyp_StatDniUrlopSilaWyzsza");
            entity.Property(e => e.WypStatDniZwolnOkolPl).HasColumnName("wyp_StatDniZwolnOkolPl");
            entity.Property(e => e.WypStatDniZwolnPl).HasColumnName("wyp_StatDniZwolnPl");
            entity.Property(e => e.WypStatDniZwolnZeSwiadPracy).HasColumnName("wyp_StatDniZwolnZeSwiadPracy");
            entity.Property(e => e.WypStatGodzAbsDoPotr).HasColumnName("wyp_StatGodzAbsDoPotr");
            entity.Property(e => e.WypStatGodzAbsDoRozl).HasColumnName("wyp_StatGodzAbsDoRozl");
            entity.Property(e => e.WypStatGodzBilansDoRozl).HasColumnName("wyp_StatGodzBilansDoRozl");
            entity.Property(e => e.WypStatGodzDoPrzepr).HasColumnName("wyp_StatGodzDoPrzepr");
            entity.Property(e => e.WypStatGodzNadlDniSwiateczne).HasColumnName("wyp_StatGodzNadlDniSwiateczne");
            entity.Property(e => e.WypStatGodzNadlDniWolne).HasColumnName("wyp_StatGodzNadlDniWolne");
            entity.Property(e => e.WypStatGodzNadlDoRozl).HasColumnName("wyp_StatGodzNadlDoRozl");
            entity.Property(e => e.WypStatGodzNadlDoRozlSuma).HasColumnName("wyp_StatGodzNadlDoRozlSuma");
            entity.Property(e => e.WypStatGodzNadlDoWypl).HasColumnName("wyp_StatGodzNadlDoWypl");
            entity.Property(e => e.WypStatGodzNadlDoWyplKolejne).HasColumnName("wyp_StatGodzNadlDoWyplKolejne");
            entity.Property(e => e.WypStatGodzNadlDoWyplPierwsze).HasColumnName("wyp_StatGodzNadlDoWyplPierwsze");
            entity.Property(e => e.WypStatGodzNadlNoc).HasColumnName("wyp_StatGodzNadlNoc");
            entity.Property(e => e.WypStatGodzNoc).HasColumnName("wyp_StatGodzNoc");
            entity.Property(e => e.WypStatGodzPrzepr).HasColumnName("wyp_StatGodzPrzepr");
            entity.Property(e => e.WypStatus).HasColumnName("wyp_Status");
            entity.Property(e => e.WypUbezpZdrowotne)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotne");
            entity.Property(e => e.WypUbezpZdrowotne2)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotne2");
            entity.Property(e => e.WypUbezpZdrowotneNieodlNieogr)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotneNieodlNieogr");
            entity.Property(e => e.WypUbezpZdrowotneNiepomniejszone)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotneNiepomniejszone");
            entity.Property(e => e.WypUbezpZdrowotnePomniejszenie)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotnePomniejszenie");
            entity.Property(e => e.WypUlgaDlaKlasySredniej)
                .HasColumnType("money")
                .HasColumnName("wyp_UlgaDlaKlasySredniej");
            entity.Property(e => e.WypWplataDodatkPracodawcyPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataDodatkPracodawcyPPK");
            entity.Property(e => e.WypWplataDodatkPracownikaPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataDodatkPracownikaPPK");
            entity.Property(e => e.WypWplataPodstPracodawcyPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataPodstPracodawcyPPK");
            entity.Property(e => e.WypWplataPodstPracownikaPpk)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataPodstPracownikaPPK");
            entity.Property(e => e.WypWplataPracodawcyPpkdoPodatku)
                .HasColumnType("money")
                .HasColumnName("wyp_WplataPracodawcyPPKDoPodatku");
            entity.Property(e => e.WypZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatek");
            entity.Property(e => e.WypZaliczkaNaPodatekBilans)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatekBilans");
            entity.Property(e => e.WypZaliczkaNaPodatekOryginalna)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatekOryginalna");
            entity.Property(e => e.WypZaliczkaNaPodatekWirtualna)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatekWirtualna");
            entity.Property(e => e.WypZaliczkaObliczona)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaObliczona");
            entity.Property(e => e.WypZus)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUS");
            entity.Property(e => e.WypZusChorPrac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusChorPrac");
            entity.Property(e => e.WypZusEmer1Firma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusEmer1Firma");
            entity.Property(e => e.WypZusEmer1Prac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusEmer1Prac");
            entity.Property(e => e.WypZusEmer2Prac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusEmer2Prac");
            entity.Property(e => e.WypZusPracChWyZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusPracChWyZeZwolnionych");
            entity.Property(e => e.WypZusPracChWyZeZwolnionychZeZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusPracChWyZeZwolnionychZeZdr");
            entity.Property(e => e.WypZusPracEmReZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusPracEmReZeZwolnionych");
            entity.Property(e => e.WypZusPracEmReZeZwolnionychZeZdr)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusPracEmReZeZwolnionychZeZdr");
            entity.Property(e => e.WypZusPracZdrZeZwolnionych)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusPracZdrZeZwolnionych");
            entity.Property(e => e.WypZusRentFirma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusRentFirma");
            entity.Property(e => e.WypZusRentPrac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusRentPrac");
            entity.Property(e => e.WypZusWypFirma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusWypFirma");
            entity.Property(e => e.WypZusZasChor)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusZasChor");
            entity.Property(e => e.WypZusZasMac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusZasMac");
            entity.Property(e => e.WypZusZasOp)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusZasOp");
            entity.Property(e => e.WypZusZasReh)
                .HasColumnType("money")
                .HasColumnName("wyp_ZusZasReh");
            entity.Property(e => e.WypZusfirma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSFirma");
            entity.Property(e => e.WypZusprac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSPrac");
            entity.Property(e => e.WypZuspracNieodlNieogr)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSPracNieodlNieogr");
            entity.Property(e => e.WypZuspracOdl)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSPracOdl");
            entity.Property(e => e.WypZusrazem)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSRazem");
            entity.Property(e => e.WypZusrozliczenie)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSRozliczenie");
            entity.Property(e => e.WypZuszasilki)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSZasilki");
            entity.Property(e => e.WypZuszasilkiBr)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSZasilkiBr");
            entity.Property(e => e.WypZuszasilkiNe)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSZasilkiNe");

            entity.HasOne(d => d.WypIdListyPlacNavigation).WithMany(p => p.PlbWyplata)
                .HasForeignKey(d => d.WypIdListyPlac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_Wyplata_plb_ListaPlac");

            entity.HasOne(d => d.WypIdOsobyWystNavigation).WithMany(p => p.PlbWyplatumWypIdOsobyWystNavigations)
                .HasForeignKey(d => d.WypIdOsobyWyst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_Wyplata_pd_Uzytkownik");

            entity.HasOne(d => d.WypIdUmowyNavigation).WithMany(p => p.PlbWyplata)
                .HasForeignKey(d => d.WypIdUmowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plb_Wyplata_plb_Umowa");

            entity.HasOne(d => d.WypKorektaKtoNavigation).WithMany(p => p.PlbWyplatumWypKorektaKtoNavigations)
                .HasForeignKey(d => d.WypKorektaKto)
                .HasConstraintName("FK_plb_Wyplata_pd_Uzytkownik1");
        });

        modelBuilder.Entity<PlbWyrokTrybunalu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("plb_WyrokTrybunalu");

            entity.Property(e => e.WtkoIdWyplata).HasColumnName("wtko_IdWyplata");
            entity.Property(e => e.WtkoIdWyplataSklad).HasColumnName("wtko_IdWyplataSklad");
            entity.Property(e => e.WtkoKwotaDoChor)
                .HasColumnType("money")
                .HasColumnName("wtko_KwotaDoChor");
        });

        modelBuilder.Entity<PoParametryOnline>(entity =>
        {
            entity.HasKey(e => e.PoId);

            entity.ToTable("po__ParametryOnline");

            entity.Property(e => e.PoId)
                .ValueGeneratedNever()
                .HasColumnName("po_Id");
            entity.Property(e => e.PoKlucz)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("po_Klucz");
            entity.Property(e => e.PoLiniaProduktow)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("po_LiniaProduktow");
            entity.Property(e => e.PoOstatniaAktualizacja)
                .HasColumnType("datetime")
                .HasColumnName("po_OstatniaAktualizacja");
            entity.Property(e => e.PoProdukt).HasColumnName("po_Produkt");
            entity.Property(e => e.PoWartosc)
                .IsUnicode(false)
                .HasColumnName("po_Wartosc");
            entity.Property(e => e.PoWersja)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("po_Wersja");
            entity.Property(e => e.PoZakres)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("po_Zakres");
        });

        modelBuilder.Entity<PojEksploatacja>(entity =>
        {
            entity.HasKey(e => e.PprId);

            entity.ToTable("poj_Eksploatacja");

            entity.Property(e => e.PprId)
                .ValueGeneratedNever()
                .HasColumnName("ppr_Id");
            entity.Property(e => e.PprCel)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_Cel");
            entity.Property(e => e.PprCenaKm)
                .HasColumnType("money")
                .HasColumnName("ppr_CenaKm");
            entity.Property(e => e.PprCzyVat).HasColumnName("ppr_CzyVAT");
            entity.Property(e => e.PprData)
                .HasColumnType("datetime")
                .HasColumnName("ppr_Data");
            entity.Property(e => e.PprDataOtrzymania)
                .HasColumnType("datetime")
                .HasColumnName("ppr_DataOtrzymania");
            entity.Property(e => e.PprDataZakDost)
                .HasColumnType("datetime")
                .HasColumnName("ppr_DataZakDost");
            entity.Property(e => e.PprIdKategorii).HasColumnName("ppr_IdKategorii");
            entity.Property(e => e.PprIdKh).HasColumnName("ppr_IdKh");
            entity.Property(e => e.PprIdPojazdu).HasColumnName("ppr_IdPojazdu");
            entity.Property(e => e.PprKhKodPocztowy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_KhKodPocztowy");
            entity.Property(e => e.PprKhMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_KhMiasto");
            entity.Property(e => e.PprKhNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_KhNazwa");
            entity.Property(e => e.PprKhNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_KhNazwaPelna");
            entity.Property(e => e.PprKhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_KhNIP");
            entity.Property(e => e.PprKhUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_KhUlica");
            entity.Property(e => e.PprKierowca)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_Kierowca");
            entity.Property(e => e.PprKm)
                .HasColumnType("money")
                .HasColumnName("ppr_Km");
            entity.Property(e => e.PprMalyPojazd).HasColumnName("ppr_MalyPojazd");
            entity.Property(e => e.PprNettoBrutto).HasColumnName("ppr_NettoBrutto");
            entity.Property(e => e.PprNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_NrDok");
            entity.Property(e => e.PprOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_Opis");
            entity.Property(e => e.PprPrzypadekSzczegolnyPit).HasColumnName("ppr_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.PprStanLicznika)
                .HasColumnType("money")
                .HasColumnName("ppr_StanLicznika");
            entity.Property(e => e.PprStawkaVat)
                .HasDefaultValue(0)
                .HasColumnName("ppr_StawkaVAT");
            entity.Property(e => e.PprTrasa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_Trasa");
            entity.Property(e => e.PprTyp).HasColumnName("ppr_Typ");
            entity.Property(e => e.PprUdostepnienie).HasColumnName("ppr_Udostepnienie");
            entity.Property(e => e.PprUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_Uwagi");
            entity.Property(e => e.PprWartoscP)
                .HasColumnType("money")
                .HasColumnName("ppr_WartoscP");
            entity.Property(e => e.PprWartoscR)
                .HasColumnType("money")
                .HasColumnName("ppr_WartoscR");
            entity.Property(e => e.PprWartoscZrachunku)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("ppr_WartoscZRachunku");
            entity.Property(e => e.PprZaksiegowany).HasColumnName("ppr_Zaksiegowany");

            entity.HasOne(d => d.PprIdKategoriiNavigation).WithMany(p => p.PojEksploatacjas)
                .HasForeignKey(d => d.PprIdKategorii)
                .HasConstraintName("FK_poj_Eksploatacja_sl_Kategorie");

            entity.HasOne(d => d.PprIdKhNavigation).WithMany(p => p.PojEksploatacjas)
                .HasForeignKey(d => d.PprIdKh)
                .HasConstraintName("FK_poj_Eksploatacja_kh__Kontrahent");

            entity.HasOne(d => d.PprIdPojazduNavigation).WithMany(p => p.PojEksploatacjas)
                .HasForeignKey(d => d.PprIdPojazdu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_poj_Przejazd_poj_Pojazd");
        });

        modelBuilder.Entity<PojKosztyEksploatacji>(entity =>
        {
            entity.HasKey(e => e.PojkeId).HasName("PK_poj_KosztyEkspluatacji");

            entity.ToTable("poj_KosztyEksploatacji");

            entity.Property(e => e.PojkeId)
                .ValueGeneratedNever()
                .HasColumnName("pojke_Id");
            entity.Property(e => e.PojkeData)
                .HasColumnType("datetime")
                .HasColumnName("pojke_Data");
            entity.Property(e => e.PojkeDoKsiegowania)
                .HasColumnType("money")
                .HasColumnName("pojke_DoKsiegowania");
            entity.Property(e => e.PojkeDoKsiegowaniaRos)
                .HasColumnType("money")
                .HasColumnName("pojke_DoKsiegowaniaRos");
            entity.Property(e => e.PojkeIdKategorii).HasColumnName("pojke_IdKategorii");
            entity.Property(e => e.PojkeJako).HasColumnName("pojke_Jako");
            entity.Property(e => e.PojkeNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pojke_NrDok");
            entity.Property(e => e.PojkeOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pojke_Opis");
            entity.Property(e => e.PojkePrzejazdyMc)
                .HasColumnType("money")
                .HasColumnName("pojke_PrzejazdyMc");
            entity.Property(e => e.PojkePrzejazdyRos)
                .HasColumnType("money")
                .HasColumnName("pojke_PrzejazdyRos");
            entity.Property(e => e.PojkeRachunkiMc)
                .HasColumnType("money")
                .HasColumnName("pojke_RachunkiMc");
            entity.Property(e => e.PojkeRachunkiRos)
                .HasColumnType("money")
                .HasColumnName("pojke_RachunkiRos");
            entity.Property(e => e.PojkeStatus).HasColumnName("pojke_Status");
            entity.Property(e => e.PojkeUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("pojke_Uwagi");

            entity.HasOne(d => d.PojkeIdKategoriiNavigation).WithMany(p => p.PojKosztyEksploatacjis)
                .HasForeignKey(d => d.PojkeIdKategorii)
                .HasConstraintName("FK_poj_KosztyEkspluatacji_sl_Kategorii");
        });

        modelBuilder.Entity<PojKosztyEksploatacjiWpi>(entity =>
        {
            entity.HasKey(e => e.PojkwId);

            entity.ToTable("poj_KosztyEksploatacjiWpis");

            entity.Property(e => e.PojkwId)
                .ValueGeneratedNever()
                .HasColumnName("pojkw_Id");
            entity.Property(e => e.PojkwDoKsiegowania)
                .HasColumnType("money")
                .HasColumnName("pojkw_DoKsiegowania");
            entity.Property(e => e.PojkwDoKsiegowaniaRos)
                .HasColumnType("money")
                .HasColumnName("pojkw_DoKsiegowaniaRos");
            entity.Property(e => e.PojkwIdKosztyEksploatacji).HasColumnName("pojkw_IdKosztyEksploatacji");
            entity.Property(e => e.PojkwIdPojazdu).HasColumnName("pojkw_IdPojazdu");
            entity.Property(e => e.PojkwPrzejazdyMc)
                .HasColumnType("money")
                .HasColumnName("pojkw_PrzejazdyMc");
            entity.Property(e => e.PojkwPrzejazdyRos)
                .HasColumnType("money")
                .HasColumnName("pojkw_PrzejazdyRos");
            entity.Property(e => e.PojkwRachunkiMc)
                .HasColumnType("money")
                .HasColumnName("pojkw_RachunkiMc");
            entity.Property(e => e.PojkwRachunkiRos)
                .HasColumnType("money")
                .HasColumnName("pojkw_RachunkiRos");

            entity.HasOne(d => d.PojkwIdKosztyEksploatacjiNavigation).WithMany(p => p.PojKosztyEksploatacjiWpis)
                .HasForeignKey(d => d.PojkwIdKosztyEksploatacji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_poj_KosztyEksploatacjiWpis_poj_Pkp");

            entity.HasOne(d => d.PojkwIdPojazduNavigation).WithMany(p => p.PojKosztyEksploatacjiWpis)
                .HasForeignKey(d => d.PojkwIdPojazdu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_poj_KosztyEksploatacjiWpis_poj_Pojazd");
        });

        modelBuilder.Entity<PojKsiegowanie>(entity =>
        {
            entity.HasKey(e => e.PojkId);

            entity.ToTable("poj_Ksiegowanie");

            entity.Property(e => e.PojkId)
                .ValueGeneratedNever()
                .HasColumnName("pojk_Id");
            entity.Property(e => e.PojkIdPojazdu).HasColumnName("pojk_IdPojazdu");
            entity.Property(e => e.PojkMiesiac).HasColumnName("pojk_Miesiac");
            entity.Property(e => e.PojkRok).HasColumnName("pojk_Rok");
            entity.Property(e => e.PojkWartosc)
                .HasColumnType("money")
                .HasColumnName("pojk_Wartosc");

            entity.HasOne(d => d.PojkIdPojazduNavigation).WithMany(p => p.PojKsiegowanies)
                .HasForeignKey(d => d.PojkIdPojazdu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_poj_Ksiegowanie_poj_Pojazd");
        });

        modelBuilder.Entity<PojParametr>(entity =>
        {
            entity.HasKey(e => e.PpId);

            entity.ToTable("poj_Parametr");

            entity.Property(e => e.PpId)
                .ValueGeneratedNever()
                .HasColumnName("pp_Id");
            entity.Property(e => e.PpParamEwidId).HasColumnName("pp_ParamEwidId");
            entity.Property(e => e.PpPrzejazdIdCelu).HasColumnName("pp_PrzejazdIdCelu");
            entity.Property(e => e.PpPrzejazdIdTrasy).HasColumnName("pp_PrzejazdIdTrasy");
            entity.Property(e => e.PpPrzejazdWylicz).HasColumnName("pp_PrzejazdWylicz");
            entity.Property(e => e.PpRachunekIdEwidVat).HasColumnName("pp_RachunekIdEwidVat");
            entity.Property(e => e.PpRachunekIdKategorii).HasColumnName("pp_RachunekIdKategorii");
            entity.Property(e => e.PpRachunekIdKategoriiVat).HasColumnName("pp_RachunekIdKategoriiVat");
            entity.Property(e => e.PpRachunekOdliczenieVat).HasColumnName("pp_RachunekOdliczenieVat");
            entity.Property(e => e.PpRachunekRodzajVat).HasColumnName("pp_RachunekRodzajVat");
            entity.Property(e => e.PpRachunekStawkaVat)
                .HasDefaultValue(0)
                .HasColumnName("pp_RachunekStawkaVat");

            entity.HasOne(d => d.PpParamEwid).WithMany(p => p.PojParametrs)
                .HasForeignKey(d => d.PpParamEwidId)
                .HasConstraintName("FK_poj_Parametr_par__Ewid");

            entity.HasOne(d => d.PpPrzejazdIdCeluNavigation).WithMany(p => p.PojParametrs)
                .HasForeignKey(d => d.PpPrzejazdIdCelu)
                .HasConstraintName("FK_poj_Parametr_sl_PojCel");

            entity.HasOne(d => d.PpPrzejazdIdTrasyNavigation).WithMany(p => p.PojParametrs)
                .HasForeignKey(d => d.PpPrzejazdIdTrasy)
                .HasConstraintName("FK_poj_Parametr_sl_PojTrasa");

            entity.HasOne(d => d.PpRachunekIdEwidVatNavigation).WithMany(p => p.PojParametrs)
                .HasForeignKey(d => d.PpRachunekIdEwidVat)
                .HasConstraintName("FK_poj_Parametr_sl_TypEwidVAT");

            entity.HasOne(d => d.PpRachunekIdKategoriiNavigation).WithMany(p => p.PojParametrPpRachunekIdKategoriiNavigations)
                .HasForeignKey(d => d.PpRachunekIdKategorii)
                .HasConstraintName("FK_poj_Parametr_sl_Kategoria");

            entity.HasOne(d => d.PpRachunekIdKategoriiVatNavigation).WithMany(p => p.PojParametrPpRachunekIdKategoriiVatNavigations)
                .HasForeignKey(d => d.PpRachunekIdKategoriiVat)
                .HasConstraintName("FK_poj_Parametr_sl_Kategoria1");
        });

        modelBuilder.Entity<PojPojazd>(entity =>
        {
            entity.HasKey(e => e.PojId);

            entity.ToTable("poj_Pojazd");

            entity.Property(e => e.PojId)
                .ValueGeneratedNever()
                .HasColumnName("poj_Id");
            entity.Property(e => e.PojDataKoncaEwidencji)
                .HasColumnType("datetime")
                .HasColumnName("poj_DataKoncaEwidencji");
            entity.Property(e => e.PojDataRozpoczecia)
                .HasColumnType("datetime")
                .HasColumnName("poj_DataRozpoczecia");
            entity.Property(e => e.PojIdWlasciciela)
                .HasDefaultValueSql("('')")
                .HasColumnName("poj_IdWlasciciela");
            entity.Property(e => e.PojMalyPojazd).HasColumnName("poj_MalyPojazd");
            entity.Property(e => e.PojMarka)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("poj_Marka");
            entity.Property(e => e.PojNrAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("poj_NrAnalityka");
            entity.Property(e => e.PojNrRej)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("poj_NrRej");
            entity.Property(e => e.PojPelneOdliczenieVat).HasColumnName("poj_PelneOdliczenieVAT");
            entity.Property(e => e.PojPrzypadekSzczegolnyPit).HasColumnName("poj_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.PojStanLicznika)
                .HasColumnType("money")
                .HasColumnName("poj_StanLicznika");
            entity.Property(e => e.PojTyp).HasColumnName("poj_Typ");
            entity.Property(e => e.PojUzywany).HasColumnName("poj_Uzywany");
            entity.Property(e => e.PojUzywanyJako).HasColumnName("poj_UzywanyJako");
            entity.Property(e => e.PojWlasciciel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("poj_Wlasciciel");
        });

        modelBuilder.Entity<PosParam>(entity =>
        {
            entity.HasKey(e => e.PposId).HasName("PK__pos_Params");

            entity.ToTable("pos_Params");

            entity.Property(e => e.PposId)
                .ValueGeneratedNever()
                .HasColumnName("ppos_Id");
            entity.Property(e => e.PposBrakTowaruAkcja)
                .HasDefaultValue(1)
                .HasColumnName("ppos_BrakTowaruAkcja");
            entity.Property(e => e.PposDefiniowalnyId).HasColumnName("ppos_DefiniowalnyId");
            entity.Property(e => e.PposDomyslnaAkcjaTw).HasColumnName("ppos_DomyslnaAkcjaTw");
            entity.Property(e => e.PposDomyslnyWidok).HasColumnName("ppos_DomyslnyWidok");
            entity.Property(e => e.PposKlawiaturaSystemowa)
                .HasDefaultValue(true)
                .HasColumnName("ppos_KlawiaturaSystemowa");
            entity.Property(e => e.PposParamEwidId).HasColumnName("ppos_ParamEwidId");
            entity.Property(e => e.PposPodtyp).HasColumnName("ppos_Podtyp");
            entity.Property(e => e.PposPrzyciskiPlatnosci).HasColumnName("ppos_PrzyciskiPlatnosci");
            entity.Property(e => e.PposTyp).HasColumnName("ppos_Typ");

            entity.HasOne(d => d.PposParamEwid).WithMany(p => p.PosParams)
                .HasForeignKey(d => d.PposParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pos_Params_par__Ewid");
        });

        modelBuilder.Entity<PostUpdate>(entity =>
        {
            entity.ToTable("__PostUpdate");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Sqlupdate)
                .HasColumnType("text")
                .HasColumnName("SQLUpdate");
        });

        modelBuilder.Entity<PpkParametry>(entity =>
        {
            entity.HasKey(e => e.PpkpId);

            entity.ToTable("ppk_Parametry");

            entity.Property(e => e.PpkpId)
                .ValueGeneratedNever()
                .HasColumnName("ppkp_Id");
            entity.Property(e => e.PpkpDzienWplaty)
                .HasDefaultValue(15)
                .HasColumnName("ppkp_DzienWplaty");
            entity.Property(e => e.PpkpIdInstytucji).HasColumnName("ppkp_IdInstytucji");
            entity.Property(e => e.PpkpMiesiacWplaty)
                .HasDefaultValue(2)
                .HasColumnName("ppkp_MiesiacWplaty");
            entity.Property(e => e.PpkpSposobGenerowaniaPlikowDoWysylki).HasColumnName("ppkp_SposobGenerowaniaPlikowDoWysylki");
            entity.Property(e => e.PpkpUczestnictwo).HasColumnName("ppkp_Uczestnictwo");

            entity.HasOne(d => d.PpkpIdInstytucjiNavigation).WithMany(p => p.PpkParametries)
                .HasForeignKey(d => d.PpkpIdInstytucji)
                .HasConstraintName("FK_ppk_Parametry_is__Instytucja");
        });

        modelBuilder.Entity<PprAbsencja>(entity =>
        {
            entity.HasKey(e => e.PpraId);

            entity.ToTable("ppr_Absencja");

            entity.HasIndex(e => e.PpraIdWpisu, "IX_ppr_Absencja").IsUnique();

            entity.Property(e => e.PpraId)
                .ValueGeneratedNever()
                .HasColumnName("ppra_Id");
            entity.Property(e => e.PpraIdWpisu).HasColumnName("ppra_IdWpisu");
            entity.Property(e => e.PpraTypAbsencji).HasColumnName("ppra_TypAbsencji");

            entity.HasOne(d => d.PpraIdWpisuNavigation).WithOne(p => p.PprAbsencja)
                .HasForeignKey<PprAbsencja>(d => d.PpraIdWpisu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ppr_Absencja_ppr_PlanPracy");

            entity.HasOne(d => d.PpraTypAbsencjiNavigation).WithMany(p => p.PprAbsencjas)
                .HasForeignKey(d => d.PpraTypAbsencji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ppr_Absencja_sl_TypAbsencji");
        });

        modelBuilder.Entity<PprBlokadum>(entity =>
        {
            entity.HasKey(e => e.PprbId);

            entity.ToTable("ppr_Blokada");

            entity.Property(e => e.PprbId)
                .ValueGeneratedNever()
                .HasColumnName("pprb_Id");
            entity.Property(e => e.PprbDataDo)
                .HasColumnType("datetime")
                .HasColumnName("pprb_DataDo");
            entity.Property(e => e.PprbDataOd)
                .HasColumnType("datetime")
                .HasColumnName("pprb_DataOd");
            entity.Property(e => e.PprbIdPrac).HasColumnName("pprb_IdPrac");
            entity.Property(e => e.PprbStatus).HasColumnName("pprb_Status");

            entity.HasOne(d => d.PprbIdPracNavigation).WithMany(p => p.PprBlokada)
                .HasForeignKey(d => d.PprbIdPrac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ppr_Blokada_pr_Pracownik");
        });

        modelBuilder.Entity<PprObecnosc>(entity =>
        {
            entity.HasKey(e => e.PproId).HasName("PK_ppr_ZadaniePracy");

            entity.ToTable("ppr_Obecnosc");

            entity.HasIndex(e => e.PproIdWpisu, "IX_ppr_ZadaniePracy").IsUnique();

            entity.Property(e => e.PproId)
                .ValueGeneratedNever()
                .HasColumnName("ppro_Id");
            entity.Property(e => e.PproIdAtrybutGodziny).HasColumnName("ppro_IdAtrybutGodziny");
            entity.Property(e => e.PproIdWpisu).HasColumnName("ppro_IdWpisu");

            entity.HasOne(d => d.PproIdAtrybutGodzinyNavigation).WithMany(p => p.PprObecnoscs)
                .HasForeignKey(d => d.PproIdAtrybutGodziny)
                .HasConstraintName("FK_ppr_ZadaniePracy_sl_AtrybutGodzinowy");

            entity.HasOne(d => d.PproIdWpisuNavigation).WithOne(p => p.PprObecnosc)
                .HasForeignKey<PprObecnosc>(d => d.PproIdWpisu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ppr_ZadaniePracy_ppr_PlanPracy");
        });

        modelBuilder.Entity<PprParametry>(entity =>
        {
            entity.HasKey(e => e.PprpId);

            entity.ToTable("ppr_Parametry");

            entity.Property(e => e.PprpId)
                .ValueGeneratedNever()
                .HasColumnName("pprp_Id");
            entity.Property(e => e.PprpDomyslnyOkresDo).HasColumnName("pprp_DomyslnyOkresDo");
            entity.Property(e => e.PprpDomyslnyOkresOd).HasColumnName("pprp_DomyslnyOkresOd");
            entity.Property(e => e.PprpGodzNocneDo).HasColumnName("pprp_GodzNocneDo");
            entity.Property(e => e.PprpGodzNocneOd).HasColumnName("pprp_GodzNocneOd");
            entity.Property(e => e.PprpNadpisujAbsencjePlan).HasColumnName("pprp_NadpisujAbsencjePlan");
            entity.Property(e => e.PprpNadpisujGodzinyPlan).HasColumnName("pprp_NadpisujGodzinyPlan");
            entity.Property(e => e.PprpNadpisujGodzinyWykonanie).HasColumnName("pprp_NadpisujGodzinyWykonanie");
            entity.Property(e => e.PprpNadpisujWyjatkiPlan).HasColumnName("pprp_NadpisujWyjatkiPlan");
            entity.Property(e => e.PprpZerujGodzinyBezPlanu).HasColumnName("pprp_ZerujGodzinyBezPlanu");
        });

        modelBuilder.Entity<PprPlanPracy>(entity =>
        {
            entity.HasKey(e => e.PprId);

            entity.ToTable("ppr_PlanPracy");

            entity.Property(e => e.PprId)
                .ValueGeneratedNever()
                .HasColumnName("ppr_Id");
            entity.Property(e => e.PprIdPrac).HasColumnName("ppr_IdPrac");
            entity.Property(e => e.PprKolor).HasColumnName("ppr_Kolor");
            entity.Property(e => e.PprKoniec)
                .HasColumnType("datetime")
                .HasColumnName("ppr_Koniec");
            entity.Property(e => e.PprNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppr_Nazwa");
            entity.Property(e => e.PprOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ppr_Opis");
            entity.Property(e => e.PprPlanowanie).HasColumnName("ppr_Planowanie");
            entity.Property(e => e.PprPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("ppr_Poczatek");
            entity.Property(e => e.PprTyp).HasColumnName("ppr_Typ");
            entity.Property(e => e.PprUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ppr_Uwagi");

            entity.HasOne(d => d.PprIdPracNavigation).WithMany(p => p.PprPlanPracies)
                .HasForeignKey(d => d.PprIdPrac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ppr_PlanPracy_pr_Pracownik");
        });

        modelBuilder.Entity<PrBadaniaOkresowe>(entity =>
        {
            entity.HasKey(e => e.PboId);

            entity.ToTable("pr_BadaniaOkresowe");

            entity.HasIndex(e => e.PboIdPracownika, "IX_pr_BadaniaOkresowe_IdPracownika");

            entity.Property(e => e.PboId)
                .ValueGeneratedNever()
                .HasColumnName("pbo_Id");
            entity.Property(e => e.PboDataWaznosci)
                .HasColumnType("datetime")
                .HasColumnName("pbo_DataWaznosci");
            entity.Property(e => e.PboDataWykonania)
                .HasColumnType("datetime")
                .HasColumnName("pbo_DataWykonania");
            entity.Property(e => e.PboIdBadania).HasColumnName("pbo_IdBadania");
            entity.Property(e => e.PboIdPracownika).HasColumnName("pbo_IdPracownika");

            entity.HasOne(d => d.PboIdBadaniaNavigation).WithMany(p => p.PrBadaniaOkresowes)
                .HasForeignKey(d => d.PboIdBadania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_BadaniaOkresowe_sl_BadanieOkresowe");

            entity.HasOne(d => d.PboIdPracownikaNavigation).WithMany(p => p.PrBadaniaOkresowes)
                .HasForeignKey(d => d.PboIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_BadaniaOkresowe_pr_Pracownik");
        });

        modelBuilder.Entity<PrBo>(entity =>
        {
            entity.HasKey(e => e.PboId);

            entity.ToTable("pr_BO");

            entity.Property(e => e.PboId)
                .ValueGeneratedNever()
                .HasColumnName("pbo_Id");
            entity.Property(e => e.PboChorPodst1)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst1");
            entity.Property(e => e.PboChorPodst10)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst10");
            entity.Property(e => e.PboChorPodst11)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst11");
            entity.Property(e => e.PboChorPodst12)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst12");
            entity.Property(e => e.PboChorPodst2)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst2");
            entity.Property(e => e.PboChorPodst3)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst3");
            entity.Property(e => e.PboChorPodst4)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst4");
            entity.Property(e => e.PboChorPodst5)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst5");
            entity.Property(e => e.PboChorPodst6)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst6");
            entity.Property(e => e.PboChorPodst7)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst7");
            entity.Property(e => e.PboChorPodst8)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst8");
            entity.Property(e => e.PboChorPodst9)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorPodst9");
            entity.Property(e => e.PboChorWpodst1).HasColumnName("pbo_ChorWPodst1");
            entity.Property(e => e.PboChorWpodst10).HasColumnName("pbo_ChorWPodst10");
            entity.Property(e => e.PboChorWpodst11).HasColumnName("pbo_ChorWPodst11");
            entity.Property(e => e.PboChorWpodst12).HasColumnName("pbo_ChorWPodst12");
            entity.Property(e => e.PboChorWpodst2).HasColumnName("pbo_ChorWPodst2");
            entity.Property(e => e.PboChorWpodst3).HasColumnName("pbo_ChorWPodst3");
            entity.Property(e => e.PboChorWpodst4).HasColumnName("pbo_ChorWPodst4");
            entity.Property(e => e.PboChorWpodst5).HasColumnName("pbo_ChorWPodst5");
            entity.Property(e => e.PboChorWpodst6).HasColumnName("pbo_ChorWPodst6");
            entity.Property(e => e.PboChorWpodst7).HasColumnName("pbo_ChorWPodst7");
            entity.Property(e => e.PboChorWpodst8).HasColumnName("pbo_ChorWPodst8");
            entity.Property(e => e.PboChorWpodst9).HasColumnName("pbo_ChorWPodst9");
            entity.Property(e => e.PboChorobaMiesiac).HasColumnName("pbo_ChorobaMiesiac");
            entity.Property(e => e.PboChorobaPodstawa)
                .HasColumnType("money")
                .HasColumnName("pbo_ChorobaPodstawa");
            entity.Property(e => e.PboChorobaWost3Mies).HasColumnName("pbo_ChorobaWOst3Mies");
            entity.Property(e => e.PboCiagloscZasChor).HasColumnName("pbo_CiagloscZasChor");
            entity.Property(e => e.PboDniChorobowe).HasColumnName("pbo_DniChorobowe");
            entity.Property(e => e.PboDniOpiekiNadDzieckiem).HasColumnName("pbo_DniOpiekiNadDzieckiem");
            entity.Property(e => e.PboDniPracyZdalnejOkazjonalnej).HasColumnName("pbo_DniPracyZdalnejOkazjonalnej");
            entity.Property(e => e.PboDniUrlopuOpiekunczego).HasColumnName("pbo_DniUrlopuOpiekunczego");
            entity.Property(e => e.PboDniUrlopuSilaWyzsza).HasColumnName("pbo_DniUrlopuSilaWyzsza");
            entity.Property(e => e.PboGodzinyOpiekiNadDzieckiem).HasColumnName("pbo_GodzinyOpiekiNadDzieckiem");
            entity.Property(e => e.PboGodzinyUrlopuSilaWyzsza).HasColumnName("pbo_GodzinyUrlopuSilaWyzsza");
            entity.Property(e => e.PboIdPracownika).HasColumnName("pbo_IdPracownika");
            entity.Property(e => e.PboKosztyPrawAutor)
                .HasColumnType("money")
                .HasColumnName("pbo_KosztyPrawAutor");
            entity.Property(e => e.PboKup)
                .HasColumnType("money")
                .HasColumnName("pbo_KUP");
            entity.Property(e => e.PboKupr)
                .HasColumnType("money")
                .HasColumnName("pbo_KUPR");
            entity.Property(e => e.PboKupruz)
                .HasColumnType("money")
                .HasColumnName("pbo_KUPRUZ");
            entity.Property(e => e.PboKupruzzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_KUPRUZZwol");
            entity.Property(e => e.PboKupw)
                .HasColumnType("money")
                .HasColumnName("pbo_KUPW");
            entity.Property(e => e.PboKupwzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_KUPWZwol");
            entity.Property(e => e.PboOkresyNieskladkowe)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pbo_OkresyNieskladkowe");
            entity.Property(e => e.PboPodstEmRe)
                .HasColumnType("money")
                .HasColumnName("pbo_PodstEmRe");
            entity.Property(e => e.PboPodstEmReR)
                .HasColumnType("money")
                .HasColumnName("pbo_PodstEmReR");
            entity.Property(e => e.PboPodstEmReW)
                .HasColumnType("money")
                .HasColumnName("pbo_PodstEmReW");
            entity.Property(e => e.PboPodstFep)
                .HasColumnType("money")
                .HasColumnName("pbo_PodstFEP");
            entity.Property(e => e.PboPrzychod)
                .HasColumnType("money")
                .HasColumnName("pbo_Przychod");
            entity.Property(e => e.PboPrzychodR)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodR");
            entity.Property(e => e.PboPrzychodRuz)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodRUZ");
            entity.Property(e => e.PboPrzychodRuzzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodRUZZwol");
            entity.Property(e => e.PboPrzychodRuzzwolWykorzystany)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodRUZZwolWykorzystany");
            entity.Property(e => e.PboPrzychodW)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodW");
            entity.Property(e => e.PboPrzychodWzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodWZwol");
            entity.Property(e => e.PboPrzychodWzwolWykorzystany)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodWZwolWykorzystany");
            entity.Property(e => e.PboPrzychodZwolnionyDlaPowracajacychRach)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodZwolnionyDlaPowracajacychRach");
            entity.Property(e => e.PboPrzychodZwolnionyDlaPowracajacychWyp)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodZwolnionyDlaPowracajacychWyp");
            entity.Property(e => e.PboPrzychodZwolnionyDlaRodzin4PlusRach)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodZwolnionyDlaRodzin4PlusRach");
            entity.Property(e => e.PboPrzychodZwolnionyDlaRodzin4PlusWyp)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodZwolnionyDlaRodzin4PlusWyp");
            entity.Property(e => e.PboPrzychodZwolnionyDlaSeniorowRach)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodZwolnionyDlaSeniorowRach");
            entity.Property(e => e.PboPrzychodZwolnionyDlaSeniorowWyp)
                .HasColumnType("money")
                .HasColumnName("pbo_PrzychodZwolnionyDlaSeniorowWyp");
            entity.Property(e => e.PboSklSpol)
                .HasColumnType("money")
                .HasColumnName("pbo_SklSpol");
            entity.Property(e => e.PboSklSpolR)
                .HasColumnType("money")
                .HasColumnName("pbo_SklSpolR");
            entity.Property(e => e.PboSklSpolRuzzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_SklSpolRUZZwol");
            entity.Property(e => e.PboSklSpolRuzzwolWykorzystany)
                .HasColumnType("money")
                .HasColumnName("pbo_SklSpolRUZZwolWykorzystany");
            entity.Property(e => e.PboSklSpolW)
                .HasColumnType("money")
                .HasColumnName("pbo_SklSpolW");
            entity.Property(e => e.PboSklSpolWzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_SklSpolWZwol");
            entity.Property(e => e.PboSklSpolWzwolWykorzystany)
                .HasColumnType("money")
                .HasColumnName("pbo_SklSpolWZwolWykorzystany");
            entity.Property(e => e.PboSklZdr)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdr");
            entity.Property(e => e.PboSklZdr2)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdr2");
            entity.Property(e => e.PboSklZdr2R)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdr2R");
            entity.Property(e => e.PboSklZdr2W)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdr2W");
            entity.Property(e => e.PboSklZdrR)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdrR");
            entity.Property(e => e.PboSklZdrRuzzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdrRUZZwol");
            entity.Property(e => e.PboSklZdrRuzzwolWykorzystany)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdrRUZZwolWykorzystany");
            entity.Property(e => e.PboSklZdrW)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdrW");
            entity.Property(e => e.PboSklZdrWzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdrWZwol");
            entity.Property(e => e.PboSklZdrWzwolWykorzystany)
                .HasColumnType("money")
                .HasColumnName("pbo_SklZdrWZwolWykorzystany");
            entity.Property(e => e.PboUrGodz1).HasColumnName("pbo_UrGodz1");
            entity.Property(e => e.PboUrGodz10).HasColumnName("pbo_UrGodz10");
            entity.Property(e => e.PboUrGodz11).HasColumnName("pbo_UrGodz11");
            entity.Property(e => e.PboUrGodz12).HasColumnName("pbo_UrGodz12");
            entity.Property(e => e.PboUrGodz2).HasColumnName("pbo_UrGodz2");
            entity.Property(e => e.PboUrGodz3).HasColumnName("pbo_UrGodz3");
            entity.Property(e => e.PboUrGodz4).HasColumnName("pbo_UrGodz4");
            entity.Property(e => e.PboUrGodz5).HasColumnName("pbo_UrGodz5");
            entity.Property(e => e.PboUrGodz6).HasColumnName("pbo_UrGodz6");
            entity.Property(e => e.PboUrGodz7).HasColumnName("pbo_UrGodz7");
            entity.Property(e => e.PboUrGodz8).HasColumnName("pbo_UrGodz8");
            entity.Property(e => e.PboUrGodz9).HasColumnName("pbo_UrGodz9");
            entity.Property(e => e.PboUrSklSt1)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt1");
            entity.Property(e => e.PboUrSklSt10)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt10");
            entity.Property(e => e.PboUrSklSt11)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt11");
            entity.Property(e => e.PboUrSklSt12)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt12");
            entity.Property(e => e.PboUrSklSt2)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt2");
            entity.Property(e => e.PboUrSklSt3)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt3");
            entity.Property(e => e.PboUrSklSt4)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt4");
            entity.Property(e => e.PboUrSklSt5)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt5");
            entity.Property(e => e.PboUrSklSt6)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt6");
            entity.Property(e => e.PboUrSklSt7)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt7");
            entity.Property(e => e.PboUrSklSt8)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt8");
            entity.Property(e => e.PboUrSklSt9)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklSt9");
            entity.Property(e => e.PboUrSklZm1)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm1");
            entity.Property(e => e.PboUrSklZm10)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm10");
            entity.Property(e => e.PboUrSklZm11)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm11");
            entity.Property(e => e.PboUrSklZm12)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm12");
            entity.Property(e => e.PboUrSklZm2)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm2");
            entity.Property(e => e.PboUrSklZm3)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm3");
            entity.Property(e => e.PboUrSklZm4)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm4");
            entity.Property(e => e.PboUrSklZm5)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm5");
            entity.Property(e => e.PboUrSklZm6)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm6");
            entity.Property(e => e.PboUrSklZm7)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm7");
            entity.Property(e => e.PboUrSklZm8)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm8");
            entity.Property(e => e.PboUrSklZm9)
                .HasColumnType("money")
                .HasColumnName("pbo_UrSklZm9");
            entity.Property(e => e.PboUrlopDobowyWymiar)
                .HasDefaultValue(480)
                .HasColumnName("pbo_UrlopDobowyWymiar");
            entity.Property(e => e.PboUrlopWyp).HasColumnName("pbo_UrlopWyp");
            entity.Property(e => e.PboZaliczki)
                .HasColumnType("money")
                .HasColumnName("pbo_Zaliczki");
            entity.Property(e => e.PboZaliczkiR)
                .HasColumnType("money")
                .HasColumnName("pbo_ZaliczkiR");
            entity.Property(e => e.PboZaliczkiRuz)
                .HasColumnType("money")
                .HasColumnName("pbo_ZaliczkiRUZ");
            entity.Property(e => e.PboZaliczkiRuzzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_ZaliczkiRUZZwol");
            entity.Property(e => e.PboZaliczkiW)
                .HasColumnType("money")
                .HasColumnName("pbo_ZaliczkiW");
            entity.Property(e => e.PboZaliczkiWzwol)
                .HasColumnType("money")
                .HasColumnName("pbo_ZaliczkiWZwol");
            entity.Property(e => e.PboZasilkiW)
                .HasColumnType("money")
                .HasColumnName("pbo_ZasilkiW");
            entity.Property(e => e.PboZasilkiZwolW)
                .HasColumnType("money")
                .HasColumnName("pbo_ZasilkiZwolW");
            entity.Property(e => e.PboZwolZpit)
                .HasColumnType("money")
                .HasColumnName("pbo_ZwolZPIT");
            entity.Property(e => e.PboZwolZpitr)
                .HasColumnType("money")
                .HasColumnName("pbo_ZwolZPITR");
            entity.Property(e => e.PboZwolZpitw)
                .HasColumnType("money")
                .HasColumnName("pbo_ZwolZPITW");

            entity.HasOne(d => d.PboIdPracownikaNavigation).WithMany(p => p.PrBos)
                .HasForeignKey(d => d.PboIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_BO_pr_Pracownik");
        });

        modelBuilder.Entity<PrCechaPr>(entity =>
        {
            entity.HasKey(e => e.CpId);

            entity.ToTable("pr_CechaPr");

            entity.HasIndex(e => e.CpIdCecha, "IX_pr_CechaPr_IdCecha");

            entity.HasIndex(e => e.CpIdPrac, "IX_pr_CechaPr_IdPrac");

            entity.Property(e => e.CpId)
                .ValueGeneratedNever()
                .HasColumnName("cp_Id");
            entity.Property(e => e.CpIdCecha).HasColumnName("cp_IdCecha");
            entity.Property(e => e.CpIdPrac).HasColumnName("cp_IdPrac");

            entity.HasOne(d => d.CpIdCechaNavigation).WithMany(p => p.PrCechaPrs)
                .HasForeignKey(d => d.CpIdCecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_CechaPr_sl_CechaPr");

            entity.HasOne(d => d.CpIdPracNavigation).WithMany(p => p.PrCechaPrs)
                .HasForeignKey(d => d.CpIdPrac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_CechaPr_pr_Pracownik");
        });

        modelBuilder.Entity<PrDokument>(entity =>
        {
            entity.HasKey(e => e.PdkId);

            entity.ToTable("pr_Dokument");

            entity.HasIndex(e => e.PdkIdPracownika, "IX_pr_Dokument_IdPracownika");

            entity.Property(e => e.PdkId)
                .ValueGeneratedNever()
                .HasColumnName("pdk_Id");
            entity.Property(e => e.PdkDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("pdk_DataModyfikacji");
            entity.Property(e => e.PdkIdKategorii).HasColumnName("pdk_IdKategorii");
            entity.Property(e => e.PdkIdPersonelu).HasColumnName("pdk_IdPersonelu");
            entity.Property(e => e.PdkIdPracownika).HasColumnName("pdk_IdPracownika");
            entity.Property(e => e.PdkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pdk_Nazwa");
            entity.Property(e => e.PdkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pdk_Opis");
            entity.Property(e => e.PdkTresc)
                .HasColumnType("image")
                .HasColumnName("pdk_Tresc");
            entity.Property(e => e.PdkTyp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pdk_Typ");
            entity.Property(e => e.PdkZablokowany).HasColumnName("pdk_Zablokowany");

            entity.HasOne(d => d.PdkIdKategoriiNavigation).WithMany(p => p.PrDokuments)
                .HasForeignKey(d => d.PdkIdKategorii)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Dokument_sl_KategoriaDokumentu");

            entity.HasOne(d => d.PdkIdPersoneluNavigation).WithMany(p => p.PrDokuments)
                .HasForeignKey(d => d.PdkIdPersonelu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Dokument_pd_Uzytkownik");

            entity.HasOne(d => d.PdkIdPracownikaNavigation).WithMany(p => p.PrDokuments)
                .HasForeignKey(d => d.PdkIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Dokument_pr_Pracownik");
        });

        modelBuilder.Entity<PrGiodo>(entity =>
        {
            entity.HasKey(e => e.PgiId);

            entity.ToTable("pr_GIODO");

            entity.HasIndex(e => e.PgiCzas, "IX_pr_GIODO_Czas");

            entity.HasIndex(e => e.PgiIdPracownika, "IX_pr_GIODO_IdPracownika");

            entity.HasIndex(e => e.PgiIdUzytkownika, "IX_pr_GIODO_IdUzytkownika");

            entity.Property(e => e.PgiId)
                .ValueGeneratedNever()
                .HasColumnName("pgi_Id");
            entity.Property(e => e.PgiCzas)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("pgi_Czas");
            entity.Property(e => e.PgiIdPracownika).HasColumnName("pgi_IdPracownika");
            entity.Property(e => e.PgiIdUzytkownika).HasColumnName("pgi_IdUzytkownika");
            entity.Property(e => e.PgiOperacja).HasColumnName("pgi_Operacja");

            entity.HasOne(d => d.PgiIdPracownikaNavigation).WithMany(p => p.PrGiodos)
                .HasForeignKey(d => d.PgiIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_GIODO_pr_Pracownik");

            entity.HasOne(d => d.PgiIdUzytkownikaNavigation).WithMany(p => p.PrGiodos)
                .HasForeignKey(d => d.PgiIdUzytkownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_GIODO_pd_Uzytkownik");
        });

        modelBuilder.Entity<PrInneDochody>(entity =>
        {
            entity.HasKey(e => e.PidId);

            entity.ToTable("pr_InneDochody", tb => tb.HasTrigger("tr_PrInneDochody_Adding"));

            entity.Property(e => e.PidId)
                .ValueGeneratedNever()
                .HasColumnName("pid_Id");
            entity.Property(e => e.PidDataWpisu)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("pid_DataWpisu");
            entity.Property(e => e.PidIdPracownika).HasColumnName("pid_IdPracownika");
            entity.Property(e => e.PidKwota)
                .HasColumnType("money")
                .HasColumnName("pid_Kwota");
            entity.Property(e => e.PidMiesiac)
                .HasDefaultValueSql("(datepart(month,getdate()))")
                .HasColumnName("pid_Miesiac");
            entity.Property(e => e.PidOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pid_Opis");
            entity.Property(e => e.PidRok).HasColumnName("pid_Rok");
            entity.Property(e => e.PidTyp).HasColumnName("pid_Typ");

            entity.HasOne(d => d.PidIdPracownikaNavigation).WithMany(p => p.PrInneDochodies)
                .HasForeignKey(d => d.PidIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_InneDochody_pr_Pracownik");
        });

        modelBuilder.Entity<PrJezyki>(entity =>
        {
            entity.HasKey(e => e.PjeId);

            entity.ToTable("pr_Jezyki");

            entity.HasIndex(e => e.PjeIdPracownika, "IX_pr_Jezyki_IdPracownika");

            entity.HasIndex(e => e.PjeJezyk, "IX_pr_Jezyki_Jezyk");

            entity.HasIndex(e => e.PjeStZnajomosci, "IX_pr_Jezyki_StZnajomosci");

            entity.Property(e => e.PjeId)
                .ValueGeneratedNever()
                .HasColumnName("pje_Id");
            entity.Property(e => e.PjeIdPracownika).HasColumnName("pje_IdPracownika");
            entity.Property(e => e.PjeJezyk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pje_Jezyk");
            entity.Property(e => e.PjeStZnajomosci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pje_StZnajomosci");

            entity.HasOne(d => d.PjeIdPracownikaNavigation).WithMany(p => p.PrJezykis)
                .HasForeignKey(d => d.PjeIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Jezyki_pr_Pracownik");
        });

        modelBuilder.Entity<PrKosztyZprawAutorskich>(entity =>
        {
            entity.HasKey(e => e.PkaId);

            entity.ToTable("pr_KosztyZPrawAutorskich");

            entity.Property(e => e.PkaId)
                .ValueGeneratedNever()
                .HasColumnName("pka_Id");
            entity.Property(e => e.PkaDataWpisu)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("pka_DataWpisu");
            entity.Property(e => e.PkaIdPracownika).HasColumnName("pka_IdPracownika");
            entity.Property(e => e.PkaKwota)
                .HasColumnType("money")
                .HasColumnName("pka_Kwota");
            entity.Property(e => e.PkaOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pka_Opis");
            entity.Property(e => e.PkaRok).HasColumnName("pka_Rok");

            entity.HasOne(d => d.PkaIdPracownikaNavigation).WithMany(p => p.PrKosztyZprawAutorskiches)
                .HasForeignKey(d => d.PkaIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_KosztyZPrawAutorskich_pr_Pracownik");
        });

        modelBuilder.Entity<PrKursy>(entity =>
        {
            entity.HasKey(e => e.PkuId);

            entity.ToTable("pr_Kursy");

            entity.HasIndex(e => e.PkuIdPracownika, "IX_pr_Kursy_IdPracownika");

            entity.HasIndex(e => e.PkuNazwa, "IX_pr_Kursy_Nazwa");

            entity.Property(e => e.PkuId)
                .ValueGeneratedNever()
                .HasColumnName("pku_Id");
            entity.Property(e => e.PkuDataDo)
                .HasColumnType("datetime")
                .HasColumnName("pku_DataDo");
            entity.Property(e => e.PkuDataOd)
                .HasColumnType("datetime")
                .HasColumnName("pku_DataOd");
            entity.Property(e => e.PkuIdPracownika).HasColumnName("pku_IdPracownika");
            entity.Property(e => e.PkuNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pku_Nazwa");

            entity.HasOne(d => d.PkuIdPracownikaNavigation).WithMany(p => p.PrKursies)
                .HasForeignKey(d => d.PkuIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Kursy_pr_Pracownik");
        });

        modelBuilder.Entity<PrKursyBhp>(entity =>
        {
            entity.HasKey(e => e.PbhpId);

            entity.ToTable("pr_KursyBHP");

            entity.HasIndex(e => e.PbhpIdPracownika, "IX_pr_KursyBHP_IdPracownika");

            entity.Property(e => e.PbhpId)
                .ValueGeneratedNever()
                .HasColumnName("pbhp_Id");
            entity.Property(e => e.PbhpDataOdbycia)
                .HasColumnType("datetime")
                .HasColumnName("pbhp_DataOdbycia");
            entity.Property(e => e.PbhpDataWaznosci)
                .HasColumnType("datetime")
                .HasColumnName("pbhp_DataWaznosci");
            entity.Property(e => e.PbhpIdKursu).HasColumnName("pbhp_IdKursu");
            entity.Property(e => e.PbhpIdPracownika).HasColumnName("pbhp_IdPracownika");

            entity.HasOne(d => d.PbhpIdKursuNavigation).WithMany(p => p.PrKursyBhps)
                .HasForeignKey(d => d.PbhpIdKursu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_KursyBHP_sl_KursBHP");

            entity.HasOne(d => d.PbhpIdPracownikaNavigation).WithMany(p => p.PrKursyBhps)
                .HasForeignKey(d => d.PbhpIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_KursyBHP_pr_Pracownik");
        });

        modelBuilder.Entity<PrMotywacja>(entity =>
        {
            entity.HasKey(e => e.PmoId);

            entity.ToTable("pr_Motywacja");

            entity.HasIndex(e => e.PmoIdPracownika, "IX_pr_Motywacja_IdPracownika");

            entity.Property(e => e.PmoId)
                .ValueGeneratedNever()
                .HasColumnName("pmo_Id");
            entity.Property(e => e.PmoDataOtrzymania)
                .HasColumnType("datetime")
                .HasColumnName("pmo_DataOtrzymania");
            entity.Property(e => e.PmoIdPracownika).HasColumnName("pmo_IdPracownika");
            entity.Property(e => e.PmoNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pmo_Nazwa");
            entity.Property(e => e.PmoRodzaj).HasColumnName("pmo_Rodzaj");

            entity.HasOne(d => d.PmoIdPracownikaNavigation).WithMany(p => p.PrMotywacjas)
                .HasForeignKey(d => d.PmoIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Motywacja_pr_Pracownik");
        });

        modelBuilder.Entity<PrOkresyUrlopowBezplatnych>(entity =>
        {
            entity.HasKey(e => e.OubId).HasName("PK_oub_Id");

            entity.ToTable("pr_OkresyUrlopowBezplatnych");

            entity.Property(e => e.OubId)
                .ValueGeneratedNever()
                .HasColumnName("oub_Id");
            entity.Property(e => e.OubDataDo)
                .HasColumnType("datetime")
                .HasColumnName("oub_DataDo");
            entity.Property(e => e.OubDataOd)
                .HasColumnType("datetime")
                .HasColumnName("oub_DataOd");
            entity.Property(e => e.OubIdBo).HasColumnName("oub_IdBO");

            entity.HasOne(d => d.OubIdBoNavigation).WithMany(p => p.PrOkresyUrlopowBezplatnyches)
                .HasForeignKey(d => d.OubIdBo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_OkresyUrlopowBezplatnych_pr_BO");
        });

        modelBuilder.Entity<PrOrganizacje>(entity =>
        {
            entity.HasKey(e => e.PorId);

            entity.ToTable("pr_Organizacje");

            entity.HasIndex(e => e.PorFunkcja, "IX_pr_Organizacje_Funkcja");

            entity.HasIndex(e => e.PorIdPracownika, "IX_pr_Organizacje_IdPracownika");

            entity.HasIndex(e => e.PorNazwa, "IX_pr_Organizacje_Nazwa");

            entity.Property(e => e.PorId)
                .ValueGeneratedNever()
                .HasColumnName("por_Id");
            entity.Property(e => e.PorDataDo)
                .HasColumnType("datetime")
                .HasColumnName("por_DataDo");
            entity.Property(e => e.PorDataOd)
                .HasColumnType("datetime")
                .HasColumnName("por_DataOd");
            entity.Property(e => e.PorFunkcja)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("por_Funkcja");
            entity.Property(e => e.PorIdPracownika).HasColumnName("por_IdPracownika");
            entity.Property(e => e.PorNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("por_Nazwa");

            entity.HasOne(d => d.PorIdPracownikaNavigation).WithMany(p => p.PrOrganizacjes)
                .HasForeignKey(d => d.PorIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Organizacje_pr_Pracownik");
        });

        modelBuilder.Entity<PrParametry>(entity =>
        {
            entity.HasKey(e => e.PrhId);

            entity.ToTable("pr_Parametry");

            entity.Property(e => e.PrhId)
                .HasDefaultValue(-1)
                .HasColumnName("prh_Id");
            entity.Property(e => e.PrhIdPracownika)
                .HasDefaultValue(-1)
                .HasColumnName("prh_IdPracownika");
            entity.Property(e => e.PrhKlucz)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prh_Klucz");
            entity.Property(e => e.PrhTryb)
                .HasDefaultValue(1)
                .HasColumnName("prh_Tryb");
            entity.Property(e => e.PrhWartosc)
                .HasDefaultValue(-1)
                .HasColumnName("prh_Wartosc");
            entity.Property(e => e.PrhWazneDo)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("prh_WazneDo");
            entity.Property(e => e.PrhWazneOd)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("prh_WazneOd");

            entity.HasOne(d => d.PrhIdPracownikaNavigation).WithMany(p => p.PrParametries)
                .HasForeignKey(d => d.PrhIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Parametry_pr_Pracownik");
        });

        modelBuilder.Entity<PrParametryWplatPpk>(entity =>
        {
            entity.HasKey(e => e.PpId).HasName("PK_pr_ParametryPPK");

            entity.ToTable("pr_ParametryWplatPPK");

            entity.Property(e => e.PpId)
                .ValueGeneratedNever()
                .HasColumnName("pp_Id");
            entity.Property(e => e.PpDataDeklaracji)
                .HasColumnType("datetime")
                .HasColumnName("pp_DataDeklaracji");
            entity.Property(e => e.PpIdDeklaracji).HasColumnName("pp_IdDeklaracji");
            entity.Property(e => e.PpIdPrac).HasColumnName("pp_IdPrac");
            entity.Property(e => e.PpMiesiacOd)
                .HasColumnType("datetime")
                .HasColumnName("pp_MiesiacOd");
            entity.Property(e => e.PpTyp).HasColumnName("pp_Typ");
            entity.Property(e => e.PpWartosc)
                .HasColumnType("money")
                .HasColumnName("pp_Wartosc");

            entity.HasOne(d => d.PpIdDeklaracjiNavigation).WithMany(p => p.PrParametryWplatPpks)
                .HasForeignKey(d => d.PpIdDeklaracji)
                .HasConstraintName("FK_pr_ParametryWplatPPK_dekl__Ewid");

            entity.HasOne(d => d.PpIdPracNavigation).WithMany(p => p.PrParametryWplatPpks)
                .HasForeignKey(d => d.PpIdPrac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_ParametryPPK_pr_Pracownik");
        });

        modelBuilder.Entity<PrPpk>(entity =>
        {
            entity.HasKey(e => e.PpkId);

            entity.ToTable("pr_PPK");

            entity.Property(e => e.PpkId)
                .ValueGeneratedNever()
                .HasColumnName("ppk_Id");
            entity.Property(e => e.PpkIdDeklaracji).HasColumnName("ppk_IdDeklaracji");
            entity.Property(e => e.PpkIdPrac).HasColumnName("ppk_IdPrac");
            entity.Property(e => e.PpkMiesiacZgloszeniaDoIf)
                .HasColumnType("datetime")
                .HasColumnName("ppk_MiesiacZgloszeniaDoIF");
            entity.Property(e => e.PpkNaliczajWplatyOd)
                .HasColumnType("datetime")
                .HasColumnName("ppk_NaliczajWplatyOd");
            entity.Property(e => e.PpkNrEwidencyjny)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ppk_NrEwidencyjny");
            entity.Property(e => e.PpkUczestnictwo).HasColumnName("ppk_Uczestnictwo");
            entity.Property(e => e.PpkWplataDodatkowaPracodawcy)
                .HasColumnType("money")
                .HasColumnName("ppk_WplataDodatkowaPracodawcy");
            entity.Property(e => e.PpkWplataDodatkowaPracownika)
                .HasColumnType("money")
                .HasColumnName("ppk_WplataDodatkowaPracownika");
            entity.Property(e => e.PpkWplataPodstawowaPracownika)
                .HasColumnType("money")
                .HasColumnName("ppk_WplataPodstawowaPracownika");

            entity.HasOne(d => d.PpkIdDeklaracjiNavigation).WithMany(p => p.PrPpks)
                .HasForeignKey(d => d.PpkIdDeklaracji)
                .HasConstraintName("FK_pr_PPK_dekl__Ewid");

            entity.HasOne(d => d.PpkIdPracNavigation).WithMany(p => p.PrPpks)
                .HasForeignKey(d => d.PpkIdPrac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_PPK_pr_Pracownik");
        });

        modelBuilder.Entity<PrPracownik>(entity =>
        {
            entity.HasKey(e => e.PrId);

            entity.ToTable("pr_Pracownik", tb =>
                {
                    tb.HasTrigger("tr_PrPracownik_Deleting");
                    tb.HasTrigger("tr_PrPracownik_Inserting");
                    tb.HasTrigger("tr_PrPracownik_Updating");
                });

            entity.HasIndex(e => e.PrNrSpecjalnosciWojskowej, "IX_pr_Pracownik_NrSpecjalnosciWojskowej");

            entity.HasIndex(e => e.PrObowiazekObrony, "IX_pr_Pracownik_ObowiazekObrony");

            entity.HasIndex(e => e.PrStopienWojskowy, "IX_pr_Pracownik_StopienWojskowy");

            entity.HasIndex(e => e.PrWku, "IX_pr_Pracownik_WKU");

            entity.Property(e => e.PrId)
                .ValueGeneratedNever()
                .HasColumnName("pr_Id");
            entity.Property(e => e.PrAktywny)
                .HasDefaultValue(true)
                .HasColumnName("pr_Aktywny");
            entity.Property(e => e.PrDaneOsoboweMarketing)
                .HasDefaultValue(true)
                .HasColumnName("pr_DaneOsoboweMarketing");
            entity.Property(e => e.PrDaneOsobowePrzetwarzanie)
                .HasDefaultValue(true)
                .HasColumnName("pr_DaneOsobowePrzetwarzanie");
            entity.Property(e => e.PrDataObowiazywania)
                .HasColumnType("datetime")
                .HasColumnName("pr_DataObowiazywania");
            entity.Property(e => e.PrDataPrzystapieniaDoNfz)
                .HasColumnType("datetime")
                .HasColumnName("pr_DataPrzystapieniaDoNFZ");
            entity.Property(e => e.PrDataUkonczeniaSzkoly)
                .HasColumnType("datetime")
                .HasColumnName("pr_DataUkonczeniaSzkoly");
            entity.Property(e => e.PrDataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("pr_DataUrodzenia");
            entity.Property(e => e.PrDniDodatkowyUrlop).HasColumnName("pr_DniDodatkowyUrlop");
            entity.Property(e => e.PrDtdataWydania)
                .HasColumnType("datetime")
                .HasColumnName("pr_DTDataWydania");
            entity.Property(e => e.PrDtnr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_DTNr");
            entity.Property(e => e.PrDtnrDlaCudzoziemcow)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_DTNrDlaCudzoziemcow");
            entity.Property(e => e.PrDtwydanyPrzez)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_DTWydanyPrzez");
            entity.Property(e => e.PrEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_EMail");
            entity.Property(e => e.PrGospodarstwoZpracodawca).HasColumnName("pr_GospodarstwoZPracodawca");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.PrIdObywatelstwa).HasColumnName("pr_IdObywatelstwa");
            entity.Property(e => e.PrIdRachunkuWirtualnego).HasColumnName("pr_IdRachunkuWirtualnego");
            entity.Property(e => e.PrIdStanuCywilnego).HasColumnName("pr_IdStanuCywilnego");
            entity.Property(e => e.PrIdUrzeduSkarbowego).HasColumnName("pr_IdUrzeduSkarbowego");
            entity.Property(e => e.PrIdentyfikacjaPodatkowa)
                .HasDefaultValue(2)
                .HasColumnName("pr_IdentyfikacjaPodatkowa");
            entity.Property(e => e.PrIdentyfikacjaPodatkowaMal)
                .HasDefaultValue(2)
                .HasColumnName("pr_IdentyfikacjaPodatkowaMal");
            entity.Property(e => e.PrImie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_Imie");
            entity.Property(e => e.PrImie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_Imie2");
            entity.Property(e => e.PrImieMatki)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_ImieMatki");
            entity.Property(e => e.PrImieOjca)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_ImieOjca");
            entity.Property(e => e.PrKartaPobytuCzasowego).HasColumnName("pr_KartaPobytuCzasowego");
            entity.Property(e => e.PrKartaPobytuStalego).HasColumnName("pr_KartaPobytuStalego");
            entity.Property(e => e.PrLiczbaLatNauki).HasColumnName("pr_LiczbaLatNauki");
            entity.Property(e => e.PrMiejsceUrodzenia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_MiejsceUrodzenia");
            entity.Property(e => e.PrNarodowosc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_Narodowosc");
            entity.Property(e => e.PrNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_Nazwisko");
            entity.Property(e => e.PrNazwiskoRodowe)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_NazwiskoRodowe");
            entity.Property(e => e.PrNazwiskoRodoweMatki)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_NazwiskoRodoweMatki");
            entity.Property(e => e.PrNieOgraniczajKosztyAutorskie).HasColumnName("pr_NieOgraniczajKosztyAutorskie");
            entity.Property(e => e.PrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_NIP");
            entity.Property(e => e.PrNrAnalityki)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_NrAnalityki");
            entity.Property(e => e.PrNrKsiazeczkiWojskowej)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_NrKsiazeczkiWojskowej");
            entity.Property(e => e.PrNrSpecjalnosciWojskowej)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_NrSpecjalnosciWojskowej");
            entity.Property(e => e.PrObowiazekObrony)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_ObowiazekObrony");
            entity.Property(e => e.PrObywatelstwo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_Obywatelstwo");
            entity.Property(e => e.PrOddzialNfz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pr_OddzialNFZ");
            entity.Property(e => e.PrPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_PESEL");
            entity.Property(e => e.PrPlec).HasColumnName("pr_Plec");
            entity.Property(e => e.PrPokrewienstwoZpracodawca)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pr_PokrewienstwoZPracodawca");
            entity.Property(e => e.PrPomijajPoprzOkrZatrWfirmie).HasColumnName("pr_PomijajPoprzOkrZatrWFirmie");
            entity.Property(e => e.PrPrawoDoEmer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pr_PrawoDoEmer");
            entity.Property(e => e.PrRodzajUbezp).HasColumnName("pr_RodzajUbezp");
            entity.Property(e => e.PrRokUkonczeniaSzkoly).HasColumnName("pr_RokUkonczeniaSzkoly");
            entity.Property(e => e.PrRozliczanieZmalzonkiem).HasColumnName("pr_RozliczanieZMalzonkiem");
            entity.Property(e => e.PrStNiepelnosprawnosciDataDo)
                .HasColumnType("datetime")
                .HasColumnName("pr_StNiepelnosprawnosciDataDo");
            entity.Property(e => e.PrStNiepelnosprawnosciDataOd)
                .HasColumnType("datetime")
                .HasColumnName("pr_StNiepelnosprawnosciDataOd");
            entity.Property(e => e.PrStNiezdolnosciDataDo)
                .HasColumnType("datetime")
                .HasColumnName("pr_StNiezdolnosciDataDo");
            entity.Property(e => e.PrStNiezdolnosciDataOd)
                .HasColumnType("datetime")
                .HasColumnName("pr_StNiezdolnosciDataOd");
            entity.Property(e => e.PrStopienNiepelnosprawnosci)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pr_StopienNiepelnosprawnosci");
            entity.Property(e => e.PrStopienNiezdolnosciDoPracy)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pr_StopienNiezdolnosciDoPracy");
            entity.Property(e => e.PrStopienWojskowy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_StopienWojskowy");
            entity.Property(e => e.PrSzczegolneSchorzenia).HasColumnName("pr_SzczegolneSchorzenia");
            entity.Property(e => e.PrTypIdentyfikatora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pr_TypIdentyfikatora");
            entity.Property(e => e.PrTypIdentyfikatoraDlaCudzoziemcow).HasColumnName("pr_TypIdentyfikatoraDlaCudzoziemcow");
            entity.Property(e => e.PrUkonczonaSzkola)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_UkonczonaSzkola");
            entity.Property(e => e.PrUzywajAdresKorespondencyjny).HasColumnName("pr_UzywajAdresKorespondencyjny");
            entity.Property(e => e.PrUzywajAdresZameldowania).HasColumnName("pr_UzywajAdresZameldowania");
            entity.Property(e => e.PrWku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_WKU");
            entity.Property(e => e.PrWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_WWW");
            entity.Property(e => e.PrWyksztalcenie)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pr_Wyksztalcenie");
            entity.Property(e => e.PrZawodWyuczony)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pr_ZawodWyuczony");
            entity.Property(e => e.PrZwolnienieZeSkladekFpiFgspdo)
                .HasColumnType("datetime")
                .HasColumnName("pr_ZwolnienieZeSkladekFPiFGSPDo");
            entity.Property(e => e.PrZwolnienieZeSkladekFpiFgspod)
                .HasColumnType("datetime")
                .HasColumnName("pr_ZwolnienieZeSkladekFPiFGSPOd");
            entity.Property(e => e.PrZwolnienieZpodatku)
                .HasDefaultValue(true)
                .HasColumnName("pr_ZwolnienieZPodatku");

            entity.HasOne(d => d.PrIdGrupyNavigation).WithMany(p => p.PrPracowniks)
                .HasForeignKey(d => d.PrIdGrupy)
                .HasConstraintName("FK_pr_Pracownik_sl_GrupaPrac");

            entity.HasOne(d => d.PrIdObywatelstwaNavigation).WithMany(p => p.PrPracowniks)
                .HasForeignKey(d => d.PrIdObywatelstwa)
                .HasConstraintName("FK_pr_Pracownik_sl_Obywatelstwo");

            entity.HasOne(d => d.PrIdRachunkuWirtualnegoNavigation).WithMany(p => p.PrPracowniks)
                .HasForeignKey(d => d.PrIdRachunkuWirtualnego)
                .HasConstraintName("FK_pr_Pracownik_rb_RachBankowyWirtualny");

            entity.HasOne(d => d.PrIdStanuCywilnegoNavigation).WithMany(p => p.PrPracowniks)
                .HasForeignKey(d => d.PrIdStanuCywilnego)
                .HasConstraintName("FK_pr_Pracownicy_sl_StanyCywilne");

            entity.HasOne(d => d.PrIdUrzeduSkarbowegoNavigation).WithMany(p => p.PrPracowniks)
                .HasForeignKey(d => d.PrIdUrzeduSkarbowego)
                .HasConstraintName("FK_pr_Pracownik_is__Instytucja");

            entity.HasOne(d => d.PrOddzialNfzNavigation).WithMany(p => p.PrPracowniks)
                .HasPrincipalKey(p => p.OnfzKod)
                .HasForeignKey(d => d.PrOddzialNfz)
                .HasConstraintName("FK_pr_Pracownik_sl_OddzialNFZ");

            entity.HasOne(d => d.PrPokrewienstwoZpracodawcaNavigation).WithMany(p => p.PrPracowniks)
                .HasPrincipalKey(p => p.PokrKod)
                .HasForeignKey(d => d.PrPokrewienstwoZpracodawca)
                .HasConstraintName("FK_pr_Pracownik_sl_Pokrewienstwo");

            entity.HasOne(d => d.PrPrawoDoEmerNavigation).WithMany(p => p.PrPracowniks)
                .HasPrincipalKey(p => p.PdeKod)
                .HasForeignKey(d => d.PrPrawoDoEmer)
                .HasConstraintName("FK_pr_Pracownik_sl_PrawoDoEmerytury");

            entity.HasOne(d => d.PrStopienNiepelnosprawnosciNavigation).WithMany(p => p.PrPracowniks)
                .HasPrincipalKey(p => p.StnKod)
                .HasForeignKey(d => d.PrStopienNiepelnosprawnosci)
                .HasConstraintName("FK_pr_Pracownik_sl_StopienNiepelnosprawnosci");

            entity.HasOne(d => d.PrStopienNiezdolnosciDoPracyNavigation).WithMany(p => p.PrPracowniks)
                .HasPrincipalKey(p => p.StnpKod)
                .HasForeignKey(d => d.PrStopienNiezdolnosciDoPracy)
                .HasConstraintName("FK_pr_Pracownik_sl_StopienNiezdolnosciDoPracy");

            entity.HasOne(d => d.PrTypIdentyfikatoraNavigation).WithMany(p => p.PrPracowniks)
                .HasPrincipalKey(p => p.TidKod)
                .HasForeignKey(d => d.PrTypIdentyfikatora)
                .HasConstraintName("FK_pr_Pracownik_sl_TypIdentyfikatora");

            entity.HasOne(d => d.PrWyksztalcenieNavigation).WithMany(p => p.PrPracowniks)
                .HasPrincipalKey(p => p.WykKod)
                .HasForeignKey(d => d.PrWyksztalcenie)
                .HasConstraintName("FK_pr_Pracownik_sl_Wyksztalcenie");
        });

        modelBuilder.Entity<PrRezygnacjaPpk>(entity =>
        {
            entity.HasKey(e => e.PpkrId);

            entity.ToTable("pr_RezygnacjaPPK");

            entity.Property(e => e.PpkrId)
                .ValueGeneratedNever()
                .HasColumnName("ppkr_Id");
            entity.Property(e => e.PpkrDataDeklaracji)
                .HasColumnType("datetime")
                .HasColumnName("ppkr_DataDeklaracji");
            entity.Property(e => e.PpkrIdDeklaracji).HasColumnName("ppkr_IdDeklaracji");
            entity.Property(e => e.PpkrIdPrac).HasColumnName("ppkr_IdPrac");
            entity.Property(e => e.PpkrMiesiacWznowieniaNaliczaniaWplat)
                .HasColumnType("datetime")
                .HasColumnName("ppkr_MiesiacWznowieniaNaliczaniaWplat");
            entity.Property(e => e.PpkrMiesiacZaprzestaniaNaliczaniaWplat)
                .HasColumnType("datetime")
                .HasColumnName("ppkr_MiesiacZaprzestaniaNaliczaniaWplat");
            entity.Property(e => e.PpkrStatus).HasColumnName("ppkr_Status");

            entity.HasOne(d => d.PpkrIdDeklaracjiNavigation).WithMany(p => p.PrRezygnacjaPpks)
                .HasForeignKey(d => d.PpkrIdDeklaracji)
                .HasConstraintName("FK_pr_RezygnacjaPPK_dekl__Ewid");

            entity.HasOne(d => d.PpkrIdPracNavigation).WithMany(p => p.PrRezygnacjaPpks)
                .HasForeignKey(d => d.PpkrIdPrac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_RezygnacjaPPK_pr_Pracownik");
        });

        modelBuilder.Entity<PrRodzina>(entity =>
        {
            entity.HasKey(e => e.ProId);

            entity.ToTable("pr_Rodzina");

            entity.Property(e => e.ProId)
                .ValueGeneratedNever()
                .HasColumnName("pro_Id");
            entity.Property(e => e.ProBlizniak)
                .HasDefaultValue(false)
                .HasColumnName("pro_Blizniak");
            entity.Property(e => e.ProCzesciWykorzystaneOjcowski).HasColumnName("pro_CzesciWykorzystaneOjcowski");
            entity.Property(e => e.ProCzesciWykorzystaneRodzicielski).HasColumnName("pro_CzesciWykorzystaneRodzicielski");
            entity.Property(e => e.ProCzesciWykorzystaneWychowawczy).HasColumnName("pro_CzesciWykorzystaneWychowawczy");
            entity.Property(e => e.ProDataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("pro_DataUrodzenia");
            entity.Property(e => e.ProDataZakOjc)
                .HasColumnType("datetime")
                .HasColumnName("pro_DataZakOjc");
            entity.Property(e => e.ProDataZakRodz)
                .HasColumnType("datetime")
                .HasColumnName("pro_DataZakRodz");
            entity.Property(e => e.ProDataZakWych)
                .HasColumnType("datetime")
                .HasColumnName("pro_DataZakWych");
            entity.Property(e => e.ProDniWykorzystaneRodzicielski).HasColumnName("pro_DniWykorzystaneRodzicielski");
            entity.Property(e => e.ProDniWykorzystaneWychowawczy).HasColumnName("pro_DniWykorzystaneWychowawczy");
            entity.Property(e => e.ProDtnr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pro_DTNr");
            entity.Property(e => e.ProGospodarstwoZpracownikiem).HasColumnName("pro_GospodarstwoZPracownikiem");
            entity.Property(e => e.ProIdPracownika).HasColumnName("pro_IdPracownika");
            entity.Property(e => e.ProImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pro_Imie");
            entity.Property(e => e.ProImie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pro_Imie2");
            entity.Property(e => e.ProMscWykorzystaneWychowawczy).HasColumnName("pro_MscWykorzystaneWychowawczy");
            entity.Property(e => e.ProNaUtrzymaniuPracownika).HasColumnName("pro_NaUtrzymaniuPracownika");
            entity.Property(e => e.ProNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pro_Nazwisko");
            entity.Property(e => e.ProNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pro_NIP");
            entity.Property(e => e.ProPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pro_PESEL");
            entity.Property(e => e.ProPodstPrawnaRodz)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("pro_PodstPrawnaRodz");
            entity.Property(e => e.ProPodstPrawnaWych)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("pro_PodstPrawnaWych");
            entity.Property(e => e.ProPokrewienstwo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pro_Pokrewienstwo");
            entity.Property(e => e.ProStopienNiepelnosprawnosci)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pro_StopienNiepelnosprawnosci");
            entity.Property(e => e.ProTygWykorzystaneOjcowski).HasColumnName("pro_TygWykorzystaneOjcowski");
            entity.Property(e => e.ProTygWykorzystaneRodzicielski).HasColumnName("pro_TygWykorzystaneRodzicielski");
            entity.Property(e => e.ProTygWykorzystaneWychowawczy).HasColumnName("pro_TygWykorzystaneWychowawczy");
            entity.Property(e => e.ProTypIdentyfikatora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pro_TypIdentyfikatora");
            entity.Property(e => e.ProUlgaNaWychowywanieDzieci).HasColumnName("pro_UlgaNaWychowywanieDzieci");
            entity.Property(e => e.ProZasilekPielegnacyjny).HasColumnName("pro_ZasilekPielegnacyjny");
            entity.Property(e => e.ProZasilekRodzinny).HasColumnName("pro_ZasilekRodzinny");

            entity.HasOne(d => d.ProIdPracownikaNavigation).WithMany(p => p.PrRodzinas)
                .HasForeignKey(d => d.ProIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Rodzina_pr_Pracownik");
        });

        modelBuilder.Entity<PrUlgi>(entity =>
        {
            entity.HasKey(e => e.PuId);

            entity.ToTable("pr_Ulgi");

            entity.Property(e => e.PuId)
                .ValueGeneratedNever()
                .HasColumnName("pu_Id");
            entity.Property(e => e.PuIdPracownika).HasColumnName("pu_IdPracownika");
            entity.Property(e => e.PuRodzajUlgi).HasColumnName("pu_RodzajUlgi");
            entity.Property(e => e.PuUlgaDo)
                .HasColumnType("datetime")
                .HasColumnName("pu_UlgaDo");
            entity.Property(e => e.PuUlgaOd)
                .HasColumnType("datetime")
                .HasColumnName("pu_UlgaOd");

            entity.HasOne(d => d.PuIdPracownikaNavigation).WithMany(p => p.PrUlgis)
                .HasForeignKey(d => d.PuIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Ulgi_pr_Pracownik");
        });

        modelBuilder.Entity<PrUprawnienium>(entity =>
        {
            entity.HasKey(e => e.PupId);

            entity.ToTable("pr_Uprawnienia");

            entity.HasIndex(e => e.PupIdPracownika, "IX_pr_Uprawnienia_IdPracownika");

            entity.Property(e => e.PupId)
                .ValueGeneratedNever()
                .HasColumnName("pup_Id");
            entity.Property(e => e.PupDataUzyskania)
                .HasColumnType("datetime")
                .HasColumnName("pup_DataUzyskania");
            entity.Property(e => e.PupDataWaznosci)
                .HasColumnType("datetime")
                .HasColumnName("pup_DataWaznosci");
            entity.Property(e => e.PupIdPracownika).HasColumnName("pup_IdPracownika");
            entity.Property(e => e.PupIdUprawnienia).HasColumnName("pup_IdUprawnienia");

            entity.HasOne(d => d.PupIdPracownikaNavigation).WithMany(p => p.PrUprawnienia)
                .HasForeignKey(d => d.PupIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Uprawnienia_pr_Pracownik");

            entity.HasOne(d => d.PupIdUprawnieniaNavigation).WithMany(p => p.PrUprawnienia)
                .HasForeignKey(d => d.PupIdUprawnienia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Uprawnienia_sl_Uprawnienie");
        });

        modelBuilder.Entity<PrUrlopy>(entity =>
        {
            entity.HasKey(e => e.PurId);

            entity.ToTable("pr_Urlopy");

            entity.HasIndex(e => new { e.PurIdPracownika, e.PurRok }, "IX_pr_Urlopy_IdPracownika_Rok").IsUnique();

            entity.Property(e => e.PurId)
                .ValueGeneratedNever()
                .HasColumnName("pur_Id");
            entity.Property(e => e.PurIdPracownika).HasColumnName("pur_IdPracownika");
            entity.Property(e => e.PurRok).HasColumnName("pur_Rok");
            entity.Property(e => e.PurWymiarUrlopu).HasColumnName("pur_WymiarUrlopu");
            entity.Property(e => e.PurZaleglyUrlop).HasColumnName("pur_ZaleglyUrlop");

            entity.HasOne(d => d.PurIdPracownikaNavigation).WithMany(p => p.PrUrlopies)
                .HasForeignKey(d => d.PurIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Urlopy_pr_Pracownik");
        });

        modelBuilder.Entity<PrZatrudnienie>(entity =>
        {
            entity.HasKey(e => e.PzaId);

            entity.ToTable("pr_Zatrudnienie");

            entity.HasIndex(e => e.PzaIdPracownika, "IX_pr_Zatrudnienie_IdPracownika");

            entity.HasIndex(e => e.PzaIdPowoduRozwUmowy, "IX_pr_Zatrudnienie_Powod");

            entity.HasIndex(e => e.PzaStanowisko, "IX_pr_Zatrudnienie_Stanowisko");

            entity.Property(e => e.PzaId)
                .ValueGeneratedNever()
                .HasColumnName("pza_Id");
            entity.Property(e => e.PzaDataDo)
                .HasColumnType("datetime")
                .HasColumnName("pza_DataDo");
            entity.Property(e => e.PzaDataOd)
                .HasColumnType("datetime")
                .HasColumnName("pza_DataOd");
            entity.Property(e => e.PzaDniChoroby).HasColumnName("pza_DniChoroby");
            entity.Property(e => e.PzaDniOpiekiNadDzieckiem).HasColumnName("pza_DniOpiekiNadDzieckiem");
            entity.Property(e => e.PzaDniPracyZdalnejOkazjonalnej).HasColumnName("pza_DniPracyZdalnejOkazjonalnej");
            entity.Property(e => e.PzaDniUrlopuOpiekunczego).HasColumnName("pza_DniUrlopuOpiekunczego");
            entity.Property(e => e.PzaDniUrlopuSilaWyzsza).HasColumnName("pza_DniUrlopuSilaWyzsza");
            entity.Property(e => e.PzaDniUrlopuWyp).HasColumnName("pza_DniUrlopuWyp");
            entity.Property(e => e.PzaDniUrlopuWypNaZadanie).HasColumnName("pza_DniUrlopuWypNaZadanie");
            entity.Property(e => e.PzaGodzinOpiekiNadDzieckiem).HasColumnName("pza_GodzinOpiekiNadDzieckiem");
            entity.Property(e => e.PzaGodzinyUrlopuSilaWyzsza).HasColumnName("pza_GodzinyUrlopuSilaWyzsza");
            entity.Property(e => e.PzaIdPowoduRozwUmowy).HasColumnName("pza_IdPowoduRozwUmowy");
            entity.Property(e => e.PzaIdPracownika).HasColumnName("pza_IdPracownika");
            entity.Property(e => e.PzaIdZawodu).HasColumnName("pza_IdZawodu");
            entity.Property(e => e.PzaMiejsce)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pza_Miejsce");
            entity.Property(e => e.PzaStanowisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pza_Stanowisko");
            entity.Property(e => e.PzaWliczajDoLatStazuWfirmie).HasColumnName("pza_WliczajDoLatStazuWFirmie");
            entity.Property(e => e.PzaWliczajDoStazu)
                .HasDefaultValue(true)
                .HasColumnName("pza_WliczajDoStazu");

            entity.HasOne(d => d.PzaIdPowoduRozwUmowyNavigation).WithMany(p => p.PrZatrudnienies)
                .HasForeignKey(d => d.PzaIdPowoduRozwUmowy)
                .HasConstraintName("FK_pr_Zatrudnienie_sl_GratPrzyczynaRozwUmowy");

            entity.HasOne(d => d.PzaIdPracownikaNavigation).WithMany(p => p.PrZatrudnienies)
                .HasForeignKey(d => d.PzaIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Zatrudnienie_pr_Pracownik");

            entity.HasOne(d => d.PzaIdZawoduNavigation).WithMany(p => p.PrZatrudnienies)
                .HasForeignKey(d => d.PzaIdZawodu)
                .HasConstraintName("FK_pr_Zatrudnienie_sl_Zawod");
        });

        modelBuilder.Entity<PrZdjecie>(entity =>
        {
            entity.HasKey(e => e.PzdId);

            entity.ToTable("pr_Zdjecie");

            entity.Property(e => e.PzdId)
                .ValueGeneratedNever()
                .HasColumnName("pzd_Id");
            entity.Property(e => e.PzdGlowne)
                .HasDefaultValue(true)
                .HasColumnName("pzd_Glowne");
            entity.Property(e => e.PzdPracownikId).HasColumnName("pzd_PracownikId");
            entity.Property(e => e.PzdZdjecie)
                .HasColumnType("image")
                .HasColumnName("pzd_Zdjecie");

            entity.HasOne(d => d.PzdPracownik).WithMany(p => p.PrZdjecies)
                .HasForeignKey(d => d.PzdPracownikId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_Zdjecie_pr_Pracownik");
        });

        modelBuilder.Entity<PrZwolnienieZpodatku>(entity =>
        {
            entity.HasKey(e => e.PrzzpId);

            entity.ToTable("pr_ZwolnienieZPodatku");

            entity.Property(e => e.PrzzpId).HasColumnName("przzp_Id");
            entity.Property(e => e.PrzzpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("przzp_DataDo");
            entity.Property(e => e.PrzzpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("przzp_DataOd");
            entity.Property(e => e.PrzzpPracownik).HasColumnName("przzp_Pracownik");

            entity.HasOne(d => d.PrzzpPracownikNavigation).WithMany(p => p.PrZwolnienieZpodatkus)
                .HasForeignKey(d => d.PrzzpPracownik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pr_ZwolnienieZPodatku_pr_Pracownik");
        });

        modelBuilder.Entity<PrmPromocje>(entity =>
        {
            entity.HasKey(e => e.PrmId);

            entity.ToTable("prm__Promocje");

            entity.Property(e => e.PrmId)
                .ValueGeneratedNever()
                .HasColumnName("prm_Id");
            entity.Property(e => e.PrmAkcjaCena)
                .HasColumnType("money")
                .HasColumnName("prm_AkcjaCena");
            entity.Property(e => e.PrmAkcjaCenaRodzaj).HasColumnName("prm_AkcjaCenaRodzaj");
            entity.Property(e => e.PrmAkcjaCenyTyp).HasColumnName("prm_AkcjaCenyTyp");
            entity.Property(e => e.PrmAkcjaCoNty)
                .HasDefaultValue(1)
                .HasColumnName("prm_AkcjaCoNty");
            entity.Property(e => e.PrmAkcjaIlosc)
                .HasColumnType("money")
                .HasColumnName("prm_AkcjaIlosc");
            entity.Property(e => e.PrmAkcjaKwota)
                .HasColumnType("money")
                .HasColumnName("prm_AkcjaKwota");
            entity.Property(e => e.PrmAkcjaProcent)
                .HasColumnType("money")
                .HasColumnName("prm_AkcjaProcent");
            entity.Property(e => e.PrmAkcjaTowaryTyp).HasColumnName("prm_AkcjaTowaryTyp");
            entity.Property(e => e.PrmAkcjaTwAndOr)
                .HasDefaultValue(true)
                .HasColumnName("prm_AkcjaTwAndOr");
            entity.Property(e => e.PrmAkcjaTwCechy).HasColumnName("prm_AkcjaTwCechy");
            entity.Property(e => e.PrmAkcjaTwGrupy).HasColumnName("prm_AkcjaTwGrupy");
            entity.Property(e => e.PrmAkcjaTwIloscTwNaDokumencie)
                .HasColumnType("money")
                .HasColumnName("prm_AkcjaTwIloscTwNaDokumencie");
            entity.Property(e => e.PrmAkcjaTwIloscTwNaDokumencieOsobno).HasColumnName("prm_AkcjaTwIloscTwNaDokumencieOsobno");
            entity.Property(e => e.PrmAkcjaTwLista).HasColumnName("prm_AkcjaTwLista");
            entity.Property(e => e.PrmAkcjaTwPowyzejStMin).HasColumnName("prm_AkcjaTwPowyzejStMin");
            entity.Property(e => e.PrmAkcjaTwSql).HasColumnName("prm_AkcjaTwSQL");
            entity.Property(e => e.PrmAkcjaTwSqlquery)
                .HasColumnType("text")
                .HasColumnName("prm_AkcjaTwSQLquery");
            entity.Property(e => e.PrmAkcjaTwStProcWyzszyStMin)
                .HasColumnType("money")
                .HasColumnName("prm_AkcjaTwStProcWyzszyStMin");
            entity.Property(e => e.PrmAkcjaTwStWartWyzszyStMin)
                .HasColumnType("money")
                .HasColumnName("prm_AkcjaTwStWartWyzszyStMin");
            entity.Property(e => e.PrmAkcjaTwWartTwNaDokumencie)
                .HasColumnType("money")
                .HasColumnName("prm_AkcjaTwWartTwNaDokumencie");
            entity.Property(e => e.PrmAkcjaTwWartTwNaDokumencieOsobno).HasColumnName("prm_AkcjaTwWartTwNaDokumencieOsobno");
            entity.Property(e => e.PrmCalyDzien).HasColumnName("prm_CalyDzien");
            entity.Property(e => e.PrmCoIle)
                .HasDefaultValue(1)
                .HasColumnName("prm_CoIle");
            entity.Property(e => e.PrmDefinicjaZlozona)
                .HasDefaultValue(false)
                .HasColumnName("prm_DefinicjaZlozona");
            entity.Property(e => e.PrmDniTygodnia).HasColumnName("prm_DniTygodnia");
            entity.Property(e => e.PrmDo)
                .HasColumnType("datetime")
                .HasColumnName("prm_Do");
            entity.Property(e => e.PrmDzienMiesiaca).HasColumnName("prm_DzienMiesiaca");
            entity.Property(e => e.PrmDzienPorzadek).HasColumnName("prm_DzienPorzadek");
            entity.Property(e => e.PrmDzienRodzaj).HasColumnName("prm_DzienRodzaj");
            entity.Property(e => e.PrmIlePowtorzen).HasColumnName("prm_IlePowtorzen");
            entity.Property(e => e.PrmIlePowtorzenWdniach)
                .HasDefaultValue(true)
                .HasColumnName("prm_IlePowtorzenWDniach");
            entity.Property(e => e.PrmInterwal).HasColumnName("prm_Interwal");
            entity.Property(e => e.PrmKoniecPowtorzen)
                .HasColumnType("datetime")
                .HasColumnName("prm_KoniecPowtorzen");
            entity.Property(e => e.PrmKrytDok).HasColumnName("prm_KrytDok");
            entity.Property(e => e.PrmKrytDokIdPlatnosci).HasColumnName("prm_KrytDokIdPlatnosci");
            entity.Property(e => e.PrmKrytDokNpierwszychKh).HasColumnName("prm_KrytDokNpierwszychKh");
            entity.Property(e => e.PrmKrytDokTypFormyPlatnosci).HasColumnName("prm_KrytDokTypFormyPlatnosci");
            entity.Property(e => e.PrmKrytDokTypWartosci).HasColumnName("prm_KrytDokTypWartosci");
            entity.Property(e => e.PrmKrytDokWartosc)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("prm_KrytDokWartosc");
            entity.Property(e => e.PrmKrytKh).HasColumnName("prm_KrytKh");
            entity.Property(e => e.PrmKrytKhAndOr)
                .HasDefaultValue(true)
                .HasColumnName("prm_KrytKhAndOr");
            entity.Property(e => e.PrmKrytKhCechy).HasColumnName("prm_KrytKhCechy");
            entity.Property(e => e.PrmKrytKhGrupy).HasColumnName("prm_KrytKhGrupy");
            entity.Property(e => e.PrmKrytKhLista).HasColumnName("prm_KrytKhLista");
            entity.Property(e => e.PrmKrytKhMaskaKoduPoczt)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("prm_KrytKhMaskaKoduPoczt");
            entity.Property(e => e.PrmKrytKhObrotOstMies)
                .HasColumnType("money")
                .HasColumnName("prm_KrytKhObrotOstMies");
            entity.Property(e => e.PrmKrytKhSql).HasColumnName("prm_KrytKhSQL");
            entity.Property(e => e.PrmKrytKhSqlquery)
                .HasColumnType("text")
                .HasColumnName("prm_KrytKhSQLquery");
            entity.Property(e => e.PrmKrytMag).HasColumnName("prm_KrytMag");
            entity.Property(e => e.PrmKrytTw).HasColumnName("prm_KrytTw");
            entity.Property(e => e.PrmKrytTwAndOr)
                .HasDefaultValue(true)
                .HasColumnName("prm_KrytTwAndOr");
            entity.Property(e => e.PrmKrytTwCechy).HasColumnName("prm_KrytTwCechy");
            entity.Property(e => e.PrmKrytTwGrupy).HasColumnName("prm_KrytTwGrupy");
            entity.Property(e => e.PrmKrytTwIloscTwNaDokumencie)
                .HasColumnType("money")
                .HasColumnName("prm_KrytTwIloscTwNaDokumencie");
            entity.Property(e => e.PrmKrytTwIloscTwNaDokumencieOsobno).HasColumnName("prm_KrytTwIloscTwNaDokumencieOsobno");
            entity.Property(e => e.PrmKrytTwLista).HasColumnName("prm_KrytTwLista");
            entity.Property(e => e.PrmKrytTwListaDowolny)
                .HasDefaultValue(true)
                .HasColumnName("prm_KrytTwListaDowolny");
            entity.Property(e => e.PrmKrytTwPowyzejStMin).HasColumnName("prm_KrytTwPowyzejStMin");
            entity.Property(e => e.PrmKrytTwSql).HasColumnName("prm_KrytTwSQL");
            entity.Property(e => e.PrmKrytTwSqlquery)
                .HasColumnType("text")
                .HasColumnName("prm_KrytTwSQLquery");
            entity.Property(e => e.PrmKrytTwStProcWyzszyStMin)
                .HasColumnType("money")
                .HasColumnName("prm_KrytTwStProcWyzszyStMin");
            entity.Property(e => e.PrmKrytTwStWartWyzszyStMin)
                .HasColumnType("money")
                .HasColumnName("prm_KrytTwStWartWyzszyStMin");
            entity.Property(e => e.PrmKrytTwWartTwNaDokumencie)
                .HasColumnType("money")
                .HasColumnName("prm_KrytTwWartTwNaDokumencie");
            entity.Property(e => e.PrmKrytTwWartTwNaDokumencieOsobno).HasColumnName("prm_KrytTwWartTwNaDokumencieOsobno");
            entity.Property(e => e.PrmKumulujeSie)
                .HasDefaultValue(true)
                .HasColumnName("prm_KumulujeSie");
            entity.Property(e => e.PrmMiesiac).HasColumnName("prm_Miesiac");
            entity.Property(e => e.PrmNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prm_Nazwa");
            entity.Property(e => e.PrmNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("prm_NazwaPelna");
            entity.Property(e => e.PrmNieaktywna)
                .HasDefaultValue(false)
                .HasColumnName("prm_Nieaktywna");
            entity.Property(e => e.PrmOd)
                .HasColumnType("datetime")
                .HasColumnName("prm_Od");
            entity.Property(e => e.PrmOgraniczonaCzasowo)
                .HasDefaultValue(true)
                .HasColumnName("prm_OgraniczonaCzasowo");
            entity.Property(e => e.PrmPoczatekZcyklu)
                .HasColumnType("datetime")
                .HasColumnName("prm_PoczatekZCyklu");
            entity.Property(e => e.PrmPriorytet).HasColumnName("prm_Priorytet");
            entity.Property(e => e.PrmRobocze).HasColumnName("prm_Robocze");
            entity.Property(e => e.PrmRodzajPowtorzen).HasColumnName("prm_RodzajPowtorzen");
            entity.Property(e => e.PrmTyp).HasColumnName("prm_Typ");
        });

        modelBuilder.Entity<PrmPromocjeAkcja>(entity =>
        {
            entity.HasKey(e => e.PrmaId);

            entity.ToTable("prm_PromocjeAkcja");

            entity.Property(e => e.PrmaId)
                .ValueGeneratedNever()
                .HasColumnName("prma_Id");
            entity.Property(e => e.PrmaIdPromocja).HasColumnName("prma_IdPromocja");
            entity.Property(e => e.PrmaIdent).HasColumnName("prma_Ident");
            entity.Property(e => e.PrmaTypIdent).HasColumnName("prma_TypIdent");

            entity.HasOne(d => d.PrmaIdPromocjaNavigation).WithMany(p => p.PrmPromocjeAkcjas)
                .HasForeignKey(d => d.PrmaIdPromocja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prm_PromocjeAkcja_prm__Promocje");
        });

        modelBuilder.Entity<PrmPromocjeKontrahent>(entity =>
        {
            entity.HasKey(e => e.PrmkId);

            entity.ToTable("prm_PromocjeKontrahent");

            entity.Property(e => e.PrmkId)
                .ValueGeneratedNever()
                .HasColumnName("prmk_Id");
            entity.Property(e => e.PrmkIdPromocja).HasColumnName("prmk_IdPromocja");
            entity.Property(e => e.PrmkIdent).HasColumnName("prmk_Ident");
            entity.Property(e => e.PrmkTypIdent).HasColumnName("prmk_TypIdent");

            entity.HasOne(d => d.PrmkIdPromocjaNavigation).WithMany(p => p.PrmPromocjeKontrahents)
                .HasForeignKey(d => d.PrmkIdPromocja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prm_PromocjeKontrahent_prm__Promocje");
        });

        modelBuilder.Entity<PrmPromocjeMagazyn>(entity =>
        {
            entity.HasKey(e => e.PrmmId);

            entity.ToTable("prm_PromocjeMagazyn");

            entity.Property(e => e.PrmmId)
                .ValueGeneratedNever()
                .HasColumnName("prmm_Id");
            entity.Property(e => e.PrmmIdPromocja).HasColumnName("prmm_IdPromocja");
            entity.Property(e => e.PrmmIdent).HasColumnName("prmm_Ident");

            entity.HasOne(d => d.PrmmIdPromocjaNavigation).WithMany(p => p.PrmPromocjeMagazyns)
                .HasForeignKey(d => d.PrmmIdPromocja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prm_PromocjeMagazyn_prm__Promocje");

            entity.HasOne(d => d.PrmmIdentNavigation).WithMany(p => p.PrmPromocjeMagazyns)
                .HasForeignKey(d => d.PrmmIdent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prm_PromocjeMagazyn_sl_Magazyn");
        });

        modelBuilder.Entity<PrmPromocjeParametr>(entity =>
        {
            entity.HasKey(e => e.PrmpId).HasName("PK__prm_PromocjeParametr");

            entity.ToTable("prm_PromocjeParametr");

            entity.Property(e => e.PrmpId)
                .ValueGeneratedNever()
                .HasColumnName("prmp_Id");
            entity.Property(e => e.PrmpParamEwidId).HasColumnName("prmp_ParamEwidId");

            entity.HasOne(d => d.PrmpParamEwid).WithMany(p => p.PrmPromocjeParametrs)
                .HasForeignKey(d => d.PrmpParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prm_PromocjeParametr_par__Ewid");
        });

        modelBuilder.Entity<PrmPromocjeParametrTyp>(entity =>
        {
            entity.HasKey(e => e.PrmptId).HasName("PK__prm_PromocjeParametrTyp");

            entity.ToTable("prm_PromocjeParametrTyp");

            entity.Property(e => e.PrmptId)
                .ValueGeneratedNever()
                .HasColumnName("prmpt_Id");
            entity.Property(e => e.PrmptCzasOtwarciaDokum).HasColumnName("prmpt_CzasOtwarciaDokum");
            entity.Property(e => e.PrmptDefiniowalnyId).HasColumnName("prmpt_DefiniowalnyId");
            entity.Property(e => e.PrmptParamEwidId).HasColumnName("prmpt_ParamEwidId");
            entity.Property(e => e.PrmptPodtyp).HasColumnName("prmpt_Podtyp");
            entity.Property(e => e.PrmptTryb).HasColumnName("prmpt_Tryb");
            entity.Property(e => e.PrmptTyp).HasColumnName("prmpt_Typ");
            entity.Property(e => e.PrmptUzyjPromocjiRoz).HasColumnName("prmpt_UzyjPromocjiRoz");
            entity.Property(e => e.PrmptZezwalajPrzenosic)
                .HasDefaultValue(true)
                .HasColumnName("prmpt_ZezwalajPrzenosic");
            entity.Property(e => e.PrmptZezwalajSprawdzac)
                .HasDefaultValue(true)
                .HasColumnName("prmpt_ZezwalajSprawdzac");
            entity.Property(e => e.PrmptZezwalajWycofac)
                .HasDefaultValue(true)
                .HasColumnName("prmpt_ZezwalajWycofac");
        });

        modelBuilder.Entity<PrmPromocjeTowar>(entity =>
        {
            entity.HasKey(e => e.PrmtId);

            entity.ToTable("prm_PromocjeTowar");

            entity.Property(e => e.PrmtId)
                .ValueGeneratedNever()
                .HasColumnName("prmt_Id");
            entity.Property(e => e.PrmtIdPromocja).HasColumnName("prmt_IdPromocja");
            entity.Property(e => e.PrmtIdent).HasColumnName("prmt_Ident");
            entity.Property(e => e.PrmtTypIdent).HasColumnName("prmt_TypIdent");

            entity.HasOne(d => d.PrmtIdPromocjaNavigation).WithMany(p => p.PrmPromocjeTowars)
                .HasForeignKey(d => d.PrmtIdPromocja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prm_PromocjeTowar_prm__Promocje");
        });

        modelBuilder.Entity<PrzDanePrzychodu>(entity =>
        {
            entity.HasKey(e => e.PrzdId);

            entity.ToTable("prz_DanePrzychodu");

            entity.Property(e => e.PrzdId)
                .ValueGeneratedNever()
                .HasColumnName("przd_Id");
            entity.Property(e => e.PrzdIdPrzychodu).HasColumnName("przd_IdPrzychodu");
            entity.Property(e => e.PrzdIdStawkiRyczaltu).HasColumnName("przd_IdStawkiRyczaltu");
            entity.Property(e => e.PrzdWartosc)
                .HasColumnType("money")
                .HasColumnName("przd_Wartosc");

            entity.HasOne(d => d.PrzdIdPrzychoduNavigation).WithMany(p => p.PrzDanePrzychodus)
                .HasForeignKey(d => d.PrzdIdPrzychodu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prz_DanePrzychodu_prz__Przychod");

            entity.HasOne(d => d.PrzdIdStawkiRyczaltuNavigation).WithMany(p => p.PrzDanePrzychodus)
                .HasForeignKey(d => d.PrzdIdStawkiRyczaltu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prz_DanePrzychodu_prz__StawkaRyczaltu");
        });

        modelBuilder.Entity<PrzObnizkaPodatku>(entity =>
        {
            entity.HasKey(e => e.ObpId);

            entity.ToTable("prz_ObnizkaPodatku");

            entity.Property(e => e.ObpId)
                .ValueGeneratedNever()
                .HasColumnName("obp_Id");
            entity.Property(e => e.ObpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("obp_DataDo");
            entity.Property(e => e.ObpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("obp_DataOd");
            entity.Property(e => e.ObpDataZapisu)
                .HasColumnType("datetime")
                .HasColumnName("obp_DataZapisu");
            entity.Property(e => e.ObpIdObiektu).HasColumnName("obp_IdObiektu");
            entity.Property(e => e.ObpIdRodzajuObnizki).HasColumnName("obp_IdRodzajuObnizki");
            entity.Property(e => e.ObpIdWspolnika).HasColumnName("obp_IdWspolnika");
            entity.Property(e => e.ObpKwota)
                .HasColumnType("money")
                .HasColumnName("obp_Kwota");
            entity.Property(e => e.ObpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("obp_Opis");
            entity.Property(e => e.ObpSposobOdliczania).HasColumnName("obp_SposobOdliczania");
            entity.Property(e => e.ObpTypObiektu).HasColumnName("obp_TypObiektu");

            entity.HasOne(d => d.ObpIdRodzajuObnizkiNavigation).WithMany(p => p.PrzObnizkaPodatkus)
                .HasForeignKey(d => d.ObpIdRodzajuObnizki)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prz_ObnizkaPodatku_sl_RodzajObnizki");

            entity.HasOne(d => d.ObpIdWspolnikaNavigation).WithMany(p => p.PrzObnizkaPodatkus)
                .HasForeignKey(d => d.ObpIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prz_ObnizkaPodatku_pd_Wspolnik");
        });

        modelBuilder.Entity<PrzOdliczenieDoliczenie>(entity =>
        {
            entity.HasKey(e => e.OdId);

            entity.ToTable("prz_OdliczenieDoliczenie");

            entity.Property(e => e.OdId)
                .ValueGeneratedNever()
                .HasColumnName("od_Id");
            entity.Property(e => e.OdDataDo)
                .HasColumnType("datetime")
                .HasColumnName("od_DataDo");
            entity.Property(e => e.OdDataOd)
                .HasColumnType("datetime")
                .HasColumnName("od_DataOd");
            entity.Property(e => e.OdDataZapisu)
                .HasColumnType("datetime")
                .HasColumnName("od_DataZapisu");
            entity.Property(e => e.OdIdObiektu).HasColumnName("od_IdObiektu");
            entity.Property(e => e.OdIdRodzajuOdliczenia).HasColumnName("od_IdRodzajuOdliczenia");
            entity.Property(e => e.OdIdWspolnika).HasColumnName("od_IdWspolnika");
            entity.Property(e => e.OdKwota)
                .HasColumnType("money")
                .HasColumnName("od_Kwota");
            entity.Property(e => e.OdOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("od_Opis");
            entity.Property(e => e.OdRodzaj).HasColumnName("od_Rodzaj");
            entity.Property(e => e.OdSposobOdliczania).HasColumnName("od_SposobOdliczania");
            entity.Property(e => e.OdTypObiektu).HasColumnName("od_TypObiektu");

            entity.HasOne(d => d.OdIdRodzajuOdliczeniaNavigation).WithMany(p => p.PrzOdliczenieDoliczenies)
                .HasForeignKey(d => d.OdIdRodzajuOdliczenia)
                .HasConstraintName("FK_prz_OdliczenieDoliczenie_sl_RodzajOdliczenia");

            entity.HasOne(d => d.OdIdWspolnikaNavigation).WithMany(p => p.PrzOdliczenieDoliczenies)
                .HasForeignKey(d => d.OdIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prz_OdliczenieDoliczenie_pd_Wspolnik");
        });

        modelBuilder.Entity<PrzParametr>(entity =>
        {
            entity.HasKey(e => e.PrzpId);

            entity.ToTable("prz_Parametr");

            entity.Property(e => e.PrzpId)
                .ValueGeneratedNever()
                .HasColumnName("przp_Id");
            entity.Property(e => e.PrzpBrakKontrahenta).HasColumnName("przp_BrakKontrahenta");
            entity.Property(e => e.PrzpDomyslnaStawkaVat)
                .HasDefaultValue(0)
                .HasColumnName("przp_DomyslnaStawkaVAT");
            entity.Property(e => e.PrzpIdKategoriiPrz).HasColumnName("przp_IdKategoriiPrz");
            entity.Property(e => e.PrzpIdKategoriiSn).HasColumnName("przp_IdKategoriiSN");
            entity.Property(e => e.PrzpKontrolaUniqNrDokumentu)
                .HasDefaultValue(true)
                .HasColumnName("przp_KontrolaUniqNrDokumentu");
            entity.Property(e => e.PrzpPrzepisywanieDtZapisu)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieDtZapisu");
            entity.Property(e => e.PrzpPrzepisywanieDtZdarzenia)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieDtZdarzenia");
            entity.Property(e => e.PrzpPrzepisywanieKategorii)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieKategorii");
            entity.Property(e => e.PrzpPrzepisywanieKh)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieKh");
            entity.Property(e => e.PrzpPrzepisywanieOpisu)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieOpisu");
            entity.Property(e => e.PrzpPrzepisywaniePanstwoKonsumpcji)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywaniePanstwoKonsumpcji");
            entity.Property(e => e.PrzpPrzepisywanieStawkaVat)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieStawkaVat");
            entity.Property(e => e.PrzpPrzepisywanieStawkaVatOss)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieStawkaVatOss");
            entity.Property(e => e.PrzpPrzepisywanieVat)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieVAT");
            entity.Property(e => e.PrzpPrzepisywanieVatOss)
                .HasDefaultValue(true)
                .HasColumnName("przp_PrzepisywanieVatOss");
            entity.Property(e => e.PrzpStawkiNaWydruku).HasColumnName("przp_StawkiNaWydruku");
            entity.Property(e => e.PrzpUkryjVatoss).HasColumnName("przp_UkryjVATOss");

            entity.HasOne(d => d.PrzpIdKategoriiPrzNavigation).WithMany(p => p.PrzParametrPrzpIdKategoriiPrzNavigations)
                .HasForeignKey(d => d.PrzpIdKategoriiPrz)
                .HasConstraintName("FK_prz_Parametr_sl_Kategoria");

            entity.HasOne(d => d.PrzpIdKategoriiSnNavigation).WithMany(p => p.PrzParametrPrzpIdKategoriiSnNavigations)
                .HasForeignKey(d => d.PrzpIdKategoriiSn)
                .HasConstraintName("FK_prz_Parametr_sl_Kategoria2");
        });

        modelBuilder.Entity<PrzPrzychod>(entity =>
        {
            entity.HasKey(e => e.PrzId);

            entity.ToTable("prz__Przychod");

            entity.Property(e => e.PrzId)
                .ValueGeneratedNever()
                .HasColumnName("prz_Id");
            entity.Property(e => e.PrzDataZapisu)
                .HasColumnType("datetime")
                .HasColumnName("prz_DataZapisu");
            entity.Property(e => e.PrzDataZdarzenia)
                .HasColumnType("datetime")
                .HasColumnName("prz_DataZdarzenia");
            entity.Property(e => e.PrzIdDokImport).HasColumnName("prz_IdDokImport");
            entity.Property(e => e.PrzIdKategorii).HasColumnName("prz_IdKategorii");
            entity.Property(e => e.PrzIdKh).HasColumnName("prz_IdKh");
            entity.Property(e => e.PrzIdObiektu).HasColumnName("prz_IdObiektu");
            entity.Property(e => e.PrzIdObiektuVatOss).HasColumnName("prz_IdObiektuVatOss");
            entity.Property(e => e.PrzIdOkresu).HasColumnName("prz_IdOkresu");
            entity.Property(e => e.PrzIdPanstwaKonsumpcji).HasColumnName("prz_IdPanstwaKonsumpcji");
            entity.Property(e => e.PrzImportowany).HasColumnName("prz_Importowany");
            entity.Property(e => e.PrzKodPocztowyKh)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_KodPocztowyKh");
            entity.Property(e => e.PrzKorektaSn).HasColumnName("prz_KorektaSN");
            entity.Property(e => e.PrzKwota)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("prz_Kwota");
            entity.Property(e => e.PrzMiastoKh)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_MiastoKh");
            entity.Property(e => e.PrzNazwaKh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_NazwaKh");
            entity.Property(e => e.PrzNazwaPelnaKh)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_NazwaPelnaKh");
            entity.Property(e => e.PrzNipkh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_NIPKh");
            entity.Property(e => e.PrzNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("prz_NrDokumentu");
            entity.Property(e => e.PrzNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("prz_NumerKSeF");
            entity.Property(e => e.PrzOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_Opis");
            entity.Property(e => e.PrzRodzaj).HasColumnName("prz_Rodzaj");
            entity.Property(e => e.PrzStawkaVat)
                .HasDefaultValue(0)
                .HasColumnName("prz_StawkaVAT");
            entity.Property(e => e.PrzStawkaVatOss)
                .HasDefaultValue(0)
                .HasColumnName("prz_StawkaVatOss");
            entity.Property(e => e.PrzSymbolKh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_SymbolKh");
            entity.Property(e => e.PrzTypDokImport).HasColumnName("prz_TypDokImport");
            entity.Property(e => e.PrzTypObiektu).HasColumnName("prz_TypObiektu");
            entity.Property(e => e.PrzUlicaKh)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_UlicaKh");
            entity.Property(e => e.PrzUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prz_Uwagi");

            entity.HasOne(d => d.PrzIdKategoriiNavigation).WithMany(p => p.PrzPrzychods)
                .HasForeignKey(d => d.PrzIdKategorii)
                .HasConstraintName("FK_prz__Przychod_sl_Kategoria");

            entity.HasOne(d => d.PrzIdKhNavigation).WithMany(p => p.PrzPrzychods)
                .HasForeignKey(d => d.PrzIdKh)
                .HasConstraintName("FK_prz__Przychod_kh__Kontrahent");

            entity.HasOne(d => d.PrzIdOkresuNavigation).WithMany(p => p.PrzPrzychods)
                .HasForeignKey(d => d.PrzIdOkresu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_prz__Przychod_pd_Okres");

            entity.HasOne(d => d.PrzIdPanstwaKonsumpcjiNavigation).WithMany(p => p.PrzPrzychods)
                .HasForeignKey(d => d.PrzIdPanstwaKonsumpcji)
                .HasConstraintName("FK_prz__Przychod_sl_Panstwo");
        });

        modelBuilder.Entity<PrzStawkaRyczaltu>(entity =>
        {
            entity.HasKey(e => e.StrId);

            entity.ToTable("prz__StawkaRyczaltu", tb =>
                {
                    tb.HasTrigger("tr_przStawkaRyczaltuDeleting");
                    tb.HasTrigger("tr_przStawkaRyczaltuInserting");
                });

            entity.HasIndex(e => e.StrNazwa, "IX_Nazwa_UQ").IsUnique();

            entity.Property(e => e.StrId)
                .ValueGeneratedNever()
                .HasColumnName("str_Id");
            entity.Property(e => e.StrAktywna)
                .HasDefaultValue(true)
                .HasColumnName("str_Aktywna");
            entity.Property(e => e.StrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("str_Nazwa");
            entity.Property(e => e.StrPozycja)
                .HasDefaultValue(1)
                .HasColumnName("str_Pozycja");
            entity.Property(e => e.StrSpecjalna10).HasColumnName("str_Specjalna10");
            entity.Property(e => e.StrSystemowa).HasColumnName("str_Systemowa");
            entity.Property(e => e.StrWartosc)
                .HasColumnType("money")
                .HasColumnName("str_Wartosc");
        });

        modelBuilder.Entity<PwDane>(entity =>
        {
            entity.HasKey(e => e.PwdId).IsClustered(false);

            entity.ToTable("pw_Dane");

            entity.HasIndex(e => new { e.PwdIdObiektu, e.PwdTypObiektu, e.PwdIdPozycji }, "IX_pw_Dane")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.PwdId)
                .ValueGeneratedNever()
                .HasColumnName("pwd_Id");
            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
        });

        modelBuilder.Entity<PwPole>(entity =>
        {
            entity.HasKey(e => e.PwpId);

            entity.ToTable("pw_Pole");

            entity.HasIndex(e => e.PwpNazwa, "IX_pw_Pole_pwp_Nazwa");

            entity.HasIndex(e => e.PwpTypObiektu, "IX_pw_Pole_pwp_TypObiektu");

            entity.Property(e => e.PwpId)
                .ValueGeneratedNever()
                .HasColumnName("pwp_Id");
            entity.Property(e => e.PwpDefData).HasColumnName("pwp_DefData");
            entity.Property(e => e.PwpDefFk).HasColumnName("pwp_DefFk");
            entity.Property(e => e.PwpDefFlaga).HasColumnName("pwp_DefFlaga");
            entity.Property(e => e.PwpDefKwota)
                .HasColumnType("money")
                .HasColumnName("pwp_DefKwota");
            entity.Property(e => e.PwpDefLiczba).HasColumnName("pwp_DefLiczba");
            entity.Property(e => e.PwpDefTekst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwp_DefTekst");
            entity.Property(e => e.PwpFormat).HasColumnName("pwp_Format");
            entity.Property(e => e.PwpIdSlownika).HasColumnName("pwp_IdSlownika");
            entity.Property(e => e.PwpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pwp_Nazwa");
            entity.Property(e => e.PwpPole)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("pwp_Pole");
            entity.Property(e => e.PwpRodzajSlownika).HasColumnName("pwp_RodzajSlownika");
            entity.Property(e => e.PwpSelect)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("pwp_Select");
            entity.Property(e => e.PwpSelectWhere)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("pwp_SelectWhere");
            entity.Property(e => e.PwpSortSelect).HasColumnName("pwp_SortSelect");
            entity.Property(e => e.PwpTyp).HasColumnName("pwp_Typ");
            entity.Property(e => e.PwpTypObiektu).HasColumnName("pwp_TypObiektu");
            entity.Property(e => e.PwpWymagane).HasColumnName("pwp_Wymagane");

            entity.HasOne(d => d.PwpIdSlownikaNavigation).WithMany(p => p.PwPoles)
                .HasForeignKey(d => d.PwpIdSlownika)
                .HasConstraintName("FK_pw_Pole_sl__Slownik");
        });

        modelBuilder.Entity<PwRelacjaDokDef>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pw_RelacjaDokDef");

            entity.Property(e => e.PwrDostepne).HasColumnName("pwr_Dostepne");
            entity.Property(e => e.PwrIdDokDef).HasColumnName("pwr_IdDokDef");
            entity.Property(e => e.PwrIdPwp).HasColumnName("pwr_IdPwp");
        });

        modelBuilder.Entity<RbRachBankowy>(entity =>
        {
            entity.HasKey(e => e.RbId);

            entity.ToTable("rb__RachBankowy", tb => tb.HasTrigger("rb__RachBankowy_InsertingUpdating"));

            entity.HasIndex(e => new { e.RbTypObiektu, e.RbIdObiektu, e.RbStatus }, "IX_rb__RachBankowy");

            entity.HasIndex(e => e.RbNumerZnormalizowany, "IX_rb__RachBankowy_rb_NumerZnormalizowany");

            entity.Property(e => e.RbId)
                .ValueGeneratedNever()
                .HasColumnName("rb_Id");
            entity.Property(e => e.RbAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("rb_Analityka");
            entity.Property(e => e.RbBank)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rb_Bank");
            entity.Property(e => e.RbDataHist)
                .HasColumnType("datetime")
                .HasColumnName("rb_DataHist");
            entity.Property(e => e.RbDataSaldo)
                .HasColumnType("datetime")
                .HasColumnName("rb_DataSaldo");
            entity.Property(e => e.RbDik)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rb_Dik");
            entity.Property(e => e.RbEbank).HasColumnName("rb_Ebank");
            entity.Property(e => e.RbIban).HasColumnName("rb_IBAN");
            entity.Property(e => e.RbIdKategorii).HasColumnName("rb_IdKategorii");
            entity.Property(e => e.RbIdObiektu).HasColumnName("rb_IdObiektu");
            entity.Property(e => e.RbIdPowiazanyRachunekVat).HasColumnName("rb_IdPowiazanyRachunekVAT");
            entity.Property(e => e.RbIdUslugi)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("rb_IdUslugi");
            entity.Property(e => e.RbIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("rb_IdWaluty");
            entity.Property(e => e.RbIndywPodatkowyWspolnik).HasColumnName("rb_IndywPodatkowyWspolnik");
            entity.Property(e => e.RbIndywWspolnik).HasColumnName("rb_IndywWspolnik");
            entity.Property(e => e.RbIndywidualny).HasColumnName("rb_Indywidualny");
            entity.Property(e => e.RbIndywidualnyPodatkowy).HasColumnName("rb_IndywidualnyPodatkowy");
            entity.Property(e => e.RbLicznik).HasColumnName("rb_Licznik");
            entity.Property(e => e.RbMnemonik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rb_Mnemonik");
            entity.Property(e => e.RbNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rb_Nazwa");
            entity.Property(e => e.RbNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rb_Numer");
            entity.Property(e => e.RbNumerZnormalizowany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rb_NumerZnormalizowany");
            entity.Property(e => e.RbOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rb_Opis");
            entity.Property(e => e.RbPodstawowy).HasColumnName("rb_Podstawowy");
            entity.Property(e => e.RbPodstawowyWirtualny).HasColumnName("rb_PodstawowyWirtualny");
            entity.Property(e => e.RbRachunekVat).HasColumnName("rb_RachunekVAT");
            entity.Property(e => e.RbSaldo)
                .HasColumnType("money")
                .HasColumnName("rb_Saldo");
            entity.Property(e => e.RbStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength()
                .HasColumnName("rb_Status");
            entity.Property(e => e.RbTypIdentyfikacjiPlatnosci).HasColumnName("rb_TypIdentyfikacjiPlatnosci");
            entity.Property(e => e.RbTypObiektu).HasColumnName("rb_TypObiektu");
            entity.Property(e => e.RbUs).HasColumnName("rb_US");
            entity.Property(e => e.RbWirtualny).HasColumnName("rb_Wirtualny");
            entity.Property(e => e.RbZfss).HasColumnName("rb_ZFSS");

            entity.HasOne(d => d.RbIdKategoriiNavigation).WithMany(p => p.RbRachBankowies)
                .HasForeignKey(d => d.RbIdKategorii)
                .HasConstraintName("FK_rb__RachBankowy_sl_Kategoria");

            entity.HasOne(d => d.RbIdUslugiNavigation).WithMany(p => p.RbRachBankowies)
                .HasForeignKey(d => d.RbIdUslugi)
                .HasConstraintName("FK_rb__RachBankowy_hb_Usluga");

            entity.HasOne(d => d.RbIdWalutyNavigation).WithMany(p => p.RbRachBankowies)
                .HasForeignKey(d => d.RbIdWaluty)
                .HasConstraintName("FK_rb__RachBankowy_sl_Waluta");

            entity.HasMany(d => d.RbpIdUzytkownikas).WithMany(p => p.RbpIdObiektus)
                .UsingEntity<Dictionary<string, object>>(
                    "RbRachBankowyProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("RbpIdUzytkownika")
                        .HasConstraintName("FK_rb_RachBankowyProfil_pd_Uzytkownik"),
                    l => l.HasOne<RbRachBankowy>().WithMany()
                        .HasForeignKey("RbpIdObiektu")
                        .HasConstraintName("FK_rb_RachBankowyProfil_rb__RachBankowy"),
                    j =>
                    {
                        j.HasKey("RbpIdObiektu", "RbpIdUzytkownika");
                        j.ToTable("rb_RachBankowyProfil");
                        j.IndexerProperty<int>("RbpIdObiektu").HasColumnName("rbp_IdObiektu");
                        j.IndexerProperty<int>("RbpIdUzytkownika").HasColumnName("rbp_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<RbRachBankowyHistorium>(entity =>
        {
            entity.HasKey(e => e.RbhId);

            entity.ToTable("rb_RachBankowyHistoria", tb => tb.HasTrigger("rb_RachBankowyHistoria_InsertingUpdating"));

            entity.HasIndex(e => new { e.RbhTypObiektu, e.RbhIdObiektu }, "IX_rb_RachBankowyHistoria");

            entity.HasIndex(e => e.RbhNumerZnormalizowany, "IX_rb_RachBankowyHistoria_rbh_NumerZnormalizowany");

            entity.Property(e => e.RbhId).HasColumnName("rbh_Id");
            entity.Property(e => e.RbhBank)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rbh_Bank");
            entity.Property(e => e.RbhIban)
                .HasDefaultValue(true)
                .HasColumnName("rbh_IBAN");
            entity.Property(e => e.RbhIdObiektu).HasColumnName("rbh_IdObiektu");
            entity.Property(e => e.RbhIdRachunku).HasColumnName("rbh_IdRachunku");
            entity.Property(e => e.RbhIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("rbh_IdWaluty");
            entity.Property(e => e.RbhNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rbh_Numer");
            entity.Property(e => e.RbhNumerZnormalizowany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rbh_NumerZnormalizowany");
            entity.Property(e => e.RbhTypObiektu).HasColumnName("rbh_TypObiektu");

            entity.HasOne(d => d.RbhIdRachunkuNavigation).WithMany(p => p.RbRachBankowyHistoria)
                .HasForeignKey(d => d.RbhIdRachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rb_RachBankowyHistoria_rb__RachBankowy");

            entity.HasOne(d => d.RbhIdWalutyNavigation).WithMany(p => p.RbRachBankowyHistoria)
                .HasForeignKey(d => d.RbhIdWaluty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rb_RachBankowyHistoria_sl_Waluta");
        });

        modelBuilder.Entity<RbRachBankowyPersonel>(entity =>
        {
            entity.HasKey(e => e.RbeId);

            entity.ToTable("rb_RachBankowyPersonel");

            entity.Property(e => e.RbeId)
                .ValueGeneratedNever()
                .HasColumnName("rbe_Id");
            entity.Property(e => e.RbeBezLoginu).HasColumnName("rbe_BezLoginu");
            entity.Property(e => e.RbeCertyfikatHash)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("rbe_CertyfikatHash");
            entity.Property(e => e.RbeCertyfikatHashAutoryzacyjny)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("rbe_CertyfikatHashAutoryzacyjny");
            entity.Property(e => e.RbeIdPersonelu).HasColumnName("rbe_IdPersonelu");
            entity.Property(e => e.RbeIdRachunku).HasColumnName("rbe_IdRachunku");
            entity.Property(e => e.RbeLogin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rbe_Login");
            entity.Property(e => e.RbeSynchDo).HasColumnName("rbe_SynchDo");
            entity.Property(e => e.RbeSynchMinuty).HasColumnName("rbe_SynchMinuty");
            entity.Property(e => e.RbeSynchOd).HasColumnName("rbe_SynchOd");
            entity.Property(e => e.RbeSynchWczasie).HasColumnName("rbe_SynchWCzasie");
            entity.Property(e => e.RbeSynchronizacja).HasColumnName("rbe_Synchronizacja");
            entity.Property(e => e.RbeTrybLogowania).HasColumnName("rbe_TrybLogowania");

            entity.HasOne(d => d.RbeIdPersoneluNavigation).WithMany(p => p.RbRachBankowyPersonels)
                .HasForeignKey(d => d.RbeIdPersonelu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rb_RachBankowyPersonel_pd_Uzytkownik");

            entity.HasOne(d => d.RbeIdRachunkuNavigation).WithMany(p => p.RbRachBankowyPersonels)
                .HasForeignKey(d => d.RbeIdRachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rb_RachBankowyPersonel_rb__RachBankowy");
        });

        modelBuilder.Entity<RbRachBankowySynchDomyslne>(entity =>
        {
            entity.HasKey(e => e.RbdId);

            entity.ToTable("rb_RachBankowySynchDomyslne");

            entity.Property(e => e.RbdId)
                .ValueGeneratedNever()
                .HasColumnName("rbd_id");
            entity.Property(e => e.RbdGodzina)
                .HasColumnType("datetime")
                .HasColumnName("rbd_Godzina");
            entity.Property(e => e.RbdSymbolBanku).HasColumnName("rbd_SymbolBanku");
        });

        modelBuilder.Entity<RbRachBankowySynchronizacja>(entity =>
        {
            entity.HasKey(e => e.RbsId);

            entity.ToTable("rb_RachBankowySynchronizacja");

            entity.Property(e => e.RbsId)
                .ValueGeneratedNever()
                .HasColumnName("rbs_Id");
            entity.Property(e => e.RbsGodzina)
                .HasColumnType("datetime")
                .HasColumnName("rbs_Godzina");
            entity.Property(e => e.RbsIdRachPersonel).HasColumnName("rbs_IdRachPersonel");
        });

        modelBuilder.Entity<RbRachBankowyWirtualny>(entity =>
        {
            entity.HasKey(e => e.RbwId);

            entity.ToTable("rb_RachBankowyWirtualny");

            entity.Property(e => e.RbwId)
                .ValueGeneratedNever()
                .HasColumnName("rbw_Id");
            entity.Property(e => e.RbwIdRachunku).HasColumnName("rbw_IdRachunku");
            entity.Property(e => e.RbwIdentyfikator)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rbw_Identyfikator");
            entity.Property(e => e.RbwPelnyNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rbw_PelnyNumer");

            entity.HasOne(d => d.RbwIdRachunkuNavigation).WithMany(p => p.RbRachBankowyWirtualnies)
                .HasForeignKey(d => d.RbwIdRachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rb_RachBankowyWirtualny_rb__RachBankowy");
        });

        modelBuilder.Entity<RbRachBankowyWirtualnyInstytucji>(entity =>
        {
            entity.HasKey(e => e.RbiId);

            entity.ToTable("rb_RachBankowyWirtualnyInstytucji");

            entity.Property(e => e.RbiId)
                .ValueGeneratedNever()
                .HasColumnName("rbi_Id");
            entity.Property(e => e.RbiIdInstytucji).HasColumnName("rbi_IdInstytucji");
            entity.Property(e => e.RbiIdRachunkuWirtualnego).HasColumnName("rbi_IdRachunkuWirtualnego");

            entity.HasOne(d => d.RbiIdRachunkuWirtualnegoNavigation).WithMany(p => p.RbRachBankowyWirtualnyInstytucjis)
                .HasForeignKey(d => d.RbiIdRachunkuWirtualnego)
                .HasConstraintName("FK_rb_RachBankowyWirtualnyInstytucji_rb_RachBankowyWirtualny");
        });

        modelBuilder.Entity<RbRachBankowyWirtualnyKontrahentum>(entity =>
        {
            entity.HasKey(e => e.RbkId);

            entity.ToTable("rb_RachBankowyWirtualnyKontrahenta");

            entity.Property(e => e.RbkId)
                .ValueGeneratedNever()
                .HasColumnName("rbk_Id");
            entity.Property(e => e.RbkIdKontrahenta).HasColumnName("rbk_IdKontrahenta");
            entity.Property(e => e.RbkIdRachunkuWirtualnego).HasColumnName("rbk_IdRachunkuWirtualnego");

            entity.HasOne(d => d.RbkIdKontrahentaNavigation).WithMany(p => p.RbRachBankowyWirtualnyKontrahenta)
                .HasForeignKey(d => d.RbkIdKontrahenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rb_RachBankowyWirtualnyKontrahenta_kh__Kontrahent");

            entity.HasOne(d => d.RbkIdRachunkuWirtualnegoNavigation).WithMany(p => p.RbRachBankowyWirtualnyKontrahenta)
                .HasForeignKey(d => d.RbkIdRachunkuWirtualnego)
                .HasConstraintName("FK_rb_RachBankowyWirtualnyKontrahenta_rb_RachBankowyWirtualny");
        });

        modelBuilder.Entity<RbRachBankowyWirtualnyPracownika>(entity =>
        {
            entity.HasKey(e => e.RbpId);

            entity.ToTable("rb_RachBankowyWirtualnyPracownika");

            entity.Property(e => e.RbpId)
                .ValueGeneratedNever()
                .HasColumnName("rbp_Id");
            entity.Property(e => e.RbpIdPracownika).HasColumnName("rbp_IdPracownika");
            entity.Property(e => e.RbpIdRachunkuWirtualnego).HasColumnName("rbp_IdRachunkuWirtualnego");

            entity.HasOne(d => d.RbpIdPracownikaNavigation).WithMany(p => p.RbRachBankowyWirtualnyPracownikas)
                .HasForeignKey(d => d.RbpIdPracownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rb_RachBankowyWirtualnyPracownika_pr_Pracownik");

            entity.HasOne(d => d.RbpIdRachunkuWirtualnegoNavigation).WithMany(p => p.RbRachBankowyWirtualnyPracownikas)
                .HasForeignKey(d => d.RbpIdRachunkuWirtualnego)
                .HasConstraintName("FK_rb_RachBankowyWirtualnyPracownika_rb_RachBankowyWirtualny");
        });

        modelBuilder.Entity<RbRachBankowyWirtualnyWspolnika>(entity =>
        {
            entity.HasKey(e => e.RbwsId);

            entity.ToTable("rb_RachBankowyWirtualnyWspolnika");

            entity.Property(e => e.RbwsId)
                .ValueGeneratedNever()
                .HasColumnName("rbws_Id");
            entity.Property(e => e.RbwsIdRachunkuWirtualnego).HasColumnName("rbws_IdRachunkuWirtualnego");
            entity.Property(e => e.RbwsIdWspolnika).HasColumnName("rbws_IdWspolnika");

            entity.HasOne(d => d.RbwsIdRachunkuWirtualnegoNavigation).WithMany(p => p.RbRachBankowyWirtualnyWspolnikas)
                .HasForeignKey(d => d.RbwsIdRachunkuWirtualnego)
                .HasConstraintName("FK_rb_RachBankowyWirtualnyWspolnika_rb_RachBankowyWirtualny");

            entity.HasOne(d => d.RbwsIdWspolnikaNavigation).WithMany(p => p.RbRachBankowyWirtualnyWspolnikas)
                .HasForeignKey(d => d.RbwsIdWspolnika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rb_RachBankowyWirtualnyWspolnika_pd_Wspolnik");
        });

        modelBuilder.Entity<RcpRejestrCzynnosciPrzetwarzaniaCele>(entity =>
        {
            entity.HasKey(e => e.RcpcId).HasName("PK__rcp_RejestrCzynnosciPrzetwarzaniaCele");

            entity.ToTable("rcp_RejestrCzynnosciPrzetwarzaniaCele");

            entity.Property(e => e.RcpcId).HasColumnName("rcpc_Id");
            entity.Property(e => e.RcpcIdCel).HasColumnName("rcpc_IdCel");
            entity.Property(e => e.RcpcIdRejestr).HasColumnName("rcpc_IdRejestr");

            entity.HasOne(d => d.RcpcIdCelNavigation).WithMany(p => p.RcpRejestrCzynnosciPrzetwarzaniaCeles)
                .HasForeignKey(d => d.RcpcIdCel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rcpc_IdCel_cp__CelPrzetwarzania");

            entity.HasOne(d => d.RcpcIdRejestrNavigation).WithMany(p => p.RcpRejestrCzynnosciPrzetwarzaniaCeles)
                .HasForeignKey(d => d.RcpcIdRejestr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rcpc_IdRejestr_rcp_RejestrCzynnosciPrzetwarzania");
        });

        modelBuilder.Entity<RcpRejestrCzynnosciPrzetwarzanium>(entity =>
        {
            entity.HasKey(e => e.RcpId).HasName("PK__rcp_RejestrCzynnosciPrzetwarzania");

            entity.ToTable("rcp_RejestrCzynnosciPrzetwarzania");

            entity.Property(e => e.RcpId)
                .ValueGeneratedNever()
                .HasColumnName("rcp_Id");
            entity.Property(e => e.RcpKategorieDanych)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rcp_KategorieDanych");
            entity.Property(e => e.RcpKategorieOsob)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rcp_KategorieOsob");
            entity.Property(e => e.RcpNazwaZbioru)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rcp_NazwaZbioru");
            entity.Property(e => e.RcpOdbiorcyDanych)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rcp_OdbiorcyDanych");
            entity.Property(e => e.RcpOpisSrodkow)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rcp_OpisSrodkow");
            entity.Property(e => e.RcpPanstwaTrzecie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rcp_PanstwaTrzecie");
            entity.Property(e => e.RcpPlanowaneTerminyUsuniecia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rcp_PlanowaneTerminyUsuniecia");
            entity.Property(e => e.RcpProwadzonyPrzez).HasColumnName("rcp_ProwadzonyPrzez");
        });

        modelBuilder.Entity<RemEwid>(entity =>
        {
            entity.HasKey(e => e.RemId);

            entity.ToTable("rem__Ewid");

            entity.Property(e => e.RemId)
                .ValueGeneratedNever()
                .HasColumnName("rem_Id");
            entity.Property(e => e.RemData)
                .HasColumnType("datetime")
                .HasColumnName("rem_Data");
            entity.Property(e => e.RemIdKsiegi).HasColumnName("rem_IdKsiegi");
            entity.Property(e => e.RemNaZaliczce)
                .HasDefaultValue(true)
                .HasColumnName("rem_NaZaliczce");
            entity.Property(e => e.RemOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rem_Opis");
            entity.Property(e => e.RemPowiazanyId).HasColumnName("rem_PowiazanyId");
            entity.Property(e => e.RemWartosc)
                .HasColumnType("money")
                .HasColumnName("rem_Wartosc");
            entity.Property(e => e.RemWartoscKorektyKup)
                .HasColumnType("money")
                .HasColumnName("rem_WartoscKorektyKUP");
            entity.Property(e => e.RemZaksiegowany).HasColumnName("rem_Zaksiegowany");

            entity.HasOne(d => d.RemIdKsiegiNavigation).WithMany(p => p.RemEwids)
                .HasForeignKey(d => d.RemIdKsiegi)
                .HasConstraintName("FK_rem__Ewid_kpr__Ksiega");
        });

        modelBuilder.Entity<RemPozycja>(entity =>
        {
            entity.HasKey(e => e.RpId);

            entity.ToTable("rem_Pozycja");

            entity.Property(e => e.RpId)
                .ValueGeneratedNever()
                .HasColumnName("rp_Id");
            entity.Property(e => e.RpCena)
                .HasColumnType("money")
                .HasColumnName("rp_Cena");
            entity.Property(e => e.RpIdKorektyKup).HasColumnName("rp_IdKorektyKUP");
            entity.Property(e => e.RpIdRemanentu).HasColumnName("rp_IdRemanentu");
            entity.Property(e => e.RpIdZrodla).HasColumnName("rp_IdZrodla");
            entity.Property(e => e.RpIlosc)
                .HasColumnType("money")
                .HasColumnName("rp_Ilosc");
            entity.Property(e => e.RpJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rp_Jm");
            entity.Property(e => e.RpKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rp_Kod");
            entity.Property(e => e.RpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rp_Nazwa");
            entity.Property(e => e.RpNrKorektyKup)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rp_NrKorektyKUP");
            entity.Property(e => e.RpTypZrodla).HasColumnName("rp_TypZrodla");
            entity.Property(e => e.RpWartosc)
                .HasColumnType("money")
                .HasColumnName("rp_Wartosc");

            entity.HasOne(d => d.RpIdKorektyKupNavigation).WithMany(p => p.RemPozycjas)
                .HasForeignKey(d => d.RpIdKorektyKup)
                .HasConstraintName("FK_rem_Pozycja_kpr__Ksiega");

            entity.HasOne(d => d.RpIdRemanentuNavigation).WithMany(p => p.RemPozycjas)
                .HasForeignKey(d => d.RpIdRemanentu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rem_Pozycja_rem__Ewid");
        });

        modelBuilder.Entity<RewParametr>(entity =>
        {
            entity.HasKey(e => e.RewpId);

            entity.ToTable("rew_Parametr");

            entity.Property(e => e.RewpId)
                .ValueGeneratedNever()
                .HasColumnName("rewp_Id");
            entity.Property(e => e.RewpBlokadaRozliczRozrWsub).HasColumnName("rewp_BlokadaRozliczRozrWSub");
            entity.Property(e => e.RewpNiePokazujRozrWsub).HasColumnName("rewp_NiePokazujRozrWSub");
        });

        modelBuilder.Entity<RfPozycja>(entity =>
        {
            entity.HasKey(e => e.RfpId);

            entity.ToTable("rf_Pozycja");

            entity.Property(e => e.RfpId)
                .ValueGeneratedNever()
                .HasColumnName("rfp_Id");
            entity.Property(e => e.RfpDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("rfp_DokDataWyst");
            entity.Property(e => e.RfpDokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("rfp_DokDataZakonczenia");
            entity.Property(e => e.RfpDokId).HasColumnName("rfp_DokId");
            entity.Property(e => e.RfpDokNrPelny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rfp_DokNrPelny");
            entity.Property(e => e.RfpIdRapFisk).HasColumnName("rfp_IdRapFisk");
            entity.Property(e => e.RfpPrzyczynaZwrotu).HasColumnName("rfp_PrzyczynaZwrotu");
            entity.Property(e => e.RfpWartBrutto)
                .HasColumnType("money")
                .HasColumnName("rfp_WartBrutto");
            entity.Property(e => e.RfpWartNetto)
                .HasColumnType("money")
                .HasColumnName("rfp_WartNetto");
            entity.Property(e => e.RfpWartVat)
                .HasColumnType("money")
                .HasColumnName("rfp_WartVat");

            entity.HasOne(d => d.RfpDok).WithMany(p => p.RfPozycjas)
                .HasForeignKey(d => d.RfpDokId)
                .HasConstraintName("FK_rf_Pozycja_dok__Dokument");

            entity.HasOne(d => d.RfpIdRapFiskNavigation).WithMany(p => p.RfPozycjas)
                .HasForeignKey(d => d.RfpIdRapFisk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rf_Pozycja_rf__RaportyFiskalne");
        });

        modelBuilder.Entity<RfRaportyFiskalne>(entity =>
        {
            entity.HasKey(e => e.RfdId);

            entity.ToTable("rf__RaportyFiskalne", tb =>
                {
                    tb.HasTrigger("tr_RapFiskDokument_Inserting");
                    tb.HasTrigger("tr_ZapisCzasuRF");
                });

            entity.Property(e => e.RfdId)
                .ValueGeneratedNever()
                .HasColumnName("rfd_Id");
            entity.Property(e => e.RfdAutoPrzeliczaj)
                .HasDefaultValue(true)
                .HasColumnName("rfd_AutoPrzeliczaj");
            entity.Property(e => e.RfdDataDo)
                .HasColumnType("datetime")
                .HasColumnName("rfd_DataDo");
            entity.Property(e => e.RfdDataOd)
                .HasColumnType("datetime")
                .HasColumnName("rfd_DataOd");
            entity.Property(e => e.RfdDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("rfd_DataWyst");
            entity.Property(e => e.RfdKatId).HasColumnName("rfd_KatId");
            entity.Property(e => e.RfdMagId).HasColumnName("rfd_MagId");
            entity.Property(e => e.RfdMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("rfd_MscWyst");
            entity.Property(e => e.RfdNazwaUrzadzenia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rfd_NazwaUrzadzenia");
            entity.Property(e => e.RfdNr).HasColumnName("rfd_Nr");
            entity.Property(e => e.RfdNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("rfd_NrPelny");
            entity.Property(e => e.RfdNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rfd_NrRoz");
            entity.Property(e => e.RfdPersonelId).HasColumnName("rfd_PersonelId");
            entity.Property(e => e.RfdPodtyp).HasColumnName("rfd_Podtyp");
            entity.Property(e => e.RfdPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rfd_Podtytul");
            entity.Property(e => e.RfdRodzajTransakcjiVat).HasColumnName("rfd_RodzajTransakcjiVAT");
            entity.Property(e => e.RfdStatus).HasColumnName("rfd_Status");
            entity.Property(e => e.RfdStatusKsieg).HasColumnName("rfd_StatusKsieg");
            entity.Property(e => e.RfdTyp).HasColumnName("rfd_Typ");
            entity.Property(e => e.RfdTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rfd_Tytul");
            entity.Property(e => e.RfdUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("rfd_Uwagi");
            entity.Property(e => e.RfdWartBrutto)
                .HasColumnType("money")
                .HasColumnName("rfd_WartBrutto");
            entity.Property(e => e.RfdWartNetto)
                .HasColumnType("money")
                .HasColumnName("rfd_WartNetto");
            entity.Property(e => e.RfdWartVat)
                .HasColumnType("money")
                .HasColumnName("rfd_WartVat");
            entity.Property(e => e.RfdWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("rfd_Wystawil");

            entity.HasOne(d => d.RfdKat).WithMany(p => p.RfRaportyFiskalnes)
                .HasForeignKey(d => d.RfdKatId)
                .HasConstraintName("FK_rf__RaportyFiskalne_sl_Kategoria");
        });

        modelBuilder.Entity<RfVat>(entity =>
        {
            entity.HasKey(e => e.RfvId);

            entity.ToTable("rf_Vat");

            entity.Property(e => e.RfvId)
                .ValueGeneratedNever()
                .HasColumnName("rfv_Id");
            entity.Property(e => e.RfvDokId).HasColumnName("rfv_DokId");
            entity.Property(e => e.RfvVatId).HasColumnName("rfv_VatId");
            entity.Property(e => e.RfvVatProc)
                .HasColumnType("money")
                .HasColumnName("rfv_VatProc");
            entity.Property(e => e.RfvWartBrutto)
                .HasColumnType("money")
                .HasColumnName("rfv_WartBrutto");
            entity.Property(e => e.RfvWartNetto)
                .HasColumnType("money")
                .HasColumnName("rfv_WartNetto");
            entity.Property(e => e.RfvWartVat)
                .HasColumnType("money")
                .HasColumnName("rfv_WartVat");

            entity.HasOne(d => d.RfvDok).WithMany(p => p.RfVats)
                .HasForeignKey(d => d.RfvDokId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rf_Vat_rf__RaportyFiskalne");

            entity.HasOne(d => d.RfvVat).WithMany(p => p.RfVats)
                .HasForeignKey(d => d.RfvVatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rf_Vat_sl_StawkaVAT");
        });

        modelBuilder.Entity<RodoOchronaDanychParametr>(entity =>
        {
            entity.HasKey(e => e.RodoId).HasName("pk_rodo_OchronaDanych");

            entity.ToTable("rodo_OchronaDanychParametr");

            entity.Property(e => e.RodoId)
                .ValueGeneratedNever()
                .HasColumnName("rodo_ID");
            entity.Property(e => e.RodoAdminToPodmiot).HasColumnName("rodo_AdminToPodmiot");
            entity.Property(e => e.RodoAnonimizacjaOkresPrzechowDanychDokLata)
                .HasDefaultValue(5)
                .HasColumnName("rodo_AnonimizacjaOkresPrzechowDanychDokLata");
            entity.Property(e => e.RodoAnonimizacjaZastapNazweText)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("zanonimizowano na podstawie art. 17 RODO")
                .HasColumnName("rodo_AnonimizacjaZastapNazweText");
            entity.Property(e => e.RodoAnonimizacjaZnakZastapienia)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("x")
                .HasColumnName("rodo_AnonimizacjaZnakZastapienia");
            entity.Property(e => e.RodoInspektorToPodmiot).HasColumnName("rodo_InspektorToPodmiot");
            entity.Property(e => e.RodoOdbiorcy)
                .HasMaxLength(256)
                .HasColumnName("rodo_Odbiorcy");
            entity.Property(e => e.RodoPrawoDoCofnieciaZgody)
                .HasMaxLength(256)
                .HasColumnName("rodo_PrawoDoCofnieciaZgody");
            entity.Property(e => e.RodoPrawoDoDanychOsobowych)
                .HasMaxLength(256)
                .HasColumnName("rodo_PrawoDoDanychOsobowych");
            entity.Property(e => e.RodoSoKontrahenci).HasColumnName("rodo_SoKontrahenci");
            entity.Property(e => e.RodoSoPracownicy).HasColumnName("rodo_SoPracownicy");
            entity.Property(e => e.RodoSoPracownicyFirm).HasColumnName("rodo_SoPracownicyFirm");
            entity.Property(e => e.RodoSoWspolnicy).HasColumnName("rodo_SoWspolnicy");
            entity.Property(e => e.RodoSzDodanieObiektu).HasColumnName("rodo_SzDodanieObiektu");
            entity.Property(e => e.RodoSzDrukowanieListy).HasColumnName("rodo_SzDrukowanieListy");
            entity.Property(e => e.RodoSzEdycjaObiektu).HasColumnName("rodo_SzEdycjaObiektu");
            entity.Property(e => e.RodoSzEksportDanych).HasColumnName("rodo_SzEksportDanych");
            entity.Property(e => e.RodoSzKopiowanieListy).HasColumnName("rodo_SzKopiowanieListy");
            entity.Property(e => e.RodoSzOdczytDanych).HasColumnName("rodo_SzOdczytDanych");
            entity.Property(e => e.RodoSzPodgladDanych).HasColumnName("rodo_SzPodgladDanych");
            entity.Property(e => e.RodoSzWydrukDanych).HasColumnName("rodo_SzWydrukDanych");
            entity.Property(e => e.RodoSzWyswietlanieListy).HasColumnName("rodo_SzWyswietlanieListy");
            entity.Property(e => e.RodoZrodloDanychOsobowych)
                .HasMaxLength(256)
                .HasColumnName("rodo_ZrodloDanychOsobowych");
        });

        modelBuilder.Entity<RozPlikRozszerzenium>(entity =>
        {
            entity.HasKey(e => e.RozprId);

            entity.ToTable("roz_PlikRozszerzenia");

            entity.Property(e => e.RozprId)
                .ValueGeneratedNever()
                .HasColumnName("rozpr_Id");
            entity.Property(e => e.RozprHash)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rozpr_Hash");
            entity.Property(e => e.RozprIdRozszerzenia).HasColumnName("rozpr_IdRozszerzenia");
            entity.Property(e => e.RozprNazwaPliku)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("rozpr_NazwaPliku");
            entity.Property(e => e.RozprPlik)
                .HasColumnType("image")
                .HasColumnName("rozpr_Plik");
            entity.Property(e => e.RozprRejestrowany).HasColumnName("rozpr_Rejestrowany");
            entity.Property(e => e.RozprTypPliku).HasColumnName("rozpr_TypPliku");

            entity.HasOne(d => d.RozprIdRozszerzeniaNavigation).WithMany(p => p.RozPlikRozszerzenia)
                .HasForeignKey(d => d.RozprIdRozszerzenia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_roz_PlikRozszerzenia_roz__Rozszerzenie");
        });

        modelBuilder.Entity<RozRozszerzenie>(entity =>
        {
            entity.HasKey(e => e.RozId);

            entity.ToTable("roz__Rozszerzenie");

            entity.Property(e => e.RozId)
                .ValueGeneratedNever()
                .HasColumnName("roz_Id");
            entity.Property(e => e.RozGuid)
                .HasMaxLength(38)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("roz_Guid");
            entity.Property(e => e.RozNazwa)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("roz_Nazwa");
            entity.Property(e => e.RozSkryptPoAktualizacji)
                .HasColumnType("image")
                .HasColumnName("roz_SkryptPoAktualizacji");
            entity.Property(e => e.RozSkryptPoInstalacji)
                .HasColumnType("image")
                .HasColumnName("roz_SkryptPoInstalacji");
            entity.Property(e => e.RozSkryptPrzedAktualizacja)
                .HasColumnType("image")
                .HasColumnName("roz_SkryptPrzedAktualizacja");
            entity.Property(e => e.RozSkryptPrzedInstalacja)
                .HasColumnType("image")
                .HasColumnName("roz_SkryptPrzedInstalacja");
        });

        modelBuilder.Entity<RozRozszerzenieSql>(entity =>
        {
            entity.HasKey(e => e.RozsId);

            entity.ToTable("roz_RozszerzenieSql");

            entity.Property(e => e.RozsId)
                .ValueGeneratedNever()
                .HasColumnName("rozs_Id");
            entity.Property(e => e.RozsIdKomponentuWzorcowego).HasColumnName("rozs_IdKomponentuWzorcowego");
            entity.Property(e => e.RozsKomunikat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rozs_Komunikat");
            entity.Property(e => e.RozsMultiwybor).HasColumnName("rozs_Multiwybor");
            entity.Property(e => e.RozsNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rozs_Nazwa");
            entity.Property(e => e.RozsOdswiezanie)
                .HasDefaultValue(true)
                .HasColumnName("rozs_Odswiezanie");
            entity.Property(e => e.RozsPolecenie)
                .HasColumnType("text")
                .HasColumnName("rozs_Polecenie");
            entity.Property(e => e.RozsTytulOknaParametrow)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rozs_TytulOknaParametrow");

            entity.HasOne(d => d.RozsIdKomponentuWzorcowegoNavigation).WithMany(p => p.RozRozszerzenieSqls)
                .HasForeignKey(d => d.RozsIdKomponentuWzorcowego)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_roz_RozszerzenieSql_ui_Modul");
        });

        modelBuilder.Entity<RozZestKontekstowe>(entity =>
        {
            entity.HasKey(e => e.RozzkId).HasName("PK__roz_ZestKontekstowe");

            entity.ToTable("roz_ZestKontekstowe");

            entity.Property(e => e.RozzkId)
                .ValueGeneratedNever()
                .HasColumnName("rozzk_Id");
            entity.Property(e => e.RozzkIdKomponentuWzorcowego).HasColumnName("rozzk_IdKomponentuWzorcowego");
            entity.Property(e => e.RozzkMultiwybor).HasColumnName("rozzk_Multiwybor");
            entity.Property(e => e.RozzkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rozzk_Nazwa");
            entity.Property(e => e.RozzkTytulOkna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rozzk_TytulOkna");

            entity.HasOne(d => d.RozzkIdKomponentuWzorcowegoNavigation).WithMany(p => p.RozZestKontekstowes)
                .HasForeignKey(d => d.RozzkIdKomponentuWzorcowego)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__roz_ZestKontekstowe_ui_Modul");
        });

        modelBuilder.Entity<RozZestKontekstoweZakladka>(entity =>
        {
            entity.HasKey(e => e.RozzkzId).HasName("PK__roz_ZestKontekstoweZakladka");

            entity.ToTable("roz_ZestKontekstoweZakladka");

            entity.Property(e => e.RozzkzId)
                .ValueGeneratedNever()
                .HasColumnName("rozzkz_Id");
            entity.Property(e => e.RozzkzIdDefinicji).HasColumnName("rozzkz_IdDefinicji");
            entity.Property(e => e.RozzkzIdZestKontekstowego).HasColumnName("rozzkz_IdZestKontekstowego");
            entity.Property(e => e.RozzkzPozycja).HasColumnName("rozzkz_Pozycja");
            entity.Property(e => e.RozzkzTytulZakladki)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rozzkz_TytulZakladki");

            entity.HasOne(d => d.RozzkzIdDefinicjiNavigation).WithMany(p => p.RozZestKontekstoweZakladkas)
                .HasForeignKey(d => d.RozzkzIdDefinicji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__roz_ZestKontekstoweZakladka_zst__Ewid");

            entity.HasOne(d => d.RozzkzIdZestKontekstowegoNavigation).WithMany(p => p.RozZestKontekstoweZakladkas)
                .HasForeignKey(d => d.RozzkzIdZestKontekstowego)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__roz_ZestKontekstoweZakladka_roz_ZestKontekstowe");
        });

        modelBuilder.Entity<Sf2KomponentSferyczny>(entity =>
        {
            entity.HasKey(e => e.Sf2ksId);

            entity.ToTable("sf2_KomponentSferyczny");

            entity.Property(e => e.Sf2ksId)
                .ValueGeneratedNever()
                .HasColumnName("sf2ks_Id");
            entity.Property(e => e.Sf2ksGrid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sf2ks_Grid");
            entity.Property(e => e.Sf2ksGuid)
                .HasMaxLength(38)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sf2ks_Guid");
            entity.Property(e => e.Sf2ksGuidBiblioteki)
                .HasMaxLength(38)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sf2ks_GuidBiblioteki");
            entity.Property(e => e.Sf2ksIdDefinicji).HasColumnName("sf2ks_IdDefinicji");
            entity.Property(e => e.Sf2ksIdRozszerzenia).HasColumnName("sf2ks_IdRozszerzenia");
            entity.Property(e => e.Sf2ksNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sf2ks_Nazwa");
            entity.Property(e => e.Sf2ksObiekt).HasColumnName("sf2ks_Obiekt");
            entity.Property(e => e.Sf2ksOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sf2ks_Opis");
            entity.Property(e => e.Sf2ksProducentAdres)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentAdres");
            entity.Property(e => e.Sf2ksProducentEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentEmail");
            entity.Property(e => e.Sf2ksProducentFax)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentFax");
            entity.Property(e => e.Sf2ksProducentNazwa)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentNazwa");
            entity.Property(e => e.Sf2ksProducentTelefon1)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentTelefon1");
            entity.Property(e => e.Sf2ksProducentTelefon2)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentTelefon2");
            entity.Property(e => e.Sf2ksProducentWww)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentWWW");
            entity.Property(e => e.Sf2ksTimer).HasColumnName("sf2ks_Timer");
            entity.Property(e => e.Sf2ksWersja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sf2ks_Wersja");
        });

        modelBuilder.Entity<Sf2KontrolaRozszerzen>(entity =>
        {
            entity.HasKey(e => new { e.Sf2krIdRozszerzenia, e.Sf2krIdUzytkownika });

            entity.ToTable("sf2_KontrolaRozszerzen");

            entity.Property(e => e.Sf2krIdRozszerzenia).HasColumnName("sf2kr_IdRozszerzenia");
            entity.Property(e => e.Sf2krIdUzytkownika).HasColumnName("sf2kr_IdUzytkownika");
            entity.Property(e => e.Sf2krTypKontroli).HasColumnName("sf2kr_TypKontroli");
        });

        modelBuilder.Entity<Sf2OperacjaSferyczna>(entity =>
        {
            entity.HasKey(e => e.Sf2osId);

            entity.ToTable("sf2_OperacjaSferyczna");

            entity.Property(e => e.Sf2osId)
                .ValueGeneratedNever()
                .HasColumnName("sf2os_Id");
            entity.Property(e => e.Sf2osIdKomponentu).HasColumnName("sf2os_IdKomponentu");
            entity.Property(e => e.Sf2osIdOperacji).HasColumnName("sf2os_IdOperacji");
            entity.Property(e => e.Sf2osKolejnosc).HasColumnName("sf2os_Kolejnosc");
            entity.Property(e => e.Sf2osNazwaFunkcji)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sf2os_NazwaFunkcji");
            entity.Property(e => e.Sf2osNazwaWyswietlana)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sf2os_NazwaWyswietlana");
            entity.Property(e => e.Sf2osOpis)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("sf2os_Opis");
            entity.Property(e => e.Sf2osSkrotKlawiszowy).HasColumnName("sf2os_SkrotKlawiszowy");
            entity.Property(e => e.Sf2osStan).HasColumnName("sf2os_Stan");
            entity.Property(e => e.Sf2osTyp).HasColumnName("sf2os_Typ");

            entity.HasOne(d => d.Sf2osIdKomponentuNavigation).WithMany(p => p.Sf2OperacjaSferycznas)
                .HasForeignKey(d => d.Sf2osIdKomponentu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sf2_OperacjaSferyczna_sf2_KomponentSferyczny");

            entity.HasOne(d => d.Sf2osIdOperacjiNavigation).WithMany(p => p.Sf2OperacjaSferycznas)
                .HasForeignKey(d => d.Sf2osIdOperacji)
                .HasConstraintName("FK_sf2_OperacjaSferyczna_ui_Operacja");
        });

        modelBuilder.Entity<Sf2RozszerzenieGridum>(entity =>
        {
            entity.HasKey(e => e.Sf2rgId);

            entity.ToTable("sf2_RozszerzenieGrida");

            entity.Property(e => e.Sf2rgId)
                .ValueGeneratedNever()
                .HasColumnName("sf2rg_Id");
            entity.Property(e => e.Sf2rgIdKomponentu).HasColumnName("sf2rg_IdKomponentu");
            entity.Property(e => e.Sf2rgIdRozszerzenia).HasColumnName("sf2rg_IdRozszerzenia");
        });

        modelBuilder.Entity<Sf2Skrypt>(entity =>
        {
            entity.HasKey(e => e.Sf2sId).HasName("PK_sf2_BibliotekaSferyczna");

            entity.ToTable("sf2_Skrypt");

            entity.Property(e => e.Sf2sId)
                .ValueGeneratedNever()
                .HasColumnName("sf2s_Id");
            entity.Property(e => e.Sf2sIdKomponentu).HasColumnName("sf2s_IdKomponentu");
            entity.Property(e => e.Sf2sStrumien)
                .HasColumnType("image")
                .HasColumnName("sf2s_Strumien");

            entity.HasOne(d => d.Sf2sIdKomponentuNavigation).WithMany(p => p.Sf2Skrypts)
                .HasForeignKey(d => d.Sf2sIdKomponentu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sf2_BibliotekaSkryptow_sf2_KomponentSferyczny");
        });

        modelBuilder.Entity<SfDefinicja>(entity =>
        {
            entity.HasKey(e => e.SfdId);

            entity.ToTable("sf_Definicja");

            entity.Property(e => e.SfdId)
                .ValueGeneratedNever()
                .HasColumnName("sfd_Id");
            entity.Property(e => e.SfdFunkcja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfd_Funkcja");
            entity.Property(e => e.SfdIdPola).HasColumnName("sfd_IdPola");
            entity.Property(e => e.SfdIdRokuObrotowego).HasColumnName("sfd_IdRokuObrotowego");
            entity.Property(e => e.SfdKolumna).HasColumnName("sfd_Kolumna");
            entity.Property(e => e.SfdKonto)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("sfd_Konto");
            entity.Property(e => e.SfdKorygujaco).HasColumnName("sfd_Korygujaco");

            entity.HasOne(d => d.SfdIdRokuObrotowegoNavigation).WithMany(p => p.SfDefinicjas)
                .HasForeignKey(d => d.SfdIdRokuObrotowego)
                .HasConstraintName("FK_sf_Definicja_pd_RokObrotowy");
        });

        modelBuilder.Entity<SfDefinicjaWzorzec>(entity =>
        {
            entity.HasKey(e => e.SfdwId);

            entity.ToTable("sf_DefinicjaWzorzec");

            entity.Property(e => e.SfdwId)
                .ValueGeneratedNever()
                .HasColumnName("sfdw_Id");
            entity.Property(e => e.SfdwFunkcja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfdw_Funkcja");
            entity.Property(e => e.SfdwIdPola)
                .HasDefaultValue(1)
                .HasColumnName("sfdw_IdPola");
            entity.Property(e => e.SfdwKolumna)
                .HasDefaultValue(1)
                .HasColumnName("sfdw_Kolumna");
            entity.Property(e => e.SfdwKonto)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfdw_Konto");
            entity.Property(e => e.SfdwKorygujaco).HasColumnName("sfdw_Korygujaco");

            entity.HasOne(d => d.SfdwIdPolaNavigation).WithMany(p => p.SfDefinicjaWzorzecs)
                .HasForeignKey(d => d.SfdwIdPola)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sf_DefinicjaWzorzec_sf_Pole");
        });

        modelBuilder.Entity<SfPole>(entity =>
        {
            entity.HasKey(e => e.SfpId);

            entity.ToTable("sf_Pole");

            entity.Property(e => e.SfpId)
                .ValueGeneratedNever()
                .HasColumnName("sfp_Id");
            entity.Property(e => e.SfpDefiniowalne)
                .HasDefaultValue(true)
                .HasColumnName("sfp_Definiowalne");
            entity.Property(e => e.SfpEtykieta1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfp_Etykieta1");
            entity.Property(e => e.SfpEtykieta2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfp_Etykieta2");
            entity.Property(e => e.SfpEtykieta3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfp_Etykieta3");
            entity.Property(e => e.SfpIdSprawozdania)
                .HasDefaultValue(1)
                .HasColumnName("sfp_IdSprawozdania");
            entity.Property(e => e.SfpIdXmlDef).HasColumnName("sfp_IdXmlDef");
            entity.Property(e => e.SfpKolejnosc).HasColumnName("sfp_Kolejnosc");
            entity.Property(e => e.SfpKorygujaco).HasColumnName("sfp_Korygujaco");
            entity.Property(e => e.SfpPoziom)
                .HasDefaultValue(1)
                .HasColumnName("sfp_Poziom");
            entity.Property(e => e.SfpPrefix)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sfp_Prefix");
            entity.Property(e => e.SfpSumowane)
                .HasDefaultValue(true)
                .HasColumnName("sfp_Sumowane");
            entity.Property(e => e.SfpTyp).HasColumnName("sfp_Typ");

            entity.HasOne(d => d.SfpIdSprawozdaniaNavigation).WithMany(p => p.SfPoles)
                .HasForeignKey(d => d.SfpIdSprawozdania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sf_Pole_sf_Sprawozdanie");
        });

        modelBuilder.Entity<SfPoleNiewidoczne>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sf_PoleNiewidoczne");

            entity.Property(e => e.SfpnIdPole).HasColumnName("sfpn_IdPole");
            entity.Property(e => e.SfpnIdRok).HasColumnName("sfpn_IdRok");

            entity.HasOne(d => d.SfpnIdPoleNavigation).WithMany()
                .HasForeignKey(d => d.SfpnIdPole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sf_PoleNiewidoczne_sf_Pole");

            entity.HasOne(d => d.SfpnIdRokNavigation).WithMany()
                .HasForeignKey(d => d.SfpnIdRok)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sf_PoleNiewidoczne_pd_RokObrotowy");
        });

        modelBuilder.Entity<SfPozycjaRz>(entity =>
        {
            entity.HasKey(e => e.SfrpId);

            entity.ToTable("sf_PozycjaRzs");

            entity.Property(e => e.SfrpId)
                .ValueGeneratedNever()
                .HasColumnName("sfrp_Id");
            entity.Property(e => e.SfrpIdRzs).HasColumnName("sfrp_IdRzs");
            entity.Property(e => e.SfrpNrPola).HasColumnName("sfrp_NrPola");
            entity.Property(e => e.SfrpOpis)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("sfrp_Opis");
            entity.Property(e => e.SfrpWartosc)
                .HasColumnType("money")
                .HasColumnName("sfrp_Wartosc");
            entity.Property(e => e.SfrpWartoscPoprzedniego)
                .HasColumnType("money")
                .HasColumnName("sfrp_WartoscPoprzedniego");

            entity.HasOne(d => d.SfrpIdRzsNavigation).WithMany(p => p.SfPozycjaRzs)
                .HasForeignKey(d => d.SfrpIdRzs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sf_PozycjaRzs_sf_Rzs");
        });

        modelBuilder.Entity<SfRz>(entity =>
        {
            entity.HasKey(e => e.SfrId);

            entity.ToTable("sf_Rzs");

            entity.Property(e => e.SfrId)
                .ValueGeneratedNever()
                .HasColumnName("sfr_Id");
            entity.Property(e => e.SfrData)
                .HasColumnType("datetime")
                .HasColumnName("sfr_Data");
            entity.Property(e => e.SfrIdRoku).HasColumnName("sfr_IdRoku");
            entity.Property(e => e.SfrIdRokuZrodlowego).HasColumnName("sfr_IdRokuZrodlowego");
            entity.Property(e => e.SfrIdSprawozdania).HasColumnName("sfr_IdSprawozdania");
            entity.Property(e => e.SfrJezyk).HasColumnName("sfr_Jezyk");
            entity.Property(e => e.SfrTylkoZaksiegowane).HasColumnName("sfr_TylkoZaksiegowane");

            entity.HasOne(d => d.SfrIdRokuNavigation).WithMany(p => p.SfRzs)
                .HasForeignKey(d => d.SfrIdRoku)
                .HasConstraintName("FK_sf_Rzs_pd_RokObrotowy");

            entity.HasOne(d => d.SfrIdSprawozdaniaNavigation).WithMany(p => p.SfRzs)
                .HasForeignKey(d => d.SfrIdSprawozdania)
                .HasConstraintName("FK_sf_Rzs_sf_Sprawozdanie");
        });

        modelBuilder.Entity<SfSprawozdanie>(entity =>
        {
            entity.HasKey(e => e.SfId);

            entity.ToTable("sf_Sprawozdanie", tb => tb.HasTrigger("tr_sf_Sprawozdanie_AfterDelete"));

            entity.Property(e => e.SfId)
                .ValueGeneratedNever()
                .HasColumnName("sf_Id");
            entity.Property(e => e.SfArchiwalne).HasColumnName("sf_Archiwalne");
            entity.Property(e => e.SfDataUzycia)
                .HasColumnType("datetime")
                .HasColumnName("sf_DataUzycia");
            entity.Property(e => e.SfDomyslny).HasColumnName("sf_Domyslny");
            entity.Property(e => e.SfEsfTypZrodla).HasColumnName("sf_EsfTypZrodla");
            entity.Property(e => e.SfKolumnyEtykiet).HasColumnName("sf_KolumnyEtykiet");
            entity.Property(e => e.SfKolumnyWartosci).HasColumnName("sf_KolumnyWartosci");
            entity.Property(e => e.SfNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sf_Nazwa");
            entity.Property(e => e.SfOpis)
                .HasMaxLength(380)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sf_Opis");
            entity.Property(e => e.SfOpisDe)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sf_OpisDe");
            entity.Property(e => e.SfOpisEn)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sf_OpisEn");
            entity.Property(e => e.SfPrefix)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sf_Prefix");
            entity.Property(e => e.SfProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sf_ProgId");
            entity.Property(e => e.SfTresc)
                .HasColumnType("image")
                .HasColumnName("sf_tresc");
            entity.Property(e => e.SfTyp).HasColumnName("sf_Typ");
            entity.Property(e => e.SfUproszczone).HasColumnName("sf_Uproszczone");
        });

        modelBuilder.Entity<SfSprawozdanieZmiany>(entity =>
        {
            entity.HasKey(e => e.SfszId);

            entity.ToTable("sf_SprawozdanieZmiany");

            entity.Property(e => e.SfszId)
                .ValueGeneratedNever()
                .HasColumnName("sfsz_Id");
            entity.Property(e => e.SfszIdPole).HasColumnName("sfsz_IdPole");
            entity.Property(e => e.SfszWidoczneDo)
                .HasColumnType("datetime")
                .HasColumnName("sfsz_WidoczneDo");
            entity.Property(e => e.SfszWidoczneOd)
                .HasColumnType("datetime")
                .HasColumnName("sfsz_WidoczneOd");

            entity.HasOne(d => d.SfszIdPoleNavigation).WithMany(p => p.SfSprawozdanieZmianies)
                .HasForeignKey(d => d.SfszIdPole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sf_SprawozdanieZmiany_sf_Pole");
        });

        modelBuilder.Entity<SkParametr>(entity =>
        {
            entity.HasKey(e => e.SkpId).HasName("PK__sk_Parametr");

            entity.ToTable("sk_Parametr");

            entity.Property(e => e.SkpId)
                .ValueGeneratedNever()
                .HasColumnName("skp_Id");
            entity.Property(e => e.SkpIdNumeracji).HasColumnName("skp_IdNumeracji");
            entity.Property(e => e.SkpKontrolaDatDokumentow).HasColumnName("skp_KontrolaDatDokumentow");
            entity.Property(e => e.SkpLimitNierozliczonychSesji).HasColumnName("skp_LimitNierozliczonychSesji");
            entity.Property(e => e.SkpOtworzSesjeDla).HasColumnName("skp_OtworzSesjeDla");
            entity.Property(e => e.SkpOtworzSesjePoZalogowaniu).HasColumnName("skp_OtworzSesjePoZalogowaniu");
            entity.Property(e => e.SkpOtworzSesjePoZalogowaniuPos).HasColumnName("skp_OtworzSesjePoZalogowaniuPOS");
            entity.Property(e => e.SkpParamEwidId).HasColumnName("skp_ParamEwidId");
            entity.Property(e => e.SkpZamknijSesjePoWylogowaniu).HasColumnName("skp_ZamknijSesjePoWylogowaniu");

            entity.HasOne(d => d.SkpIdNumeracjiNavigation).WithMany(p => p.SkParametrs)
                .HasForeignKey(d => d.SkpIdNumeracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__sk_Parametr_sl_FormatNumeracji");

            entity.HasOne(d => d.SkpParamEwid).WithMany(p => p.SkParametrs)
                .HasForeignKey(d => d.SkpParamEwidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__sk_Parametr_par__Ewid");
        });

        modelBuilder.Entity<SkParametrSesjaDla>(entity =>
        {
            entity.HasKey(e => e.SkpdId);

            entity.ToTable("sk_ParametrSesjaDla");

            entity.Property(e => e.SkpdId)
                .ValueGeneratedNever()
                .HasColumnName("skpd_Id");
            entity.Property(e => e.SkpdIdObiektu).HasColumnName("skpd_IdObiektu");
            entity.Property(e => e.SkpdIdParametr).HasColumnName("skpd_IdParametr");
            entity.Property(e => e.SkpdNazwaObiektu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("skpd_NazwaObiektu");
            entity.Property(e => e.SkpdTypObiektu).HasColumnName("skpd_TypObiektu");
        });

        modelBuilder.Entity<SkSesja>(entity =>
        {
            entity.HasKey(e => e.SksId).HasName("PK__sk_Sesja");

            entity.ToTable("sk_Sesja");

            entity.HasIndex(e => e.SksIdKasy, "UIX_sk_Sesja_sks_AktywnaKasa")
                .IsUnique()
                .HasFilter("([sks_DataZamkniecia] IS NULL)");

            entity.HasIndex(e => e.SksIdUzytkownika, "UIX_sk_Sesja_sks_AktywnyUzytkownik")
                .IsUnique()
                .HasFilter("([sks_DataZamkniecia] IS NULL)");

            entity.Property(e => e.SksId)
                .ValueGeneratedNever()
                .HasColumnName("sks_Id");
            entity.Property(e => e.SksDataOtwarcia)
                .HasColumnType("datetime")
                .HasColumnName("sks_DataOtwarcia");
            entity.Property(e => e.SksDataRozliczenia)
                .HasColumnType("datetime")
                .HasColumnName("sks_DataRozliczenia");
            entity.Property(e => e.SksDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("sks_DataZamkniecia");
            entity.Property(e => e.SksIdKasy).HasColumnName("sks_IdKasy");
            entity.Property(e => e.SksIdUzOtworzyl).HasColumnName("sks_IdUzOtworzyl");
            entity.Property(e => e.SksIdUzZamknal).HasColumnName("sks_IdUzZamknal");
            entity.Property(e => e.SksIdUzZatwierdzilOtwarcie).HasColumnName("sks_IdUzZatwierdzilOtwarcie");
            entity.Property(e => e.SksIdUzZatwierdzilZamkniecie).HasColumnName("sks_IdUzZatwierdzilZamkniecie");
            entity.Property(e => e.SksIdUzytkownika).HasColumnName("sks_IdUzytkownika");
            entity.Property(e => e.SksNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sks_Numer");
            entity.Property(e => e.SksStatusZgodnosci).HasColumnName("sks_StatusZgodnosci");
            entity.Property(e => e.SksUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sks_Uwagi");

            entity.HasOne(d => d.SksIdKasyNavigation).WithOne(p => p.SkSesja)
                .HasForeignKey<SkSesja>(d => d.SksIdKasy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__sk_Sesja_dks_Kasa");

            entity.HasOne(d => d.SksIdUzytkownikaNavigation).WithOne(p => p.SkSesja)
                .HasForeignKey<SkSesja>(d => d.SksIdUzytkownika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__sk_Sesja_pd_Uzytkownik");
        });

        modelBuilder.Entity<SkStan>(entity =>
        {
            entity.HasKey(e => e.SkstId).HasName("PK__sk_Stan");

            entity.ToTable("sk_Stan");

            entity.Property(e => e.SkstId)
                .ValueGeneratedNever()
                .HasColumnName("skst_Id");
            entity.Property(e => e.SkstFormaPlatnosci).HasColumnName("skst_FormaPlatnosci");
            entity.Property(e => e.SkstIdSesji).HasColumnName("skst_IdSesji");
            entity.Property(e => e.SkstSaldo)
                .HasColumnType("money")
                .HasColumnName("skst_Saldo");
            entity.Property(e => e.SkstStanKoncowy)
                .HasColumnType("money")
                .HasColumnName("skst_StanKoncowy");
            entity.Property(e => e.SkstStanPoczatkowy)
                .HasColumnType("money")
                .HasColumnName("skst_StanPoczatkowy");
            entity.Property(e => e.SkstWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("skst_Waluta");

            entity.HasOne(d => d.SkstIdSesjiNavigation).WithMany(p => p.SkStans)
                .HasForeignKey(d => d.SkstIdSesji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__sk_Stan_sk_Sesja");

            entity.HasOne(d => d.SkstWalutaNavigation).WithMany(p => p.SkStans)
                .HasForeignKey(d => d.SkstWaluta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__sk_Stan_sl_Waluta");
        });

        modelBuilder.Entity<SlAtrybutGodzinowy>(entity =>
        {
            entity.HasKey(e => e.SlagId);

            entity.ToTable("sl_AtrybutGodzinowy");

            entity.Property(e => e.SlagId)
                .ValueGeneratedNever()
                .HasColumnName("slag_Id");
            entity.Property(e => e.SlagNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slag_Nazwa");
            entity.Property(e => e.SlagWspolczynnik)
                .HasColumnType("money")
                .HasColumnName("slag_Wspolczynnik");
        });

        modelBuilder.Entity<SlBadanieOkresowe>(entity =>
        {
            entity.HasKey(e => e.BoId);

            entity.ToTable("sl_BadanieOkresowe");

            entity.Property(e => e.BoId)
                .ValueGeneratedNever()
                .HasColumnName("bo_Id");
            entity.Property(e => e.BoNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bo_Nazwa");
        });

        modelBuilder.Entity<SlBank>(entity =>
        {
            entity.HasKey(e => e.BnNrRozliczeniowy);

            entity.ToTable("sl_Bank");

            entity.Property(e => e.BnNrRozliczeniowy)
                .ValueGeneratedNever()
                .HasColumnName("bn_NrRozliczeniowy");
            entity.Property(e => e.BnNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bn_Nazwa");
        });

        modelBuilder.Entity<SlBibObiekt>(entity =>
        {
            entity.HasKey(e => e.BicId).HasName("PK_sl_BibObiekty");

            entity.ToTable("sl_BibObiekt");

            entity.Property(e => e.BicId)
                .ValueGeneratedNever()
                .HasColumnName("bic_Id");
            entity.Property(e => e.BicDokPodtyp).HasColumnName("bic_DokPodtyp");
            entity.Property(e => e.BicDokTyp).HasColumnName("bic_DokTyp");
            entity.Property(e => e.BicNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bic_Nazwa");
            entity.Property(e => e.BicProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bic_ProgId");
            entity.Property(e => e.BicProgIdCtx).HasColumnName("bic_ProgIdCtx");
        });

        modelBuilder.Entity<SlCechaKh>(entity =>
        {
            entity.HasKey(e => e.CkhId);

            entity.ToTable("sl_CechaKh");

            entity.Property(e => e.CkhId)
                .ValueGeneratedNever()
                .HasColumnName("ckh_Id");
            entity.Property(e => e.CkhNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ckh_Nazwa");
        });

        modelBuilder.Entity<SlCechaPr>(entity =>
        {
            entity.HasKey(e => e.CprId);

            entity.ToTable("sl_CechaPr");

            entity.Property(e => e.CprId)
                .ValueGeneratedNever()
                .HasColumnName("cpr_Id");
            entity.Property(e => e.CprNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cpr_Nazwa");
        });

        modelBuilder.Entity<SlCechaTw>(entity =>
        {
            entity.HasKey(e => e.CtwId);

            entity.ToTable("sl_CechaTw");

            entity.Property(e => e.CtwId)
                .ValueGeneratedNever()
                .HasColumnName("ctw_Id");
            entity.Property(e => e.CtwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ctw_Nazwa");
        });

        modelBuilder.Entity<SlCechaZ>(entity =>
        {
            entity.HasKey(e => e.CzsId);

            entity.ToTable("sl_CechaZs");

            entity.Property(e => e.CzsId)
                .ValueGeneratedNever()
                .HasColumnName("czs_Id");
            entity.Property(e => e.CzsNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("czs_Nazwa");
        });

        modelBuilder.Entity<SlCrKolor>(entity =>
        {
            entity.HasKey(e => e.CkId);

            entity.ToTable("sl_CrKolor");

            entity.Property(e => e.CkId)
                .ValueGeneratedNever()
                .HasColumnName("ck_Id");
            entity.Property(e => e.CkKolor).HasColumnName("ck_Kolor");
        });

        modelBuilder.Entity<SlCrmBranza>(entity =>
        {
            entity.HasKey(e => e.BraId);

            entity.ToTable("sl_CrmBranza");

            entity.Property(e => e.BraId)
                .ValueGeneratedNever()
                .HasColumnName("bra_Id");
            entity.Property(e => e.BraNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bra_Nazwa");
        });

        modelBuilder.Entity<SlCrmDzial>(entity =>
        {
            entity.HasKey(e => e.DziId);

            entity.ToTable("sl_CrmDzial");

            entity.Property(e => e.DziId)
                .ValueGeneratedNever()
                .HasColumnName("dzi_Id");
            entity.Property(e => e.DziNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzi_Nazwa");
        });

        modelBuilder.Entity<SlCrmEtap>(entity =>
        {
            entity.HasKey(e => e.TrdId);

            entity.ToTable("sl_CrmEtap");

            entity.Property(e => e.TrdId)
                .ValueGeneratedNever()
                .HasColumnName("trd_Id");
            entity.Property(e => e.TrdKolejnosc).HasColumnName("trd_Kolejnosc");
            entity.Property(e => e.TrdKoncowy).HasColumnName("trd_Koncowy");
            entity.Property(e => e.TrdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("trd_Nazwa");
            entity.Property(e => e.TrdProcentSukcesu).HasColumnName("trd_ProcentSukcesu");
            entity.Property(e => e.TrdScenariusz).HasColumnName("trd_Scenariusz");
            entity.Property(e => e.TrdZamowienie).HasColumnName("trd_Zamowienie");
        });

        modelBuilder.Entity<SlCrmGrupaTransakcji>(entity =>
        {
            entity.HasKey(e => e.TrgId);

            entity.ToTable("sl_CrmGrupaTransakcji");

            entity.Property(e => e.TrgId)
                .ValueGeneratedNever()
                .HasColumnName("trg_Id");
            entity.Property(e => e.TrgNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("trg_Nazwa");
        });

        modelBuilder.Entity<SlCrmGrupaWiadomosci>(entity =>
        {
            entity.HasKey(e => e.GwaId).HasName("PK_sl_CrmGrupaWiadomosci_1");

            entity.ToTable("sl_CrmGrupaWiadomosci");

            entity.Property(e => e.GwaId)
                .ValueGeneratedNever()
                .HasColumnName("gwa_Id");
            entity.Property(e => e.GwaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gwa_Nazwa");
        });

        modelBuilder.Entity<SlCrmPowitanie>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sl_CrmPowitanie");

            entity.Property(e => e.PowNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pow_Nazwa");
        });

        modelBuilder.Entity<SlCrmRegion>(entity =>
        {
            entity.HasKey(e => e.RegId);

            entity.ToTable("sl_CrmRegion");

            entity.Property(e => e.RegId)
                .ValueGeneratedNever()
                .HasColumnName("reg_Id");
            entity.Property(e => e.RegNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("reg_Nazwa");
        });

        modelBuilder.Entity<SlCrmScenariusz>(entity =>
        {
            entity.HasKey(e => e.TrcId).HasName("PK_tr_CrmScenariusz");

            entity.ToTable("sl_CrmScenariusz");

            entity.Property(e => e.TrcId)
                .ValueGeneratedNever()
                .HasColumnName("trc_Id");
            entity.Property(e => e.TrcNazwa)
                .HasMaxLength(50)
                .HasColumnName("trc_Nazwa");
        });

        modelBuilder.Entity<SlCrmTransakcjaNieudana>(entity =>
        {
            entity.HasKey(e => e.TrnId);

            entity.ToTable("sl_CrmTransakcjaNieudana");

            entity.Property(e => e.TrnId)
                .ValueGeneratedNever()
                .HasColumnName("trn_Id");
            entity.Property(e => e.TrnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("trn_Nazwa");
        });

        modelBuilder.Entity<SlCrmTransakcjaPozyskana>(entity =>
        {
            entity.HasKey(e => e.TreId);

            entity.ToTable("sl_CrmTransakcjaPozyskana");

            entity.Property(e => e.TreId)
                .ValueGeneratedNever()
                .HasColumnName("tre_Id");
            entity.Property(e => e.TreNazwa)
                .HasMaxLength(50)
                .HasColumnName("tre_Nazwa");
        });

        modelBuilder.Entity<SlCrmZrodloPozyskanium>(entity =>
        {
            entity.HasKey(e => e.ZpoId).HasName("PK_sl_crmZrodloPozyskania");

            entity.ToTable("sl_CrmZrodloPozyskania");

            entity.Property(e => e.ZpoId)
                .ValueGeneratedNever()
                .HasColumnName("zpo_Id");
            entity.Property(e => e.ZpoNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpo_Nazwa");
        });

        modelBuilder.Entity<SlCrmpodTypZadanium>(entity =>
        {
            entity.HasKey(e => e.PtzId);

            entity.ToTable("sl_CRMPodTypZadania");

            entity.Property(e => e.PtzId)
                .ValueGeneratedNever()
                .HasColumnName("ptz_Id");
            entity.Property(e => e.PtzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ptz_Nazwa");
            entity.Property(e => e.PtzZadanie).HasColumnName("ptz_Zadanie");
        });

        modelBuilder.Entity<SlCropi>(entity =>
        {
            entity.HasKey(e => new { e.CroId, e.CroTyp });

            entity.ToTable("sl_CROpis");

            entity.Property(e => e.CroId).HasColumnName("cro_Id");
            entity.Property(e => e.CroTyp).HasColumnName("cro_Typ");
            entity.Property(e => e.CroOpis1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cro_Opis1");
            entity.Property(e => e.CroOpis2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cro_Opis2");
        });

        modelBuilder.Entity<SlDystrybutor>(entity =>
        {
            entity.HasKey(e => e.DyId);

            entity.ToTable("sl_Dystrybutor");

            entity.Property(e => e.DyId)
                .ValueGeneratedNever()
                .HasColumnName("dy_Id");
            entity.Property(e => e.DyMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dy_Miejscowosc");
            entity.Property(e => e.DyNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dy_Nazwa");
        });

        modelBuilder.Entity<SlDzial>(entity =>
        {
            entity.HasKey(e => e.DziId);

            entity.ToTable("sl_Dzial");

            entity.Property(e => e.DziId)
                .ValueGeneratedNever()
                .HasColumnName("dzi_Id");
            entity.Property(e => e.DziNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dzi_Nazwa");
        });

        modelBuilder.Entity<SlEtykietum>(entity =>
        {
            entity.HasKey(e => e.EtId);

            entity.ToTable("sl_Etykieta");

            entity.Property(e => e.EtId)
                .ValueGeneratedNever()
                .HasColumnName("et_Id");
            entity.Property(e => e.EtNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("et_Nazwa");
            entity.Property(e => e.EtOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("et_Opis");
        });

        modelBuilder.Entity<SlEwidVatOss>(entity =>
        {
            entity.HasKey(e => e.EvoId);

            entity.ToTable("sl_EwidVatOss");

            entity.Property(e => e.EvoId)
                .ValueGeneratedNever()
                .HasColumnName("evo_Id");
            entity.Property(e => e.EvoAutoPrzeliczajVat)
                .HasDefaultValue(true)
                .HasColumnName("evo_AutoPrzeliczajVAT");
            entity.Property(e => e.EvoEwidencjaDomyslna).HasColumnName("evo_EwidencjaDomyslna");
            entity.Property(e => e.EvoIdKategorii).HasColumnName("evo_IdKategorii");
            entity.Property(e => e.EvoIdPanstwaKonsumpcji).HasColumnName("evo_IdPanstwaKonsumpcji");
            entity.Property(e => e.EvoIdPanstwaWysylki).HasColumnName("evo_IdPanstwaWysylki");
            entity.Property(e => e.EvoIdTerminuPlatnosci).HasColumnName("evo_IdTerminuPlatnosci");
            entity.Property(e => e.EvoMiesiacNaliczenia).HasColumnName("evo_MiesiacNaliczenia");
            entity.Property(e => e.EvoNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("evo_Nazwa");
            entity.Property(e => e.EvoNieWliczanyDoPb).HasColumnName("evo_NieWliczanyDoPB");
            entity.Property(e => e.EvoOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("evo_Opis");
            entity.Property(e => e.EvoTransakcjaVat)
                .HasDefaultValue(1)
                .HasColumnName("evo_TransakcjaVAT");
            entity.Property(e => e.EvoWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("evo_Waluta");

            entity.HasOne(d => d.EvoIdKategoriiNavigation).WithMany(p => p.SlEwidVatOsses)
                .HasForeignKey(d => d.EvoIdKategorii)
                .HasConstraintName("FK_sl_EwidVatOss_sl_Kategoria");

            entity.HasOne(d => d.EvoIdPanstwaKonsumpcjiNavigation).WithMany(p => p.SlEwidVatOssEvoIdPanstwaKonsumpcjiNavigations)
                .HasForeignKey(d => d.EvoIdPanstwaKonsumpcji)
                .HasConstraintName("FK_sl_EwidVatOss_sl_Panstwo_K");

            entity.HasOne(d => d.EvoIdPanstwaWysylkiNavigation).WithMany(p => p.SlEwidVatOssEvoIdPanstwaWysylkiNavigations)
                .HasForeignKey(d => d.EvoIdPanstwaWysylki)
                .HasConstraintName("FK_sl_EwidVatOss_sl_Panstwo_W");

            entity.HasOne(d => d.EvoIdTerminuPlatnosciNavigation).WithMany(p => p.SlEwidVatOsses)
                .HasForeignKey(d => d.EvoIdTerminuPlatnosci)
                .HasConstraintName("FK_sl_EwidVatOss_sl_FormaPlatnosci");
        });

        modelBuilder.Entity<SlFormaDzialaniaWindykacyjnego>(entity =>
        {
            entity.HasKey(e => e.FdwId);

            entity.ToTable("sl_FormaDzialaniaWindykacyjnego");

            entity.Property(e => e.FdwId)
                .ValueGeneratedNever()
                .HasColumnName("fdw_Id");
            entity.Property(e => e.FdwNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fdw_Nazwa");
            entity.Property(e => e.FdwPonaglenie).HasColumnName("fdw_Ponaglenie");
            entity.Property(e => e.FdwSystemowa).HasColumnName("fdw_Systemowa");
        });

        modelBuilder.Entity<SlFormaPlatnosci>(entity =>
        {
            entity.HasKey(e => e.FpId);

            entity.ToTable("sl_FormaPlatnosci", tb => tb.HasTrigger("tr_FormaPlatInsMod"));

            entity.Property(e => e.FpId)
                .ValueGeneratedNever()
                .HasColumnName("fp_Id");
            entity.Property(e => e.FpAktywna)
                .HasDefaultValue(true)
                .HasColumnName("fp_Aktywna");
            entity.Property(e => e.FpCentId).HasColumnName("fp_CentId");
            entity.Property(e => e.FpFormaPlatnosciWysylajJako).HasColumnName("fp_FormaPlatnosciWysylajJako");
            entity.Property(e => e.FpGlowna).HasColumnName("fp_Glowna");
            entity.Property(e => e.FpInstKredytId).HasColumnName("fp_InstKredytId");
            entity.Property(e => e.FpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fp_Nazwa");
            entity.Property(e => e.FpOpisPlatnosciInna)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fp_OpisPlatnosciInna");
            entity.Property(e => e.FpRachBankId).HasColumnName("fp_RachBankId");
            entity.Property(e => e.FpTermin).HasColumnName("fp_Termin");
            entity.Property(e => e.FpTerminalPlatniczy).HasColumnName("fp_TerminalPlatniczy");
            entity.Property(e => e.FpTyp).HasColumnName("fp_Typ");
        });

        modelBuilder.Entity<SlFormatNumeracji>(entity =>
        {
            entity.HasKey(e => e.FnId);

            entity.ToTable("sl_FormatNumeracji");

            entity.Property(e => e.FnId)
                .ValueGeneratedNever()
                .HasColumnName("fn_Id");
            entity.Property(e => e.FnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fn_Nazwa");
            entity.Property(e => e.FnTypNumeru)
                .HasDefaultValue(1)
                .HasColumnName("fn_TypNumeru");
        });

        modelBuilder.Entity<SlFormatNumeracjiElement>(entity =>
        {
            entity.HasKey(e => e.FneId);

            entity.ToTable("sl_FormatNumeracjiElement");

            entity.Property(e => e.FneId)
                .ValueGeneratedNever()
                .HasColumnName("fne_Id");
            entity.Property(e => e.FneIdFormatu).HasColumnName("fne_IdFormatu");
            entity.Property(e => e.FneLicznikFmt).HasColumnName("fne_LicznikFmt");
            entity.Property(e => e.FneLicznikId).HasColumnName("fne_LicznikId");
            entity.Property(e => e.FneLicznikZliczanie)
                .HasDefaultValue(0)
                .HasColumnName("fne_LicznikZliczanie");
            entity.Property(e => e.FneMiesiacFmt).HasColumnName("fne_MiesiacFmt");
            entity.Property(e => e.FneMpk)
                .HasDefaultValue(0)
                .HasColumnName("fne_MPK");
            entity.Property(e => e.FnePozycja).HasColumnName("fne_Pozycja");
            entity.Property(e => e.FneRokFmt).HasColumnName("fne_RokFmt");
            entity.Property(e => e.FneSeparator)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fne_Separator");
            entity.Property(e => e.FneTekst)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fne_Tekst");
            entity.Property(e => e.FneTyp).HasColumnName("fne_Typ");

            entity.HasOne(d => d.FneIdFormatuNavigation).WithMany(p => p.SlFormatNumeracjiElements)
                .HasForeignKey(d => d.FneIdFormatu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_FormatNumeracjiElement_sl_FormatNumeracji");

            entity.HasOne(d => d.FneLicznik).WithMany(p => p.SlFormatNumeracjiElements)
                .HasForeignKey(d => d.FneLicznikId)
                .HasConstraintName("FK_sl_FormatNumeracjiElement_sl_LicznikNumeracji");
        });

        modelBuilder.Entity<SlGmina>(entity =>
        {
            entity.HasKey(e => e.GmId);

            entity.ToTable("sl_Gmina");

            entity.Property(e => e.GmId)
                .ValueGeneratedNever()
                .HasColumnName("gm_Id");
            entity.Property(e => e.GmAktualna)
                .HasDefaultValue(true)
                .HasColumnName("gm_Aktualna");
            entity.Property(e => e.GmKodGus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("gm_KodGUS");
            entity.Property(e => e.GmNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gm_Nazwa");
            entity.Property(e => e.GmPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("gm_Powiat");
            entity.Property(e => e.GmTyp)
                .HasDefaultValue(1)
                .HasColumnName("gm_Typ");
        });

        modelBuilder.Entity<SlGratAtrybutGodzinDni>(entity =>
        {
            entity.HasKey(e => e.AgdId);

            entity.ToTable("sl_GratAtrybutGodzinDni");

            entity.Property(e => e.AgdId)
                .ValueGeneratedNever()
                .HasColumnName("agd_Id");
            entity.Property(e => e.AgdNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("agd_Nazwa");
            entity.Property(e => e.AgdWspolczynnik)
                .HasColumnType("money")
                .HasColumnName("agd_Wspolczynnik");
        });

        modelBuilder.Entity<SlGratPrzyczynaRozwUmowy>(entity =>
        {
            entity.HasKey(e => e.GpruId);

            entity.ToTable("sl_GratPrzyczynaRozwUmowy");

            entity.Property(e => e.GpruId)
                .ValueGeneratedNever()
                .HasColumnName("gpru_Id");
            entity.Property(e => e.GpruKod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gpru_Kod");
            entity.Property(e => e.GpruNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gpru_Nazwa");
        });

        modelBuilder.Entity<SlGratTrescDok>(entity =>
        {
            entity.HasKey(e => e.TdId);

            entity.ToTable("sl_GratTrescDok");

            entity.Property(e => e.TdId)
                .ValueGeneratedNever()
                .HasColumnName("td_Id");
            entity.Property(e => e.TdDomyslna).HasColumnName("td_Domyslna");
            entity.Property(e => e.TdFormat).HasColumnName("td_Format");
            entity.Property(e => e.TdOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("td_Opis");
            entity.Property(e => e.TdTresc)
                .HasColumnType("image")
                .HasColumnName("td_Tresc");
            entity.Property(e => e.TdTypDokumentu).HasColumnName("td_TypDokumentu");
        });

        modelBuilder.Entity<SlGrupaBlokadyObiektu>(entity =>
        {
            entity.HasKey(e => e.GrbloId).HasName("PK__sl_Grupa__957763A726C669EB");

            entity.ToTable("sl_GrupaBlokadyObiektu");

            entity.Property(e => e.GrbloId)
                .ValueGeneratedNever()
                .HasColumnName("grblo_Id");
            entity.Property(e => e.GrbloNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("grblo_Nazwa");
        });

        modelBuilder.Entity<SlGrupaDokumentow>(entity =>
        {
            entity.HasKey(e => e.GdId);

            entity.ToTable("sl_GrupaDokumentow");

            entity.Property(e => e.GdId)
                .ValueGeneratedNever()
                .HasColumnName("gd_Id");
            entity.Property(e => e.GdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gd_Nazwa");
            entity.Property(e => e.GdProgramy).HasColumnName("gd_Programy");
            entity.Property(e => e.GdRodzajDokumentuGlownego).HasColumnName("gd_RodzajDokumentuGlownego");
            entity.Property(e => e.GdTypDokumentuGlownego).HasColumnName("gd_TypDokumentuGlownego");
            entity.Property(e => e.GdTypDokumentuPowiazanego).HasColumnName("gd_TypDokumentuPowiazanego");
        });

        modelBuilder.Entity<SlGrupaKh>(entity =>
        {
            entity.HasKey(e => e.GrkId);

            entity.ToTable("sl_GrupaKh");

            entity.HasIndex(e => e.GrkNazwa, "IX_sl_GrupaKh").IsUnique();

            entity.Property(e => e.GrkId)
                .ValueGeneratedNever()
                .HasColumnName("grk_Id");
            entity.Property(e => e.GrkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("grk_Nazwa");
        });

        modelBuilder.Entity<SlGrupaPrac>(entity =>
        {
            entity.HasKey(e => e.GrpId);

            entity.ToTable("sl_GrupaPrac");

            entity.Property(e => e.GrpId)
                .ValueGeneratedNever()
                .HasColumnName("grp_Id");
            entity.Property(e => e.GrpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("grp_Nazwa");
        });

        modelBuilder.Entity<SlGrupaTw>(entity =>
        {
            entity.HasKey(e => e.GrtId);

            entity.ToTable("sl_GrupaTw");

            entity.Property(e => e.GrtId)
                .ValueGeneratedNever()
                .HasColumnName("grt_Id");
            entity.Property(e => e.GrtNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("grt_Nazwa");
            entity.Property(e => e.GrtNrAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("grt_NrAnalityka");
        });

        modelBuilder.Entity<SlGrupaUz>(entity =>
        {
            entity.HasKey(e => e.UgId);

            entity.ToTable("sl_GrupaUz");

            entity.Property(e => e.UgId)
                .ValueGeneratedNever()
                .HasColumnName("ug_Id");
            entity.Property(e => e.UgNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ug_Nazwa");
        });

        modelBuilder.Entity<SlHarmonogramUmowyCp>(entity =>
        {
            entity.HasKey(e => e.HucpId);

            entity.ToTable("sl_HarmonogramUmowyCP");

            entity.Property(e => e.HucpId)
                .ValueGeneratedNever()
                .HasColumnName("hucp_Id");
            entity.Property(e => e.HucpDataRachDzien)
                .HasDefaultValue(1)
                .HasColumnName("hucp_DataRachDzien");
            entity.Property(e => e.HucpDataRachDzienTygodnia)
                .HasDefaultValue(1)
                .HasColumnName("hucp_DataRachDzienTygodnia");
            entity.Property(e => e.HucpIdSzablonuWydruku).HasColumnName("hucp_IdSzablonuWydruku");
            entity.Property(e => e.HucpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("hucp_Nazwa");
            entity.Property(e => e.HucpOkresSposobOkreslenia).HasColumnName("hucp_OkresSposobOkreslenia");
            entity.Property(e => e.HucpOkresWydluzOkres).HasColumnName("hucp_OkresWydluzOkres");
            entity.Property(e => e.HucpRodzajCyklu).HasColumnName("hucp_RodzajCyklu");
            entity.Property(e => e.HucpRodzajPozycji)
                .HasDefaultValue(1)
                .HasColumnName("hucp_RodzajPozycji");
            entity.Property(e => e.HucpRodzajPrzychodu).HasColumnName("hucp_RodzajPrzychodu");
            entity.Property(e => e.HucpRozliczAkordy).HasColumnName("hucp_RozliczAkordy");
            entity.Property(e => e.HucpRozliczEcp).HasColumnName("hucp_RozliczECP");
            entity.Property(e => e.HucpRozliczEcpmiesiac)
                .HasDefaultValue(1)
                .HasColumnName("hucp_RozliczECPMiesiac");
            entity.Property(e => e.HucpRozliczEwidGodzinPracy).HasColumnName("hucp_RozliczEwidGodzinPracy");
            entity.Property(e => e.HucpRozliczEwidGodzinPracyMiesiac)
                .HasDefaultValue(1)
                .HasColumnName("hucp_RozliczEwidGodzinPracyMiesiac");
            entity.Property(e => e.HucpRozliczProwizje).HasColumnName("hucp_RozliczProwizje");
            entity.Property(e => e.HucpRyczalt).HasColumnName("hucp_Ryczalt");

            entity.HasOne(d => d.HucpIdSzablonuWydrukuNavigation).WithMany(p => p.SlHarmonogramUmowyCps)
                .HasForeignKey(d => d.HucpIdSzablonuWydruku)
                .HasConstraintName("FK_sl_HarmonogramUmowyCP_sl_GratTrescDok");
        });

        modelBuilder.Entity<SlInformacjeOpodatkuAkcyzowym>(entity =>
        {
            entity.HasKey(e => e.SliopId).HasName("PK__sl_InformacjeOPodatkuAkcyzowym");

            entity.ToTable("sl_InformacjeOPodatkuAkcyzowym");

            entity.Property(e => e.SliopId)
                .ValueGeneratedNever()
                .HasColumnName("sliop_Id");
            entity.Property(e => e.SliopAktywna)
                .HasDefaultValue(true)
                .HasColumnName("sliop_Aktywna");
            entity.Property(e => e.SliopWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sliop_Wartosc");
        });

        modelBuilder.Entity<SlKalendCykl>(entity =>
        {
            entity.HasKey(e => e.SlcId);

            entity.ToTable("sl_KalendCykl");

            entity.Property(e => e.SlcId)
                .ValueGeneratedNever()
                .HasColumnName("slc_Id");
            entity.Property(e => e.SlcIdKalend).HasColumnName("slc_IdKalend");
            entity.Property(e => e.SlcOd)
                .HasColumnType("datetime")
                .HasColumnName("slc_Od");

            entity.HasOne(d => d.SlcIdKalendNavigation).WithMany(p => p.SlKalendCykls)
                .HasForeignKey(d => d.SlcIdKalend)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_KalendCykl_sl_Kalendarz");
        });

        modelBuilder.Entity<SlKalendDzien>(entity =>
        {
            entity.HasKey(e => e.SldId).HasName("PK_sl_KalendParDnia");

            entity.ToTable("sl_KalendDzien");

            entity.Property(e => e.SldId)
                .ValueGeneratedNever()
                .HasColumnName("sld_Id");
            entity.Property(e => e.SldIdAtrybut).HasColumnName("sld_IdAtrybut");
            entity.Property(e => e.SldIdCykl).HasColumnName("sld_IdCykl");
            entity.Property(e => e.SldIleDzienne).HasColumnName("sld_IleDzienne");
            entity.Property(e => e.SldIleNocne).HasColumnName("sld_IleNocne");
            entity.Property(e => e.SldNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sld_Nazwa");
            entity.Property(e => e.SldNr).HasColumnName("sld_Nr");
            entity.Property(e => e.SldRodzaj).HasColumnName("sld_Rodzaj");
            entity.Property(e => e.SldTypDniaWolnego).HasColumnName("sld_TypDniaWolnego");
            entity.Property(e => e.SldTypPracy).HasColumnName("sld_TypPracy");

            entity.HasOne(d => d.SldTypDniaWolnegoNavigation).WithMany(p => p.SlKalendDziens)
                .HasForeignKey(d => d.SldTypDniaWolnego)
                .HasConstraintName("FK_sl_KalendDzien_sl_TypDniaWolnego");
        });

        modelBuilder.Entity<SlKalendGodzina>(entity =>
        {
            entity.HasKey(e => e.SlgId).HasName("PK_sl_KalendGodziny");

            entity.ToTable("sl_KalendGodzina");

            entity.Property(e => e.SlgId)
                .ValueGeneratedNever()
                .HasColumnName("slg_Id");
            entity.Property(e => e.SlgDo).HasColumnName("slg_Do");
            entity.Property(e => e.SlgIdAtrybutuGodzin)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("slg_IdAtrybutuGodzin");
            entity.Property(e => e.SlgIdDzien).HasColumnName("slg_IdDzien");
            entity.Property(e => e.SlgOd).HasColumnName("slg_Od");
            entity.Property(e => e.SlgPoraDnia).HasColumnName("slg_PoraDnia");

            entity.HasOne(d => d.SlgIdAtrybutuGodzinNavigation).WithMany(p => p.SlKalendGodzinas)
                .HasForeignKey(d => d.SlgIdAtrybutuGodzin)
                .HasConstraintName("FK_sl_KalendGodzina_sl_AtrybutGodzinowy");
        });

        modelBuilder.Entity<SlKalendWyjGodzina>(entity =>
        {
            entity.HasKey(e => e.SlwgId).HasName("PK_sl_KalendWyjGodziny");

            entity.ToTable("sl_KalendWyjGodzina");

            entity.Property(e => e.SlwgId)
                .ValueGeneratedNever()
                .HasColumnName("slwg_Id");
            entity.Property(e => e.SlwgDo).HasColumnName("slwg_Do");
            entity.Property(e => e.SlwgIdAtrybutuGodzin)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("slwg_IdAtrybutuGodzin");
            entity.Property(e => e.SlwgIdWyj).HasColumnName("slwg_IdWyj");
            entity.Property(e => e.SlwgOd).HasColumnName("slwg_Od");
            entity.Property(e => e.SlwgPoraDnia).HasColumnName("slwg_PoraDnia");

            entity.HasOne(d => d.SlwgIdAtrybutuGodzinNavigation).WithMany(p => p.SlKalendWyjGodzinas)
                .HasForeignKey(d => d.SlwgIdAtrybutuGodzin)
                .HasConstraintName("FK_sl_KalendWyjGodzina_sl_AtrybutGodzinowy");
        });

        modelBuilder.Entity<SlKalendWyjatek>(entity =>
        {
            entity.HasKey(e => e.SlwId);

            entity.ToTable("sl_KalendWyjatek");

            entity.Property(e => e.SlwId)
                .ValueGeneratedNever()
                .HasColumnName("slw_Id");
            entity.Property(e => e.SlwData)
                .HasColumnType("datetime")
                .HasColumnName("slw_Data");
            entity.Property(e => e.SlwGodzinyPracyOd).HasColumnName("slw_GodzinyPracyOd");
            entity.Property(e => e.SlwIdAtrybut).HasColumnName("slw_IdAtrybut");
            entity.Property(e => e.SlwIdKalend).HasColumnName("slw_IdKalend");
            entity.Property(e => e.SlwIleDzienne).HasColumnName("slw_IleDzienne");
            entity.Property(e => e.SlwIleNocne).HasColumnName("slw_IleNocne");
            entity.Property(e => e.SlwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slw_Nazwa");
            entity.Property(e => e.SlwRodzaj).HasColumnName("slw_Rodzaj");
            entity.Property(e => e.SlwTypDniaWolnego).HasColumnName("slw_TypDniaWolnego");
            entity.Property(e => e.SlwTypPracy).HasColumnName("slw_TypPracy");
            entity.Property(e => e.SlwUstawowy).HasColumnName("slw_Ustawowy");

            entity.HasOne(d => d.SlwIdKalendNavigation).WithMany(p => p.SlKalendWyjateks)
                .HasForeignKey(d => d.SlwIdKalend)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_KalendWyjatek_sl_Kalendarz");

            entity.HasOne(d => d.SlwTypDniaWolnegoNavigation).WithMany(p => p.SlKalendWyjateks)
                .HasForeignKey(d => d.SlwTypDniaWolnego)
                .HasConstraintName("FK_sl_KalendWyjatek_sl_TypDniaWolnego");
        });

        modelBuilder.Entity<SlKalendarz>(entity =>
        {
            entity.HasKey(e => e.SlkId);

            entity.ToTable("sl_Kalendarz");

            entity.Property(e => e.SlkId)
                .ValueGeneratedNever()
                .HasColumnName("slk_Id");
            entity.Property(e => e.SlkGodzinaRozpoczeciaPracy).HasColumnName("slk_GodzinaRozpoczeciaPracy");
            entity.Property(e => e.SlkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slk_Nazwa");
            entity.Property(e => e.SlkRodzajGodzin).HasColumnName("slk_RodzajGodzin");
        });

        modelBuilder.Entity<SlKategoriaDokumentu>(entity =>
        {
            entity.HasKey(e => e.KdId);

            entity.ToTable("sl_KategoriaDokumentu");

            entity.Property(e => e.KdId)
                .ValueGeneratedNever()
                .HasColumnName("kd_Id");
            entity.Property(e => e.KdDomyslna).HasColumnName("kd_Domyslna");
            entity.Property(e => e.KdGratyfikant).HasColumnName("kd_Gratyfikant");
            entity.Property(e => e.KdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kd_Nazwa");
            entity.Property(e => e.KdOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kd_Opis");
        });

        modelBuilder.Entity<SlKategoriaPozycjiDekretu>(entity =>
        {
            entity.HasKey(e => e.KpdId);

            entity.ToTable("sl_KategoriaPozycjiDekretu");

            entity.Property(e => e.KpdId)
                .ValueGeneratedNever()
                .HasColumnName("kpd_Id");
            entity.Property(e => e.KpdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kpd_Nazwa");
        });

        modelBuilder.Entity<SlKategoriaZestawien>(entity =>
        {
            entity.HasKey(e => e.KzId);

            entity.ToTable("sl_KategoriaZestawien");

            entity.Property(e => e.KzId)
                .ValueGeneratedNever()
                .HasColumnName("kz_Id");
            entity.Property(e => e.KzIkona).HasColumnName("kz_Ikona");
            entity.Property(e => e.KzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kz_Nazwa");
        });

        modelBuilder.Entity<SlKategorieSm>(entity =>
        {
            entity.HasKey(e => e.SlksId);

            entity.ToTable("sl_KategorieSMS");

            entity.Property(e => e.SlksId)
                .ValueGeneratedNever()
                .HasColumnName("slks_Id");
            entity.Property(e => e.SlksActive).HasColumnName("slks_Active");
            entity.Property(e => e.SlksCategoryName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slks_CategoryName");
        });

        modelBuilder.Entity<SlKategorium>(entity =>
        {
            entity.HasKey(e => e.KatId);

            entity.ToTable("sl_Kategoria");

            entity.Property(e => e.KatId)
                .ValueGeneratedNever()
                .HasColumnName("kat_Id");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.KatPodtytul)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kat_Podtytul");
            entity.Property(e => e.KatTyp).HasColumnName("kat_Typ");
        });

        modelBuilder.Entity<SlKodCn>(entity =>
        {
            entity.HasKey(e => e.KcnId);

            entity.ToTable("sl_KodCN");

            entity.HasIndex(e => e.KcnKodCn, "U_KodCN").IsUnique();

            entity.Property(e => e.KcnId)
                .ValueGeneratedNever()
                .HasColumnName("kcn_Id");
            entity.Property(e => e.KcnGtu).HasColumnName("kcn_GTU");
            entity.Property(e => e.KcnKodCn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kcn_KodCN");
            entity.Property(e => e.KcnOpis)
                .HasMaxLength(1500)
                .IsUnicode(false)
                .HasColumnName("kcn_Opis");
        });

        modelBuilder.Entity<SlKodJednostkiTransportowejEdd>(entity =>
        {
            entity.HasKey(e => e.SlkjtId).HasName("PK__sl_KodJednostkiTransportowejEDD");

            entity.ToTable("sl_KodJednostkiTransportowejEDD");

            entity.Property(e => e.SlkjtId)
                .ValueGeneratedNever()
                .HasColumnName("slkjt_Id");
            entity.Property(e => e.SlkjtAktywna)
                .HasDefaultValue(true)
                .HasColumnName("slkjt_Aktywna");
            entity.Property(e => e.SlkjtWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slkjt_Wartosc");
        });

        modelBuilder.Entity<SlKodPkd>(entity =>
        {
            entity.HasKey(e => e.PkdId);

            entity.ToTable("sl_KodPKD");

            entity.Property(e => e.PkdId)
                .ValueGeneratedNever()
                .HasColumnName("pkd_Id");
            entity.Property(e => e.PkdKod)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("pkd_Kod");
            entity.Property(e => e.PkdOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pkd_Opis");
        });

        modelBuilder.Entity<SlKodPocztowy>(entity =>
        {
            entity.HasKey(e => e.KcId);

            entity.ToTable("sl_KodPocztowy");

            entity.Property(e => e.KcId)
                .ValueGeneratedNever()
                .HasColumnName("kc_Id");
            entity.Property(e => e.KcG)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kc_G");
            entity.Property(e => e.KcK)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("kc_K");
            entity.Property(e => e.KcM)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kc_M");
            entity.Property(e => e.KcP)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kc_P");
            entity.Property(e => e.KcU)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("kc_U");
            entity.Property(e => e.KcW)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kc_W");
        });

        modelBuilder.Entity<SlKodPodstawyPrawnejRozwiazaniaStosunkuPracy>(entity =>
        {
            entity.HasKey(e => e.SlkpprId);

            entity.ToTable("sl_KodPodstawyPrawnejRozwiazaniaStosunkuPracy");

            entity.HasIndex(e => e.SlkpprKod, "UQ_sl_KodPodstawyPrawnejRozwiazaniaStosunkuPracy_slkppr_Kod").IsUnique();

            entity.Property(e => e.SlkpprId).HasColumnName("slkppr_Id");
            entity.Property(e => e.SlkpprKod)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("slkppr_Kod");
            entity.Property(e => e.SlkpprOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slkppr_Opis");
        });

        modelBuilder.Entity<SlKodPrzyczynyWyrejestrowanium>(entity =>
        {
            entity.HasKey(e => e.KpwKod);

            entity.ToTable("sl_KodPrzyczynyWyrejestrowania");

            entity.Property(e => e.KpwKod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("kpw_Kod");
            entity.Property(e => e.KpwId).HasColumnName("kpw_Id");
            entity.Property(e => e.KpwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kpw_Opis");
        });

        modelBuilder.Entity<SlKodRodzajuOpakowanTwAkcyzowych>(entity =>
        {
            entity.HasKey(e => e.SlkroId).HasName("PK__sl_KodRodzajuOpakowanTwAkcyzowych");

            entity.ToTable("sl_KodRodzajuOpakowanTwAkcyzowych");

            entity.Property(e => e.SlkroId)
                .ValueGeneratedNever()
                .HasColumnName("slkro_Id");
            entity.Property(e => e.SlkroAktywna)
                .HasDefaultValue(true)
                .HasColumnName("slkro_Aktywna");
            entity.Property(e => e.SlkroWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slkro_Wartosc");
            entity.Property(e => e.SlkroWartoscXml)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("slkro_WartoscXML");
        });

        modelBuilder.Entity<SlKodRodzajuTransakcji>(entity =>
        {
            entity.HasKey(e => new { e.KrtKod, e.KrtNazwa });

            entity.ToTable("sl_KodRodzajuTransakcji");

            entity.Property(e => e.KrtKod).HasColumnName("krt_Kod");
            entity.Property(e => e.KrtNazwa)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("krt_Nazwa");
            entity.Property(e => e.KrtAktywny)
                .HasDefaultValue(true)
                .HasColumnName("krt_Aktywny");
            entity.Property(e => e.KrtOkresDo).HasColumnName("krt_OkresDo");
        });

        modelBuilder.Entity<SlKodRodzajuTransportuEdd>(entity =>
        {
            entity.HasKey(e => e.SlkrtId).HasName("PK__sl_KodRodzajuTransportuEDD");

            entity.ToTable("sl_KodRodzajuTransportuEDD");

            entity.Property(e => e.SlkrtId)
                .ValueGeneratedNever()
                .HasColumnName("slkrt_Id");
            entity.Property(e => e.SlkrtAktywna)
                .HasDefaultValue(true)
                .HasColumnName("slkrt_Aktywna");
            entity.Property(e => e.SlkrtWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slkrt_Wartosc");
        });

        modelBuilder.Entity<SlKodSwiadczenium>(entity =>
        {
            entity.HasKey(e => e.KswKod);

            entity.ToTable("sl_KodSwiadczenia");

            entity.Property(e => e.KswKod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ksw_Kod");
            entity.Property(e => e.KswId).HasColumnName("ksw_Id");
            entity.Property(e => e.KswOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ksw_Opis");
        });

        modelBuilder.Entity<SlKodWygasnieciaStosunkuPracy>(entity =>
        {
            entity.HasKey(e => e.SlkwspId);

            entity.ToTable("sl_KodWygasnieciaStosunkuPracy");

            entity.HasIndex(e => e.SlkwspKod, "UQ_sl_KodWygasnieciaStosunkuPracy_slkwsp_Kod").IsUnique();

            entity.Property(e => e.SlkwspId).HasColumnName("slkwsp_Id");
            entity.Property(e => e.SlkwspKod)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("slkwsp_Kod");
            entity.Property(e => e.SlkwspOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slkwsp_Opis");
        });

        modelBuilder.Entity<SlKodWyrobuAkcyzowego>(entity =>
        {
            entity.HasKey(e => e.SlkwaId).HasName("PK__sl_KodWyrobuAkcyzowego");

            entity.ToTable("sl_KodWyrobuAkcyzowego");

            entity.Property(e => e.SlkwaId)
                .ValueGeneratedNever()
                .HasColumnName("slkwa_Id");
            entity.Property(e => e.SlkwaAktywna)
                .HasDefaultValue(true)
                .HasColumnName("slkwa_Aktywna");
            entity.Property(e => e.SlkwaWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slkwa_Wartosc");
            entity.Property(e => e.SlkwaWartoscXml)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("slkwa_WartoscXML");
        });

        modelBuilder.Entity<SlKrajPochodzenium>(entity =>
        {
            entity.HasKey(e => e.KrpId);

            entity.ToTable("sl_KrajPochodzenia");

            entity.Property(e => e.KrpId).HasColumnName("krp_Id");
            entity.Property(e => e.KrpKod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("krp_Kod");
            entity.Property(e => e.KrpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("krp_Nazwa");
        });

        modelBuilder.Entity<SlKursBhp>(entity =>
        {
            entity.HasKey(e => e.KbhpId);

            entity.ToTable("sl_KursBHP");

            entity.Property(e => e.KbhpId)
                .ValueGeneratedNever()
                .HasColumnName("kbhp_Id");
            entity.Property(e => e.KbhpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kbhp_Nazwa");
        });

        modelBuilder.Entity<SlLicznikNumeracji>(entity =>
        {
            entity.HasKey(e => e.LnId);

            entity.ToTable("sl_LicznikNumeracji");

            entity.Property(e => e.LnId)
                .ValueGeneratedNever()
                .HasColumnName("ln_Id");
            entity.Property(e => e.LnDomyslna)
                .HasDefaultValue(1)
                .HasColumnName("ln_Domyslna");
            entity.Property(e => e.LnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ln_Nazwa");
            entity.Property(e => e.LnTyp).HasColumnName("ln_Typ");
            entity.Property(e => e.LnWartoscAktualna)
                .HasDefaultValue(1)
                .HasColumnName("ln_WartoscAktualna");
        });

        modelBuilder.Entity<SlLicznikNumeracjiRok>(entity =>
        {
            entity.HasKey(e => e.LnrId);

            entity.ToTable("sl_LicznikNumeracjiRok");

            entity.Property(e => e.LnrId)
                .ValueGeneratedNever()
                .HasColumnName("lnr_Id");
            entity.Property(e => e.LnrIdLicznika).HasColumnName("lnr_IdLicznika");
            entity.Property(e => e.LnrRok).HasColumnName("lnr_Rok");
            entity.Property(e => e.LnrWartoscAktualna).HasColumnName("lnr_WartoscAktualna");

            entity.HasOne(d => d.LnrIdLicznikaNavigation).WithMany(p => p.SlLicznikNumeracjiRoks)
                .HasForeignKey(d => d.LnrIdLicznika)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_LicznikNumeracjiRok_sl_LicznikNumeracji");
        });

        modelBuilder.Entity<SlMagazyn>(entity =>
        {
            entity.HasKey(e => e.MagId);

            entity.ToTable("sl_Magazyn", tb =>
                {
                    tb.HasTrigger("tr_MagazynInsMod");
                    tb.HasTrigger("tr_slMagazynInserting");
                    tb.HasTrigger("tr_sl_Magazyn_Deleting");
                });

            entity.Property(e => e.MagId)
                .ValueGeneratedNever()
                .HasColumnName("mag_Id");
            entity.Property(e => e.MagAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mag_Analityka");
            entity.Property(e => e.MagGlowny).HasColumnName("mag_Glowny");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.MagOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_Opis");
            entity.Property(e => e.MagPos).HasColumnName("mag_POS");
            entity.Property(e => e.MagPosadres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mag_POSAdres");
            entity.Property(e => e.MagPosident).HasColumnName("mag_POSIdent");
            entity.Property(e => e.MagPosnazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_POSNazwa");
            entity.Property(e => e.MagStatus)
                .HasDefaultValue(1)
                .HasColumnName("mag_Status");
            entity.Property(e => e.MagSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("mag_Symbol");

            entity.HasMany(d => d.PfIdUzytkownikas).WithMany(p => p.PfIdObiektus3)
                .UsingEntity<Dictionary<string, object>>(
                    "SlMagazynProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_sl_MagazynProfil_pd_Uzytkownik"),
                    l => l.HasOne<SlMagazyn>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_sl_MagazynProfil_sl_Magazyn"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("sl_MagazynProfil", tb => tb.HasTrigger("tr_sl_MagazynProfil_Inserting"));
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_idUzytkownika");
                    });

            entity.HasMany(d => d.PfIdUzytkownikas1).WithMany(p => p.PfIdObiektus5)
                .UsingEntity<Dictionary<string, object>>(
                    "SlMagazynZamowieniaMmprofil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_sl_MagazynZamowieniaMMProfil_pd_Uzytkownik"),
                    l => l.HasOne<SlMagazyn>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_sl_MagazynZamowieniaMMProfil_sl_Magazyn"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("sl_MagazynZamowieniaMMProfil");
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_idUzytkownika");
                    });

            entity.HasMany(d => d.PfIdUzytkownikasNavigation).WithMany(p => p.PfIdObiektus4)
                .UsingEntity<Dictionary<string, object>>(
                    "SlMagazynPrzesunieciaProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_sl_MagazynPrzesunieciaProfil_pd_Uzytkownik"),
                    l => l.HasOne<SlMagazyn>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_sl_MagazynPrzesunieciaProfil_sl_Magazyn"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("sl_MagazynPrzesunieciaProfil");
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_idUzytkownika");
                    });
        });

        modelBuilder.Entity<SlModelTowar>(entity =>
        {
            entity.HasKey(e => e.MtwId);

            entity.ToTable("sl_ModelTowar");

            entity.HasIndex(e => e.MtwIdTowar, "UQ_sl_ModelTowar_mtw_IdTowar").IsUnique();

            entity.Property(e => e.MtwId)
                .ValueGeneratedNever()
                .HasColumnName("mtw_Id");
            entity.Property(e => e.MtwIdModel).HasColumnName("mtw_IdModel");
            entity.Property(e => e.MtwIdTowar).HasColumnName("mtw_IdTowar");

            entity.HasOne(d => d.MtwIdModelNavigation).WithMany(p => p.SlModelTowars)
                .HasForeignKey(d => d.MtwIdModel)
                .HasConstraintName("FK_sl_ModelTowar_sl_ModelTw");

            entity.HasOne(d => d.MtwIdTowarNavigation).WithOne(p => p.SlModelTowar)
                .HasForeignKey<SlModelTowar>(d => d.MtwIdTowar)
                .HasConstraintName("FK_sl_ModelTowar_tw__Towar");
        });

        modelBuilder.Entity<SlModelTw>(entity =>
        {
            entity.HasKey(e => e.MdtId);

            entity.ToTable("sl_ModelTw");

            entity.Property(e => e.MdtId)
                .ValueGeneratedNever()
                .HasColumnName("mdt_Id");
            entity.Property(e => e.MdtNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mdt_Nazwa");
        });

        modelBuilder.Entity<SlObywatelstwo>(entity =>
        {
            entity.HasKey(e => e.ObwId);

            entity.ToTable("sl_Obywatelstwo");

            entity.HasIndex(e => e.ObwId, "IX_Nazwa").IsUnique();

            entity.Property(e => e.ObwId)
                .ValueGeneratedNever()
                .HasColumnName("obw_Id");
            entity.Property(e => e.ObwIdPanstwa).HasColumnName("obw_IdPanstwa");
            entity.Property(e => e.ObwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("obw_Nazwa");

            entity.HasOne(d => d.ObwIdPanstwaNavigation).WithMany(p => p.SlObywatelstwos)
                .HasForeignKey(d => d.ObwIdPanstwa)
                .HasConstraintName("FK_sl_Obywatelstwo_sl_Panstwo");
        });

        modelBuilder.Entity<SlOddzialKasa>(entity =>
        {
            entity.HasKey(e => e.SokId);

            entity.ToTable("sl_OddzialKasa");

            entity.Property(e => e.SokId)
                .ValueGeneratedNever()
                .HasColumnName("sok_Id");
            entity.Property(e => e.SokIdKasa).HasColumnName("sok_IdKasa");
            entity.Property(e => e.SokIdOddzial).HasColumnName("sok_IdOddzial");

            entity.HasOne(d => d.SokIdKasaNavigation).WithMany(p => p.SlOddzialKasas)
                .HasForeignKey(d => d.SokIdKasa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_OddzialKasa_sl_Kasa");

            entity.HasOne(d => d.SokIdOddzialNavigation).WithMany(p => p.SlOddzialKasas)
                .HasForeignKey(d => d.SokIdOddzial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_OddzialKasa_sl_Oddzialy");
        });

        modelBuilder.Entity<SlOddzialMagazyn>(entity =>
        {
            entity.HasKey(e => e.SomId);

            entity.ToTable("sl_OddzialMagazyn");

            entity.Property(e => e.SomId)
                .ValueGeneratedNever()
                .HasColumnName("som_Id");
            entity.Property(e => e.SomIdMagazyn).HasColumnName("som_IdMagazyn");
            entity.Property(e => e.SomIdOddzial).HasColumnName("som_IdOddzial");

            entity.HasOne(d => d.SomIdMagazynNavigation).WithMany(p => p.SlOddzialMagazyns)
                .HasForeignKey(d => d.SomIdMagazyn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_OddzialMagazyn_sl_Magazyn");

            entity.HasOne(d => d.SomIdOddzialNavigation).WithMany(p => p.SlOddzialMagazyns)
                .HasForeignKey(d => d.SomIdOddzial)
                .HasConstraintName("FK_sl_OddzialMagazyn_sl_Oddzialy");
        });

        modelBuilder.Entity<SlOddzialNfz>(entity =>
        {
            entity.HasKey(e => e.OnfzId);

            entity.ToTable("sl_OddzialNFZ");

            entity.HasIndex(e => e.OnfzKod, "IX_sl_OddzialNFZ_Kod").IsUnique();

            entity.Property(e => e.OnfzId)
                .ValueGeneratedNever()
                .HasColumnName("onfz_Id");
            entity.Property(e => e.OnfzKod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("onfz_Kod");
            entity.Property(e => e.OnfzOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("onfz_Opis");
        });

        modelBuilder.Entity<SlOddzialy>(entity =>
        {
            entity.HasKey(e => e.SoId);

            entity.ToTable("sl_Oddzialy");

            entity.Property(e => e.SoId)
                .ValueGeneratedNever()
                .HasColumnName("so_Id");
            entity.Property(e => e.SoAktywny)
                .HasDefaultValue(true)
                .HasColumnName("so_Aktywny");
            entity.Property(e => e.SoBiezacy).HasColumnName("so_Biezacy");
            entity.Property(e => e.SoEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("so_Email");
            entity.Property(e => e.SoIdKonta).HasColumnName("so_IdKonta");
            entity.Property(e => e.SoLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("so_Link");
            entity.Property(e => e.SoNazwa)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("so_Nazwa");
            entity.Property(e => e.SoOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("so_Opis");
            entity.Property(e => e.SoSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("so_Symbol");
        });

        modelBuilder.Entity<SlOpi>(entity =>
        {
            entity.HasKey(e => e.SopId);

            entity.ToTable("sl_Opis");

            entity.Property(e => e.SopId)
                .ValueGeneratedNever()
                .HasColumnName("sop_Id");
            entity.Property(e => e.SopOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sop_Opis");
        });

        modelBuilder.Entity<SlOpisAbsencji>(entity =>
        {
            entity.HasKey(e => e.OaId);

            entity.ToTable("sl_OpisAbsencji");

            entity.Property(e => e.OaId)
                .ValueGeneratedNever()
                .HasColumnName("oa_Id");
            entity.Property(e => e.OaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oa_Nazwa");
        });

        modelBuilder.Entity<SlPanstwaMiejscaProwadzeniaDzialalnosci>(entity =>
        {
            entity.HasKey(e => e.PmpdId);

            entity.ToTable("sl_PanstwaMiejscaProwadzeniaDzialalnosci");

            entity.Property(e => e.PmpdId)
                .ValueGeneratedNever()
                .HasColumnName("pmpd_Id");
            entity.Property(e => e.PmpdIdPanstwa).HasColumnName("pmpd_IdPanstwa");
            entity.Property(e => e.PmpdNumerIdentyfikacji)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pmpd_NumerIdentyfikacji");
            entity.Property(e => e.PmpdRodzajIdentyfikacji).HasColumnName("pmpd_RodzajIdentyfikacji");

            entity.HasOne(d => d.PmpdIdPanstwaNavigation).WithMany(p => p.SlPanstwaMiejscaProwadzeniaDzialalnoscis)
                .HasForeignKey(d => d.PmpdIdPanstwa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_PanstwaMiejscaProwadzeniaDzialalnosci_sl_Panstwo");
        });

        modelBuilder.Entity<SlPanstwo>(entity =>
        {
            entity.HasKey(e => e.PaId);

            entity.ToTable("sl_Panstwo");

            entity.Property(e => e.PaId)
                .ValueGeneratedNever()
                .HasColumnName("pa_Id");
            entity.Property(e => e.PaCzlonekUe).HasColumnName("pa_CzlonekUE");
            entity.Property(e => e.PaKodPanstwaIso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("pa_KodPanstwaISO");
            entity.Property(e => e.PaKodPanstwaUe)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pa_KodPanstwaUE");
            entity.Property(e => e.PaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pa_Nazwa");
        });

        modelBuilder.Entity<SlPkwiU>(entity =>
        {
            entity.HasKey(e => e.PkwId);

            entity.ToTable("sl_PKWiU");

            entity.Property(e => e.PkwId)
                .ValueGeneratedNever()
                .HasColumnName("pkw_Id");
            entity.Property(e => e.PkwGtu).HasColumnName("pkw_GTU");
            entity.Property(e => e.PkwNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pkw_Numer");
            entity.Property(e => e.PkwOdwrotneObciazenie).HasColumnName("pkw_OdwrotneObciazenie");
            entity.Property(e => e.PkwOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pkw_Opis");
        });

        modelBuilder.Entity<SlPojCel>(entity =>
        {
            entity.HasKey(e => e.SpcId);

            entity.ToTable("sl_PojCel");

            entity.Property(e => e.SpcId)
                .ValueGeneratedNever()
                .HasColumnName("spc_Id");
            entity.Property(e => e.SpcCel)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("spc_Cel");
            entity.Property(e => e.SpcIdTrasy).HasColumnName("spc_IdTrasy");

            entity.HasOne(d => d.SpcIdTrasyNavigation).WithMany(p => p.SlPojCels)
                .HasForeignKey(d => d.SpcIdTrasy)
                .HasConstraintName("FK_sl_PojCel_sl_PojTrasa");
        });

        modelBuilder.Entity<SlPojTrasa>(entity =>
        {
            entity.HasKey(e => e.SptrId);

            entity.ToTable("sl_PojTrasa");

            entity.Property(e => e.SptrId)
                .ValueGeneratedNever()
                .HasColumnName("sptr_Id");
            entity.Property(e => e.SptrKm)
                .HasColumnType("money")
                .HasColumnName("sptr_Km");
            entity.Property(e => e.SptrTrasa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sptr_Trasa");
        });

        modelBuilder.Entity<SlPojTypStawka>(entity =>
        {
            entity.HasKey(e => e.SpsId);

            entity.ToTable("sl_PojTypStawka");

            entity.Property(e => e.SpsId)
                .ValueGeneratedNever()
                .HasColumnName("sps_Id");
            entity.Property(e => e.SpsStawka)
                .HasColumnType("money")
                .HasColumnName("sps_Stawka");
            entity.Property(e => e.SpsTypPojazdu).HasColumnName("sps_TypPojazdu");
            entity.Property(e => e.SpsWaznaOd)
                .HasColumnType("datetime")
                .HasColumnName("sps_WaznaOd");
        });

        modelBuilder.Entity<SlPokrewienstwo>(entity =>
        {
            entity.HasKey(e => e.PokrId);

            entity.ToTable("sl_Pokrewienstwo");

            entity.HasIndex(e => e.PokrKod, "IX_sl_Pokrewienstwo_Kod").IsUnique();

            entity.Property(e => e.PokrId)
                .ValueGeneratedNever()
                .HasColumnName("pokr_Id");
            entity.Property(e => e.PokrKod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("pokr_Kod");
            entity.Property(e => e.PokrOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pokr_Opis");
        });

        modelBuilder.Entity<SlPowodRozwiazaniaUmowy>(entity =>
        {
            entity.HasKey(e => e.PruId);

            entity.ToTable("sl_PowodRozwiazaniaUmowy");

            entity.Property(e => e.PruId)
                .ValueGeneratedNever()
                .HasColumnName("pru_Id");
            entity.Property(e => e.PruPowod)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pru_Powod");
        });

        modelBuilder.Entity<SlPracaSzczegolnyCharakter>(entity =>
        {
            entity.HasKey(e => e.PchId);

            entity.ToTable("sl_PracaSzczegolnyCharakter");

            entity.Property(e => e.PchId)
                .ValueGeneratedNever()
                .HasColumnName("pch_Id");
            entity.Property(e => e.PchKod)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pch_Kod");
            entity.Property(e => e.PchTresc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("pch_Tresc");
        });

        modelBuilder.Entity<SlPrawoDoEmerytury>(entity =>
        {
            entity.HasKey(e => e.PdeId);

            entity.ToTable("sl_PrawoDoEmerytury");

            entity.HasIndex(e => e.PdeKod, "IX_sl_PrawoDoEmerytury_Kod").IsUnique();

            entity.Property(e => e.PdeId)
                .ValueGeneratedNever()
                .HasColumnName("pde_Id");
            entity.Property(e => e.PdeKod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("pde_Kod");
            entity.Property(e => e.PdeOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pde_Opis");
        });

        modelBuilder.Entity<SlPrzyczynaKorekty>(entity =>
        {
            entity.HasKey(e => e.PkrId);

            entity.ToTable("sl_PrzyczynaKorekty");

            entity.Property(e => e.PkrId)
                .ValueGeneratedNever()
                .HasColumnName("pkr_Id");
            entity.Property(e => e.PkrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pkr_Nazwa");
        });

        modelBuilder.Entity<SlRabat>(entity =>
        {
            entity.HasKey(e => e.RtId);

            entity.ToTable("sl_Rabat");

            entity.Property(e => e.RtId)
                .ValueGeneratedNever()
                .HasColumnName("rt_id");
            entity.Property(e => e.RtNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rt_Nazwa");
            entity.Property(e => e.RtProcent)
                .HasColumnType("money")
                .HasColumnName("rt_Procent");
            entity.Property(e => e.RtRodzaj).HasColumnName("rt_Rodzaj");
        });

        modelBuilder.Entity<SlRejestrKsiegowy>(entity =>
        {
            entity.HasKey(e => e.RksId);

            entity.ToTable("sl_RejestrKsiegowy");

            entity.HasIndex(e => e.RksSymbol, "IX_sl_RejestrKsiegowy_Symbol").IsUnique();

            entity.Property(e => e.RksId)
                .ValueGeneratedNever()
                .HasColumnName("rks_Id");
            entity.Property(e => e.RksDataKursu).HasColumnName("rks_DataKursu");
            entity.Property(e => e.RksDefRodzajKursuWal)
                .HasDefaultValue(2)
                .HasColumnName("rks_DefRodzajKursuWal");
            entity.Property(e => e.RksDefWalutaDekretow)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("rks_DefWalutaDekretow");
            entity.Property(e => e.RksIdKategorii).HasColumnName("rks_IdKategorii");
            entity.Property(e => e.RksIdTypuEwidVat).HasColumnName("rks_IdTypuEwidVAT");
            entity.Property(e => e.RksIdTypuEwidVatoss).HasColumnName("rks_IdTypuEwidVATOss");
            entity.Property(e => e.RksKontrolaBilansowania)
                .HasDefaultValue(1)
                .HasColumnName("rks_KontrolaBilansowania");
            entity.Property(e => e.RksKontrolaDanychVat)
                .HasDefaultValue(2)
                .HasColumnName("rks_KontrolaDanychVAT");
            entity.Property(e => e.RksKontrolaDanychVatoss)
                .HasDefaultValue(1)
                .HasColumnName("rks_KontrolaDanychVATOss");
            entity.Property(e => e.RksKontrolaZgodnosciEwidencjiVat)
                .HasDefaultValue(1)
                .HasColumnName("rks_KontrolaZgodnosciEwidencjiVAT");
            entity.Property(e => e.RksKontrolaZgodnosciEwidencjiVatoss)
                .HasDefaultValue(1)
                .HasColumnName("rks_KontrolaZgodnosciEwidencjiVATOss");
            entity.Property(e => e.RksKopiujOpis).HasColumnName("rks_KopiujOpis");
            entity.Property(e => e.RksKopiujTresc)
                .HasDefaultValue(true)
                .HasColumnName("rks_KopiujTresc");
            entity.Property(e => e.RksNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rks_Nazwa");
            entity.Property(e => e.RksOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rks_Opis");
            entity.Property(e => e.RksOpisDekretu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rks_OpisDekretu");
            entity.Property(e => e.RksOstatniKurs).HasColumnName("rks_OstatniKurs");
            entity.Property(e => e.RksPowiazanieVat).HasColumnName("rks_PowiazanieVAT");
            entity.Property(e => e.RksRodzajDowodu).HasColumnName("rks_RodzajDowodu");
            entity.Property(e => e.RksRodzajZakupu).HasColumnName("rks_RodzajZakupu");
            entity.Property(e => e.RksSposobOdliczania).HasColumnName("rks_SposobOdliczania");
            entity.Property(e => e.RksSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("rks_Symbol");
            entity.Property(e => e.RksUstawMechanizmPpnaRozrachunku).HasColumnName("rks_UstawMechanizmPPNaRozrachunku");
            entity.Property(e => e.RksUstawVatnaRozrachunku).HasColumnName("rks_UstawVATNaRozrachunku");

            entity.HasOne(d => d.RksDefWalutaDekretowNavigation).WithMany(p => p.SlRejestrKsiegowies)
                .HasForeignKey(d => d.RksDefWalutaDekretow)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_RejestrKsiegowy_sl_Waluta");

            entity.HasOne(d => d.RksIdKategoriiNavigation).WithMany(p => p.SlRejestrKsiegowies)
                .HasForeignKey(d => d.RksIdKategorii)
                .HasConstraintName("FK_sl_RejestrKsiegowy_sl_Kategoria");

            entity.HasOne(d => d.RksIdTypuEwidVatNavigation).WithMany(p => p.SlRejestrKsiegowies)
                .HasForeignKey(d => d.RksIdTypuEwidVat)
                .HasConstraintName("FK_sl_RejestrKsiegowy_sl_TypEwidVAT");

            entity.HasOne(d => d.RksIdTypuEwidVatossNavigation).WithMany(p => p.SlRejestrKsiegowies)
                .HasForeignKey(d => d.RksIdTypuEwidVatoss)
                .HasConstraintName("FK_sl_RejestrKsiegowy_sl_EwidVatOss");
        });

        modelBuilder.Entity<SlRodzajDowoduKsiegowego>(entity =>
        {
            entity.HasKey(e => e.RdkId);

            entity.ToTable("sl_RodzajDowoduKsiegowego");

            entity.Property(e => e.RdkId)
                .ValueGeneratedNever()
                .HasColumnName("rdk_Id");
            entity.Property(e => e.RdkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rdk_Nazwa");
            entity.Property(e => e.RdkTypWartosci).HasColumnName("rdk_TypWartosci");
        });

        modelBuilder.Entity<SlRodzajKontaktu>(entity =>
        {
            entity.HasKey(e => e.RkId).HasName("PK_rk_RodzajKontaktu");

            entity.ToTable("sl_RodzajKontaktu");

            entity.Property(e => e.RkId)
                .ValueGeneratedNever()
                .HasColumnName("rk_Id");
            entity.Property(e => e.RkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rk_Nazwa");
        });

        modelBuilder.Entity<SlRodzajObnizki>(entity =>
        {
            entity.HasKey(e => e.RobId);

            entity.ToTable("sl_RodzajObnizki");

            entity.Property(e => e.RobId)
                .ValueGeneratedNever()
                .HasColumnName("rob_Id");
            entity.Property(e => e.RobNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rob_Nazwa");
            entity.Property(e => e.RobNumer).HasColumnName("rob_Numer");
        });

        modelBuilder.Entity<SlRodzajOdliczenium>(entity =>
        {
            entity.HasKey(e => e.RodId);

            entity.ToTable("sl_RodzajOdliczenia");

            entity.Property(e => e.RodId)
                .ValueGeneratedNever()
                .HasColumnName("rod_Id");
            entity.Property(e => e.RodNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rod_Nazwa");
            entity.Property(e => e.RodNumer).HasColumnName("rod_Numer");
        });

        modelBuilder.Entity<SlRodzajZasobu>(entity =>
        {
            entity.HasKey(e => e.ZasId);

            entity.ToTable("sl_RodzajZasobu");

            entity.Property(e => e.ZasId)
                .ValueGeneratedNever()
                .HasColumnName("zas_Id");
            entity.Property(e => e.ZasCalodobowy).HasColumnName("zas_Calodobowy");
            entity.Property(e => e.ZasDniTygodnia).HasColumnName("zas_dniTygodnia");
            entity.Property(e => e.ZasKoniec)
                .HasColumnType("datetime")
                .HasColumnName("zas_Koniec");
            entity.Property(e => e.ZasNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zas_Nazwa");
            entity.Property(e => e.ZasOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zas_Opis");
            entity.Property(e => e.ZasPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("zas_Poczatek");
            entity.Property(e => e.ZasSkala).HasColumnName("zas_Skala");
            entity.Property(e => e.ZasZablokowany).HasColumnName("zas_Zablokowany");
        });

        modelBuilder.Entity<SlSlownik>(entity =>
        {
            entity.HasKey(e => e.SlId);

            entity.ToTable("sl__Slownik");

            entity.Property(e => e.SlId)
                .ValueGeneratedNever()
                .HasColumnName("sl_Id");
            entity.Property(e => e.SlNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sl_Nazwa");
            entity.Property(e => e.SlOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sl_Opis");
            entity.Property(e => e.SlProgramy).HasColumnName("sl_Programy");
            entity.Property(e => e.SlStatusNowosci).HasColumnName("sl_StatusNowosci");
            entity.Property(e => e.SlUkryte).HasColumnName("sl_Ukryte");

            entity.HasMany(d => d.PfIdUzytkownikas).WithMany(p => p.PfIdObiektus6)
                .UsingEntity<Dictionary<string, object>>(
                    "SlSlownikProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_sl__SlownikProfil_pd_Uzytkownik"),
                    l => l.HasOne<SlSlownik>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_sl__SlownikProfil_sl__Slownik"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("sl__SlownikProfil");
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<SlStanCywilny>(entity =>
        {
            entity.HasKey(e => e.ScId);

            entity.ToTable("sl_StanCywilny");

            entity.Property(e => e.ScId)
                .ValueGeneratedNever()
                .HasColumnName("sc_Id");
            entity.Property(e => e.ScStan)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sc_Stan");
        });

        modelBuilder.Entity<SlStanowisko>(entity =>
        {
            entity.HasKey(e => e.StnId);

            entity.ToTable("sl_Stanowisko");

            entity.Property(e => e.StnId)
                .ValueGeneratedNever()
                .HasColumnName("stn_Id");
            entity.Property(e => e.StnKategoriaMax).HasColumnName("stn_KategoriaMax");
            entity.Property(e => e.StnKategoriaMin).HasColumnName("stn_KategoriaMin");
            entity.Property(e => e.StnNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stn_Nazwa");

            entity.HasOne(d => d.StnKategoriaMaxNavigation).WithMany(p => p.SlStanowiskoStnKategoriaMaxNavigations)
                .HasForeignKey(d => d.StnKategoriaMax)
                .HasConstraintName("FK_sl_Stanowisko_sl_StawkaZaszeregowania_Max");

            entity.HasOne(d => d.StnKategoriaMinNavigation).WithMany(p => p.SlStanowiskoStnKategoriaMinNavigations)
                .HasForeignKey(d => d.StnKategoriaMin)
                .HasConstraintName("FK_sl_Stanowisko_sl_StawkaZaszeregowania_Min");
        });

        modelBuilder.Entity<SlStawkaAkordowa>(entity =>
        {
            entity.HasKey(e => e.SaId);

            entity.ToTable("sl_StawkaAkordowa");

            entity.Property(e => e.SaId)
                .ValueGeneratedNever()
                .HasColumnName("sa_Id");
            entity.Property(e => e.SaJednostka)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sa_Jednostka");
            entity.Property(e => e.SaLiniowaPrzelicznik)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("sa_LiniowaPrzelicznik");
            entity.Property(e => e.SaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sa_Nazwa");
            entity.Property(e => e.SaTypStawki).HasColumnName("sa_TypStawki");
        });

        modelBuilder.Entity<SlStawkaAkordowaProg>(entity =>
        {
            entity.HasKey(e => e.SapId);

            entity.ToTable("sl_StawkaAkordowaProg");

            entity.Property(e => e.SapId)
                .ValueGeneratedNever()
                .HasColumnName("sap_Id");
            entity.Property(e => e.SapIdStawkiAkordowej).HasColumnName("sap_IdStawkiAkordowej");
            entity.Property(e => e.SapLp).HasColumnName("sap_Lp");
            entity.Property(e => e.SapProg)
                .HasColumnType("money")
                .HasColumnName("sap_Prog");
            entity.Property(e => e.SapWartosc)
                .HasColumnType("money")
                .HasColumnName("sap_Wartosc");
        });

        modelBuilder.Entity<SlStawkaProwizyjna>(entity =>
        {
            entity.HasKey(e => e.SpId);

            entity.ToTable("sl_StawkaProwizyjna");

            entity.Property(e => e.SpId)
                .ValueGeneratedNever()
                .HasColumnName("sp_Id");
            entity.Property(e => e.SpLiniowaPrzelicznik)
                .HasDefaultValue(0m)
                .HasColumnType("money")
                .HasColumnName("sp_LiniowaPrzelicznik");
            entity.Property(e => e.SpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sp_Nazwa");
            entity.Property(e => e.SpTypStawki).HasColumnName("sp_TypStawki");
        });

        modelBuilder.Entity<SlStawkaProwizyjnaProg>(entity =>
        {
            entity.HasKey(e => e.SppId);

            entity.ToTable("sl_StawkaProwizyjnaProg");

            entity.Property(e => e.SppId)
                .ValueGeneratedNever()
                .HasColumnName("spp_Id");
            entity.Property(e => e.SppIdStawkiProwizyjnej).HasColumnName("spp_IdStawkiProwizyjnej");
            entity.Property(e => e.SppLp).HasColumnName("spp_Lp");
            entity.Property(e => e.SppProg)
                .HasColumnType("money")
                .HasColumnName("spp_Prog");
            entity.Property(e => e.SppWartosc)
                .HasColumnType("money")
                .HasColumnName("spp_Wartosc");
        });

        modelBuilder.Entity<SlStawkaVat>(entity =>
        {
            entity.HasKey(e => e.VatId);

            entity.ToTable("sl_StawkaVAT", tb =>
                {
                    tb.HasTrigger("tr_slStawkiVatDeleting");
                    tb.HasTrigger("tr_slStawkiVatInserting");
                });

            entity.HasIndex(e => e.VatId, "IX_sl_StawkaVAT_Symbol").IsUnique();

            entity.Property(e => e.VatId)
                .ValueGeneratedNever()
                .HasColumnName("vat_Id");
            entity.Property(e => e.VatCzySystemowa).HasColumnName("vat_CzySystemowa");
            entity.Property(e => e.VatCzyWidoczna).HasColumnName("vat_CzyWidoczna");
            entity.Property(e => e.VatIdPanstwo).HasColumnName("vat_IdPanstwo");
            entity.Property(e => e.VatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vat_Nazwa");
            entity.Property(e => e.VatPozDomyslna).HasColumnName("vat_PozDomyslna");
            entity.Property(e => e.VatPozRr).HasColumnName("vat_PozRR");
            entity.Property(e => e.VatPozSprzedaz).HasColumnName("vat_PozSprzedaz");
            entity.Property(e => e.VatPozZakup).HasColumnName("vat_PozZakup");
            entity.Property(e => e.VatPozycja).HasColumnName("vat_Pozycja");
            entity.Property(e => e.VatRodzaj).HasColumnName("vat_Rodzaj");
            entity.Property(e => e.VatStawka)
                .HasColumnType("money")
                .HasColumnName("vat_Stawka");
            entity.Property(e => e.VatStawkaZagraniczna).HasColumnName("vat_StawkaZagraniczna");
            entity.Property(e => e.VatStawkaZagranicznaPdst).HasColumnName("vat_StawkaZagranicznaPdst");
            entity.Property(e => e.VatSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vat_Symbol");
            entity.Property(e => e.VatUePanstwo).HasColumnName("vat_UePanstwo");

            entity.HasOne(d => d.VatIdPanstwoNavigation).WithMany(p => p.SlStawkaVats)
                .HasForeignKey(d => d.VatIdPanstwo)
                .HasConstraintName("FK_sl_StawkaVAT_sl_Panstwo");
        });

        modelBuilder.Entity<SlStawkaZaszeregowanium>(entity =>
        {
            entity.HasKey(e => e.SzaId);

            entity.ToTable("sl_StawkaZaszeregowania");

            entity.Property(e => e.SzaId)
                .ValueGeneratedNever()
                .HasColumnName("sza_Id");
            entity.Property(e => e.SzaDziennaMax)
                .HasColumnType("money")
                .HasColumnName("sza_DziennaMax");
            entity.Property(e => e.SzaDziennaMin)
                .HasColumnType("money")
                .HasColumnName("sza_DziennaMin");
            entity.Property(e => e.SzaGodzinowaMax)
                .HasColumnType("money")
                .HasColumnName("sza_GodzinowaMax");
            entity.Property(e => e.SzaGodzinowaMin)
                .HasColumnType("money")
                .HasColumnName("sza_GodzinowaMin");
            entity.Property(e => e.SzaKategoria).HasColumnName("sza_Kategoria");
            entity.Property(e => e.SzaMiesiecznaMax)
                .HasColumnType("money")
                .HasColumnName("sza_MiesiecznaMax");
            entity.Property(e => e.SzaMiesiecznaMin)
                .HasColumnType("money")
                .HasColumnName("sza_MiesiecznaMin");
            entity.Property(e => e.SzaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sza_Nazwa");
        });

        modelBuilder.Entity<SlStawkiOplatSpecjalnych>(entity =>
        {
            entity.HasKey(e => e.SosId);

            entity.ToTable("sl_StawkiOplatSpecjalnych");

            entity.Property(e => e.SosId).HasColumnName("sos_Id");
            entity.Property(e => e.SosStawka)
                .HasColumnType("money")
                .HasColumnName("sos_Stawka");
            entity.Property(e => e.SosTowId).HasColumnName("sos_TowId");
            entity.Property(e => e.SosTyp).HasColumnName("sos_Typ");
            entity.Property(e => e.SosWazneDo)
                .HasColumnType("datetime")
                .HasColumnName("sos_WazneDo");
            entity.Property(e => e.SosWazneOd)
                .HasColumnType("datetime")
                .HasColumnName("sos_WazneOd");
        });

        modelBuilder.Entity<SlStopienNiepelnosprawnosci>(entity =>
        {
            entity.HasKey(e => e.StnId);

            entity.ToTable("sl_StopienNiepelnosprawnosci");

            entity.HasIndex(e => e.StnKod, "IX_sl_StopienNiepelnosprawnosci_Kod").IsUnique();

            entity.Property(e => e.StnId)
                .ValueGeneratedNever()
                .HasColumnName("stn_Id");
            entity.Property(e => e.StnKod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("stn_Kod");
            entity.Property(e => e.StnOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stn_Opis");
        });

        modelBuilder.Entity<SlStopienNiezdolnosciDoPracy>(entity =>
        {
            entity.HasKey(e => e.StnpId);

            entity.ToTable("sl_StopienNiezdolnosciDoPracy");

            entity.HasIndex(e => e.StnpKod, "IX_sl_StopienNiezdolnosciDoPracy_Kod").IsUnique();

            entity.Property(e => e.StnpId)
                .ValueGeneratedNever()
                .HasColumnName("stnp_Id");
            entity.Property(e => e.StnpKod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("stnp_Kod");
            entity.Property(e => e.StnpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stnp_Opis");
        });

        modelBuilder.Entity<SlSubKonto>(entity =>
        {
            entity.HasKey(e => e.SkId);

            entity.ToTable("sl_SubKonto");

            entity.Property(e => e.SkId)
                .ValueGeneratedNever()
                .HasColumnName("sk_Id");
            entity.Property(e => e.SkIdFormaPlatnosci).HasColumnName("sk_IdFormaPlatnosci");
            entity.Property(e => e.SkIdParser).HasColumnName("sk_IdParser");
            entity.Property(e => e.SkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sk_Nazwa");

            entity.HasOne(d => d.SkIdFormaPlatnosciNavigation).WithMany(p => p.SlSubKontos)
                .HasForeignKey(d => d.SkIdFormaPlatnosci)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_SubKonto_sl_FormaPlatnosci");
        });

        modelBuilder.Entity<SlSymbolDeklaracjiUsebank>(entity =>
        {
            entity.HasKey(e => e.SduId);

            entity.ToTable("sl_SymbolDeklaracjiUSEBank");

            entity.Property(e => e.SduId)
                .ValueGeneratedNever()
                .HasColumnName("sdu_Id");
            entity.Property(e => e.SduSymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sdu_Symbol");
            entity.Property(e => e.SduSystemowy).HasColumnName("sdu_Systemowy");
            entity.Property(e => e.SduTypRachBank).HasColumnName("sdu_TypRachBank");
            entity.Property(e => e.SduZobowiazanie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sdu_Zobowiazanie");
        });

        modelBuilder.Entity<SlSzablonDzialanium>(entity =>
        {
            entity.HasKey(e => e.SzdzId).HasName("PK_sl_SzablonDzialanie");

            entity.ToTable("sl_SzablonDzialania");

            entity.Property(e => e.SzdzId)
                .ValueGeneratedNever()
                .HasColumnName("szdz_Id");
            entity.Property(e => e.SzdzBezCzasu).HasColumnName("szdz_BezCzasu");
            entity.Property(e => e.SzdzCalyDzien).HasColumnName("szdz_CalyDzien");
            entity.Property(e => e.SzdzCzasTrwania).HasColumnName("szdz_CzasTrwania");
            entity.Property(e => e.SzdzDzialanieRodzaj).HasColumnName("szdz_DzialanieRodzaj");
            entity.Property(e => e.SzdzFormaDzialaniaWindykacyjnego).HasColumnName("szdz_FormaDzialaniaWindykacyjnego");
            entity.Property(e => e.SzdzKiedyPrzypomnienie).HasColumnName("szdz_KiedyPrzypomnienie");
            entity.Property(e => e.SzdzKierunek).HasColumnName("szdz_Kierunek");
            entity.Property(e => e.SzdzKlasa).HasColumnName("szdz_Klasa");
            entity.Property(e => e.SzdzKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("szdz_Kolor");
            entity.Property(e => e.SzdzLokalizacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("szdz_Lokalizacja");
            entity.Property(e => e.SzdzNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("szdz_Nazwa");
            entity.Property(e => e.SzdzNazwaSzablonu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("szdz_NazwaSzablonu");
            entity.Property(e => e.SzdzOpis)
                .HasDefaultValue("")
                .HasColumnType("ntext")
                .HasColumnName("szdz_Opis");
            entity.Property(e => e.SzdzPersonel).HasColumnName("szdz_Personel");
            entity.Property(e => e.SzdzPoczatek).HasColumnName("szdz_Poczatek");
            entity.Property(e => e.SzdzPodtyp).HasColumnName("szdz_Podtyp");
            entity.Property(e => e.SzdzPokazujWkalendarzu).HasColumnName("szdz_PokazujWKalendarzu");
            entity.Property(e => e.SzdzPredefiniowany).HasColumnName("szdz_Predefiniowany");
            entity.Property(e => e.SzdzPriorytet)
                .HasDefaultValue(2)
                .HasColumnName("szdz_Priorytet");
            entity.Property(e => e.SzdzPrywatne).HasColumnName("szdz_Prywatne");
            entity.Property(e => e.SzdzRezultat).HasColumnName("szdz_Rezultat");
            entity.Property(e => e.SzdzStatus).HasColumnName("szdz_Status");
            entity.Property(e => e.SzdzUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("szdz_Uwagi");

            entity.HasOne(d => d.SzdzPodtypNavigation).WithMany(p => p.SlSzablonDzialania)
                .HasForeignKey(d => d.SzdzPodtyp)
                .HasConstraintName("FK_sl_SzablonDzialania_sl_CRMPodTypZadania");
        });

        modelBuilder.Entity<SlSzablonRachunku>(entity =>
        {
            entity.HasKey(e => e.SrId);

            entity.ToTable("sl_SzablonRachunku");

            entity.Property(e => e.SrId)
                .ValueGeneratedNever()
                .HasColumnName("sr_Id");
            entity.Property(e => e.SrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sr_Nazwa");
            entity.Property(e => e.SrTekst)
                .HasColumnType("image")
                .HasColumnName("sr_Tekst");
        });

        modelBuilder.Entity<SlSzablonUmowyCp>(entity =>
        {
            entity.HasKey(e => e.SucpId);

            entity.ToTable("sl_SzablonUmowyCP");

            entity.Property(e => e.SucpId)
                .ValueGeneratedNever()
                .HasColumnName("sucp_Id");
            entity.Property(e => e.SucpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sucp_Nazwa");
            entity.Property(e => e.SucpTekst)
                .HasColumnType("image")
                .HasColumnName("sucp_Tekst");
        });

        modelBuilder.Entity<SlSzablonUmowyOprace>(entity =>
        {
            entity.HasKey(e => e.SupId).HasName("PK_sl_SzablonyUmowOPrace");

            entity.ToTable("sl_SzablonUmowyOPrace");

            entity.Property(e => e.SupId)
                .ValueGeneratedNever()
                .HasColumnName("sup_Id");
            entity.Property(e => e.SupNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sup_Nazwa");
            entity.Property(e => e.SupRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("sup_Rodzaj");
            entity.Property(e => e.SupTekst)
                .HasColumnType("image")
                .HasColumnName("sup_Tekst");
        });

        modelBuilder.Entity<SlSzybkiePlatnosci>(entity =>
        {
            entity.HasKey(e => e.SlspId);

            entity.ToTable("sl_SzybkiePlatnosci");

            entity.Property(e => e.SlspId)
                .ValueGeneratedNever()
                .HasColumnName("slsp_Id");
            entity.Property(e => e.SlspAktywnosc).HasColumnName("slsp_Aktywnosc");
            entity.Property(e => e.SlspCrc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slsp_CRC");
            entity.Property(e => e.SlspDostawca).HasColumnName("slsp_Dostawca");
            entity.Property(e => e.SlspIdParser).HasColumnName("slsp_IdParser");
            entity.Property(e => e.SlspIdSprzedawcy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slsp_IdSprzedawcy");
            entity.Property(e => e.SlspKontrahentCesyjnyId).HasColumnName("slsp_KontrahentCesyjnyId");
            entity.Property(e => e.SlspNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slsp_Nazwa");
            entity.Property(e => e.SlspProviderId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slsp_ProviderId");
            entity.Property(e => e.SlspTerminPlatnosci).HasColumnName("slsp_TerminPlatnosci");
            entity.Property(e => e.SlspTest).HasColumnName("slsp_Test");

            entity.HasOne(d => d.SlspKontrahentCesyjny).WithMany(p => p.SlSzybkiePlatnoscis)
                .HasForeignKey(d => d.SlspKontrahentCesyjnyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_SzybkiePlatnosci_kh__Kontrahent");
        });

        modelBuilder.Entity<SlTresc>(entity =>
        {
            entity.HasKey(e => e.SltrId);

            entity.ToTable("sl_Tresc");

            entity.Property(e => e.SltrId)
                .ValueGeneratedNever()
                .HasColumnName("sltr_Id");
            entity.Property(e => e.SltrTresc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sltr_Tresc");
        });

        modelBuilder.Entity<SlTrescDokRodo>(entity =>
        {
            entity.HasKey(e => e.TdId);

            entity.ToTable("sl_TrescDokRODO");

            entity.Property(e => e.TdId)
                .ValueGeneratedNever()
                .HasColumnName("td_Id");
            entity.Property(e => e.TdDomyslna).HasColumnName("td_Domyslna");
            entity.Property(e => e.TdOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("td_Opis");
            entity.Property(e => e.TdTresc)
                .HasColumnType("image")
                .HasColumnName("td_Tresc");
            entity.Property(e => e.TdTypDokumentu).HasColumnName("td_TypDokumentu");
        });

        modelBuilder.Entity<SlTrybDostawyTwAkcyzowych>(entity =>
        {
            entity.HasKey(e => e.SltdtId).HasName("PK__sl_TrybDostawyTwAkcyzowych");

            entity.ToTable("sl_TrybDostawyTwAkcyzowych");

            entity.Property(e => e.SltdtId)
                .ValueGeneratedNever()
                .HasColumnName("sltdt_Id");
            entity.Property(e => e.SltdtAktywna)
                .HasDefaultValue(true)
                .HasColumnName("sltdt_Aktywna");
            entity.Property(e => e.SltdtWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sltdt_Wartosc");
        });

        modelBuilder.Entity<SlTrybOdroczonyWysylkiEdd>(entity =>
        {
            entity.HasKey(e => e.SltowId).HasName("PK__sl_TrybOdroczonyWysylkiEDD");

            entity.ToTable("sl_TrybOdroczonyWysylkiEDD");

            entity.Property(e => e.SltowId)
                .ValueGeneratedNever()
                .HasColumnName("sltow_Id");
            entity.Property(e => e.SltowAktywna)
                .HasDefaultValue(true)
                .HasColumnName("sltow_Aktywna");
            entity.Property(e => e.SltowWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sltow_Wartosc");
        });

        modelBuilder.Entity<SlTrybZakonczeniaDostawyEdd>(entity =>
        {
            entity.HasKey(e => e.SltzdId).HasName("PK__sl_TrybZakonczeniaDostawyEDD");

            entity.ToTable("sl_TrybZakonczeniaDostawyEDD");

            entity.Property(e => e.SltzdId)
                .ValueGeneratedNever()
                .HasColumnName("sltzd_Id");
            entity.Property(e => e.SltzdAktywna)
                .HasDefaultValue(true)
                .HasColumnName("sltzd_Aktywna");
            entity.Property(e => e.SltzdWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sltzd_Wartosc");
        });

        modelBuilder.Entity<SlTypAbsencji>(entity =>
        {
            entity.HasKey(e => e.SltaId);

            entity.ToTable("sl_TypAbsencji");

            entity.HasIndex(e => e.SltaNazwa, "UQ_sl_TypAbsencji_slta_Nazwa").IsUnique();

            entity.Property(e => e.SltaId)
                .ValueGeneratedNever()
                .HasColumnName("slta_Id");
            entity.Property(e => e.SltaKolor).HasColumnName("slta_Kolor");
            entity.Property(e => e.SltaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slta_Nazwa");
            entity.Property(e => e.SltaTypAbsencji).HasColumnName("slta_TypAbsencji");
        });

        modelBuilder.Entity<SlTypDniaWolnego>(entity =>
        {
            entity.HasKey(e => e.TdwId);

            entity.ToTable("sl_TypDniaWolnego");

            entity.HasIndex(e => e.TdwMnemonik, "IX_sl_TypDniaWolnego").IsUnique();

            entity.Property(e => e.TdwId)
                .ValueGeneratedNever()
                .HasColumnName("tdw_Id");
            entity.Property(e => e.TdwMnemonik)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tdw_Mnemonik");
            entity.Property(e => e.TdwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tdw_Opis");
        });

        modelBuilder.Entity<SlTypEwidVat>(entity =>
        {
            entity.HasKey(e => e.TeId);

            entity.ToTable("sl_TypEwidVAT", tb =>
                {
                    tb.HasTrigger("tr_slTypEwidVatDeleting");
                    tb.HasTrigger("tr_slTypEwidVatInserting");
                });

            entity.Property(e => e.TeId)
                .ValueGeneratedNever()
                .HasColumnName("te_Id");
            entity.Property(e => e.TeCelZakupu).HasColumnName("te_CelZakupu");
            entity.Property(e => e.TeCzyKorekty).HasColumnName("te_CzyKorekty");
            entity.Property(e => e.TeCzySystemowa).HasColumnName("te_CzySystemowa");
            entity.Property(e => e.TeIdKategorii).HasColumnName("te_IdKategorii");
            entity.Property(e => e.TeIdTerminPlatnosci).HasColumnName("te_IdTerminPlatnosci");
            entity.Property(e => e.TeMiesiacOdliczVat).HasColumnName("te_MiesiacOdliczVAT");
            entity.Property(e => e.TeNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("te_Nazwa");
            entity.Property(e => e.TeOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("te_Opis");
            entity.Property(e => e.TePozycja).HasColumnName("te_Pozycja");
            entity.Property(e => e.TeRodzaj).HasColumnName("te_Rodzaj");
            entity.Property(e => e.TeRodzajZakupu)
                .HasDefaultValue(2)
                .HasColumnName("te_RodzajZakupu");
            entity.Property(e => e.TeRozliczanaUsluga).HasColumnName("te_RozliczanaUsluga");
            entity.Property(e => e.TeSposobOdliczania).HasColumnName("te_SposobOdliczania");
            entity.Property(e => e.TeTransakcjaVat).HasColumnName("te_TransakcjaVAT");
            entity.Property(e => e.TeVatMarza).HasColumnName("te_VatMarza");

            entity.HasOne(d => d.TeIdKategoriiNavigation).WithMany(p => p.SlTypEwidVats)
                .HasForeignKey(d => d.TeIdKategorii)
                .HasConstraintName("FK_sl_TypEwidVAT_sl_Kategoria");

            entity.HasOne(d => d.TeIdTerminPlatnosciNavigation).WithMany(p => p.SlTypEwidVats)
                .HasForeignKey(d => d.TeIdTerminPlatnosci)
                .HasConstraintName("FK_sl_TypEwidVAT_sl_FormaPlatnosci");
        });

        modelBuilder.Entity<SlTypIdentyfikatora>(entity =>
        {
            entity.HasKey(e => e.TidId);

            entity.ToTable("sl_TypIdentyfikatora");

            entity.HasIndex(e => e.TidKod, "IX_sl_TypIdentyfikatora_Kod").IsUnique();

            entity.Property(e => e.TidId)
                .ValueGeneratedNever()
                .HasColumnName("tid_Id");
            entity.Property(e => e.TidKod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tid_Kod");
            entity.Property(e => e.TidNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tid_Nazwa");
        });

        modelBuilder.Entity<SlTypObecnosci>(entity =>
        {
            entity.HasKey(e => e.SltoId);

            entity.ToTable("sl_TypObecnosci");

            entity.Property(e => e.SltoId)
                .ValueGeneratedNever()
                .HasColumnName("slto_Id");
            entity.Property(e => e.SltoAtrybutGodziny).HasColumnName("slto_AtrybutGodziny");
            entity.Property(e => e.SltoDo).HasColumnName("slto_Do");
            entity.Property(e => e.SltoKolor).HasColumnName("slto_Kolor");
            entity.Property(e => e.SltoNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slto_Nazwa");
            entity.Property(e => e.SltoOd).HasColumnName("slto_Od");
            entity.Property(e => e.SltoOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slto_Opis");

            entity.HasOne(d => d.SltoAtrybutGodzinyNavigation).WithMany(p => p.SlTypObecnoscis)
                .HasForeignKey(d => d.SltoAtrybutGodziny)
                .HasConstraintName("FK_sl_TypObecnosci_sl_AtrybutGodzinowy");
        });

        modelBuilder.Entity<SlTypPodmiotuAkcyzowego>(entity =>
        {
            entity.HasKey(e => e.SltpaId).HasName("PK__sl_TypPodmiotuAkcyzowego");

            entity.ToTable("sl_TypPodmiotuAkcyzowego");

            entity.Property(e => e.SltpaId)
                .ValueGeneratedNever()
                .HasColumnName("sltpa_Id");
            entity.Property(e => e.SltpaAktywna)
                .HasDefaultValue(true)
                .HasColumnName("sltpa_Aktywna");
            entity.Property(e => e.SltpaWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sltpa_Wartosc");
        });

        modelBuilder.Entity<SlTypWplaty>(entity =>
        {
            entity.HasKey(e => e.WptId);

            entity.ToTable("sl_TypWplaty");

            entity.Property(e => e.WptId)
                .ValueGeneratedNever()
                .HasColumnName("wpt_Id");
            entity.Property(e => e.WptNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("wpt_Nazwa");
            entity.Property(e => e.WptSymbol)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("wpt_Symbol");
        });

        modelBuilder.Entity<SlTytulUbezpieczenium>(entity =>
        {
            entity.HasKey(e => e.TuId);

            entity.ToTable("sl_TytulUbezpieczenia");

            entity.HasIndex(e => e.TuKod, "IX_sl_TytulUbezpieczenia_Kod").IsUnique();

            entity.Property(e => e.TuId).HasColumnName("tu_Id");
            entity.Property(e => e.TuKod)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("tu_Kod");
            entity.Property(e => e.TuOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tu_Opis");
        });

        modelBuilder.Entity<SlUprawnienie>(entity =>
        {
            entity.HasKey(e => e.UprId);

            entity.ToTable("sl_Uprawnienie");

            entity.Property(e => e.UprId)
                .ValueGeneratedNever()
                .HasColumnName("upr_Id");
            entity.Property(e => e.UprNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("upr_Nazwa");
        });

        modelBuilder.Entity<SlUrzadCelny>(entity =>
        {
            entity.HasKey(e => e.SucId);

            entity.ToTable("sl_UrzadCelny");

            entity.Property(e => e.SucId).HasColumnName("suc_Id");
            entity.Property(e => e.SucKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("suc_Kod");
            entity.Property(e => e.SucOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("suc_Opis");
        });

        modelBuilder.Entity<SlUrzadSkarbowy>(entity =>
        {
            entity.HasKey(e => e.SusId);

            entity.ToTable("sl_UrzadSkarbowy");

            entity.Property(e => e.SusId)
                .ValueGeneratedNever()
                .HasColumnName("sus_Id");
            entity.Property(e => e.SusKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("sus_Kod");
            entity.Property(e => e.SusOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sus_Opis");
        });

        modelBuilder.Entity<SlVatOznaczeniaJpksprzedaz>(entity =>
        {
            entity.HasKey(e => e.SlvjsId).HasName("PK__sl_vat_OznaczeniaJPKSprzedaz");

            entity.ToTable("sl_VatOznaczeniaJPKSprzedaz");

            entity.Property(e => e.SlvjsId)
                .ValueGeneratedNever()
                .HasColumnName("slvjs_Id");
            entity.Property(e => e.SlvjsBMpvProwizja).HasColumnName("slvjs_B_MPV_PROWIZJA");
            entity.Property(e => e.SlvjsBSpv).HasColumnName("slvjs_B_SPV");
            entity.Property(e => e.SlvjsBSpvDostawa).HasColumnName("slvjs_B_SPV_DOSTAWA");
            entity.Property(e => e.SlvjsEe).HasColumnName("slvjs_EE");
            entity.Property(e => e.SlvjsGtu01).HasColumnName("slvjs_GTU_01");
            entity.Property(e => e.SlvjsGtu02).HasColumnName("slvjs_GTU_02");
            entity.Property(e => e.SlvjsGtu03).HasColumnName("slvjs_GTU_03");
            entity.Property(e => e.SlvjsGtu04).HasColumnName("slvjs_GTU_04");
            entity.Property(e => e.SlvjsGtu05).HasColumnName("slvjs_GTU_05");
            entity.Property(e => e.SlvjsGtu06).HasColumnName("slvjs_GTU_06");
            entity.Property(e => e.SlvjsGtu07).HasColumnName("slvjs_GTU_07");
            entity.Property(e => e.SlvjsGtu08).HasColumnName("slvjs_GTU_08");
            entity.Property(e => e.SlvjsGtu09).HasColumnName("slvjs_GTU_09");
            entity.Property(e => e.SlvjsGtu10).HasColumnName("slvjs_GTU_10");
            entity.Property(e => e.SlvjsGtu11).HasColumnName("slvjs_GTU_11");
            entity.Property(e => e.SlvjsGtu12).HasColumnName("slvjs_GTU_12");
            entity.Property(e => e.SlvjsGtu13).HasColumnName("slvjs_GTU_13");
            entity.Property(e => e.SlvjsI42).HasColumnName("slvjs_I_42");
            entity.Property(e => e.SlvjsI63).HasColumnName("slvjs_I_63");
            entity.Property(e => e.SlvjsIdSlTypEwidVat).HasColumnName("slvjs_IdSlTypEwidVAT");
            entity.Property(e => e.SlvjsIed).HasColumnName("slvjs_IED");
            entity.Property(e => e.SlvjsMpp).HasColumnName("slvjs_MPP");
            entity.Property(e => e.SlvjsMrT).HasColumnName("slvjs_MR_T");
            entity.Property(e => e.SlvjsMrUz).HasColumnName("slvjs_MR_UZ");
            entity.Property(e => e.SlvjsOznaczenieDowodu).HasColumnName("slvjs_OznaczenieDowodu");
            entity.Property(e => e.SlvjsSw).HasColumnName("slvjs_SW");
            entity.Property(e => e.SlvjsTp).HasColumnName("slvjs_TP");
            entity.Property(e => e.SlvjsTtD).HasColumnName("slvjs_TT_D");
            entity.Property(e => e.SlvjsTtWnt).HasColumnName("slvjs_TT_WNT");
            entity.Property(e => e.SlvjsWstoEe).HasColumnName("slvjs_WSTO_EE");
        });

        modelBuilder.Entity<SlVatOznaczeniaJpkzakup>(entity =>
        {
            entity.HasKey(e => e.SlvjzId).HasName("PK__sl_vat_OznaczeniaJPKZakup");

            entity.ToTable("sl_VatOznaczeniaJPKZakup");

            entity.Property(e => e.SlvjzId)
                .ValueGeneratedNever()
                .HasColumnName("slvjz_Id");
            entity.Property(e => e.SlvjzIdSlTypEwidVat).HasColumnName("slvjz_IdSlTypEwidVAT");
            entity.Property(e => e.SlvjzImp).HasColumnName("slvjz_IMP");
            entity.Property(e => e.SlvjzMpp).HasColumnName("slvjz_MPP");
            entity.Property(e => e.SlvjzOznaczenieDowodu).HasColumnName("slvjz_OznaczenieDowodu");
        });

        modelBuilder.Entity<SlWalutaBank>(entity =>
        {
            entity.HasKey(e => e.WbnId);

            entity.ToTable("sl_WalutaBank");

            entity.Property(e => e.WbnId)
                .ValueGeneratedNever()
                .HasColumnName("wbn_ID");
            entity.Property(e => e.WbnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wbn_Nazwa");
            entity.Property(e => e.WbnPodstawowy).HasColumnName("wbn_Podstawowy");
        });

        modelBuilder.Entity<SlWalutaKur>(entity =>
        {
            entity.HasKey(e => e.WkId);

            entity.ToTable("sl_WalutaKurs");

            entity.Property(e => e.WkId)
                .ValueGeneratedNever()
                .HasColumnName("wk_Id");
            entity.Property(e => e.WkData)
                .HasColumnType("datetime")
                .HasColumnName("wk_Data");
            entity.Property(e => e.WkIdTabeli).HasColumnName("wk_IdTabeli");
            entity.Property(e => e.WkIdWaluty).HasColumnName("wk_IdWaluty");
            entity.Property(e => e.WkSprzedaz)
                .HasColumnType("money")
                .HasColumnName("wk_Sprzedaz");
            entity.Property(e => e.WkSredni)
                .HasColumnType("money")
                .HasColumnName("wk_Sredni");
            entity.Property(e => e.WkSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("wk_Symbol");
            entity.Property(e => e.WkZakup)
                .HasColumnType("money")
                .HasColumnName("wk_Zakup");

            entity.HasOne(d => d.WkIdTabeliNavigation).WithMany(p => p.SlWalutaKurs)
                .HasForeignKey(d => d.WkIdTabeli)
                .HasConstraintName("FK_sl_WalutaKurs_sl_WalutaTabelaKursow");

            entity.HasOne(d => d.WkSymbolNavigation).WithMany(p => p.SlWalutaKurs)
                .HasForeignKey(d => d.WkSymbol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_WalutaKurs_sl_Waluta");
        });

        modelBuilder.Entity<SlWalutaNominal>(entity =>
        {
            entity.HasKey(e => e.WlnId);

            entity.ToTable("sl_WalutaNominal");

            entity.Property(e => e.WlnId)
                .ValueGeneratedNever()
                .HasColumnName("wln_Id");
            entity.Property(e => e.WlnIdWaluty).HasColumnName("wln_IdWaluty");
            entity.Property(e => e.WlnNominal)
                .HasColumnType("money")
                .HasColumnName("wln_Nominal");
            entity.Property(e => e.WlnOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wln_Opis");
            entity.Property(e => e.WlnPozycja).HasColumnName("wln_Pozycja");

            entity.HasOne(d => d.WlnIdWalutyNavigation).WithMany(p => p.SlWalutaNominals)
                .HasPrincipalKey(p => p.WlId)
                .HasForeignKey(d => d.WlnIdWaluty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_WalutaNominal_sl_Waluta");
        });

        modelBuilder.Entity<SlWalutaTabelaKursow>(entity =>
        {
            entity.HasKey(e => e.WtkId);

            entity.ToTable("sl_WalutaTabelaKursow");

            entity.Property(e => e.WtkId)
                .ValueGeneratedNever()
                .HasColumnName("wtk_ID");
            entity.Property(e => e.WtkData)
                .HasColumnType("datetime")
                .HasColumnName("wtk_Data");
            entity.Property(e => e.WtkIdBanku).HasColumnName("wtk_IdBanku");
            entity.Property(e => e.WtkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wtk_Nazwa");
            entity.Property(e => e.WtkSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wtk_Symbol");

            entity.HasOne(d => d.WtkIdBankuNavigation).WithMany(p => p.SlWalutaTabelaKursows)
                .HasForeignKey(d => d.WtkIdBanku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_WalutaTabelaKursow_sl_WalutaBank");
        });

        modelBuilder.Entity<SlWalutum>(entity =>
        {
            entity.HasKey(e => e.WlSymbol);

            entity.ToTable("sl_Waluta");

            entity.HasIndex(e => e.WlId, "IX_sl_Waluta_wl_Id").IsUnique();

            entity.Property(e => e.WlSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("wl_Symbol");
            entity.Property(e => e.WlAktywna)
                .HasDefaultValue(true)
                .HasColumnName("wl_Aktywna");
            entity.Property(e => e.WlId).HasColumnName("wl_Id");
            entity.Property(e => e.WlLiczbaJednostek)
                .HasDefaultValue(1)
                .HasColumnName("wl_LiczbaJednostek");
            entity.Property(e => e.WlNazwa)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("wl_Nazwa");
        });

        modelBuilder.Entity<SlWlasciwCechTw>(entity =>
        {
            entity.HasKey(e => e.WctId);

            entity.ToTable("sl_WlasciwCechTw");

            entity.Property(e => e.WctId)
                .ValueGeneratedNever()
                .HasColumnName("wct_Id");
            entity.Property(e => e.WctNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wct_Nazwa");
        });

        modelBuilder.Entity<SlWlasciwoscCecha>(entity =>
        {
            entity.HasKey(e => e.WchId);

            entity.ToTable("sl_WlasciwoscCecha");

            entity.HasIndex(e => e.WchIdCecha, "UQ_sl_WlasciwoscCecha_wch_IdCecha").IsUnique();

            entity.Property(e => e.WchId)
                .ValueGeneratedNever()
                .HasColumnName("wch_Id");
            entity.Property(e => e.WchIdCecha).HasColumnName("wch_IdCecha");
            entity.Property(e => e.WchIdWlasciwosc).HasColumnName("wch_IdWlasciwosc");

            entity.HasOne(d => d.WchIdCechaNavigation).WithOne(p => p.SlWlasciwoscCecha)
                .HasForeignKey<SlWlasciwoscCecha>(d => d.WchIdCecha)
                .HasConstraintName("FK_sl_WlasciwoscCecha_sl_CechaTw");

            entity.HasOne(d => d.WchIdWlasciwoscNavigation).WithMany(p => p.SlWlasciwoscCechas)
                .HasForeignKey(d => d.WchIdWlasciwosc)
                .HasConstraintName("FK_sl_WlasciwoscCecha_sl_WlasciwCechTw");
        });

        modelBuilder.Entity<SlWlasny>(entity =>
        {
            entity.HasKey(e => e.SwId)
                .HasName("PK__sl_Wlasny")
                .IsClustered(false);

            entity.ToTable("sl_Wlasny");

            entity.HasIndex(e => new { e.SwSlownikId, e.SwId }, "IX_sl_Wlasny")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.SwId)
                .ValueGeneratedNever()
                .HasColumnName("sw_Id");
            entity.Property(e => e.SwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sw_Nazwa");
            entity.Property(e => e.SwSlownikId).HasColumnName("sw_SlownikId");

            entity.HasOne(d => d.SwSlownik).WithMany(p => p.SlWlasnies)
                .HasForeignKey(d => d.SwSlownikId)
                .HasConstraintName("FK_sl_Wlasny_sl__Slownik");
        });

        modelBuilder.Entity<SlWojewodztwo>(entity =>
        {
            entity.HasKey(e => e.WojId);

            entity.ToTable("sl_Wojewodztwo");

            entity.Property(e => e.WojId)
                .ValueGeneratedNever()
                .HasColumnName("woj_Id");
            entity.Property(e => e.WojNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("woj_Nazwa");
        });

        modelBuilder.Entity<SlWyksztalcenie>(entity =>
        {
            entity.HasKey(e => e.WykId);

            entity.ToTable("sl_Wyksztalcenie");

            entity.HasIndex(e => e.WykKod, "IX_sl_Wyksztalcenie_Kod").IsUnique();

            entity.Property(e => e.WykId)
                .ValueGeneratedNever()
                .HasColumnName("wyk_Id");
            entity.Property(e => e.WykKod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("wyk_Kod");
            entity.Property(e => e.WykOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wyk_Opis");
        });

        modelBuilder.Entity<SlWzorzecSkladnikaPlacowego>(entity =>
        {
            entity.HasKey(e => e.WspId);

            entity.ToTable("sl_WzorzecSkladnikaPlacowego");

            entity.Property(e => e.WspId).HasColumnName("wsp_Id");
            entity.Property(e => e.WspNaliczany).HasColumnName("wsp_Naliczany");
            entity.Property(e => e.WspNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wsp_Nazwa");
            entity.Property(e => e.WspPlatnyPracodawca).HasColumnName("wsp_PlatnyPracodawca");
            entity.Property(e => e.WspPodstOpodatkowania).HasColumnName("wsp_PodstOpodatkowania");
            entity.Property(e => e.WspPodstSklUbChorWyp).HasColumnName("wsp_PodstSklUbChorWyp");
            entity.Property(e => e.WspPodstSklUbEmerRent).HasColumnName("wsp_PodstSklUbEmerRent");
            entity.Property(e => e.WspPodstSklUbZdr).HasColumnName("wsp_PodstSklUbZdr");
            entity.Property(e => e.WspPoleWyplaty).HasColumnName("wsp_PoleWyplaty");
            entity.Property(e => e.WspSystemowy).HasColumnName("wsp_Systemowy");
            entity.Property(e => e.WspUlgaDlaKlasySredniej).HasColumnName("wsp_UlgaDlaKlasySredniej");
            entity.Property(e => e.WspZwolnienieZpodatku).HasColumnName("wsp_ZwolnienieZPodatku");
        });

        modelBuilder.Entity<SlZawod>(entity =>
        {
            entity.HasKey(e => e.ZwId);

            entity.ToTable("sl_Zawod");

            entity.Property(e => e.ZwId)
                .ValueGeneratedNever()
                .HasColumnName("zw_Id");
            entity.Property(e => e.ZwKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zw_Kod");
            entity.Property(e => e.ZwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zw_Opis");
            entity.Property(e => e.ZwWersja).HasColumnName("zw_Wersja");
        });

        modelBuilder.Entity<SlZespolPrac>(entity =>
        {
            entity.HasKey(e => e.SlzpId);

            entity.ToTable("sl_ZespolPrac");

            entity.Property(e => e.SlzpId)
                .ValueGeneratedNever()
                .HasColumnName("slzp_Id");
            entity.Property(e => e.SlzpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("slzp_Nazwa");
        });

        modelBuilder.Entity<SlZestawAkordowy>(entity =>
        {
            entity.HasKey(e => e.ZaId);

            entity.ToTable("sl_ZestawAkordowy");

            entity.Property(e => e.ZaId)
                .ValueGeneratedNever()
                .HasColumnName("za_Id");
            entity.Property(e => e.ZaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("za_Nazwa");
        });

        modelBuilder.Entity<SlZestawAkordowyAkord>(entity =>
        {
            entity.HasKey(e => e.ZalId);

            entity.ToTable("sl_ZestawAkordowyAkord");

            entity.Property(e => e.ZalId)
                .ValueGeneratedNever()
                .HasColumnName("zal_Id");
            entity.Property(e => e.ZalIdStawkiAkrodowej).HasColumnName("zal_IdStawkiAkrodowej");
            entity.Property(e => e.ZalIdZestawu).HasColumnName("zal_IdZestawu");

            entity.HasOne(d => d.ZalIdStawkiAkrodowejNavigation).WithMany(p => p.SlZestawAkordowyAkords)
                .HasForeignKey(d => d.ZalIdStawkiAkrodowej)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_ZestawAkordowyAkord_sl_StawkaAkordowa");

            entity.HasOne(d => d.ZalIdZestawuNavigation).WithMany(p => p.SlZestawAkordowyAkords)
                .HasForeignKey(d => d.ZalIdZestawu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sl_ZestawAkordowyAkord_sl_ZestawAkordowy");
        });

        modelBuilder.Entity<SlZwolnienieZakcyzy>(entity =>
        {
            entity.HasKey(e => e.AkcId);

            entity.ToTable("sl_ZwolnienieZAkcyzy");

            entity.Property(e => e.AkcId)
                .ValueGeneratedNever()
                .HasColumnName("akc_Id");
            entity.Property(e => e.AkcCzyWidoczna).HasColumnName("akc_CzyWidoczna");
            entity.Property(e => e.AkcNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("akc_Nazwa");
        });

        modelBuilder.Entity<SlZwolnienieZvat>(entity =>
        {
            entity.HasKey(e => e.SlpzvId);

            entity.ToTable("sl_ZwolnienieZVAT");

            entity.Property(e => e.SlpzvId)
                .ValueGeneratedNever()
                .HasColumnName("slpzv_Id");
            entity.Property(e => e.SlpzvAktywna)
                .HasDefaultValue(true)
                .HasColumnName("slpzv_Aktywna");
            entity.Property(e => e.SlpzvNazwa)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slpzv_Nazwa");
            entity.Property(e => e.SlpzvOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("slpzv_Opis");
            entity.Property(e => e.SlpzvRodzajZwolnienia).HasColumnName("slpzv_RodzajZwolnienia");
            entity.Property(e => e.SlpzvSystemowa)
                .HasComputedColumnSql("(case when [slpzv_Id]<(1000) then (1) else (0) end)", false)
                .HasColumnName("slpzv_Systemowa");
            entity.Property(e => e.SlpzvZrodloZwolnienia).HasColumnName("slpzv_ZrodloZwolnienia");
        });

        modelBuilder.Entity<Slowniki>(entity =>
        {
            entity.ToTable("__Slowniki");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.IdTabeli)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Id_Tabeli");
            entity.Property(e => e.SelectTwardosci)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Tabela)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SmsMessage>(entity =>
        {
            entity.HasKey(e => e.SmsmId);

            entity.ToTable("sms_Messages");

            entity.Property(e => e.SmsmId)
                .ValueGeneratedNever()
                .HasColumnName("smsm_Id");
            entity.Property(e => e.SmsmCategoryId).HasColumnName("smsm_CategoryId");
            entity.Property(e => e.SmsmCharacters).HasColumnName("smsm_Characters");
            entity.Property(e => e.SmsmCheckStatusCount).HasColumnName("smsm_CheckStatusCount");
            entity.Property(e => e.SmsmClientAddressId).HasColumnName("smsm_ClientAddressId");
            entity.Property(e => e.SmsmClientId).HasColumnName("smsm_ClientId");
            entity.Property(e => e.SmsmClientPhoneId).HasColumnName("smsm_ClientPhoneId");
            entity.Property(e => e.SmsmClientPhoneNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("smsm_ClientPhoneNo");
            entity.Property(e => e.SmsmClientType).HasColumnName("smsm_ClientType");
            entity.Property(e => e.SmsmContent)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasColumnName("smsm_Content");
            entity.Property(e => e.SmsmCreated)
                .HasColumnType("datetime")
                .HasColumnName("smsm_Created");
            entity.Property(e => e.SmsmCreatorId).HasColumnName("smsm_CreatorId");
            entity.Property(e => e.SmsmCurrentStatus).HasColumnName("smsm_CurrentStatus");
            entity.Property(e => e.SmsmDelivered)
                .HasColumnType("datetime")
                .HasColumnName("smsm_Delivered");
            entity.Property(e => e.SmsmDiacritics).HasColumnName("smsm_Diacritics");
            entity.Property(e => e.SmsmFlash).HasColumnName("smsm_Flash");
            entity.Property(e => e.SmsmGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("smsm_Guid");
            entity.Property(e => e.SmsmLastCheckStatus)
                .HasColumnType("datetime")
                .HasColumnName("smsm_LastCheckStatus");
            entity.Property(e => e.SmsmLastError)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("smsm_LastError");
            entity.Property(e => e.SmsmMinuteDiffCheckSend).HasColumnName("smsm_MinuteDiffCheckSend");
            entity.Property(e => e.SmsmModified)
                .HasColumnType("datetime")
                .HasColumnName("smsm_Modified");
            entity.Property(e => e.SmsmModifierId).HasColumnName("smsm_ModifierId");
            entity.Property(e => e.SmsmObjectId).HasColumnName("smsm_ObjectId");
            entity.Property(e => e.SmsmObjectType).HasColumnName("smsm_ObjectType");
            entity.Property(e => e.SmsmParts).HasColumnName("smsm_Parts");
            entity.Property(e => e.SmsmRemarks)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("smsm_Remarks");
            entity.Property(e => e.SmsmResend).HasColumnName("smsm_Resend");
            entity.Property(e => e.SmsmScheduledSend)
                .HasColumnType("datetime")
                .HasColumnName("smsm_ScheduledSend");
            entity.Property(e => e.SmsmSent)
                .HasColumnType("datetime")
                .HasColumnName("smsm_Sent");
            entity.Property(e => e.SmsmSubmitted)
                .HasColumnType("datetime")
                .HasColumnName("smsm_Submitted");
            entity.Property(e => e.SmsmSubmitterId).HasColumnName("smsm_SubmitterId");
            entity.Property(e => e.SmsmTariffId).HasColumnName("smsm_TariffId");
            entity.Property(e => e.SmsmTemplateId).HasColumnName("smsm_TemplateId");

            entity.HasOne(d => d.SmsmCategory).WithMany(p => p.SmsMessages)
                .HasForeignKey(d => d.SmsmCategoryId)
                .HasConstraintName("FK_sms_Messages_sl_KategorieSMS");

            entity.HasOne(d => d.SmsmClientPhone).WithMany(p => p.SmsMessages)
                .HasForeignKey(d => d.SmsmClientPhoneId)
                .HasConstraintName("FK_sms_Messages_tel__Ewid");

            entity.HasOne(d => d.SmsmCreator).WithMany(p => p.SmsMessageSmsmCreators)
                .HasForeignKey(d => d.SmsmCreatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sms_Messages_pd_Uzytkownik_Creator");

            entity.HasOne(d => d.SmsmModifier).WithMany(p => p.SmsMessageSmsmModifiers)
                .HasForeignKey(d => d.SmsmModifierId)
                .HasConstraintName("FK_sms_Messages_pd_Uzytkownik_Modifier");

            entity.HasOne(d => d.SmsmSubmitter).WithMany(p => p.SmsMessageSmsmSubmitters)
                .HasForeignKey(d => d.SmsmSubmitterId)
                .HasConstraintName("FK_sms_Messages_pd_Uzytkownik_Submitter");

            entity.HasOne(d => d.SmsmTariff).WithMany(p => p.SmsMessages)
                .HasForeignKey(d => d.SmsmTariffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sms_Messages_sms_TariffHist");
        });

        modelBuilder.Entity<SmsParam>(entity =>
        {
            entity.HasKey(e => e.SmsId).HasName("PK_sms_SMSParams");

            entity.ToTable("sms_Params");

            entity.Property(e => e.SmsId)
                .ValueGeneratedNever()
                .HasColumnName("sms_Id");
            entity.Property(e => e.SmsActivationDenialReason)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("sms_ActivationDenialReason");
            entity.Property(e => e.SmsActivationStatus).HasColumnName("sms_ActivationStatus");
            entity.Property(e => e.SmsActive).HasColumnName("sms_Active");
            entity.Property(e => e.SmsActiveCustomSenderName)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("sms_ActiveCustomSenderName");
            entity.Property(e => e.SmsCategoryId).HasColumnName("sms_CategoryId");
            entity.Property(e => e.SmsCharactersInMessagePart).HasColumnName("sms_CharactersInMessagePart");
            entity.Property(e => e.SmsCharactersInMessagePartWithDiactricts).HasColumnName("sms_CharactersInMessagePartWithDiactricts");
            entity.Property(e => e.SmsCurrentBalance).HasColumnName("sms_CurrentBalance");
            entity.Property(e => e.SmsCustomSenderAllowed).HasColumnName("sms_CustomSenderAllowed");
            entity.Property(e => e.SmsDiacriticsAllowed).HasColumnName("sms_DiacriticsAllowed");
            entity.Property(e => e.SmsDiacriticts).HasColumnName("sms_Diacriticts");
            entity.Property(e => e.SmsExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("sms_ExpirationDate");
            entity.Property(e => e.SmsFlashMessages).HasColumnName("sms_FlashMessages");
            entity.Property(e => e.SmsLastRefresh)
                .HasColumnType("datetime")
                .HasColumnName("sms_LastRefresh");
            entity.Property(e => e.SmsMessagePartLimit).HasColumnName("sms_MessagePartLimit");
            entity.Property(e => e.SmsMessagePartLimitWithDiactricts).HasColumnName("sms_MessagePartLimitWithDiactricts");
            entity.Property(e => e.SmsMostRecentCustomSenderName)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("sms_MostRecentCustomSenderName");
            entity.Property(e => e.SmsPackageSize)
                .HasDefaultValue(120)
                .HasColumnName("sms_PackageSize");
            entity.Property(e => e.SmsSendIntervalSec).HasColumnName("sms_SendIntervalSec");
            entity.Property(e => e.SmsTariffName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sms_TariffName");
        });

        modelBuilder.Entity<SmsTariffHist>(entity =>
        {
            entity.HasKey(e => e.SmstId);

            entity.ToTable("sms_TariffHist");

            entity.Property(e => e.SmstId)
                .ValueGeneratedNever()
                .HasColumnName("smst_Id");
            entity.Property(e => e.SmstDiacriticsAllowed).HasColumnName("smst_DiacriticsAllowed");
            entity.Property(e => e.SmstMaxCharacters).HasColumnName("smst_MaxCharacters");
            entity.Property(e => e.SmstMaxCharactersWithDiacritics).HasColumnName("smst_MaxCharactersWithDiacritics");
            entity.Property(e => e.SmstMaxParts).HasColumnName("smst_MaxParts");
            entity.Property(e => e.SmstMaxPartsWithDiacritics).HasColumnName("smst_MaxPartsWithDiacritics");
            entity.Property(e => e.SmstSenderName)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("smst_SenderName");
            entity.Property(e => e.SmstTariffName)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("smst_TariffName");
        });

        modelBuilder.Entity<SmsTemplate>(entity =>
        {
            entity.HasKey(e => e.SmsttId);

            entity.ToTable("sms_Templates");

            entity.Property(e => e.SmsttId)
                .ValueGeneratedNever()
                .HasColumnName("smstt_Id");
            entity.Property(e => e.SmsttCategoryId).HasColumnName("smstt_CategoryId");
            entity.Property(e => e.SmsttContent)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasColumnName("smstt_Content");
            entity.Property(e => e.SmsttDiacritics).HasColumnName("smstt_Diacritics");
            entity.Property(e => e.SmsttFlash).HasColumnName("smstt_Flash");
            entity.Property(e => e.SmsttName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("smstt_Name");
            entity.Property(e => e.SmsttRemarks)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("smstt_Remarks");
            entity.Property(e => e.SmsttType).HasColumnName("smstt_Type");
        });

        modelBuilder.Entity<SpPlik>(entity =>
        {
            entity.HasKey(e => e.SppId);

            entity.ToTable("sp_Plik");

            entity.Property(e => e.SppId)
                .ValueGeneratedNever()
                .HasColumnName("spp_Id");
            entity.Property(e => e.SppIdOperacjiBankowej).HasColumnName("spp_IdOperacjiBankowej");
            entity.Property(e => e.SppIdSubkonta).HasColumnName("spp_IdSubkonta");
            entity.Property(e => e.SppNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("spp_Nazwa");
            entity.Property(e => e.SppSumaTransakcji)
                .HasColumnType("money")
                .HasColumnName("spp_SumaTransakcji");

            entity.HasOne(d => d.SppIdOperacjiBankowejNavigation).WithMany(p => p.SpPliks)
                .HasForeignKey(d => d.SppIdOperacjiBankowej)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sp_Plik_nz__Finanse");
        });

        modelBuilder.Entity<SpTransakcja>(entity =>
        {
            entity.HasKey(e => e.SptId);

            entity.ToTable("sp_Transakcja");

            entity.Property(e => e.SptId)
                .ValueGeneratedNever()
                .HasColumnName("spt_Id");
            entity.Property(e => e.SptData)
                .HasColumnType("datetime")
                .HasColumnName("spt_Data");
            entity.Property(e => e.SptIdNaleznosci).HasColumnName("spt_IdNaleznosci");
            entity.Property(e => e.SptIdPliku).HasColumnName("spt_IdPliku");
            entity.Property(e => e.SptKwota)
                .HasColumnType("money")
                .HasColumnName("spt_Kwota");
            entity.Property(e => e.SptOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("spt_Opis");
            entity.Property(e => e.SptProwizja)
                .HasColumnType("money")
                .HasColumnName("spt_Prowizja");
            entity.Property(e => e.SptStatus).HasColumnName("spt_Status");
            entity.Property(e => e.SptTransId)
                .HasMaxLength(128)
                .HasColumnName("spt_TransId");

            entity.HasOne(d => d.SptIdNaleznosciNavigation).WithMany(p => p.SpTransakcjas)
                .HasForeignKey(d => d.SptIdNaleznosci)
                .HasConstraintName("FK_sp_Transakcja_nz__Finanse");

            entity.HasOne(d => d.SptIdPlikuNavigation).WithMany(p => p.SpTransakcjas)
                .HasForeignKey(d => d.SptIdPliku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sp_Transakcja_sp_Plik");
        });

        modelBuilder.Entity<StKst>(entity =>
        {
            entity.HasKey(e => e.StkId);

            entity.ToTable("st_KST");

            entity.Property(e => e.StkId)
                .ValueGeneratedNever()
                .HasColumnName("stk_Id");
            entity.Property(e => e.StkKrst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stk_KRST");
            entity.Property(e => e.StkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stk_Nazwa");
            entity.Property(e => e.StkNr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stk_Nr");
            entity.Property(e => e.StkOpis)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stk_Opis");
        });

        modelBuilder.Entity<StKst2016>(entity =>
        {
            entity.HasKey(e => e.StkId);

            entity.ToTable("st_KST2016");

            entity.Property(e => e.StkId)
                .ValueGeneratedNever()
                .HasColumnName("stk_Id");
            entity.Property(e => e.StkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stk_Nazwa");
            entity.Property(e => e.StkNr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("stk_Nr");
            entity.Property(e => e.StkOpis)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stk_Opis");
        });

        modelBuilder.Entity<StMpk>(entity =>
        {
            entity.HasKey(e => e.StmId);

            entity.ToTable("st_MPK");

            entity.Property(e => e.StmId)
                .ValueGeneratedNever()
                .HasColumnName("stm_Id");
            entity.Property(e => e.StmNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stm_Nazwa");
            entity.Property(e => e.StmNrAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stm_NrAnalityka");
            entity.Property(e => e.StmSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("stm_Symbol");
        });

        modelBuilder.Entity<StOperacja>(entity =>
        {
            entity.HasKey(e => e.StoId);

            entity.ToTable("st_Operacja");

            entity.HasIndex(e => new { e.StoTypOper, e.StoNrDok }, "IX_st_NrDok").IsUnique();

            entity.Property(e => e.StoId)
                .ValueGeneratedNever()
                .HasColumnName("sto_Id");
            entity.Property(e => e.StoCzyAmort).HasColumnName("sto_CzyAmort");
            entity.Property(e => e.StoCzyAmortBil).HasColumnName("sto_CzyAmortBil");
            entity.Property(e => e.StoCzyPduw).HasColumnName("sto_CzyPDUW");
            entity.Property(e => e.StoCzyPodwyzszonaStopa)
                .HasDefaultValue(false)
                .HasColumnName("sto_CzyPodwyzszonaStopa");
            entity.Property(e => e.StoCzyPodwyzszonaStopaBil).HasColumnName("sto_CzyPodwyzszonaStopaBil");
            entity.Property(e => e.StoCzyPomniejszacPodstSklZdrOodpisyAmortDoWartosciSprzedazy).HasColumnName("sto_CzyPomniejszacPodstSklZdrOOdpisyAmortDoWartosciSprzedazy");
            entity.Property(e => e.StoData)
                .HasColumnType("datetime")
                .HasColumnName("sto_Data");
            entity.Property(e => e.StoDokSprzedazy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sto_DokSprzedazy");
            entity.Property(e => e.StoIdKategorii).HasColumnName("sto_IdKategorii");
            entity.Property(e => e.StoIdMpk).HasColumnName("sto_IdMPK");
            entity.Property(e => e.StoIdSrodka).HasColumnName("sto_IdSrodka");
            entity.Property(e => e.StoImport).HasColumnName("sto_Import");
            entity.Property(e => e.StoKomisja)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sto_Komisja");
            entity.Property(e => e.StoKorygujPodstSklZdrOodpisyAmortyzacyjne).HasColumnName("sto_KorygujPodstSklZdrOOdpisyAmortyzacyjne");
            entity.Property(e => e.StoLimitAmJedn).HasColumnName("sto_LimitAmJedn");
            entity.Property(e => e.StoLimitAmJednBil).HasColumnName("sto_LimitAmJednBil");
            entity.Property(e => e.StoMetoda).HasColumnName("sto_Metoda");
            entity.Property(e => e.StoMetodaBil).HasColumnName("sto_MetodaBil");
            entity.Property(e => e.StoNabywca)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sto_Nabywca");
            entity.Property(e => e.StoNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sto_NrDok");
            entity.Property(e => e.StoPodwyzszonaStopa)
                .HasColumnType("money")
                .HasColumnName("sto_PodwyzszonaStopa");
            entity.Property(e => e.StoPodwyzszonaStopaBil)
                .HasColumnType("money")
                .HasColumnName("sto_PodwyzszonaStopaBil");
            entity.Property(e => e.StoPrzyczyna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sto_Przyczyna");
            entity.Property(e => e.StoRozpoczecieAm)
                .HasDefaultValue(1)
                .HasColumnName("sto_RozpoczecieAM");
            entity.Property(e => e.StoRozpoczecieAmbil).HasColumnName("sto_RozpoczecieAMBil");
            entity.Property(e => e.StoSposob)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sto_Sposob");
            entity.Property(e => e.StoStopa)
                .HasColumnType("money")
                .HasColumnName("sto_Stopa");
            entity.Property(e => e.StoStopaBil)
                .HasColumnType("money")
                .HasColumnName("sto_StopaBil");
            entity.Property(e => e.StoSumaAm)
                .HasColumnType("money")
                .HasColumnName("sto_SumaAM");
            entity.Property(e => e.StoSumaAmbil)
                .HasColumnType("money")
                .HasColumnName("sto_SumaAMBil");
            entity.Property(e => e.StoTypOper).HasColumnName("sto_TypOper");
            entity.Property(e => e.StoUmorzPocz)
                .HasColumnType("money")
                .HasColumnName("sto_UmorzPocz");
            entity.Property(e => e.StoUmorzPoczBil)
                .HasColumnType("money")
                .HasColumnName("sto_UmorzPoczBil");
            entity.Property(e => e.StoUzytkownik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sto_Uzytkownik");
            entity.Property(e => e.StoWartosc)
                .HasColumnType("money")
                .HasColumnName("sto_Wartosc");
            entity.Property(e => e.StoWartoscBil)
                .HasColumnType("money")
                .HasColumnName("sto_WartoscBil");
            entity.Property(e => e.StoWartoscOdpisowAmortyzacyjnychSprzed2022)
                .HasColumnType("money")
                .HasColumnName("sto_WartoscOdpisowAmortyzacyjnychSprzed2022");
            entity.Property(e => e.StoWartoscSprzedazy)
                .HasColumnType("money")
                .HasColumnName("sto_WartoscSprzedazy");
            entity.Property(e => e.StoWspolczynnikDegr)
                .HasColumnType("money")
                .HasColumnName("sto_WspolczynnikDegr");
            entity.Property(e => e.StoWspolczynnikDegrBil)
                .HasColumnType("money")
                .HasColumnName("sto_WspolczynnikDegrBil");

            entity.HasOne(d => d.StoIdMpkNavigation).WithMany(p => p.StOperacjas)
                .HasForeignKey(d => d.StoIdMpk)
                .HasConstraintName("FK_st_Operacja_st_MPK");

            entity.HasOne(d => d.StoIdSrodkaNavigation).WithMany(p => p.StOperacjas)
                .HasForeignKey(d => d.StoIdSrodka)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_Operacja_st_SrodekTrwaly");
        });

        modelBuilder.Entity<StParametr>(entity =>
        {
            entity.HasKey(e => e.StpaId);

            entity.ToTable("st_Parametr");

            entity.Property(e => e.StpaId)
                .ValueGeneratedNever()
                .HasColumnName("stpa_Id");
            entity.Property(e => e.StpaPrzypomnijKst2016).HasColumnName("stpa_PrzypomnijKST2016");
            entity.Property(e => e.StpaPrzypomnijKst2016data)
                .HasColumnType("datetime")
                .HasColumnName("stpa_PrzypomnijKST2016Data");
        });

        modelBuilder.Entity<StPlanAmrok>(entity =>
        {
            entity.HasKey(e => e.StpId);

            entity.ToTable("st_PlanAMRok");

            entity.Property(e => e.StpId)
                .ValueGeneratedNever()
                .HasColumnName("stp_Id");
            entity.Property(e => e.StpIdSrodka).HasColumnName("stp_IdSrodka");
            entity.Property(e => e.StpOk).HasColumnName("stp_OK");
            entity.Property(e => e.StpRok).HasColumnName("stp_Rok");

            entity.HasOne(d => d.StpIdSrodkaNavigation).WithMany(p => p.StPlanAmroks)
                .HasForeignKey(d => d.StpIdSrodka)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_PlanAMRok_st_SrodekTrwaly");
        });

        modelBuilder.Entity<StPlanAmrozbicie>(entity =>
        {
            entity.HasKey(e => e.StpsId);

            entity.ToTable("st_PlanAMRozbicie");

            entity.Property(e => e.StpsId).HasColumnName("stps_Id");
            entity.Property(e => e.StpsBilans).HasColumnName("stps_Bilans");
            entity.Property(e => e.StpsIdPlanuAm).HasColumnName("stps_IdPlanuAM");
            entity.Property(e => e.StpsLicznik).HasColumnName("stps_Licznik");
            entity.Property(e => e.StpsMianownik).HasColumnName("stps_Mianownik");
            entity.Property(e => e.StpsMiesiac).HasColumnName("stps_Miesiac");

            entity.HasOne(d => d.StpsIdPlanuAmNavigation).WithMany(p => p.StPlanAmrozbicies)
                .HasForeignKey(d => d.StpsIdPlanuAm)
                .HasConstraintName("FK_st_PlanAMRozbicie_st_PlanAMRok");
        });

        modelBuilder.Entity<StSrodekTrwaly>(entity =>
        {
            entity.HasKey(e => e.StId);

            entity.ToTable("st_SrodekTrwaly");

            entity.Property(e => e.StId)
                .ValueGeneratedNever()
                .HasColumnName("st_Id");
            entity.Property(e => e.StCharakterystyka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_Charakterystyka");
            entity.Property(e => e.StDaneTechniczne)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_DaneTechniczne");
            entity.Property(e => e.StDataNabycia)
                .HasColumnType("datetime")
                .HasColumnName("st_DataNabycia");
            entity.Property(e => e.StDokNabycia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_DokNabycia");
            entity.Property(e => e.StGus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_GUS");
            entity.Property(e => e.StIdKategoriiDok).HasColumnName("st_IdKategoriiDok");
            entity.Property(e => e.StIdKst).HasColumnName("st_IdKST");
            entity.Property(e => e.StIdKst2016).HasColumnName("st_IdKST2016");
            entity.Property(e => e.StNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_Nazwa");
            entity.Property(e => e.StNrAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_NrAnalityka");
            entity.Property(e => e.StNrInw)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_NrInw");
            entity.Property(e => e.StProducent)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_Producent");
            entity.Property(e => e.StRokProdukcji).HasColumnName("st_RokProdukcji");
            entity.Property(e => e.StSposobNabycia).HasColumnName("st_SposobNabycia");
            entity.Property(e => e.StSprzedawca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_Sprzedawca");
            entity.Property(e => e.StStanTechniczny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("st_StanTechniczny");
            entity.Property(e => e.StStatus).HasColumnName("st_Status");
            entity.Property(e => e.StTyp).HasColumnName("st_Typ");
            entity.Property(e => e.StTypWniP).HasColumnName("st_TypWNiP");
            entity.Property(e => e.StWartoscNabycia)
                .HasColumnType("money")
                .HasColumnName("st_WartoscNabycia");

            entity.HasOne(d => d.StIdKstNavigation).WithMany(p => p.StSrodekTrwalies)
                .HasForeignKey(d => d.StIdKst)
                .HasConstraintName("FK_st_SrodekTrwaly_st_KST");

            entity.HasOne(d => d.StIdKst2016Navigation).WithMany(p => p.StSrodekTrwalies)
                .HasForeignKey(d => d.StIdKst2016)
                .HasConstraintName("FK_st_SrodekTrwaly_st_KST2016");
        });

        modelBuilder.Entity<StSrodekTrwalyDane>(entity =>
        {
            entity.HasKey(e => e.StdId);

            entity.ToTable("st_SrodekTrwalyDane");

            entity.Property(e => e.StdId)
                .ValueGeneratedNever()
                .HasColumnName("std_Id");
            entity.Property(e => e.StdIdMpk).HasColumnName("std_IdMPK");
            entity.Property(e => e.StdIdSrodka).HasColumnName("std_idSrodka");
            entity.Property(e => e.StdMetoda).HasColumnName("std_Metoda");
            entity.Property(e => e.StdMetodaBil).HasColumnName("std_MetodaBil");
            entity.Property(e => e.StdStopa)
                .HasColumnType("money")
                .HasColumnName("std_Stopa");
            entity.Property(e => e.StdStopaBil)
                .HasColumnType("money")
                .HasColumnName("std_StopaBil");
            entity.Property(e => e.StdUmorzDotych)
                .HasColumnType("money")
                .HasColumnName("std_UmorzDotych");
            entity.Property(e => e.StdUmorzDotychBil)
                .HasColumnType("money")
                .HasColumnName("std_UmorzDotychBil");
            entity.Property(e => e.StdUzytkownik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("std_Uzytkownik");
            entity.Property(e => e.StdWartoscNetto)
                .HasColumnType("money")
                .HasColumnName("std_WartoscNetto");
            entity.Property(e => e.StdWartoscNettoBil)
                .HasColumnType("money")
                .HasColumnName("std_WartoscNettoBil");
            entity.Property(e => e.StdWartoscPocz)
                .HasColumnType("money")
                .HasColumnName("std_WartoscPocz");
            entity.Property(e => e.StdWartoscPoczBil)
                .HasColumnType("money")
                .HasColumnName("std_WartoscPoczBil");
            entity.Property(e => e.StdWspolczynnikDegr)
                .HasColumnType("money")
                .HasColumnName("std_WspolczynnikDegr");
            entity.Property(e => e.StdWspolczynnikDegrBil)
                .HasColumnType("money")
                .HasColumnName("std_WspolczynnikDegrBil");

            entity.HasOne(d => d.StdIdMpkNavigation).WithMany(p => p.StSrodekTrwalyDanes)
                .HasForeignKey(d => d.StdIdMpk)
                .HasConstraintName("FK_st_SrodekTrwalyDane_st_MPK");

            entity.HasOne(d => d.StdIdSrodkaNavigation).WithMany(p => p.StSrodekTrwalyDanes)
                .HasForeignKey(d => d.StdIdSrodka)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_SrodekTrwalyDane_st_SrodekTrwaly");
        });

        modelBuilder.Entity<StSrodekTrwalyPlanAm>(entity =>
        {
            entity.HasKey(e => e.StaId);

            entity.ToTable("st_SrodekTrwalyPlanAM");

            entity.Property(e => e.StaId)
                .ValueGeneratedNever()
                .HasColumnName("sta_Id");
            entity.Property(e => e.StaBilans).HasColumnName("sta_Bilans");
            entity.Property(e => e.StaIdSrodka).HasColumnName("sta_IdSrodka");
            entity.Property(e => e.StaLicznik).HasColumnName("sta_Licznik");
            entity.Property(e => e.StaMianownik).HasColumnName("sta_Mianownik");
            entity.Property(e => e.StaMiesiac).HasColumnName("sta_Miesiac");

            entity.HasOne(d => d.StaIdSrodkaNavigation).WithMany(p => p.StSrodekTrwalyPlanAms)
                .HasForeignKey(d => d.StaIdSrodka)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_SrodekTrwalyPlanAM_st_SrodekTrwaly");
        });

        modelBuilder.Entity<StWyposazenie>(entity =>
        {
            entity.HasKey(e => e.WpsId);

            entity.ToTable("st_Wyposazenie");

            entity.Property(e => e.WpsId)
                .ValueGeneratedNever()
                .HasColumnName("wps_Id");
            entity.Property(e => e.WpsCzyZlikwidowany).HasColumnName("wps_CzyZlikwidowany");
            entity.Property(e => e.WpsDataLikwidacji)
                .HasColumnType("datetime")
                .HasColumnName("wps_DataLikwidacji");
            entity.Property(e => e.WpsDataNabycia)
                .HasColumnType("datetime")
                .HasColumnName("wps_DataNabycia");
            entity.Property(e => e.WpsDokNabycia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wps_DokNabycia");
            entity.Property(e => e.WpsNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wps_Nazwa");
            entity.Property(e => e.WpsNrInw)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wps_NrInw");
            entity.Property(e => e.WpsNrPozycji)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("wps_NrPozycji");
            entity.Property(e => e.WpsPrzyczyna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wps_Przyczyna");
            entity.Property(e => e.WpsUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wps_Uwagi");
            entity.Property(e => e.WpsWartosc)
                .HasColumnType("money")
                .HasColumnName("wps_Wartosc");
        });

        modelBuilder.Entity<SttTwTowar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("stt_tw__Towar", "InsSearch");

            entity.Property(e => e.Sdl).HasColumnName("SDL");
        });

        modelBuilder.Entity<SuParametr>(entity =>
        {
            entity.HasKey(e => e.SuId);

            entity.ToTable("su_Parametr");

            entity.HasIndex(e => e.SuParamEwidId, "IX_su_Parametr").IsUnique();

            entity.Property(e => e.SuId)
                .ValueGeneratedNever()
                .HasColumnName("su_Id");
            entity.Property(e => e.SuAlgorytm).HasColumnName("su_Algorytm");
            entity.Property(e => e.SuAutoDyspozZk).HasColumnName("su_AutoDyspozZK");
            entity.Property(e => e.SuAutoDyspozycja).HasColumnName("su_AutoDyspozycja");
            entity.Property(e => e.SuDokUkryjNieaktywneStawkiVat).HasColumnName("su_DokUkryjNieaktywneStawkiVat");
            entity.Property(e => e.SuFakturyMieszane)
                .HasDefaultValue(1)
                .HasColumnName("su_FakturyMieszane");
            entity.Property(e => e.SuFoPlNaPoprDok)
                .HasDefaultValue(5)
                .HasColumnName("su_FoPlNaPoprDok");
            entity.Property(e => e.SuFoPlNaPoprZam).HasColumnName("su_FoPlNaPoprZam");
            entity.Property(e => e.SuIgnorujBlokadeMagSs).HasColumnName("su_IgnorujBlokadeMagSS");
            entity.Property(e => e.SuIgnorujMoozLimitami).HasColumnName("su_IgnorujMOOzLimitami");
            entity.Property(e => e.SuKartaSpr).HasColumnName("su_KartaSpr");
            entity.Property(e => e.SuKartaSprId).HasColumnName("su_KartaSprId");
            entity.Property(e => e.SuKartaZak).HasColumnName("su_KartaZak");
            entity.Property(e => e.SuKartaZakId).HasColumnName("su_KartaZakId");
            entity.Property(e => e.SuKontrola)
                .HasDefaultValue(true)
                .HasColumnName("su_Kontrola");
            entity.Property(e => e.SuKredytSpr).HasColumnName("su_KredytSpr");
            entity.Property(e => e.SuKredytSprId).HasColumnName("su_KredytSprId");
            entity.Property(e => e.SuKursEur)
                .HasColumnType("money")
                .HasColumnName("su_KursEUR");
            entity.Property(e => e.SuLimitPlatnosciGotowka).HasColumnName("su_LimitPlatnosciGotowka");
            entity.Property(e => e.SuMarzaNieKoloruj).HasColumnName("su_MarzaNieKoloruj");
            entity.Property(e => e.SuMinMarza)
                .HasColumnType("money")
                .HasColumnName("su_MinMarza");
            entity.Property(e => e.SuNaliczajVatfaktWewn)
                .HasDefaultValue(true)
                .HasColumnName("su_NaliczajVATFaktWewn");
            entity.Property(e => e.SuOplSpecObslugaOznaczaniaDok).HasColumnName("su_OplSpecObslugaOznaczaniaDok");
            entity.Property(e => e.SuOplatyRecyklingowe).HasColumnName("su_OplatyRecyklingowe");
            entity.Property(e => e.SuPanstwoWysylkiWsto)
                .HasDefaultValue(1)
                .HasColumnName("su_PanstwoWysylkiWSTO");
            entity.Property(e => e.SuParamEwidId).HasColumnName("su_ParamEwidId");
            entity.Property(e => e.SuPdpSprPodlaczajZal).HasColumnName("su_PdpSprPodlaczajZal");
            entity.Property(e => e.SuPdpSprSplatyNiepowiazane).HasColumnName("su_PdpSprSplatyNiepowiazane");
            entity.Property(e => e.SuPdpZakPodlaczajZal).HasColumnName("su_PdpZakPodlaczajZal");
            entity.Property(e => e.SuPdpZakSplatyNiepowiazane).HasColumnName("su_PdpZakSplatyNiepowiazane");
            entity.Property(e => e.SuPlatOdr).HasColumnName("su_PlatOdr");
            entity.Property(e => e.SuPodpisEpp).HasColumnName("su_PodpisEPP");
            entity.Property(e => e.SuPodpisOpis)
                .HasColumnType("text")
                .HasColumnName("su_PodpisOpis");
            entity.Property(e => e.SuPodpisPdf).HasColumnName("su_PodpisPDF");
            entity.Property(e => e.SuPodpisPin)
                .HasColumnType("text")
                .HasColumnName("su_PodpisPIN");
            entity.Property(e => e.SuPodpisSkrot)
                .HasColumnType("text")
                .HasColumnName("su_PodpisSkrot");
            entity.Property(e => e.SuPodsumowanieDokRozmiar)
                .HasDefaultValue(-15)
                .HasColumnName("su_PodsumowanieDokRozmiar");
            entity.Property(e => e.SuPokazDokDost).HasColumnName("su_PokazDokDost");
            entity.Property(e => e.SuPozycjeWklej)
                .HasColumnType("image")
                .HasColumnName("su_PozycjeWklej");
            entity.Property(e => e.SuPozycjeWklejSpecjalne)
                .HasColumnType("image")
                .HasColumnName("su_PozycjeWklejSpecjalne");
            entity.Property(e => e.SuPromocjaCzasOtwarciaDokum).HasColumnName("su_PromocjaCzasOtwarciaDokum");
            entity.Property(e => e.SuPrzedplataSpr).HasColumnName("su_PrzedplataSpr");
            entity.Property(e => e.SuPrzedplataZak).HasColumnName("su_PrzedplataZak");
            entity.Property(e => e.SuPrzejsciowyVatzaliczki).HasColumnName("su_PrzejsciowyVATZaliczki");
            entity.Property(e => e.SuPrzelewSpr).HasColumnName("su_PrzelewSpr");
            entity.Property(e => e.SuPrzelewZak).HasColumnName("su_PrzelewZak");
            entity.Property(e => e.SuRabat).HasColumnName("su_Rabat");
            entity.Property(e => e.SuStatusDokMm)
                .HasDefaultValue(1)
                .HasColumnName("su_StatusDokMM");
            entity.Property(e => e.SuStatusDokPrz)
                .HasDefaultValue(1)
                .HasColumnName("su_StatusDokPrz");
            entity.Property(e => e.SuStatusDokSp)
                .HasDefaultValue(1)
                .HasColumnName("su_StatusDokSp");
            entity.Property(e => e.SuStatusDokWyd)
                .HasDefaultValue(1)
                .HasColumnName("su_StatusDokWyd");
            entity.Property(e => e.SuStatusDokZak)
                .HasDefaultValue(1)
                .HasColumnName("su_StatusDokZak");
            entity.Property(e => e.SuStatusDokZk)
                .HasDefaultValue(6)
                .HasColumnName("su_StatusDokZK");
            entity.Property(e => e.SuStraznikRezerwacjiKontrola).HasColumnName("su_StraznikRezerwacjiKontrola");
            entity.Property(e => e.SuStraznikRezerwacjiTryb).HasColumnName("su_StraznikRezerwacjiTryb");
            entity.Property(e => e.SuStraznikRezerwacjiTypDaty).HasColumnName("su_StraznikRezerwacjiTypDaty");
            entity.Property(e => e.SuSynchronizatorNazwaKomputera)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("su_SynchronizatorNazwaKomputera");
            entity.Property(e => e.SuVatExId).HasColumnName("su_VatExId");
            entity.Property(e => e.SuVatExProc)
                .HasColumnType("money")
                .HasColumnName("su_VatExProc");
            entity.Property(e => e.SuVatOoid).HasColumnName("su_VatOOId");
            entity.Property(e => e.SuVatOoproc)
                .HasColumnType("money")
                .HasColumnName("su_VatOOProc");
            entity.Property(e => e.SuVatSptkid).HasColumnName("su_VatSPTKId");
            entity.Property(e => e.SuVatSptkproc)
                .HasColumnType("money")
                .HasColumnName("su_VatSPTKProc");
            entity.Property(e => e.SuVatUeid).HasColumnName("su_VatUEId");
            entity.Property(e => e.SuVatUeproc)
                .HasColumnType("money")
                .HasColumnName("su_VatUEProc");
            entity.Property(e => e.SuVatUjid).HasColumnName("su_VatUJId");
            entity.Property(e => e.SuVatUjproc)
                .HasColumnType("money")
                .HasColumnName("su_VatUJProc");
            entity.Property(e => e.SuVatZwId).HasColumnName("su_VatZwId");
            entity.Property(e => e.SuVatZwProc)
                .HasColumnType("money")
                .HasColumnName("su_VatZwProc");
            entity.Property(e => e.SuWegielObslugaOswiadczenPochodzenia).HasColumnName("su_WegielObslugaOswiadczenPochodzenia");
            entity.Property(e => e.SuWegielOswiadczenieIdNumeracji).HasColumnName("su_WegielOswiadczenieIdNumeracji");
            entity.Property(e => e.SuWizard)
                .HasDefaultValue(1)
                .HasColumnName("su_Wizard");
            entity.Property(e => e.SuWlaczBlokadeKk)
                .HasDefaultValue(true)
                .HasColumnName("su_WlaczBlokadeKK");
            entity.Property(e => e.SuWlaczBlokadeNz)
                .HasDefaultValue(true)
                .HasColumnName("su_WlaczBlokadeNZ");
            entity.Property(e => e.SuWlaczBlokadeRfp)
                .HasDefaultValue(true)
                .HasColumnName("su_WlaczBlokadeRFp");
            entity.Property(e => e.SuWlaczMarketInsert).HasColumnName("su_WlaczMarketInsert");
            entity.Property(e => e.SuWstowszystkieWaluty).HasColumnName("su_WSTOWszystkieWaluty");
            entity.Property(e => e.SuWymagajPrzyczynyKorekty).HasColumnName("su_WymagajPrzyczynyKorekty");

            entity.HasOne(d => d.SuParamEwid).WithOne(p => p.SuParametr)
                .HasForeignKey<SuParametr>(d => d.SuParamEwidId)
                .HasConstraintName("FK_su_Parametr_par__Ewid");

            entity.HasOne(d => d.SuVatEx).WithMany(p => p.SuParametrSuVatExes)
                .HasForeignKey(d => d.SuVatExId)
                .HasConstraintName("FK_su_Parametr_sl_StawkaVAT");

            entity.HasOne(d => d.SuVatUe).WithMany(p => p.SuParametrSuVatUes)
                .HasForeignKey(d => d.SuVatUeid)
                .HasConstraintName("FK_su_Parametr_sl_StawkaVAT3");

            entity.HasOne(d => d.SuVatUj).WithMany(p => p.SuParametrSuVatUjs)
                .HasForeignKey(d => d.SuVatUjid)
                .HasConstraintName("FK_su_Parametr_sl_StawkaVAT2");

            entity.HasOne(d => d.SuVatZw).WithMany(p => p.SuParametrSuVatZws)
                .HasForeignKey(d => d.SuVatZwId)
                .HasConstraintName("FK_su_Parametr_sl_StawkaVAT1");

            entity.HasOne(d => d.SuWegielOswiadczenieIdNumeracjiNavigation).WithMany(p => p.SuParametrs)
                .HasForeignKey(d => d.SuWegielOswiadczenieIdNumeracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_su_Parametr_sl_FormatNumeracji_OPW");
        });

        modelBuilder.Entity<SvsdParametr>(entity =>
        {
            entity.HasKey(e => e.SsdId);

            entity.ToTable("svsd_Parametr");

            entity.Property(e => e.SsdId)
                .ValueGeneratedNever()
                .HasColumnName("ssd_Id");
            entity.Property(e => e.SsdFakturySprzedazy)
                .HasDefaultValue(-1)
                .HasColumnName("ssd_FakturySprzedazy");
            entity.Property(e => e.SsdFakturyZakupu)
                .HasDefaultValue(-1)
                .HasColumnName("ssd_FakturyZakupu");
            entity.Property(e => e.SsdPrzyjeciaDostawcy)
                .HasDefaultValue(-1)
                .HasColumnName("ssd_PrzyjeciaDostawcy");
            entity.Property(e => e.SsdPrzyjeciaMagazynowe)
                .HasDefaultValue(-1)
                .HasColumnName("ssd_PrzyjeciaMagazynowe");
            entity.Property(e => e.SsdSprzedazDetaliczna)
                .HasDefaultValue(-1)
                .HasColumnName("ssd_SprzedazDetaliczna");
            entity.Property(e => e.SsdWydaniaMagazynowe)
                .HasDefaultValue(-1)
                .HasColumnName("ssd_WydaniaMagazynowe");
            entity.Property(e => e.SsdWydaniaOdbiorcy)
                .HasDefaultValue(-1)
                .HasColumnName("ssd_WydaniaOdbiorcy");
            entity.Property(e => e.SsdZamowieniaKlienta)
                .HasDefaultValue(-1)
                .HasColumnName("ssd_ZamowieniaKlienta");
        });

        modelBuilder.Entity<SySyncCmdResponse>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sy_SyncCmdResponse");

            entity.Property(e => e.SycrDivisionId).HasColumnName("sycr_DivisionId");
            entity.Property(e => e.SycrId)
                .ValueGeneratedOnAdd()
                .HasColumnName("sycr_Id");
            entity.Property(e => e.SycrPackageId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sycr_PackageId");
            entity.Property(e => e.SycrResponse)
                .HasColumnType("text")
                .HasColumnName("sycr_Response");
            entity.Property(e => e.SycrResponseDate)
                .HasColumnType("datetime")
                .HasColumnName("sycr_ResponseDate");
        });

        modelBuilder.Entity<SySyncObjectChange>(entity =>
        {
            entity.HasKey(e => e.SycId);

            entity.ToTable("sy_SyncObjectChange");

            entity.HasIndex(e => new { e.SycObjectType, e.SycObjectTypeEx, e.SycObjectId }, "IX_sy_SyncObjectChange");

            entity.HasIndex(e => e.SycSyncId, "IX_sy_SyncObjectChange_SyncId").IsUnique();

            entity.Property(e => e.SycId)
                .ValueGeneratedNever()
                .HasColumnName("syc_Id");
            entity.Property(e => e.SycBlockSync).HasColumnName("syc_BlockSync");
            entity.Property(e => e.SycChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("syc_ChangeDate");
            entity.Property(e => e.SycChangeOwner).HasColumnName("syc_ChangeOwner");
            entity.Property(e => e.SycChangeType).HasColumnName("syc_ChangeType");
            entity.Property(e => e.SycObjectId).HasColumnName("syc_ObjectId");
            entity.Property(e => e.SycObjectType).HasColumnName("syc_ObjectType");
            entity.Property(e => e.SycObjectTypeEx).HasColumnName("syc_ObjectTypeEx");
            entity.Property(e => e.SycPackageId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("syc_PackageId");
            entity.Property(e => e.SycSyncId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("syc_SyncId");
        });

        modelBuilder.Entity<SySyncObjectChangeStatus>(entity =>
        {
            entity.HasKey(e => e.SycsId);

            entity.ToTable("sy_SyncObjectChangeStatus");

            entity.HasIndex(e => new { e.SycsChangeId, e.SycsDivisionId }, "IX_sy_SyncObjectChangeStatus").IsUnique();

            entity.Property(e => e.SycsId)
                .ValueGeneratedNever()
                .HasColumnName("sycs_Id");
            entity.Property(e => e.SycsChangeId).HasColumnName("sycs_ChangeId");
            entity.Property(e => e.SycsConfirmationDate)
                .HasColumnType("datetime")
                .HasColumnName("sycs_ConfirmationDate");
            entity.Property(e => e.SycsConfirmationDetails)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sycs_ConfirmationDetails");
            entity.Property(e => e.SycsConfirmationStatus).HasColumnName("sycs_ConfirmationStatus");
            entity.Property(e => e.SycsDivisionId).HasColumnName("sycs_DivisionId");
            entity.Property(e => e.SycsSyncDate)
                .HasColumnType("datetime")
                .HasColumnName("sycs_SyncDate");
            entity.Property(e => e.SycsSyncStatus).HasColumnName("sycs_SyncStatus");
        });

        modelBuilder.Entity<SySyncParam>(entity =>
        {
            entity.HasKey(e => e.SypId).HasName("PK__sy_SyncP__3C70828F02DE0F30");

            entity.ToTable("sy_SyncParams");

            entity.Property(e => e.SypId)
                .ValueGeneratedNever()
                .HasColumnName("syp_Id");
            entity.Property(e => e.SypBlockKasa)
                .HasDefaultValue(true)
                .HasColumnName("syp_BlockKasa");
            entity.Property(e => e.SypBlockMag)
                .HasDefaultValue(true)
                .HasColumnName("syp_BlockMag");
            entity.Property(e => e.SypBlokujZapis)
                .HasDefaultValue(true)
                .HasColumnName("syp_BlokujZapis");
            entity.Property(e => e.SypCmdPackageLifetime)
                .HasDefaultValue(60)
                .HasColumnName("syp_CmdPackageLifetime");
            entity.Property(e => e.SypCmdPackageReadLimit)
                .HasDefaultValue(500)
                .HasColumnName("syp_CmdPackageReadLimit");
            entity.Property(e => e.SypCmdRequestTimeout)
                .HasDefaultValue(60)
                .HasColumnName("syp_CmdRequestTimeout");
            entity.Property(e => e.SypCmdTaskMode)
                .HasDefaultValue(3)
                .HasColumnName("syp_CmdTaskMode");
            entity.Property(e => e.SypCmdTaskThreadsLimit).HasColumnName("syp_CmdTaskThreadsLimit");
            entity.Property(e => e.SypCmdTaskTimeout)
                .HasDefaultValue(10)
                .HasColumnName("syp_CmdTaskTimeout");
            entity.Property(e => e.SypCmdTaskUseThreads)
                .HasDefaultValue(true)
                .HasColumnName("syp_CmdTaskUseThreads");
            entity.Property(e => e.SypDataPackageLifetime).HasColumnName("syp_DataPackageLifetime");
            entity.Property(e => e.SypDataPackageReadLimit)
                .HasDefaultValue(500)
                .HasColumnName("syp_DataPackageReadLimit");
            entity.Property(e => e.SypDataPackageSendLimit)
                .HasDefaultValue(500)
                .HasColumnName("syp_DataPackageSendLimit");
            entity.Property(e => e.SypDataPackageSendLimitSize)
                .HasDefaultValue(10)
                .HasColumnName("syp_DataPackageSendLimitSize");
            entity.Property(e => e.SypEnabled).HasColumnName("syp_Enabled");
            entity.Property(e => e.SypErrorInfoText)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("syp_ErrorInfoText");
            entity.Property(e => e.SypErrorInfoTimeout).HasColumnName("syp_ErrorInfoTimeout");
            entity.Property(e => e.SypErrorInfoType).HasColumnName("syp_ErrorInfoType");
            entity.Property(e => e.SypErrorInfoUsers)
                .HasColumnType("image")
                .HasColumnName("syp_ErrorInfoUsers");
            entity.Property(e => e.SypErrorMailConfig)
                .HasColumnType("image")
                .HasColumnName("syp_ErrorMailConfig");
            entity.Property(e => e.SypErrorMailEnabled).HasColumnName("syp_ErrorMailEnabled");
            entity.Property(e => e.SypExchangeData)
                .HasColumnType("image")
                .HasColumnName("syp_ExchangeData");
            entity.Property(e => e.SypLicServerUri)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("syp_LicServerUri");
            entity.Property(e => e.SypLogowanie)
                .HasDefaultValue(true)
                .HasColumnName("syp_Logowanie");
            entity.Property(e => e.SypOauthUri)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("syp_OAuthUri");
            entity.Property(e => e.SypPdmType).HasColumnName("syp_PdmType");
            entity.Property(e => e.SypReceiveHour)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("syp_ReceiveHour");
            entity.Property(e => e.SypReceiveHourCheck)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("syp_ReceiveHourCheck");
            entity.Property(e => e.SypReceiveInterval)
                .HasDefaultValue(600)
                .HasColumnName("syp_ReceiveInterval");
            entity.Property(e => e.SypReceiveIntervalSec).HasColumnName("syp_ReceiveIntervalSec");
            entity.Property(e => e.SypReceiveTimeoutType).HasColumnName("syp_ReceiveTimeoutType");
            entity.Property(e => e.SypSendHour)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("syp_SendHour");
            entity.Property(e => e.SypSendHourCheck)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("syp_SendHourCheck");
            entity.Property(e => e.SypSendInterval)
                .HasDefaultValue(900)
                .HasColumnName("syp_SendInterval");
            entity.Property(e => e.SypSendIntervalSec).HasColumnName("syp_SendIntervalSec");
            entity.Property(e => e.SypSendKhNalHist).HasColumnName("syp_SendKhNalHist");
            entity.Property(e => e.SypSendPhotos).HasColumnName("syp_SendPhotos");
            entity.Property(e => e.SypSendTimeoutType).HasColumnName("syp_SendTimeoutType");
            entity.Property(e => e.SypServiceBusUri)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("syp_ServiceBusUri");
            entity.Property(e => e.SypSf2Enabled).HasColumnName("syp_Sf2Enabled");
            entity.Property(e => e.SypStartTasks)
                .HasDefaultValue(7)
                .HasColumnName("syp_StartTasks");
            entity.Property(e => e.SypStorageReadTimeout)
                .HasDefaultValue(600)
                .HasColumnName("syp_StorageReadTimeout");
            entity.Property(e => e.SypStorageSizeLimit).HasColumnName("syp_StorageSizeLimit");
            entity.Property(e => e.SypStorageUri)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("syp_StorageUri");
            entity.Property(e => e.SypSyncPriceEditionBlockage)
                .HasDefaultValue(true)
                .HasColumnName("syp_SyncPriceEditionBlockage");
            entity.Property(e => e.SypSyncPriceReceive)
                .HasDefaultValue(true)
                .HasColumnName("syp_SyncPriceReceive");
            entity.Property(e => e.SypSyncPriceSend)
                .HasDefaultValue(true)
                .HasColumnName("syp_SyncPriceSend");
            entity.Property(e => e.SypTwStanRefreshEnabled).HasColumnName("syp_TwStanRefreshEnabled");
            entity.Property(e => e.SypTwStanRefreshTimeout)
                .HasDefaultValue(720)
                .HasColumnName("syp_TwStanRefreshTimeout");
        });

        modelBuilder.Entity<SySyncReceived>(entity =>
        {
            entity.HasKey(e => e.SyrId).HasName("PK__so_SyncO__341F20BE532EFC0E");

            entity.ToTable("sy_SyncReceived");

            entity.Property(e => e.SyrId)
                .ValueGeneratedNever()
                .HasColumnName("syr_Id");
            entity.Property(e => e.SyrChangeType).HasColumnName("syr_ChangeType");
            entity.Property(e => e.SyrDivisionId).HasColumnName("syr_DivisionId");
            entity.Property(e => e.SyrError)
                .HasColumnType("text")
                .HasColumnName("syr_Error");
            entity.Property(e => e.SyrErrorMailSentAt)
                .HasColumnType("datetime")
                .HasColumnName("syr_ErrorMailSentAt");
            entity.Property(e => e.SyrInternalDate)
                .HasColumnType("datetime")
                .HasColumnName("syr_InternalDate");
            entity.Property(e => e.SyrInternalText)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasColumnName("syr_InternalText");
            entity.Property(e => e.SyrPackage)
                .HasColumnType("image")
                .HasColumnName("syr_Package");
            entity.Property(e => e.SyrPackageId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("syr_PackageId");
            entity.Property(e => e.SyrPackageType).HasColumnName("syr_PackageType");
            entity.Property(e => e.SyrReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("syr_ReceivedDate");
            entity.Property(e => e.SyrRemoteId).HasColumnName("syr_RemoteId");
            entity.Property(e => e.SyrSyncId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("syr_SyncId");
            entity.Property(e => e.SyrSyncStatus).HasColumnName("syr_SyncStatus");
            entity.Property(e => e.SyrType).HasColumnName("syr_Type");
            entity.Property(e => e.SyrTypeEx).HasColumnName("syr_TypeEx");
        });

        modelBuilder.Entity<Tabele>(entity =>
        {
            entity.HasKey(e => e.NazwaTabeli);

            entity.ToTable("__Tabele");

            entity.HasIndex(e => e.PrzedrostekAtrybutu, "IX___Tabele").IsUnique();

            entity.Property(e => e.NazwaTabeli)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nazwa_tabeli");
            entity.Property(e => e.Autor)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Duplikaty)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Opis)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Produkt)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrzedrostekAtrybutu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Przedrostek_atrybutu");
        });

        modelBuilder.Entity<TelEwid>(entity =>
        {
            entity.HasKey(e => e.TelId);

            entity.ToTable("tel__Ewid", tb =>
                {
                    tb.HasTrigger("tr_TelEwid_Deleting");
                    tb.HasTrigger("tr_TelEwid_Inserting");
                    tb.HasTrigger("tr_TelEwid_Updating");
                });

            entity.HasIndex(e => e.TelIdAdresu, "IX_tel__Ewid");

            entity.Property(e => e.TelId)
                .ValueGeneratedNever()
                .HasColumnName("tel_Id");
            entity.Property(e => e.TelFaks).HasColumnName("tel_Faks");
            entity.Property(e => e.TelIdAdresu).HasColumnName("tel_IdAdresu");
            entity.Property(e => e.TelNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tel_Nazwa");
            entity.Property(e => e.TelNumer)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("tel_Numer");
            entity.Property(e => e.TelPodstawowy).HasColumnName("tel_Podstawowy");
            entity.Property(e => e.TelRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("tel_Rodzaj");
            entity.Property(e => e.TelSms).HasColumnName("tel_SMS");

            entity.HasOne(d => d.TelIdAdresuNavigation).WithMany(p => p.TelEwids)
                .HasForeignKey(d => d.TelIdAdresu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tel__Ewid_adr__Ewid");
        });

        modelBuilder.Entity<TelObiekt>(entity =>
        {
            entity.HasKey(e => e.ToId);

            entity.ToTable("tel__Obiekt");

            entity.Property(e => e.ToId)
                .ValueGeneratedNever()
                .HasColumnName("to_Id");
            entity.Property(e => e.ToIdObiektu).HasColumnName("to_IdObiektu");
            entity.Property(e => e.ToNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("to_Nazwa");
            entity.Property(e => e.ToNumer)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("to_Numer");
            entity.Property(e => e.ToPodstawowy).HasColumnName("to_Podstawowy");
            entity.Property(e => e.ToTypObiektu).HasColumnName("to_TypObiektu");
        });

        modelBuilder.Entity<TrHistorium>(entity =>
        {
            entity.HasKey(e => e.TrhId);

            entity.ToTable("tr_Historia");

            entity.Property(e => e.TrhId)
                .ValueGeneratedNever()
                .HasColumnName("trh_Id");
            entity.Property(e => e.TrhData)
                .HasColumnType("datetime")
                .HasColumnName("trh_Data");
            entity.Property(e => e.TrhOperator).HasColumnName("trh_Operator");
            entity.Property(e => e.TrhOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("trh_Opis");
            entity.Property(e => e.TrhTransakcja).HasColumnName("trh_Transakcja");
        });

        modelBuilder.Entity<TrOpi>(entity =>
        {
            entity.HasKey(e => e.TroId);

            entity.ToTable("tr_Opis", tb => tb.HasTrigger("tr_TrOpis_Updating"));

            entity.Property(e => e.TroId)
                .ValueGeneratedNever()
                .HasColumnName("tro_Id");
            entity.Property(e => e.TroOpis)
                .HasColumnType("text")
                .HasColumnName("tro_Opis");
            entity.Property(e => e.TroOpisTekst)
                .HasColumnType("text")
                .HasColumnName("tro_OpisTekst");
            entity.Property(e => e.TroTransakcja).HasColumnName("tro_Transakcja");
        });

        modelBuilder.Entity<TrParametr>(entity =>
        {
            entity.HasKey(e => e.TrpId);

            entity.ToTable("tr_Parametr");

            entity.HasIndex(e => e.TrpParamEwidId, "IX_tr_Parametr").IsUnique();

            entity.Property(e => e.TrpId)
                .ValueGeneratedNever()
                .HasColumnName("trp_Id");
            entity.Property(e => e.TrpCzasTrwania).HasColumnName("trp_CzasTrwania");
            entity.Property(e => e.TrpDokKoncowy).HasColumnName("trp_DokKoncowy");
            entity.Property(e => e.TrpDokZamowienie).HasColumnName("trp_DokZamowienie");
            entity.Property(e => e.TrpGrupa).HasColumnName("trp_Grupa");
            entity.Property(e => e.TrpKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("trp_Kolor");
            entity.Property(e => e.TrpOkreslGodzine).HasColumnName("trp_OkreslGodzine");
            entity.Property(e => e.TrpParamEwidId).HasColumnName("trp_ParamEwidId");
            entity.Property(e => e.TrpPokazujWkal).HasColumnName("trp_PokazujWKal");
            entity.Property(e => e.TrpScenariusz).HasColumnName("trp_Scenariusz");
            entity.Property(e => e.TrpTerminRealizacji)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("trp_TerminRealizacji");
            entity.Property(e => e.TrpUwagiDok)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("trp_UwagiDok");
            entity.Property(e => e.TrpWarunkiDostawy)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("trp_WarunkiDostawy");
            entity.Property(e => e.TrpWarunkiPlatnosci)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("trp_WarunkiPlatnosci");

            entity.HasOne(d => d.TrpParamEwid).WithOne(p => p.TrParametr)
                .HasForeignKey<TrParametr>(d => d.TrpParamEwidId)
                .HasConstraintName("FK_tr_Parametr_par__Ewid");
        });

        modelBuilder.Entity<TrTransakcja>(entity =>
        {
            entity.HasKey(e => e.TrId).HasName("PK_tr__CrmTransakcja");

            entity.ToTable("tr__Transakcja");

            entity.Property(e => e.TrId)
                .ValueGeneratedNever()
                .HasColumnName("tr_Id");
            entity.Property(e => e.TrDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataModyfikacji");
            entity.Property(e => e.TrDataOtwarcia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataOtwarcia");
            entity.Property(e => e.TrDataRealizacji)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_DataRealizacji");
            entity.Property(e => e.TrDataUtworzenia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataUtworzenia");
            entity.Property(e => e.TrDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataZamkniecia");
            entity.Property(e => e.TrDlaczegoNieudana).HasColumnName("tr_DlaczegoNieudana");
            entity.Property(e => e.TrDokKoncowy).HasColumnName("tr_DokKoncowy");
            entity.Property(e => e.TrDokKoncowyId).HasColumnName("tr_DokKoncowyId");
            entity.Property(e => e.TrDokKoncowySymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_DokKoncowySymbol");
            entity.Property(e => e.TrDokZamowienie).HasColumnName("tr_DokZamowienie");
            entity.Property(e => e.TrDokZamowienieId).HasColumnName("tr_DokZamowienieId");
            entity.Property(e => e.TrDokZamowienieSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_DokZamowienieSymbol");
            entity.Property(e => e.TrEtap).HasColumnName("tr_Etap");
            entity.Property(e => e.TrGrupa).HasColumnName("tr_Grupa");
            entity.Property(e => e.TrIdTransakcji).HasColumnName("tr_IdTransakcji");
            entity.Property(e => e.TrKlient).HasColumnName("tr_Klient");
            entity.Property(e => e.TrKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("tr_Kolor");
            entity.Property(e => e.TrMaObsluzyc).HasColumnName("tr_MaObsluzyc");
            entity.Property(e => e.TrMaObsluzycOdKlienta).HasColumnName("tr_MaObsluzycOdKlienta");
            entity.Property(e => e.TrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tr_Nazwa");
            entity.Property(e => e.TrOferta).HasColumnName("tr_Oferta");
            entity.Property(e => e.TrPlanowanaDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("tr_PlanowanaDataZamkniecia");
            entity.Property(e => e.TrPlanowanaGodzinaZamkniecia).HasColumnName("tr_PlanowanaGodzinaZamkniecia");
            entity.Property(e => e.TrPokazujWkal).HasColumnName("tr_PokazujWKal");
            entity.Property(e => e.TrPozyskana).HasColumnName("tr_Pozyskana");
            entity.Property(e => e.TrScenariusz).HasColumnName("tr_Scenariusz");
            entity.Property(e => e.TrStan).HasColumnName("tr_Stan");
            entity.Property(e => e.TrStatus).HasColumnName("tr_Status");
            entity.Property(e => e.TrStatusOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tr_StatusOpis");
            entity.Property(e => e.TrUtworzyl).HasColumnName("tr_Utworzyl");
            entity.Property(e => e.TrUwagiDok)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_UwagiDok");
            entity.Property(e => e.TrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tr_Waluta");
            entity.Property(e => e.TrWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("tr_WalutaKurs");
            entity.Property(e => e.TrWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscBrutto");
            entity.Property(e => e.TrWartoscNetto)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscNetto");
            entity.Property(e => e.TrWartoscRecznie).HasColumnName("tr_WartoscRecznie");
            entity.Property(e => e.TrWartoscVat)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscVat");
            entity.Property(e => e.TrWarunkiDostawy)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_WarunkiDostawy");
            entity.Property(e => e.TrWarunkiPlatnosci)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_WarunkiPlatnosci");
            entity.Property(e => e.TrZamknal).HasColumnName("tr_Zamknal");
            entity.Property(e => e.TrZlecenieId).HasColumnName("tr_ZlecenieId");
            entity.Property(e => e.TrZmodyfikowal).HasColumnName("tr_Zmodyfikowal");
        });

        modelBuilder.Entity<TrmTwTowar>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK_InsSearch_trm_tw__Towar")
                .IsClustered(false);

            entity.ToTable("trm_tw__Towar", "InsSearch");

            entity.HasIndex(e => e.Term, "IX_InsSearch_trm_tw__Towar_Term")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.Df).HasColumnName("DF");
            entity.Property(e => e.Term)
                .HasMaxLength(256)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TwCechaTw>(entity =>
        {
            entity.HasKey(e => e.ChtId);

            entity.ToTable("tw_CechaTw", tb =>
                {
                    tb.HasTrigger("tr_tw_CechaTw_Synch_delete");
                    tb.HasTrigger("tr_tw_CechaTw_Synch_insert");
                    tb.HasTrigger("tr_tw_CechaTw_Synch_update");
                });

            entity.Property(e => e.ChtId)
                .ValueGeneratedNever()
                .HasColumnName("cht_Id");
            entity.Property(e => e.ChtIdCecha).HasColumnName("cht_IdCecha");
            entity.Property(e => e.ChtIdTowar).HasColumnName("cht_IdTowar");

            entity.HasOne(d => d.ChtIdCechaNavigation).WithMany(p => p.TwCechaTws)
                .HasForeignKey(d => d.ChtIdCecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_CechaTw_sl_CechaTw");

            entity.HasOne(d => d.ChtIdTowarNavigation).WithMany(p => p.TwCechaTws)
                .HasForeignKey(d => d.ChtIdTowar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_GrupaTw_tw__Towar");
        });

        modelBuilder.Entity<TwCena>(entity =>
        {
            entity.HasKey(e => e.TcId);

            entity.ToTable("tw_Cena", tb => tb.HasTrigger("tr_tw_Cena_Updating"));

            entity.HasIndex(e => e.TcIdTowar, "IX_tw_Cena").IsUnique();

            entity.Property(e => e.TcId)
                .ValueGeneratedNever()
                .HasColumnName("tc_Id");
            entity.Property(e => e.TcBankKursuWaluty).HasColumnName("tc_BankKursuWaluty");
            entity.Property(e => e.TcCenaBrutto0)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto0");
            entity.Property(e => e.TcCenaBrutto1)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto1");
            entity.Property(e => e.TcCenaBrutto10)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto10");
            entity.Property(e => e.TcCenaBrutto2)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto2");
            entity.Property(e => e.TcCenaBrutto3)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto3");
            entity.Property(e => e.TcCenaBrutto4)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto4");
            entity.Property(e => e.TcCenaBrutto5)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto5");
            entity.Property(e => e.TcCenaBrutto6)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto6");
            entity.Property(e => e.TcCenaBrutto7)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto7");
            entity.Property(e => e.TcCenaBrutto8)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto8");
            entity.Property(e => e.TcCenaBrutto9)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto9");
            entity.Property(e => e.TcCenaNetto0)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto0");
            entity.Property(e => e.TcCenaNetto1)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto1");
            entity.Property(e => e.TcCenaNetto10)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto10");
            entity.Property(e => e.TcCenaNetto2)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto2");
            entity.Property(e => e.TcCenaNetto3)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto3");
            entity.Property(e => e.TcCenaNetto4)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto4");
            entity.Property(e => e.TcCenaNetto5)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto5");
            entity.Property(e => e.TcCenaNetto6)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto6");
            entity.Property(e => e.TcCenaNetto7)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto7");
            entity.Property(e => e.TcCenaNetto8)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto8");
            entity.Property(e => e.TcCenaNetto9)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto9");
            entity.Property(e => e.TcCenaNettoWaluta)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNettoWaluta");
            entity.Property(e => e.TcCenaNettoWaluta2)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNettoWaluta2");
            entity.Property(e => e.TcCenaWalutaNarzut)
                .HasColumnType("money")
                .HasColumnName("tc_CenaWalutaNarzut");
            entity.Property(e => e.TcDataKursuWaluty)
                .HasColumnType("datetime")
                .HasColumnName("tc_DataKursuWaluty");
            entity.Property(e => e.TcIdTowar).HasColumnName("tc_IdTowar");
            entity.Property(e => e.TcIdWaluta0)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta0");
            entity.Property(e => e.TcIdWaluta1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta1");
            entity.Property(e => e.TcIdWaluta10)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta10");
            entity.Property(e => e.TcIdWaluta2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta2");
            entity.Property(e => e.TcIdWaluta3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta3");
            entity.Property(e => e.TcIdWaluta4)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta4");
            entity.Property(e => e.TcIdWaluta5)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta5");
            entity.Property(e => e.TcIdWaluta6)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta6");
            entity.Property(e => e.TcIdWaluta7)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta7");
            entity.Property(e => e.TcIdWaluta8)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta8");
            entity.Property(e => e.TcIdWaluta9)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta9");
            entity.Property(e => e.TcIdWalutaKurs).HasColumnName("tc_IdWalutaKurs");
            entity.Property(e => e.TcKursWaluty1).HasColumnName("tc_KursWaluty1");
            entity.Property(e => e.TcKursWaluty10).HasColumnName("tc_KursWaluty10");
            entity.Property(e => e.TcKursWaluty2).HasColumnName("tc_KursWaluty2");
            entity.Property(e => e.TcKursWaluty3).HasColumnName("tc_KursWaluty3");
            entity.Property(e => e.TcKursWaluty4).HasColumnName("tc_KursWaluty4");
            entity.Property(e => e.TcKursWaluty5).HasColumnName("tc_KursWaluty5");
            entity.Property(e => e.TcKursWaluty6).HasColumnName("tc_KursWaluty6");
            entity.Property(e => e.TcKursWaluty7).HasColumnName("tc_KursWaluty7");
            entity.Property(e => e.TcKursWaluty8).HasColumnName("tc_KursWaluty8");
            entity.Property(e => e.TcKursWaluty9).HasColumnName("tc_KursWaluty9");
            entity.Property(e => e.TcMarza1)
                .HasColumnType("money")
                .HasColumnName("tc_Marza1");
            entity.Property(e => e.TcMarza10)
                .HasColumnType("money")
                .HasColumnName("tc_Marza10");
            entity.Property(e => e.TcMarza2)
                .HasColumnType("money")
                .HasColumnName("tc_Marza2");
            entity.Property(e => e.TcMarza3)
                .HasColumnType("money")
                .HasColumnName("tc_Marza3");
            entity.Property(e => e.TcMarza4)
                .HasColumnType("money")
                .HasColumnName("tc_Marza4");
            entity.Property(e => e.TcMarza5)
                .HasColumnType("money")
                .HasColumnName("tc_Marza5");
            entity.Property(e => e.TcMarza6)
                .HasColumnType("money")
                .HasColumnName("tc_Marza6");
            entity.Property(e => e.TcMarza7)
                .HasColumnType("money")
                .HasColumnName("tc_Marza7");
            entity.Property(e => e.TcMarza8)
                .HasColumnType("money")
                .HasColumnName("tc_Marza8");
            entity.Property(e => e.TcMarza9)
                .HasColumnType("money")
                .HasColumnName("tc_Marza9");
            entity.Property(e => e.TcNarzut1)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut1");
            entity.Property(e => e.TcNarzut10)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut10");
            entity.Property(e => e.TcNarzut2)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut2");
            entity.Property(e => e.TcNarzut3)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut3");
            entity.Property(e => e.TcNarzut4)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut4");
            entity.Property(e => e.TcNarzut5)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut5");
            entity.Property(e => e.TcNarzut6)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut6");
            entity.Property(e => e.TcNarzut7)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut7");
            entity.Property(e => e.TcNarzut8)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut8");
            entity.Property(e => e.TcNarzut9)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut9");
            entity.Property(e => e.TcPodstawaKc)
                .HasDefaultValue(0)
                .HasColumnName("tc_PodstawaKC");
            entity.Property(e => e.TcWalutaId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_WalutaId");
            entity.Property(e => e.TcWalutaJedn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tc_WalutaJedn");
            entity.Property(e => e.TcWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("tc_WalutaKurs");
            entity.Property(e => e.TcZysk1)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk1");
            entity.Property(e => e.TcZysk10)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk10");
            entity.Property(e => e.TcZysk2)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk2");
            entity.Property(e => e.TcZysk3)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk3");
            entity.Property(e => e.TcZysk4)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk4");
            entity.Property(e => e.TcZysk5)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk5");
            entity.Property(e => e.TcZysk6)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk6");
            entity.Property(e => e.TcZysk7)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk7");
            entity.Property(e => e.TcZysk8)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk8");
            entity.Property(e => e.TcZysk9)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk9");

            entity.HasOne(d => d.TcIdTowarNavigation).WithOne(p => p.TwCena)
                .HasForeignKey<TwCena>(d => d.TcIdTowar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_Cena_tw__Towar");
        });

        modelBuilder.Entity<TwCenaHistorium>(entity =>
        {
            entity.HasKey(e => e.TchId);

            entity.ToTable("tw_CenaHistoria");

            entity.Property(e => e.TchId)
                .ValueGeneratedNever()
                .HasColumnName("tch_Id");
            entity.Property(e => e.TchBankKursuWaluty).HasColumnName("tch_BankKursuWaluty");
            entity.Property(e => e.TchCenaBrutto0)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto0");
            entity.Property(e => e.TchCenaBrutto1)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto1");
            entity.Property(e => e.TchCenaBrutto10)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto10");
            entity.Property(e => e.TchCenaBrutto2)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto2");
            entity.Property(e => e.TchCenaBrutto3)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto3");
            entity.Property(e => e.TchCenaBrutto4)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto4");
            entity.Property(e => e.TchCenaBrutto5)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto5");
            entity.Property(e => e.TchCenaBrutto6)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto6");
            entity.Property(e => e.TchCenaBrutto7)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto7");
            entity.Property(e => e.TchCenaBrutto8)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto8");
            entity.Property(e => e.TchCenaBrutto9)
                .HasColumnType("money")
                .HasColumnName("tch_CenaBrutto9");
            entity.Property(e => e.TchCenaNetto0)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto0");
            entity.Property(e => e.TchCenaNetto1)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto1");
            entity.Property(e => e.TchCenaNetto10)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto10");
            entity.Property(e => e.TchCenaNetto2)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto2");
            entity.Property(e => e.TchCenaNetto3)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto3");
            entity.Property(e => e.TchCenaNetto4)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto4");
            entity.Property(e => e.TchCenaNetto5)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto5");
            entity.Property(e => e.TchCenaNetto6)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto6");
            entity.Property(e => e.TchCenaNetto7)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto7");
            entity.Property(e => e.TchCenaNetto8)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto8");
            entity.Property(e => e.TchCenaNetto9)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNetto9");
            entity.Property(e => e.TchCenaNettoWaluta)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNettoWaluta");
            entity.Property(e => e.TchCenaNettoWaluta2)
                .HasColumnType("money")
                .HasColumnName("tch_CenaNettoWaluta2");
            entity.Property(e => e.TchCenaWalutaNarzut)
                .HasColumnType("money")
                .HasColumnName("tch_CenaWalutaNarzut");
            entity.Property(e => e.TchDataKursuWaluty)
                .HasColumnType("datetime")
                .HasColumnName("tch_DataKursuWaluty");
            entity.Property(e => e.TchDataObowiazywaniaDo)
                .HasColumnType("datetime")
                .HasColumnName("tch_DataObowiazywaniaDo");
            entity.Property(e => e.TchEtapPromocji).HasColumnName("tch_EtapPromocji");
            entity.Property(e => e.TchIdPromocji).HasColumnName("tch_IdPromocji");
            entity.Property(e => e.TchIdTowar).HasColumnName("tch_IdTowar");
            entity.Property(e => e.TchIdWaluta0)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta0");
            entity.Property(e => e.TchIdWaluta1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta1");
            entity.Property(e => e.TchIdWaluta10)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta10");
            entity.Property(e => e.TchIdWaluta2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta2");
            entity.Property(e => e.TchIdWaluta3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta3");
            entity.Property(e => e.TchIdWaluta4)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta4");
            entity.Property(e => e.TchIdWaluta5)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta5");
            entity.Property(e => e.TchIdWaluta6)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta6");
            entity.Property(e => e.TchIdWaluta7)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta7");
            entity.Property(e => e.TchIdWaluta8)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta8");
            entity.Property(e => e.TchIdWaluta9)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("tch_IdWaluta9");
            entity.Property(e => e.TchIdWalutaKurs).HasColumnName("tch_IdWalutaKurs");
            entity.Property(e => e.TchKursWaluty1).HasColumnName("tch_KursWaluty1");
            entity.Property(e => e.TchKursWaluty10).HasColumnName("tch_KursWaluty10");
            entity.Property(e => e.TchKursWaluty2).HasColumnName("tch_KursWaluty2");
            entity.Property(e => e.TchKursWaluty3).HasColumnName("tch_KursWaluty3");
            entity.Property(e => e.TchKursWaluty4).HasColumnName("tch_KursWaluty4");
            entity.Property(e => e.TchKursWaluty5).HasColumnName("tch_KursWaluty5");
            entity.Property(e => e.TchKursWaluty6).HasColumnName("tch_KursWaluty6");
            entity.Property(e => e.TchKursWaluty7).HasColumnName("tch_KursWaluty7");
            entity.Property(e => e.TchKursWaluty8).HasColumnName("tch_KursWaluty8");
            entity.Property(e => e.TchKursWaluty9).HasColumnName("tch_KursWaluty9");
            entity.Property(e => e.TchMarza1)
                .HasColumnType("money")
                .HasColumnName("tch_Marza1");
            entity.Property(e => e.TchMarza10)
                .HasColumnType("money")
                .HasColumnName("tch_Marza10");
            entity.Property(e => e.TchMarza2)
                .HasColumnType("money")
                .HasColumnName("tch_Marza2");
            entity.Property(e => e.TchMarza3)
                .HasColumnType("money")
                .HasColumnName("tch_Marza3");
            entity.Property(e => e.TchMarza4)
                .HasColumnType("money")
                .HasColumnName("tch_Marza4");
            entity.Property(e => e.TchMarza5)
                .HasColumnType("money")
                .HasColumnName("tch_Marza5");
            entity.Property(e => e.TchMarza6)
                .HasColumnType("money")
                .HasColumnName("tch_Marza6");
            entity.Property(e => e.TchMarza7)
                .HasColumnType("money")
                .HasColumnName("tch_Marza7");
            entity.Property(e => e.TchMarza8)
                .HasColumnType("money")
                .HasColumnName("tch_Marza8");
            entity.Property(e => e.TchMarza9)
                .HasColumnType("money")
                .HasColumnName("tch_Marza9");
            entity.Property(e => e.TchNarzut1)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut1");
            entity.Property(e => e.TchNarzut10)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut10");
            entity.Property(e => e.TchNarzut2)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut2");
            entity.Property(e => e.TchNarzut3)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut3");
            entity.Property(e => e.TchNarzut4)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut4");
            entity.Property(e => e.TchNarzut5)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut5");
            entity.Property(e => e.TchNarzut6)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut6");
            entity.Property(e => e.TchNarzut7)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut7");
            entity.Property(e => e.TchNarzut8)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut8");
            entity.Property(e => e.TchNarzut9)
                .HasColumnType("money")
                .HasColumnName("tch_Narzut9");
            entity.Property(e => e.TchPodstawaKc)
                .HasDefaultValue(0)
                .HasColumnName("tch_PodstawaKC");
            entity.Property(e => e.TchWalutaId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tch_WalutaId");
            entity.Property(e => e.TchWalutaJedn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tch_WalutaJedn");
            entity.Property(e => e.TchWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("tch_WalutaKurs");
            entity.Property(e => e.TchZysk1)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk1");
            entity.Property(e => e.TchZysk10)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk10");
            entity.Property(e => e.TchZysk2)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk2");
            entity.Property(e => e.TchZysk3)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk3");
            entity.Property(e => e.TchZysk4)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk4");
            entity.Property(e => e.TchZysk5)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk5");
            entity.Property(e => e.TchZysk6)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk6");
            entity.Property(e => e.TchZysk7)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk7");
            entity.Property(e => e.TchZysk8)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk8");
            entity.Property(e => e.TchZysk9)
                .HasColumnType("money")
                .HasColumnName("tch_Zysk9");

            entity.HasOne(d => d.TchIdTowarNavigation).WithMany(p => p.TwCenaHistoria)
                .HasForeignKey(d => d.TchIdTowar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_CenaHistoria_tw__Towar");
        });

        modelBuilder.Entity<TwDokument>(entity =>
        {
            entity.HasKey(e => e.TdkId);

            entity.ToTable("tw_Dokument");

            entity.Property(e => e.TdkId)
                .ValueGeneratedNever()
                .HasColumnName("tdk_Id");
            entity.Property(e => e.TdkDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("tdk_DataModyfikacji");
            entity.Property(e => e.TdkIdKategorii).HasColumnName("tdk_IdKategorii");
            entity.Property(e => e.TdkIdPersonelu).HasColumnName("tdk_IdPersonelu");
            entity.Property(e => e.TdkIdTowaru).HasColumnName("tdk_IdTowaru");
            entity.Property(e => e.TdkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tdk_Nazwa");
            entity.Property(e => e.TdkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tdk_Opis");
            entity.Property(e => e.TdkTresc)
                .HasColumnType("image")
                .HasColumnName("tdk_Tresc");
            entity.Property(e => e.TdkTyp)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tdk_Typ");
            entity.Property(e => e.TdkZablokowany).HasColumnName("tdk_Zablokowany");

            entity.HasOne(d => d.TdkIdKategoriiNavigation).WithMany(p => p.TwDokuments)
                .HasForeignKey(d => d.TdkIdKategorii)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_Dokument_sl_KategoriaDokumentu");

            entity.HasOne(d => d.TdkIdPersoneluNavigation).WithMany(p => p.TwDokuments)
                .HasForeignKey(d => d.TdkIdPersonelu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_Dokument_pd_Uzytkownik");

            entity.HasOne(d => d.TdkIdTowaruNavigation).WithMany(p => p.TwDokuments)
                .HasForeignKey(d => d.TdkIdTowaru)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_Dokument_tw__Towar");
        });

        modelBuilder.Entity<TwJednMiary>(entity =>
        {
            entity.HasKey(e => e.JmId);

            entity.ToTable("tw_JednMiary");

            entity.HasIndex(e => new { e.JmIdTowar, e.JmIdJednMiary }, "IX_tw_JednMiary").IsUnique();

            entity.Property(e => e.JmId)
                .ValueGeneratedNever()
                .HasColumnName("jm_Id");
            entity.Property(e => e.JmDlaNaklejek).HasColumnName("jm_DlaNaklejek");
            entity.Property(e => e.JmIdJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jm_IdJednMiary");
            entity.Property(e => e.JmIdTowar).HasColumnName("jm_IdTowar");
            entity.Property(e => e.JmPrzelicznik)
                .HasColumnType("money")
                .HasColumnName("jm_Przelicznik");

            entity.HasOne(d => d.JmIdTowarNavigation).WithMany(p => p.TwJednMiaries)
                .HasForeignKey(d => d.JmIdTowar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_JednMiary_tw__Towar");
        });

        modelBuilder.Entity<TwKodKreskowy>(entity =>
        {
            entity.HasKey(e => e.KkId);

            entity.ToTable("tw_KodKreskowy", tb =>
                {
                    tb.HasTrigger("tr_TwKodKreskowy_Deleting");
                    tb.HasTrigger("tr_TwKodKreskowy_Inserting");
                    tb.HasTrigger("tr_TwKodKreskowy_Updating");
                    tb.HasTrigger("tr_tw_KodKreskowy_Synch_delete");
                    tb.HasTrigger("tr_tw_KodKreskowy_Synch_insert");
                    tb.HasTrigger("tr_tw_KodKreskowy_Synch_update");
                });

            entity.HasIndex(e => new { e.KkIdTowar, e.KkKod }, "IX_tw_KodKreskowy").IsUnique();

            entity.Property(e => e.KkId)
                .ValueGeneratedNever()
                .HasColumnName("kk_Id");
            entity.Property(e => e.KkIdTowar).HasColumnName("kk_IdTowar");
            entity.Property(e => e.KkIlosc)
                .HasColumnType("money")
                .HasColumnName("kk_Ilosc");
            entity.Property(e => e.KkKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kk_Kod");

            entity.HasOne(d => d.KkIdTowarNavigation).WithMany(p => p.TwKodKreskowies)
                .HasForeignKey(d => d.KkIdTowar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_KodKreskowy_tw__Towar");
        });

        modelBuilder.Entity<TwKomplet>(entity =>
        {
            entity.HasKey(e => e.KplId);

            entity.ToTable("tw_Komplet");

            entity.Property(e => e.KplId)
                .ValueGeneratedNever()
                .HasColumnName("kpl_Id");
            entity.Property(e => e.KplIdKomplet).HasColumnName("kpl_IdKomplet");
            entity.Property(e => e.KplIdSkladnik).HasColumnName("kpl_IdSkladnik");
            entity.Property(e => e.KplLiczba)
                .HasColumnType("money")
                .HasColumnName("kpl_Liczba");

            entity.HasOne(d => d.KplIdSkladnikNavigation).WithMany(p => p.TwKomplets)
                .HasForeignKey(d => d.KplIdSkladnik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_Komplet_tw__Towar");
        });

        modelBuilder.Entity<TwKreatorPkwiU2015>(entity =>
        {
            entity.HasKey(e => e.TwkpIdTow);

            entity.ToTable("tw_KreatorPKWiU2015");

            entity.Property(e => e.TwkpIdTow)
                .ValueGeneratedNever()
                .HasColumnName("twkp_IdTow");
        });

        modelBuilder.Entity<TwKreatorPkwiU2015RegulyStawekVat>(entity =>
        {
            entity.HasKey(e => e.Pkwiu2015toVatKod).HasName("PK_Person");

            entity.ToTable("tw_KreatorPKWiU2015_RegulyStawekVat");

            entity.Property(e => e.Pkwiu2015toVatKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pkwiu2015toVat_kod");
            entity.Property(e => e.Pkwiu2015toVatIdVat).HasColumnName("pkwiu2015toVat_idVat");
            entity.Property(e => e.Pkwiu2015toVatTyp).HasColumnName("pkwiu2015toVat_typ");

            entity.HasOne(d => d.Pkwiu2015toVatIdVatNavigation).WithMany(p => p.TwKreatorPkwiU2015RegulyStawekVats)
                .HasForeignKey(d => d.Pkwiu2015toVatIdVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__tw_KreatorPKWiU2015_RegulyStawekVat_sl_StawkaVAT");
        });

        modelBuilder.Entity<TwNarzutTw>(entity =>
        {
            entity.HasKey(e => e.CtId);

            entity.ToTable("tw_NarzutTw");

            entity.HasIndex(e => new { e.CtIdCena, e.CtIdNarzut, e.CtKolejnosc }, "IX_tw_NarzutTw").IsUnique();

            entity.Property(e => e.CtId)
                .ValueGeneratedNever()
                .HasColumnName("ct_Id");
            entity.Property(e => e.CtIdCena).HasColumnName("ct_IdCena");
            entity.Property(e => e.CtIdNarzut).HasColumnName("ct_IdNarzut");
            entity.Property(e => e.CtKolejnosc).HasColumnName("ct_Kolejnosc");
            entity.Property(e => e.CtNarzut)
                .HasColumnType("money")
                .HasColumnName("ct_Narzut");
            entity.Property(e => e.CtWartosc)
                .HasColumnType("money")
                .HasColumnName("ct_Wartosc");

            entity.HasOne(d => d.CtIdCenaNavigation).WithMany(p => p.TwNarzutTws)
                .HasForeignKey(d => d.CtIdCena)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_NarzutTw_tw_Cena");
        });

        modelBuilder.Entity<TwOpakowaniaAkcyzowe>(entity =>
        {
            entity.HasKey(e => e.TwoaId);

            entity.ToTable("tw_OpakowaniaAkcyzowe");

            entity.Property(e => e.TwoaId)
                .ValueGeneratedNever()
                .HasColumnName("twoa_Id");
            entity.Property(e => e.TwoaIdKoduOpakowania).HasColumnName("twoa_IdKoduOpakowania");
            entity.Property(e => e.TwoaIdTowaru).HasColumnName("twoa_IdTowaru");

            entity.HasOne(d => d.TwoaIdKoduOpakowaniaNavigation).WithMany(p => p.TwOpakowaniaAkcyzowes)
                .HasForeignKey(d => d.TwoaIdKoduOpakowania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_OpakowaniaAkcyzowe_sl_KodRodzajuOpakowanTwAkcyzowych");

            entity.HasOne(d => d.TwoaIdTowaruNavigation).WithMany(p => p.TwOpakowaniaAkcyzowes)
                .HasForeignKey(d => d.TwoaIdTowaru)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_OpakowaniaAkcyzowe_tw__Towar");
        });

        modelBuilder.Entity<TwParametr>(entity =>
        {
            entity.HasKey(e => e.TwpId);

            entity.ToTable("tw_Parametr", tb => tb.HasTrigger("tr_TwParametr_Update"));

            entity.Property(e => e.TwpId)
                .ValueGeneratedNever()
                .HasColumnName("twp_Id");
            entity.Property(e => e.TwpArchiwizujCeny).HasColumnName("twp_ArchiwizujCeny");
            entity.Property(e => e.TwpAutoOozPkwiU).HasColumnName("twp_AutoOOzPKWiU");
            entity.Property(e => e.TwpCechyTylkoUnikalneWlasciwosci).HasColumnName("twp_CechyTylkoUnikalneWlasciwosci");
            entity.Property(e => e.TwpCzyDzialanieDodaj).HasColumnName("twp_CzyDzialanieDodaj");
            entity.Property(e => e.TwpCzyDzialanieEdycja).HasColumnName("twp_CzyDzialanieEdycja");
            entity.Property(e => e.TwpDaneSynchronizacji)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_DaneSynchronizacji");
            entity.Property(e => e.TwpDlugoscAuto).HasColumnName("twp_DlugoscAuto");
            entity.Property(e => e.TwpDomNarzut1)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut1");
            entity.Property(e => e.TwpDomNarzut10)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut10");
            entity.Property(e => e.TwpDomNarzut2)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut2");
            entity.Property(e => e.TwpDomNarzut3)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut3");
            entity.Property(e => e.TwpDomNarzut4)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut4");
            entity.Property(e => e.TwpDomNarzut5)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut5");
            entity.Property(e => e.TwpDomNarzut6)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut6");
            entity.Property(e => e.TwpDomNarzut7)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut7");
            entity.Property(e => e.TwpDomNarzut8)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut8");
            entity.Property(e => e.TwpDomNarzut9)
                .HasColumnType("money")
                .HasColumnName("twp_DomNarzut9");
            entity.Property(e => e.TwpDomWartNarzutu1)
                .HasColumnType("money")
                .HasColumnName("twp_DomWartNarzutu1");
            entity.Property(e => e.TwpDomWartNarzutu2)
                .HasColumnType("money")
                .HasColumnName("twp_DomWartNarzutu2");
            entity.Property(e => e.TwpDomWartNarzutu3)
                .HasColumnType("money")
                .HasColumnName("twp_DomWartNarzutu3");
            entity.Property(e => e.TwpDomWartNarzutu4)
                .HasColumnType("money")
                .HasColumnName("twp_DomWartNarzutu4");
            entity.Property(e => e.TwpDomWartNarzutu5)
                .HasColumnType("money")
                .HasColumnName("twp_DomWartNarzutu5");
            entity.Property(e => e.TwpGrupa).HasColumnName("twp_Grupa");
            entity.Property(e => e.TwpGrupaJpkVat)
                .HasDefaultValue(-1)
                .HasColumnName("twp_GrupaJpkVat");
            entity.Property(e => e.TwpGrupaJpkVatUj).HasColumnName("twp_GrupaJpkVatUJ");
            entity.Property(e => e.TwpInfRuchTowAuto)
                .HasDefaultValue(true)
                .HasColumnName("twp_InfRuchTowAuto");
            entity.Property(e => e.TwpInfRuchTowBezNarast).HasColumnName("twp_InfRuchTowBezNarast");
            entity.Property(e => e.TwpJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_JednMiary");
            entity.Property(e => e.TwpKodNumeryczny)
                .HasDefaultValue(true)
                .HasColumnName("twp_KodNumeryczny");
            entity.Property(e => e.TwpKodUnikalny)
                .HasDefaultValue(true)
                .HasColumnName("twp_KodUnikalny");
            entity.Property(e => e.TwpKodUsunPoczZera).HasColumnName("twp_KodUsunPoczZera");
            entity.Property(e => e.TwpKolejny).HasColumnName("twp_Kolejny");
            entity.Property(e => e.TwpKolejnyWolny).HasColumnName("twp_KolejnyWolny");
            entity.Property(e => e.TwpKreatorPkwiU2015przypomnij)
                .HasDefaultValueSql("('20200930')")
                .HasColumnType("datetime")
                .HasColumnName("twp_KreatorPKWiU2015Przypomnij");
            entity.Property(e => e.TwpKreatorTowarowPpprzypominaj)
                .HasDefaultValueSql("('24191031')")
                .HasColumnType("datetime")
                .HasColumnName("twp_KreatorTowarowPPPrzypominaj");
            entity.Property(e => e.TwpKreatorZmianyStawekVatPrzypominaj)
                .HasDefaultValueSql("('20230101')")
                .HasColumnType("datetime")
                .HasColumnName("twp_KreatorZmianyStawekVatPrzypominaj");
            entity.Property(e => e.TwpKursCeny1).HasColumnName("twp_KursCeny1");
            entity.Property(e => e.TwpKursCeny10).HasColumnName("twp_KursCeny10");
            entity.Property(e => e.TwpKursCeny2).HasColumnName("twp_KursCeny2");
            entity.Property(e => e.TwpKursCeny3).HasColumnName("twp_KursCeny3");
            entity.Property(e => e.TwpKursCeny4).HasColumnName("twp_KursCeny4");
            entity.Property(e => e.TwpKursCeny5).HasColumnName("twp_KursCeny5");
            entity.Property(e => e.TwpKursCeny6).HasColumnName("twp_KursCeny6");
            entity.Property(e => e.TwpKursCeny7).HasColumnName("twp_KursCeny7");
            entity.Property(e => e.TwpKursCeny8).HasColumnName("twp_KursCeny8");
            entity.Property(e => e.TwpKursCeny9).HasColumnName("twp_KursCeny9");
            entity.Property(e => e.TwpMarzaCombo1).HasColumnName("twp_MarzaCombo1");
            entity.Property(e => e.TwpMarzaCombo2).HasColumnName("twp_MarzaCombo2");
            entity.Property(e => e.TwpMechanizmPodzielonejPlatnosci).HasColumnName("twp_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.TwpMechanizmPodzielonejPlatnosciUj).HasColumnName("twp_MechanizmPodzielonejPlatnosciUJ");
            entity.Property(e => e.TwpMontPwkatId).HasColumnName("twp_MontPWKatId");
            entity.Property(e => e.TwpMontRwkatId).HasColumnName("twp_MontRWKatId");
            entity.Property(e => e.TwpNarzutRosnacy1).HasColumnName("twp_NarzutRosnacy1");
            entity.Property(e => e.TwpNarzutRosnacy2).HasColumnName("twp_NarzutRosnacy2");
            entity.Property(e => e.TwpNarzutRosnacy3).HasColumnName("twp_NarzutRosnacy3");
            entity.Property(e => e.TwpNarzutRosnacy4).HasColumnName("twp_NarzutRosnacy4");
            entity.Property(e => e.TwpNarzutRosnacy5).HasColumnName("twp_NarzutRosnacy5");
            entity.Property(e => e.TwpNazwa1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_Nazwa1");
            entity.Property(e => e.TwpNazwa2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_Nazwa2");
            entity.Property(e => e.TwpNazwa3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_Nazwa3");
            entity.Property(e => e.TwpNazwa4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_Nazwa4");
            entity.Property(e => e.TwpNazwa5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_Nazwa5");
            entity.Property(e => e.TwpNazwa6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_Nazwa6");
            entity.Property(e => e.TwpNazwa7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_Nazwa7");
            entity.Property(e => e.TwpNazwa8)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_Nazwa8");
            entity.Property(e => e.TwpNazwaCeny1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny1");
            entity.Property(e => e.TwpNazwaCeny10)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny10");
            entity.Property(e => e.TwpNazwaCeny2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny2");
            entity.Property(e => e.TwpNazwaCeny3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny3");
            entity.Property(e => e.TwpNazwaCeny4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny4");
            entity.Property(e => e.TwpNazwaCeny5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny5");
            entity.Property(e => e.TwpNazwaCeny6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny6");
            entity.Property(e => e.TwpNazwaCeny7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny7");
            entity.Property(e => e.TwpNazwaCeny8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny8");
            entity.Property(e => e.TwpNazwaCeny9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaCeny9");
            entity.Property(e => e.TwpNazwaNarzutu1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaNarzutu1");
            entity.Property(e => e.TwpNazwaNarzutu2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaNarzutu2");
            entity.Property(e => e.TwpNazwaNarzutu3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaNarzutu3");
            entity.Property(e => e.TwpNazwaNarzutu4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaNarzutu4");
            entity.Property(e => e.TwpNazwaNarzutu5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twp_NazwaNarzutu5");
            entity.Property(e => e.TwpObrotMarza).HasColumnName("twp_ObrotMarza");
            entity.Property(e => e.TwpOdwrotneObciazenie).HasColumnName("twp_OdwrotneObciazenie");
            entity.Property(e => e.TwpOstrzegajVatZakInnyVatSprz)
                .HasDefaultValue(true)
                .HasColumnName("twp_OstrzegajVatZakInnyVatSprz");
            entity.Property(e => e.TwpProgKwotowyOo).HasColumnName("twp_ProgKwotowyOO");
            entity.Property(e => e.TwpPrzepisujNazwe).HasColumnName("twp_PrzepisujNazwe");
            entity.Property(e => e.TwpPrzepisujSymbol)
                .HasDefaultValue(true)
                .HasColumnName("twp_PrzepisujSymbol");
            entity.Property(e => e.TwpRodzajDzialanieDodaj)
                .HasDefaultValue(1)
                .HasColumnName("twp_RodzajDzialanieDodaj");
            entity.Property(e => e.TwpRodzajDzialanieEdycja)
                .HasDefaultValue(1)
                .HasColumnName("twp_RodzajDzialanieEdycja");
            entity.Property(e => e.TwpRodzajKartoteki)
                .HasDefaultValue(1)
                .HasColumnName("twp_RodzajKartoteki");
            entity.Property(e => e.TwpRozmontPwkatId).HasColumnName("twp_RozmontPWKatId");
            entity.Property(e => e.TwpRozmontRwkatId).HasColumnName("twp_RozmontRWKatId");
            entity.Property(e => e.TwpStalaCena1).HasColumnName("twp_StalaCena1");
            entity.Property(e => e.TwpStalaCena10).HasColumnName("twp_StalaCena10");
            entity.Property(e => e.TwpStalaCena2).HasColumnName("twp_StalaCena2");
            entity.Property(e => e.TwpStalaCena3).HasColumnName("twp_StalaCena3");
            entity.Property(e => e.TwpStalaCena4).HasColumnName("twp_StalaCena4");
            entity.Property(e => e.TwpStalaCena5).HasColumnName("twp_StalaCena5");
            entity.Property(e => e.TwpStalaCena6).HasColumnName("twp_StalaCena6");
            entity.Property(e => e.TwpStalaCena7).HasColumnName("twp_StalaCena7");
            entity.Property(e => e.TwpStalaCena8).HasColumnName("twp_StalaCena8");
            entity.Property(e => e.TwpStalaCena9).HasColumnName("twp_StalaCena9");
            entity.Property(e => e.TwpStawkaVat).HasColumnName("twp_StawkaVAT");
            entity.Property(e => e.TwpSymbolAuto).HasColumnName("twp_SymbolAuto");
            entity.Property(e => e.TwpSynchNazwaNazwaUrz).HasColumnName("twp_SynchNazwaNazwaUrz");
            entity.Property(e => e.TwpSynchSymbolKodKresk).HasColumnName("twp_SynchSymbolKodKresk");
            entity.Property(e => e.TwpSzablonDzialanieDodaj).HasColumnName("twp_SzablonDzialanieDodaj");
            entity.Property(e => e.TwpSzablonDzialanieEdycja).HasColumnName("twp_SzablonDzialanieEdycja");
            entity.Property(e => e.TwpUstawiajZdjecia)
                .HasDefaultValue(true)
                .HasColumnName("twp_UstawiajZdjecia");
            entity.Property(e => e.TwpWalutaCeny1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny1");
            entity.Property(e => e.TwpWalutaCeny10)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny10");
            entity.Property(e => e.TwpWalutaCeny2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny2");
            entity.Property(e => e.TwpWalutaCeny3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny3");
            entity.Property(e => e.TwpWalutaCeny4)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny4");
            entity.Property(e => e.TwpWalutaCeny5)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny5");
            entity.Property(e => e.TwpWalutaCeny6)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny6");
            entity.Property(e => e.TwpWalutaCeny7)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny7");
            entity.Property(e => e.TwpWalutaCeny8)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny8");
            entity.Property(e => e.TwpWalutaCeny9)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("PLN")
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny9");
            entity.Property(e => e.TwpWydrukiTypKlasyfikacji).HasColumnName("twp_WydrukiTypKlasyfikacji");
            entity.Property(e => e.TwpZakupStawkaVat).HasColumnName("twp_ZakupStawkaVAT");
            entity.Property(e => e.TwpZakupVatjakPrzySpr).HasColumnName("twp_ZakupVATJakPrzySpr");
            entity.Property(e => e.TwpZmianaSklKpl)
                .HasDefaultValue(0)
                .HasColumnName("twp_ZmianaSklKpl");

            entity.HasOne(d => d.TwpSzablonDzialanieDodajNavigation).WithMany(p => p.TwParametrTwpSzablonDzialanieDodajNavigations)
                .HasForeignKey(d => d.TwpSzablonDzialanieDodaj)
                .HasConstraintName("FK_tw_Parametr_sl_SzablonDzialania");

            entity.HasOne(d => d.TwpSzablonDzialanieEdycjaNavigation).WithMany(p => p.TwParametrTwpSzablonDzialanieEdycjaNavigations)
                .HasForeignKey(d => d.TwpSzablonDzialanieEdycja)
                .HasConstraintName("FK_tw_Parametr_sl_SzablonDzialania1");
        });

        modelBuilder.Entity<TwPkwiU20082015>(entity =>
        {
            entity.HasKey(e => new { e.Pkwiu08to15PkwiU2008, e.Pkwiu08to15PkwiU2015 });

            entity.ToTable("tw_PKWiU2008_2015");

            entity.Property(e => e.Pkwiu08to15PkwiU2008)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pkwiu08to15_PKWiU2008");
            entity.Property(e => e.Pkwiu08to15PkwiU2015)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pkwiu08to15_PKWiU2015");
        });

        modelBuilder.Entity<TwPkwiU2015Cn2020>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tw_PKWiU2015_CN2020");

            entity.Property(e => e.Pkwiu2015toCnCn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pkwiu2015toCN_cn");
            entity.Property(e => e.Pkwiu2015toCnPkwiu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pkwiu2015toCN_pkwiu");
        });

        modelBuilder.Entity<TwPowiazaniaKsef>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tw_PowiazaniaKsef");

            entity.Property(e => e.PksefId).HasColumnName("pksef_Id");
            entity.Property(e => e.PksefIdJednLokalnie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("pksef_IdJednLokalnie");
            entity.Property(e => e.PksefIdJednUdostawcy)
                .HasMaxLength(256)
                .HasColumnName("pksef_IdJednUDostawcy");
            entity.Property(e => e.PksefKhId).HasColumnName("pksef_KhId");
            entity.Property(e => e.PksefPrzelicznik)
                .HasColumnType("money")
                .HasColumnName("pksef_Przelicznik");
            entity.Property(e => e.PksefSymbolUdostawcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pksef_SymbolUDostawcy");
            entity.Property(e => e.PksefTwId).HasColumnName("pksef_TwId");
            entity.Property(e => e.PksefTwNazwaKsef)
                .HasMaxLength(256)
                .HasColumnName("pksef_TwNazwaKsef");
            entity.Property(e => e.PksefTypPowiazania).HasColumnName("pksef_TypPowiazania");

            entity.HasOne(d => d.PksefKh).WithMany()
                .HasForeignKey(d => d.PksefKhId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_PowiazaniaKsef_kh__Kontrahent");

            entity.HasOne(d => d.PksefTw).WithMany()
                .HasForeignKey(d => d.PksefTwId)
                .HasConstraintName("FK_tw_PowiazaniaKsef_tw__Towar");
        });

        modelBuilder.Entity<TwStan>(entity =>
        {
            entity.HasKey(e => new { e.StTowId, e.StMagId });

            entity.ToTable("tw_Stan");

            entity.HasIndex(e => new { e.StTowId, e.StMagId }, "IX_tw_Stany").IsUnique();

            entity.HasIndex(e => new { e.StTowId, e.StMagId, e.StStan, e.StStanRez }, "IX_tw_Stany_1");

            entity.Property(e => e.StTowId).HasColumnName("st_TowId");
            entity.Property(e => e.StMagId).HasColumnName("st_MagId");
            entity.Property(e => e.StStan)
                .HasColumnType("money")
                .HasColumnName("st_Stan");
            entity.Property(e => e.StStanMax)
                .HasColumnType("money")
                .HasColumnName("st_StanMax");
            entity.Property(e => e.StStanMin)
                .HasColumnType("money")
                .HasColumnName("st_StanMin");
            entity.Property(e => e.StStanRez)
                .HasColumnType("money")
                .HasColumnName("st_StanRez");

            entity.HasOne(d => d.StMag).WithMany(p => p.TwStans)
                .HasForeignKey(d => d.StMagId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_Stan_sl_Magazyn");

            entity.HasOne(d => d.StTow).WithMany(p => p.TwStans)
                .HasForeignKey(d => d.StTowId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_Stan_tw__Towar");
        });

        modelBuilder.Entity<TwStanOddzial>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tw_StanOddzial");

            entity.Property(e => e.TsoData)
                .HasColumnType("datetime")
                .HasColumnName("tso_Data");
            entity.Property(e => e.TsoMagId).HasColumnName("tso_MagId");
            entity.Property(e => e.TsoOddzialId).HasColumnName("tso_OddzialId");
            entity.Property(e => e.TsoStan)
                .HasColumnType("money")
                .HasColumnName("tso_Stan");
            entity.Property(e => e.TsoTwId).HasColumnName("tso_TwId");
        });

        modelBuilder.Entity<TwTowar>(entity =>
        {
            entity.HasKey(e => e.TwId);

            entity.ToTable("tw__Towar", tb =>
                {
                    tb.HasTrigger("TRI_InsSearch_tw__Towar");
                    tb.HasTrigger("TRU_InsSearch_tw__Towar");
                    tb.HasTrigger("tr_TwTowar_Deleting");
                    tb.HasTrigger("tr_TwTowar_Inserting");
                    tb.HasTrigger("tr_TwTowar_Updating");
                    tb.HasTrigger("tr_tw__Towar_Synch_delete");
                    tb.HasTrigger("tr_tw__Towar_Synch_insert");
                    tb.HasTrigger("tr_tw__Towar_Synch_update");
                });

            entity.Property(e => e.TwId)
                .ValueGeneratedNever()
                .HasColumnName("tw_Id");
            entity.Property(e => e.TwAkcyza).HasColumnName("tw_Akcyza");
            entity.Property(e => e.TwAkcyzaKwota)
                .HasColumnType("money")
                .HasColumnName("tw_AkcyzaKwota");
            entity.Property(e => e.TwAkcyzaMarkaWyrobow)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_AkcyzaMarkaWyrobow");
            entity.Property(e => e.TwAkcyzaWielkoscProducenta)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_AkcyzaWielkoscProducenta");
            entity.Property(e => e.TwAkcyzaZaznacz).HasColumnName("tw_AkcyzaZaznacz");
            entity.Property(e => e.TwBloz12)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_bloz_12");
            entity.Property(e => e.TwBloz7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_bloz_7");
            entity.Property(e => e.TwCenaOtwarta).HasColumnName("tw_CenaOtwarta");
            entity.Property(e => e.TwCharakter)
                .HasColumnType("text")
                .HasColumnName("tw_Charakter");
            entity.Property(e => e.TwCzasDostawy).HasColumnName("tw_CzasDostawy");
            entity.Property(e => e.TwDataZmianyVatSprzedazy)
                .HasColumnType("datetime")
                .HasColumnName("tw_DataZmianyVatSprzedazy");
            entity.Property(e => e.TwDniWaznosc).HasColumnName("tw_DniWaznosc");
            entity.Property(e => e.TwDodawalnyDoZw).HasColumnName("tw_DodawalnyDoZW");
            entity.Property(e => e.TwDomyslnaKategoria).HasColumnName("tw_DomyslnaKategoria");
            entity.Property(e => e.TwDostSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_DostSymbol");
            entity.Property(e => e.TwGlebokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Glebokosc");
            entity.Property(e => e.TwGrupaJpkVat)
                .HasDefaultValue(-1)
                .HasColumnName("tw_GrupaJpkVat");
            entity.Property(e => e.TwIdFundPromocji).HasColumnName("tw_IdFundPromocji");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwIdKoduWyrobuAkcyzowego).HasColumnName("tw_IdKoduWyrobuAkcyzowego");
            entity.Property(e => e.TwIdKrajuPochodzenia).HasColumnName("tw_IdKrajuPochodzenia");
            entity.Property(e => e.TwIdOpakowanie).HasColumnName("tw_IdOpakowanie");
            entity.Property(e => e.TwIdPodstDostawca).HasColumnName("tw_IdPodstDostawca");
            entity.Property(e => e.TwIdProducenta).HasColumnName("tw_IdProducenta");
            entity.Property(e => e.TwIdRabat).HasColumnName("tw_IdRabat");
            entity.Property(e => e.TwIdTypKodu).HasColumnName("tw_IdTypKodu");
            entity.Property(e => e.TwIdUjm).HasColumnName("tw_IdUJM");
            entity.Property(e => e.TwIdVatSp).HasColumnName("tw_IdVatSp");
            entity.Property(e => e.TwIdVatZak).HasColumnName("tw_IdVatZak");
            entity.Property(e => e.TwIsFundPromocji).HasColumnName("tw_IsFundPromocji");
            entity.Property(e => e.TwIsbn)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_isbn");
            entity.Property(e => e.TwJakPrzySp)
                .HasDefaultValue(true)
                .HasColumnName("tw_JakPrzySp");
            entity.Property(e => e.TwJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_JednMiary");
            entity.Property(e => e.TwJednMiarySprz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_JednMiarySprz");
            entity.Property(e => e.TwJednMiaryZak)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_JednMiaryZak");
            entity.Property(e => e.TwJednStanMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_JednStanMin");
            entity.Property(e => e.TwJmsprzInna).HasColumnName("tw_JMSprzInna");
            entity.Property(e => e.TwJmzakInna).HasColumnName("tw_JMZakInna");
            entity.Property(e => e.TwKodTowaru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_KodTowaru");
            entity.Property(e => e.TwKodUproducenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_KodUProducenta");
            entity.Property(e => e.TwKomunikat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Komunikat");
            entity.Property(e => e.TwKomunikatDokumenty)
                .HasDefaultValue(3)
                .HasColumnName("tw_KomunikatDokumenty");
            entity.Property(e => e.TwKomunikatOd)
                .HasColumnType("datetime")
                .HasColumnName("tw_KomunikatOd");
            entity.Property(e => e.TwKontrolaTw).HasColumnName("tw_KontrolaTW");
            entity.Property(e => e.TwLogo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("tw_Logo");
            entity.Property(e => e.TwMasa)
                .HasColumnType("money")
                .HasColumnName("tw_Masa");
            entity.Property(e => e.TwMasaNetto)
                .HasColumnType("money")
                .HasColumnName("tw_MasaNetto");
            entity.Property(e => e.TwMechanizmPodzielonejPlatnosci).HasColumnName("tw_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwObjetosc)
                .HasColumnType("money")
                .HasColumnName("tw_Objetosc");
            entity.Property(e => e.TwObrotMarza).HasColumnName("tw_ObrotMarza");
            entity.Property(e => e.TwOdwrotneObciazenie).HasColumnName("tw_OdwrotneObciazenie");
            entity.Property(e => e.TwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Opis");
            entity.Property(e => e.TwOplCukrowaInneSlodzace).HasColumnName("tw_OplCukrowaInneSlodzace");
            entity.Property(e => e.TwOplCukrowaKofeinaKwota)
                .HasColumnType("money")
                .HasColumnName("tw_OplCukrowaKofeinaKwota");
            entity.Property(e => e.TwOplCukrowaKofeinaPodlega).HasColumnName("tw_OplCukrowaKofeinaPodlega");
            entity.Property(e => e.TwOplCukrowaKwota)
                .HasColumnType("money")
                .HasColumnName("tw_OplCukrowaKwota");
            entity.Property(e => e.TwOplCukrowaKwotaPowyzej)
                .HasColumnType("money")
                .HasColumnName("tw_OplCukrowaKwotaPowyzej");
            entity.Property(e => e.TwOplCukrowaNapojWeglElektr).HasColumnName("tw_OplCukrowaNapojWeglElektr");
            entity.Property(e => e.TwOplCukrowaObj)
                .HasColumnType("money")
                .HasColumnName("tw_OplCukrowaObj");
            entity.Property(e => e.TwOplCukrowaPodlega).HasColumnName("tw_OplCukrowaPodlega");
            entity.Property(e => e.TwOplCukrowaSok).HasColumnName("tw_OplCukrowaSok");
            entity.Property(e => e.TwOplCukrowaZawartoscCukru)
                .HasColumnType("money")
                .HasColumnName("tw_OplCukrowaZawartoscCukru");
            entity.Property(e => e.TwPkwiU)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_PKWiU");
            entity.Property(e => e.TwPlu).HasColumnName("tw_PLU");
            entity.Property(e => e.TwPodlegaOplacieNaFunduszOchronyRolnictwa).HasColumnName("tw_PodlegaOplacieNaFunduszOchronyRolnictwa");
            entity.Property(e => e.TwPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_PodstKodKresk");
            entity.Property(e => e.TwPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Pole1");
            entity.Property(e => e.TwPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Pole2");
            entity.Property(e => e.TwPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Pole3");
            entity.Property(e => e.TwPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Pole4");
            entity.Property(e => e.TwPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Pole5");
            entity.Property(e => e.TwPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Pole6");
            entity.Property(e => e.TwPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Pole7");
            entity.Property(e => e.TwPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Pole8");
            entity.Property(e => e.TwProgKwotowyOo).HasColumnName("tw_ProgKwotowyOO");
            entity.Property(e => e.TwPrzezWartosc)
                .HasDefaultValue(true)
                .HasColumnName("tw_PrzezWartosc");
            entity.Property(e => e.TwRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("tw_Rodzaj");
            entity.Property(e => e.TwSerwisAukcyjny).HasColumnName("tw_SerwisAukcyjny");
            entity.Property(e => e.TwSklepInternet).HasColumnName("tw_SklepInternet");
            entity.Property(e => e.TwSprzedazMobilna).HasColumnName("tw_SprzedazMobilna");
            entity.Property(e => e.TwStanMaks)
                .HasColumnType("money")
                .HasColumnName("tw_StanMaks");
            entity.Property(e => e.TwStanMin)
                .HasColumnType("money")
                .HasColumnName("tw_StanMin");
            entity.Property(e => e.TwSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_SWW");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Symbol");
            entity.Property(e => e.TwSzerokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Szerokosc");
            entity.Property(e => e.TwUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_UrzNazwa");
            entity.Property(e => e.TwUsuniety).HasColumnName("tw_Usuniety");
            entity.Property(e => e.TwUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_Uwagi");
            entity.Property(e => e.TwWagaEtykiet)
                .HasDefaultValue(false)
                .HasColumnName("tw_WagaEtykiet");
            entity.Property(e => e.TwWegielOpisPochodzenia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_WegielOpisPochodzenia");
            entity.Property(e => e.TwWegielPodlegaOswiadczeniu).HasColumnName("tw_WegielPodlegaOswiadczeniu");
            entity.Property(e => e.TwWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tw_WWW");
            entity.Property(e => e.TwWysokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Wysokosc");
            entity.Property(e => e.TwZablokowany).HasColumnName("tw_Zablokowany");
            entity.Property(e => e.TwZnakiAkcyzy).HasColumnName("tw_ZnakiAkcyzy");

            entity.HasOne(d => d.TwIdGrupaNavigation).WithMany(p => p.TwTowars)
                .HasForeignKey(d => d.TwIdGrupa)
                .HasConstraintName("FK_tw__Towar_sl_GrupaTw");

            entity.HasOne(d => d.TwIdKoduWyrobuAkcyzowegoNavigation).WithMany(p => p.TwTowars)
                .HasForeignKey(d => d.TwIdKoduWyrobuAkcyzowego)
                .HasConstraintName("FK_tw__Towar_sl_KodWyrobuAkcyzowego");

            entity.HasOne(d => d.TwIdKrajuPochodzeniaNavigation).WithMany(p => p.TwTowars)
                .HasForeignKey(d => d.TwIdKrajuPochodzenia)
                .HasConstraintName("FK_tw__Towar_sl_KrajPochodzenia");

            entity.HasOne(d => d.TwIdOpakowanieNavigation).WithMany(p => p.InverseTwIdOpakowanieNavigation)
                .HasForeignKey(d => d.TwIdOpakowanie)
                .HasConstraintName("FK_tw__Towar_tw__Towar");

            entity.HasOne(d => d.TwIdPodstDostawcaNavigation).WithMany(p => p.TwTowarTwIdPodstDostawcaNavigations)
                .HasForeignKey(d => d.TwIdPodstDostawca)
                .HasConstraintName("FK_tw__Towar_kh__Kontrahent_PodstawowyDostawca");

            entity.HasOne(d => d.TwIdProducentaNavigation).WithMany(p => p.TwTowarTwIdProducentaNavigations)
                .HasForeignKey(d => d.TwIdProducenta)
                .HasConstraintName("FK_tw__Towar_kh__Kontrahent_Producent");

            entity.HasOne(d => d.TwIdRabatNavigation).WithMany(p => p.TwTowars)
                .HasForeignKey(d => d.TwIdRabat)
                .HasConstraintName("FK_tw__Towar_sl_Rabat");

            entity.HasOne(d => d.TwIdVatSpNavigation).WithMany(p => p.TwTowarTwIdVatSpNavigations)
                .HasForeignKey(d => d.TwIdVatSp)
                .HasConstraintName("FK_tw__Towar_sl_StawkaVAT");

            entity.HasOne(d => d.TwIdVatZakNavigation).WithMany(p => p.TwTowarTwIdVatZakNavigations)
                .HasForeignKey(d => d.TwIdVatZak)
                .HasConstraintName("FK_tw__Towar_sl_StawkaVAT1");
        });

        modelBuilder.Entity<TwTypKodu>(entity =>
        {
            entity.HasKey(e => e.TkId);

            entity.ToTable("tw_TypKodu");

            entity.Property(e => e.TkId)
                .ValueGeneratedNever()
                .HasColumnName("tk_Id");
            entity.Property(e => e.TkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tk_Nazwa");
        });

        modelBuilder.Entity<TwZdjecieTw>(entity =>
        {
            entity.HasKey(e => e.ZdId);

            entity.ToTable("tw_ZdjecieTw");

            entity.Property(e => e.ZdId)
                .ValueGeneratedNever()
                .HasColumnName("zd_Id");
            entity.Property(e => e.ZdCrc)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("zd_CRC");
            entity.Property(e => e.ZdGlowne).HasColumnName("zd_Glowne");
            entity.Property(e => e.ZdIdTowar).HasColumnName("zd_IdTowar");
            entity.Property(e => e.ZdZdjecie)
                .HasColumnType("image")
                .HasColumnName("zd_Zdjecie");

            entity.HasOne(d => d.ZdIdTowarNavigation).WithMany(p => p.TwZdjecieTws)
                .HasForeignKey(d => d.ZdIdTowar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_ZdjecieTw_tw__Towar");
        });

        modelBuilder.Entity<TwZmiana>(entity =>
        {
            entity.HasKey(e => e.ZtId);

            entity.ToTable("tw_Zmiana");

            entity.Property(e => e.ZtId)
                .ValueGeneratedNever()
                .HasColumnName("zt_Id");
            entity.Property(e => e.ZtTowarId).HasColumnName("zt_TowarId");
            entity.Property(e => e.ZtZmianaAdresWww)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaAdresWWW");
            entity.Property(e => e.ZtZmianaCecha)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaCecha");
            entity.Property(e => e.ZtZmianaCenaSprzedazy)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaCenaSprzedazy");
            entity.Property(e => e.ZtZmianaGrupa)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaGrupa");
            entity.Property(e => e.ZtZmianaMasaTowaru)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaMasaTowaru");
            entity.Property(e => e.ZtZmianaNazwa)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaNazwa");
            entity.Property(e => e.ZtZmianaOpis)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaOpis");
            entity.Property(e => e.ZtZmianaOpisHtml)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaOpisHtml");
            entity.Property(e => e.ZtZmianaProducent)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaProducent");
            entity.Property(e => e.ZtZmianaStanMinimalny)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaStanMinimalny");
            entity.Property(e => e.ZtZmianaStawkaVatsprzed)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaStawkaVATSprzed");
            entity.Property(e => e.ZtZmianaSymbol)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaSymbol");
            entity.Property(e => e.ZtZmianaZdjecie)
                .HasColumnType("datetime")
                .HasColumnName("zt_ZmianaZdjecie");

            entity.HasOne(d => d.ZtTowar).WithMany(p => p.TwZmianas)
                .HasForeignKey(d => d.ZtTowarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tw_Zmiana_tw__Towar");
        });

        modelBuilder.Entity<TwZmianaTw>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tw_ZmianaTw");

            entity.Property(e => e.TwzCzasModyf)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("twz_CzasModyf");
            entity.Property(e => e.TwzNrZmiany).HasColumnName("twz_NrZmiany");
            entity.Property(e => e.TwzTowarId).HasColumnName("twz_TowarId");
        });

        modelBuilder.Entity<UfAdministracja>(entity =>
        {
            entity.HasKey(e => e.UadId);

            entity.ToTable("uf_Administracja");

            entity.Property(e => e.UadId)
                .ValueGeneratedNever()
                .HasColumnName("uad_Id");
            entity.Property(e => e.UadCzyRtdni)
                .HasDefaultValue(true)
                .HasColumnName("uad_CzyRTDni");
            entity.Property(e => e.UadCzyRtliczba)
                .HasDefaultValue(true)
                .HasColumnName("uad_CzyRTLiczba");
            entity.Property(e => e.UadCzySynchronizacja)
                .HasDefaultValue(true)
                .HasColumnName("uad_CzySynchronizacja");
            entity.Property(e => e.UadCzyszczenieKolejki).HasColumnName("uad_CzyszczenieKolejki");
            entity.Property(e => e.UadRtdni)
                .HasDefaultValue(30)
                .HasColumnName("uad_RTDni");
            entity.Property(e => e.UadRtliczba)
                .HasDefaultValue(1000)
                .HasColumnName("uad_RTLiczba");
            entity.Property(e => e.UadUsuwanieOperacji).HasColumnName("uad_UsuwanieOperacji");
            entity.Property(e => e.UadZapisTransmisji).HasColumnName("uad_ZapisTransmisji");
        });

        modelBuilder.Entity<UfCena>(entity =>
        {
            entity.HasKey(e => new { e.UceIdKonfiguracja, e.UceIdCenaUf });

            entity.ToTable("uf_Cena");

            entity.Property(e => e.UceIdKonfiguracja).HasColumnName("uce_IdKonfiguracja");
            entity.Property(e => e.UceIdCenaUf)
                .HasDefaultValue(-1)
                .HasColumnName("uce_IdCenaUF");
            entity.Property(e => e.UceIdCenaSb)
                .HasDefaultValue(-1)
                .HasColumnName("uce_IdCenaSb");

            entity.HasOne(d => d.UceIdKonfiguracjaNavigation).WithMany(p => p.UfCenas)
                .HasForeignKey(d => d.UceIdKonfiguracja)
                .HasConstraintName("FK_uf_Cena_uf_Konfiguracja");
        });

        modelBuilder.Entity<UfDzialGrupa>(entity =>
        {
            entity.HasKey(e => new { e.UdgIdKonfiguracja, e.UdgIdDzialGrupaUf });

            entity.ToTable("uf_DzialGrupa");

            entity.Property(e => e.UdgIdKonfiguracja).HasColumnName("udg_IdKonfiguracja");
            entity.Property(e => e.UdgIdDzialGrupaUf)
                .HasDefaultValue(-1)
                .HasColumnName("udg_IdDzialGrupaUF");
            entity.Property(e => e.UdgIdGrupaSb)
                .HasDefaultValue(-1)
                .HasColumnName("udg_IdGrupaSb");
            entity.Property(e => e.UdgIdVatUf)
                .HasDefaultValue(-1)
                .HasColumnName("udg_IdVatUF");

            entity.HasOne(d => d.UdgIdKonfiguracjaNavigation).WithMany(p => p.UfDzialGrupas)
                .HasForeignKey(d => d.UdgIdKonfiguracja)
                .HasConstraintName("FK_uf_DzialGrupa_uf_Konfiguracja");
        });

        modelBuilder.Entity<UfInne>(entity =>
        {
            entity.HasKey(e => new { e.UinIdKonfiguracja, e.UinIdInneUf });

            entity.ToTable("uf_Inne");

            entity.Property(e => e.UinIdKonfiguracja).HasColumnName("uin_IdKonfiguracja");
            entity.Property(e => e.UinIdInneUf)
                .HasDefaultValue(-1)
                .HasColumnName("uin_IdInneUF");
            entity.Property(e => e.UinIdWlasneSb)
                .HasDefaultValue(-1)
                .HasColumnName("uin_IdWlasneSb");

            entity.HasOne(d => d.UinIdKonfiguracjaNavigation).WithMany(p => p.UfInnes)
                .HasForeignKey(d => d.UinIdKonfiguracja)
                .HasConstraintName("FK_uf_Inne_uf_Konfiguracja");
        });

        modelBuilder.Entity<UfInstalator>(entity =>
        {
            entity.HasKey(e => e.UisStanowisko);

            entity.ToTable("uf_Instalator");

            entity.Property(e => e.UisStanowisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uis_Stanowisko");
            entity.Property(e => e.UisWersjaProduktu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uis_WersjaProduktu");
        });

        modelBuilder.Entity<UfJednostkaMiary>(entity =>
        {
            entity.HasKey(e => new { e.UjmIdKonfiguracja, e.UjmIdJednostkaUf });

            entity.ToTable("uf_JednostkaMiary");

            entity.Property(e => e.UjmIdKonfiguracja).HasColumnName("ujm_IdKonfiguracja");
            entity.Property(e => e.UjmIdJednostkaUf)
                .HasDefaultValue(-1)
                .HasColumnName("ujm_IdJednostkaUF");
            entity.Property(e => e.UjmJednostkaSb)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ujm_JednostkaSb");

            entity.HasOne(d => d.UjmIdKonfiguracjaNavigation).WithMany(p => p.UfJednostkaMiaries)
                .HasForeignKey(d => d.UjmIdKonfiguracja)
                .HasConstraintName("FK_uf_JednostkaMiary_uf_Konfiguracja");
        });

        modelBuilder.Entity<UfKonfiguracja>(entity =>
        {
            entity.HasKey(e => e.UkoId);

            entity.ToTable("uf_Konfiguracja", tb => tb.HasTrigger("tr_UfKonfiguracja_Updating"));

            entity.Property(e => e.UkoId)
                .ValueGeneratedNever()
                .HasColumnName("uko_Id");
            entity.Property(e => e.UkoBinarna)
                .HasMaxLength(7800)
                .HasColumnName("uko_Binarna");
            entity.Property(e => e.UkoIdMagazyn).HasColumnName("uko_IdMagazyn");
            entity.Property(e => e.UkoIdUrzadzenie).HasColumnName("uko_IdUrzadzenie");
            entity.Property(e => e.UkoKomputer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uko_Komputer");
            entity.Property(e => e.UkoLocalPassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uko_LocalPassword");
            entity.Property(e => e.UkoLocalUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uko_LocalUser");
            entity.Property(e => e.UkoMedium)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uko_Medium");
            entity.Property(e => e.UkoNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uko_Nazwa");
            entity.Property(e => e.UkoNiefiskalne).HasColumnName("uko_Niefiskalne");
            entity.Property(e => e.UkoOddzialId).HasColumnName("uko_OddzialId");
            entity.Property(e => e.UkoOnLine).HasColumnName("uko_OnLine");
            entity.Property(e => e.UkoRemotePassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uko_RemotePassword");
            entity.Property(e => e.UkoRemoteUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uko_RemoteUser");
            entity.Property(e => e.UkoSiec).HasColumnName("uko_Siec");
            entity.Property(e => e.UkoSkrotKlawiszowy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("uko_SkrotKlawiszowy");
            entity.Property(e => e.UkoUsunieta).HasColumnName("uko_Usunieta");

            entity.HasOne(d => d.UkoIdMagazynNavigation).WithMany(p => p.UfKonfiguracjas)
                .HasForeignKey(d => d.UkoIdMagazyn)
                .HasConstraintName("FK_uf_Konfiguracja_sl_Magazyn");

            entity.HasOne(d => d.UkoIdUrzadzenieNavigation).WithMany(p => p.UfKonfiguracjas)
                .HasForeignKey(d => d.UkoIdUrzadzenie)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uf_Konfiguracja_uf_Urzadzenie");
        });

        modelBuilder.Entity<UfKonfiguracjaProfil>(entity =>
        {
            entity.HasKey(e => new { e.UkpUzytkId, e.UkpKonfiguracjaId });

            entity.ToTable("uf_KonfiguracjaProfil", tb => tb.HasTrigger("tr_KonfiguracjaProfilInsMod"));

            entity.Property(e => e.UkpUzytkId).HasColumnName("ukp_UzytkId");
            entity.Property(e => e.UkpKonfiguracjaId).HasColumnName("ukp_KonfiguracjaId");
            entity.Property(e => e.UkpDomyslna)
                .HasDefaultValue(true)
                .HasColumnName("ukp_Domyslna");
        });

        modelBuilder.Entity<UfOperacja>(entity =>
        {
            entity.HasKey(e => e.UopId);

            entity.ToTable("uf_Operacja");

            entity.Property(e => e.UopId)
                .ValueGeneratedNever()
                .HasColumnName("uop_Id");
            entity.Property(e => e.UopNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uop_Nazwa");
        });

        modelBuilder.Entity<UfPlu>(entity =>
        {
            entity.HasKey(e => e.UplId);

            entity.ToTable("uf_Plu");

            entity.Property(e => e.UplId).HasColumnName("upl_Id");
            entity.Property(e => e.UplIdKonfiguracja).HasColumnName("upl_IdKonfiguracja");
            entity.Property(e => e.UplIdTowar)
                .HasDefaultValue(-1)
                .HasColumnName("upl_IdTowar");
            entity.Property(e => e.UplKodPlu).HasColumnName("upl_KodPlu");
            entity.Property(e => e.UplRodzaj).HasColumnName("upl_Rodzaj");

            entity.HasOne(d => d.UplIdKonfiguracjaNavigation).WithMany(p => p.UfPlus)
                .HasForeignKey(d => d.UplIdKonfiguracja)
                .HasConstraintName("FK_uf_Plu_uf_Konfiguracja");

            entity.HasOne(d => d.UplIdTowarNavigation).WithMany(p => p.UfPlus)
                .HasForeignKey(d => d.UplIdTowar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uf_Plu_tw__Towar");
        });

        modelBuilder.Entity<UfSterownik>(entity =>
        {
            entity.HasKey(e => e.UstId);

            entity.ToTable("uf_Sterownik");

            entity.Property(e => e.UstId)
                .ValueGeneratedNever()
                .HasColumnName("ust_Id");
            entity.Property(e => e.UstAboutClsid)
                .HasMaxLength(38)
                .IsUnicode(false)
                .HasColumnName("ust_AboutCLSID");
            entity.Property(e => e.UstDialogClsid)
                .HasMaxLength(38)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ust_DialogCLSID");
            entity.Property(e => e.UstDriverClsid)
                .HasMaxLength(38)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ust_DriverCLSID");
            entity.Property(e => e.UstNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ust_Nazwa");
            entity.Property(e => e.UstStanowisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ust_Stanowisko");
            entity.Property(e => e.UstTyp).HasColumnName("ust_Typ");
            entity.Property(e => e.UstWersja)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ust_Wersja");
        });

        modelBuilder.Entity<UfSynchTemp>(entity =>
        {
            entity.HasKey(e => e.UsytId);

            entity.ToTable("uf_SynchTemp");

            entity.HasIndex(e => new { e.UsytIdZadanie, e.UsytIdTowar }, "IX_uf_SynchTemp");

            entity.Property(e => e.UsytId).HasColumnName("usyt_Id");
            entity.Property(e => e.UsytIdTowar).HasColumnName("usyt_IdTowar");
            entity.Property(e => e.UsytIdZadanie).HasColumnName("usyt_IdZadanie");
            entity.Property(e => e.UsytTowarUf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usyt_TowarUF");
        });

        modelBuilder.Entity<UfSynchroKodyKresk>(entity =>
        {
            entity.HasKey(e => e.UskId);

            entity.ToTable("uf_SynchroKodyKresk");

            entity.Property(e => e.UskId).HasColumnName("usk_Id");
            entity.Property(e => e.UskIdSynchronizacja).HasColumnName("usk_IdSynchronizacja");
            entity.Property(e => e.UskKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usk_Kod");

            entity.HasOne(d => d.UskIdSynchronizacjaNavigation).WithMany(p => p.UfSynchroKodyKresks)
                .HasForeignKey(d => d.UskIdSynchronizacja)
                .HasConstraintName("FK_uf_SynchroKodyKresk_uf_Synchronizacja");
        });

        modelBuilder.Entity<UfSynchronizacja>(entity =>
        {
            entity.HasKey(e => e.UsyId);

            entity.ToTable("uf_Synchronizacja");

            entity.HasIndex(e => new { e.UsyIdZadanie, e.UsyIdTowar, e.UsyIdKonfiguracja, e.UsyId }, "IX_uf_Synchronizacja");

            entity.Property(e => e.UsyId).HasColumnName("usy_Id");
            entity.Property(e => e.UsyCenaBrutto1)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto1");
            entity.Property(e => e.UsyCenaBrutto10)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto10");
            entity.Property(e => e.UsyCenaBrutto2)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto2");
            entity.Property(e => e.UsyCenaBrutto3)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto3");
            entity.Property(e => e.UsyCenaBrutto4)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto4");
            entity.Property(e => e.UsyCenaBrutto5)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto5");
            entity.Property(e => e.UsyCenaBrutto6)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto6");
            entity.Property(e => e.UsyCenaBrutto7)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto7");
            entity.Property(e => e.UsyCenaBrutto8)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto8");
            entity.Property(e => e.UsyCenaBrutto9)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto9");
            entity.Property(e => e.UsyCenaOtwarta).HasColumnName("usy_CenaOtwarta");
            entity.Property(e => e.UsyDniWaznosc).HasColumnName("usy_DniWaznosc");
            entity.Property(e => e.UsyIdCenaUf1).HasColumnName("usy_IdCenaUF1");
            entity.Property(e => e.UsyIdCenaUf10).HasColumnName("usy_IdCenaUF10");
            entity.Property(e => e.UsyIdCenaUf2).HasColumnName("usy_IdCenaUF2");
            entity.Property(e => e.UsyIdCenaUf3).HasColumnName("usy_IdCenaUF3");
            entity.Property(e => e.UsyIdCenaUf4).HasColumnName("usy_IdCenaUF4");
            entity.Property(e => e.UsyIdCenaUf5).HasColumnName("usy_IdCenaUF5");
            entity.Property(e => e.UsyIdCenaUf6).HasColumnName("usy_IdCenaUF6");
            entity.Property(e => e.UsyIdCenaUf7).HasColumnName("usy_IdCenaUF7");
            entity.Property(e => e.UsyIdCenaUf8).HasColumnName("usy_IdCenaUF8");
            entity.Property(e => e.UsyIdCenaUf9).HasColumnName("usy_IdCenaUF9");
            entity.Property(e => e.UsyIdDzialGrupaUf).HasColumnName("usy_IdDzialGrupaUF");
            entity.Property(e => e.UsyIdGrupa).HasColumnName("usy_IdGrupa");
            entity.Property(e => e.UsyIdInneUf1).HasColumnName("usy_IdInneUF1");
            entity.Property(e => e.UsyIdInneUf2).HasColumnName("usy_IdInneUF2");
            entity.Property(e => e.UsyIdInneUf3).HasColumnName("usy_IdInneUF3");
            entity.Property(e => e.UsyIdInneUf4).HasColumnName("usy_IdInneUF4");
            entity.Property(e => e.UsyIdInneUf5).HasColumnName("usy_IdInneUF5");
            entity.Property(e => e.UsyIdInneUf6).HasColumnName("usy_IdInneUF6");
            entity.Property(e => e.UsyIdInneUf7).HasColumnName("usy_IdInneUF7");
            entity.Property(e => e.UsyIdInneUf8).HasColumnName("usy_IdInneUF8");
            entity.Property(e => e.UsyIdJednostkaUf).HasColumnName("usy_IdJednostkaUF");
            entity.Property(e => e.UsyIdKonfiguracja).HasColumnName("usy_IdKonfiguracja");
            entity.Property(e => e.UsyIdOpakowanie).HasColumnName("usy_IdOpakowanie");
            entity.Property(e => e.UsyIdTowar)
                .HasDefaultValue(-1)
                .HasColumnName("usy_IdTowar");
            entity.Property(e => e.UsyIdVatGrupaUf).HasColumnName("usy_IdVatGrupaUF");
            entity.Property(e => e.UsyIdVatSp).HasColumnName("usy_IdVatSp");
            entity.Property(e => e.UsyIdVatUf).HasColumnName("usy_IdVatUF");
            entity.Property(e => e.UsyIdZadanie).HasColumnName("usy_IdZadanie");
            entity.Property(e => e.UsyJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_JednMiary");
            entity.Property(e => e.UsyOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Opis");
            entity.Property(e => e.UsyPlu).HasColumnName("usy_PLU");
            entity.Property(e => e.UsyPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_PodstKodKresk");
            entity.Property(e => e.UsyPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Pole1");
            entity.Property(e => e.UsyPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Pole2");
            entity.Property(e => e.UsyPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Pole3");
            entity.Property(e => e.UsyPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Pole4");
            entity.Property(e => e.UsyPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Pole5");
            entity.Property(e => e.UsyPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Pole6");
            entity.Property(e => e.UsyPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Pole7");
            entity.Property(e => e.UsyPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Pole8");
            entity.Property(e => e.UsyRabatProcent)
                .HasColumnType("money")
                .HasColumnName("usy_RabatProcent");
            entity.Property(e => e.UsyRabatRodzaj).HasColumnName("usy_RabatRodzaj");
            entity.Property(e => e.UsyRodzaj).HasColumnName("usy_Rodzaj");
            entity.Property(e => e.UsyStawkaVat)
                .HasColumnType("money")
                .HasColumnName("usy_StawkaVat");
            entity.Property(e => e.UsySww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_SWW");
            entity.Property(e => e.UsySymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Symbol");
            entity.Property(e => e.UsyTowarUf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_TowarUF");
            entity.Property(e => e.UsyUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_UrzNazwa");
            entity.Property(e => e.UsyUrzNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_UrzNazwa2");
            entity.Property(e => e.UsyUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usy_Uwagi");
            entity.Property(e => e.UsyWagaEtykiet).HasColumnName("usy_WagaEtykiet");

            entity.HasOne(d => d.UsyIdZadanieNavigation).WithMany(p => p.UfSynchronizacjas)
                .HasForeignKey(d => d.UsyIdZadanie)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_uf_Synchronizacja_uf_Zadanie");
        });

        modelBuilder.Entity<UfTransmisja>(entity =>
        {
            entity.HasKey(e => e.UtrId);

            entity.ToTable("uf_Transmisja");

            entity.Property(e => e.UtrId)
                .ValueGeneratedNever()
                .HasColumnName("utr_Id");
            entity.Property(e => e.UtrDataCzas)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("utr_DataCzas");
            entity.Property(e => e.UtrIdKonfiguracja).HasColumnName("utr_IdKonfiguracja");
            entity.Property(e => e.UtrIdOperacja).HasColumnName("utr_IdOperacja");
            entity.Property(e => e.UtrIdUzytkownik)
                .HasDefaultValue(-1)
                .HasColumnName("utr_IdUzytkownik");
            entity.Property(e => e.UtrKomputer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("utr_Komputer");
            entity.Property(e => e.UtrOperacjaOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("utr_OperacjaOpis");
            entity.Property(e => e.UtrStatus).HasColumnName("utr_Status");
            entity.Property(e => e.UtrStatusOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("utr_StatusOpis");

            entity.HasOne(d => d.UtrIdKonfiguracjaNavigation).WithMany(p => p.UfTransmisjas)
                .HasForeignKey(d => d.UtrIdKonfiguracja)
                .HasConstraintName("FK_uf_Transmisja_uf_Konfiguracja");

            entity.HasOne(d => d.UtrIdOperacjaNavigation).WithMany(p => p.UfTransmisjas)
                .HasForeignKey(d => d.UtrIdOperacja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uf_Transmisja_uf_Operacja");

            entity.HasOne(d => d.UtrIdUzytkownikNavigation).WithMany(p => p.UfTransmisjas)
                .HasForeignKey(d => d.UtrIdUzytkownik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uf_Transmisja_pd_Uzytkownik");
        });

        modelBuilder.Entity<UfTransmisjaKontekst>(entity =>
        {
            entity.HasKey(e => e.UtkId);

            entity.ToTable("uf_TransmisjaKontekst");

            entity.Property(e => e.UtkId).HasColumnName("utk_Id");
            entity.Property(e => e.UtkIdTransmisjaSzczegol).HasColumnName("utk_IdTransmisjaSzczegol");
            entity.Property(e => e.UtkParametr1)
                .HasDefaultValue(-1)
                .HasColumnName("utk_Parametr1");
            entity.Property(e => e.UtkParametr2).HasColumnName("utk_Parametr2");
            entity.Property(e => e.UtkTyp).HasColumnName("utk_Typ");

            entity.HasOne(d => d.UtkIdTransmisjaSzczegolNavigation).WithMany(p => p.UfTransmisjaKonteksts)
                .HasForeignKey(d => d.UtkIdTransmisjaSzczegol)
                .HasConstraintName("FK_uf_TransmisjaKontekst_uf_TransmisjaSzczegol");
        });

        modelBuilder.Entity<UfTransmisjaSzczegol>(entity =>
        {
            entity.HasKey(e => e.UtsId);

            entity.ToTable("uf_TransmisjaSzczegol");

            entity.Property(e => e.UtsId).HasColumnName("uts_Id");
            entity.Property(e => e.UtsIdTransmisja).HasColumnName("uts_IdTransmisja");
            entity.Property(e => e.UtsKomunikat)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uts_Komunikat");
            entity.Property(e => e.UtsLp).HasColumnName("uts_Lp");
            entity.Property(e => e.UtsNumer).HasColumnName("uts_Numer");
            entity.Property(e => e.UtsStatus).HasColumnName("uts_Status");

            entity.HasOne(d => d.UtsIdTransmisjaNavigation).WithMany(p => p.UfTransmisjaSzczegols)
                .HasForeignKey(d => d.UtsIdTransmisja)
                .HasConstraintName("FK_uf_TransmisjaSzczegoly_uf_Transmisja");
        });

        modelBuilder.Entity<UfUrzadzenie>(entity =>
        {
            entity.HasKey(e => e.UurId);

            entity.ToTable("uf_Urzadzenie");

            entity.Property(e => e.UurId)
                .ValueGeneratedNever()
                .HasColumnName("uur_Id");
            entity.Property(e => e.UurIdSterownik).HasColumnName("uur_IdSterownik");
            entity.Property(e => e.UurNazwa)
                .HasMaxLength(101)
                .IsUnicode(false)
                .HasColumnName("uur_Nazwa");
            entity.Property(e => e.UurOperacje).HasColumnName("uur_Operacje");
            entity.Property(e => e.UurTowarUf).HasColumnName("uur_TowarUF");

            entity.HasOne(d => d.UurIdSterownikNavigation).WithMany(p => p.UfUrzadzenies)
                .HasForeignKey(d => d.UurIdSterownik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uf_Urzadzenie_uf_Sterownik");
        });

        modelBuilder.Entity<UfVat>(entity =>
        {
            entity.HasKey(e => new { e.UvaIdKonfiguracja, e.UvaIdVatUf });

            entity.ToTable("uf_Vat");

            entity.Property(e => e.UvaIdKonfiguracja).HasColumnName("uva_IdKonfiguracja");
            entity.Property(e => e.UvaIdVatUf)
                .HasDefaultValue(-1)
                .HasColumnName("uva_IdVatUF");
            entity.Property(e => e.UvaIdVatSb)
                .HasDefaultValue(-1)
                .HasColumnName("uva_IdVatSb");

            entity.HasOne(d => d.UvaIdKonfiguracjaNavigation).WithMany(p => p.UfVats)
                .HasForeignKey(d => d.UvaIdKonfiguracja)
                .HasConstraintName("FK_uf_Vat_uf_Konfiguracja");

            entity.HasOne(d => d.UvaIdVatSbNavigation).WithMany(p => p.UfVats)
                .HasForeignKey(d => d.UvaIdVatSb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uf_Vat_sl_StawkaVAT");
        });

        modelBuilder.Entity<UfZadanie>(entity =>
        {
            entity.HasKey(e => e.UzaId);

            entity.ToTable("uf_Zadanie");

            entity.Property(e => e.UzaId)
                .ValueGeneratedNever()
                .HasColumnName("uza_Id");
            entity.Property(e => e.UzaDataCzas)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("uza_DataCzas");
            entity.Property(e => e.UzaIdKonfiguracja).HasColumnName("uza_IdKonfiguracja");
            entity.Property(e => e.UzaIdOperacja).HasColumnName("uza_IdOperacja");
            entity.Property(e => e.UzaIdTransmisja).HasColumnName("uza_IdTransmisja");
            entity.Property(e => e.UzaIdUzytkownik).HasColumnName("uza_IdUzytkownik");
            entity.Property(e => e.UzaLp).HasColumnName("uza_Lp");
            entity.Property(e => e.UzaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uza_Nazwa");
            entity.Property(e => e.UzaParametry)
                .HasColumnType("image")
                .HasColumnName("uza_Parametry");
            entity.Property(e => e.UzaStatus).HasColumnName("uza_Status");
            entity.Property(e => e.UzaTyp).HasColumnName("uza_Typ");

            entity.HasOne(d => d.UzaIdKonfiguracjaNavigation).WithMany(p => p.UfZadanies)
                .HasForeignKey(d => d.UzaIdKonfiguracja)
                .HasConstraintName("FK_uf_Zadanie_uf_Konfiguracja");

            entity.HasOne(d => d.UzaIdOperacjaNavigation).WithMany(p => p.UfZadanies)
                .HasForeignKey(d => d.UzaIdOperacja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uf_Zadanie_uf_Operacja");

            entity.HasOne(d => d.UzaIdTransmisjaNavigation).WithMany(p => p.UfZadanies)
                .HasForeignKey(d => d.UzaIdTransmisja)
                .HasConstraintName("FK_uf_Zadanie_uf_Transmisja");

            entity.HasOne(d => d.UzaIdUzytkownikNavigation).WithMany(p => p.UfZadanies)
                .HasForeignKey(d => d.UzaIdUzytkownik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uf_Zadanie_pd_Uzytkownik");
        });

        modelBuilder.Entity<UfZadanieTowar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("uf_ZadanieTowar");

            entity.Property(e => e.UztIdTowar).HasColumnName("uzt_IdTowar");
            entity.Property(e => e.UztIdZadanie).HasColumnName("uzt_IdZadanie");

            entity.HasOne(d => d.UztIdZadanieNavigation).WithMany()
                .HasForeignKey(d => d.UztIdZadanie)
                .HasConstraintName("FK_uf_ZadanieTowar_uf_Zadanie");
        });

        modelBuilder.Entity<UiFiltr>(entity =>
        {
            entity.HasKey(e => e.UilId);

            entity.ToTable("ui_Filtr");

            entity.Property(e => e.UilId)
                .ValueGeneratedNever()
                .HasColumnName("uil_Id");
            entity.Property(e => e.UilIdModulu).HasColumnName("uil_IdModulu");
            entity.Property(e => e.UilNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uil_Nazwa");
            entity.Property(e => e.UilSql)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uil_Sql");

            entity.HasOne(d => d.UilIdModuluNavigation).WithMany(p => p.UiFiltrs)
                .HasForeignKey(d => d.UilIdModulu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_Filtr_ui_Modul");
        });

        modelBuilder.Entity<UiFiltrDeklaracje>(entity =>
        {
            entity.HasKey(e => e.UidId);

            entity.ToTable("ui_FiltrDeklaracje");

            entity.Property(e => e.UidId)
                .ValueGeneratedNever()
                .HasColumnName("uid_Id");
            entity.Property(e => e.UidIdModul).HasColumnName("uid_IdModul");
            entity.Property(e => e.UidSql)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("uid_Sql");

            entity.HasOne(d => d.UidIdModulNavigation).WithMany(p => p.UiFiltrDeklaracjes)
                .HasForeignKey(d => d.UidIdModul)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_FiltrDeklaracje_ui_Modul");
        });

        modelBuilder.Entity<UiFiltrModul>(entity =>
        {
            entity.HasKey(e => e.UiuId);

            entity.ToTable("ui_FiltrModul");

            entity.Property(e => e.UiuId).HasColumnName("uiu_Id");
            entity.Property(e => e.UiuFilterId).HasColumnName("uiu_FilterId");
            entity.Property(e => e.UiuServiceId).HasColumnName("uiu_ServiceId");
            entity.Property(e => e.UiuUserId).HasColumnName("uiu_UserId");
        });

        modelBuilder.Entity<UiFunkcja>(entity =>
        {
            entity.HasKey(e => e.UifId).HasName("PK_ui_Funkcje");

            entity.ToTable("ui_Funkcja");

            entity.Property(e => e.UifId)
                .ValueGeneratedNever()
                .HasColumnName("uif_Id");
            entity.Property(e => e.UifDomyslna).HasColumnName("uif_Domyslna");
            entity.Property(e => e.UifIdModulu).HasColumnName("uif_IdModulu");
            entity.Property(e => e.UifIdOperacji).HasColumnName("uif_IdOperacji");
            entity.Property(e => e.UifNapis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("uif_Napis");
            entity.Property(e => e.UifOdRazuMenu).HasColumnName("uif_OdRazuMenu");
            entity.Property(e => e.UifParametr)
                .HasColumnType("ntext")
                .HasColumnName("uif_Parametr");
            entity.Property(e => e.UifPodwidok).HasColumnName("uif_Podwidok");
            entity.Property(e => e.UifPozycja).HasColumnName("uif_Pozycja");
            entity.Property(e => e.UifPozycjaOjca).HasColumnName("uif_PozycjaOjca");
            entity.Property(e => e.UifRozwijaj).HasColumnName("uif_Rozwijaj");
            entity.Property(e => e.UifStyl).HasColumnName("uif_Styl");
            entity.Property(e => e.UifTypOperacji).HasColumnName("uif_TypOperacji");
            entity.Property(e => e.UifWorek).HasColumnName("uif_Worek");

            entity.HasOne(d => d.UifIdModuluNavigation).WithMany(p => p.UiFunkcjas)
                .HasForeignKey(d => d.UifIdModulu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_Funkcja_ui_Modul");
        });

        modelBuilder.Entity<UiIkona>(entity =>
        {
            entity.HasKey(e => e.UikId);

            entity.ToTable("ui_Ikona");

            entity.Property(e => e.UikId).HasColumnName("uik_Id");
            entity.Property(e => e.UikIdPolecenia).HasColumnName("uik_IdPolecenia");
            entity.Property(e => e.UikIdSerwisu).HasColumnName("uik_IdSerwisu");
            entity.Property(e => e.UikIkona)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("uik_Ikona");
            entity.Property(e => e.UikTypPolecenia).HasColumnName("uik_TypPolecenia");
            entity.Property(e => e.UikUrl)
                .HasMaxLength(2083)
                .IsUnicode(false)
                .HasColumnName("uik_URL");
        });

        modelBuilder.Entity<UiKolor>(entity =>
        {
            entity.HasKey(e => e.UicId);

            entity.ToTable("ui_Kolor");

            entity.Property(e => e.UicId)
                .ValueGeneratedNever()
                .HasColumnName("uic_Id");
            entity.Property(e => e.UicNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uic_Nazwa");
            entity.Property(e => e.UicSerwisTekst)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("uic_SerwisTekst");
            entity.Property(e => e.UicSerwisTloDol)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("uic_SerwisTloDol");
            entity.Property(e => e.UicSerwisTloGora)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("uic_SerwisTloGora");
        });

        modelBuilder.Entity<UiKompozycja>(entity =>
        {
            entity.HasKey(e => e.UiId);

            entity.ToTable("ui__Kompozycja");

            entity.Property(e => e.UiId)
                .ValueGeneratedNever()
                .HasColumnName("ui_Id");
            entity.Property(e => e.UiDefinicja)
                .HasColumnType("ntext")
                .HasColumnName("ui_Definicja");
            entity.Property(e => e.UiNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ui_Nazwa");
            entity.Property(e => e.UiOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ui_Opis");
        });

        modelBuilder.Entity<UiModul>(entity =>
        {
            entity.HasKey(e => e.UimId).HasName("PK_ui__Modul");

            entity.ToTable("ui_Modul");

            entity.Property(e => e.UimId)
                .ValueGeneratedNever()
                .HasColumnName("uim_Id");
            entity.Property(e => e.UimFiltrWymagany).HasColumnName("uim_FiltrWymagany");
            entity.Property(e => e.UimHtml).HasColumnName("uim_HTML");
            entity.Property(e => e.UimIdWzorca).HasColumnName("uim_IdWzorca");
            entity.Property(e => e.UimKontekst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uim_Kontekst");
            entity.Property(e => e.UimOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uim_Opis");
            entity.Property(e => e.UimPodtytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uim_Podtytul");
            entity.Property(e => e.UimProgid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uim_Progid");
            entity.Property(e => e.UimProgram)
                .HasDefaultValue(1)
                .HasColumnName("uim_Program");
            entity.Property(e => e.UimSchematKolorow).HasColumnName("uim_SchematKolorow");
            entity.Property(e => e.UimStatusNowosci).HasColumnName("uim_StatusNowosci");
            entity.Property(e => e.UimTyp).HasColumnName("uim_Typ");
            entity.Property(e => e.UimTypKontekstu)
                .HasDefaultValue(1)
                .HasColumnName("uim_TypKontekstu");
            entity.Property(e => e.UimTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uim_Tytul");
            entity.Property(e => e.UimUkryte).HasColumnName("uim_Ukryte");
            entity.Property(e => e.UimVespDef)
                .HasColumnType("ntext")
                .HasColumnName("uim_VespDef");
            entity.Property(e => e.UimXslt)
                .HasColumnType("ntext")
                .HasColumnName("uim_XSLT");

            entity.HasOne(d => d.UimIdWzorcaNavigation).WithMany(p => p.InverseUimIdWzorcaNavigation)
                .HasForeignKey(d => d.UimIdWzorca)
                .HasConstraintName("FK_ui__Modul_ui_Modul");

            entity.HasOne(d => d.UimSchematKolorowNavigation).WithMany(p => p.UiModuls)
                .HasForeignKey(d => d.UimSchematKolorow)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_Modul_ui_Kolor");

            entity.HasMany(d => d.UipIdUzytkownikas).WithMany(p => p.UipIdModulus)
                .UsingEntity<Dictionary<string, object>>(
                    "UiModulProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("UipIdUzytkownika")
                        .HasConstraintName("FK_ui_ModulProfil_pd_Uzytkownik"),
                    l => l.HasOne<UiModul>().WithMany()
                        .HasForeignKey("UipIdModulu")
                        .HasConstraintName("FK_ui_ModulProfil_ui_Modul"),
                    j =>
                    {
                        j.HasKey("UipIdModulu", "UipIdUzytkownika");
                        j.ToTable("ui_ModulProfil");
                        j.IndexerProperty<int>("UipIdModulu").HasColumnName("uip_IdModulu");
                        j.IndexerProperty<int>("UipIdUzytkownika").HasColumnName("uip_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<UiModulPo>(entity =>
        {
            entity.HasKey(e => e.UiposId);

            entity.ToTable("ui_ModulPOS");

            entity.Property(e => e.UiposId)
                .ValueGeneratedNever()
                .HasColumnName("uipos_Id");
            entity.Property(e => e.UiposBrakTowaruAkcja).HasColumnName("uipos_BrakTowaruAkcja");
            entity.Property(e => e.UiposDefiniowalnyId).HasColumnName("uipos_DefiniowalnyId");
            entity.Property(e => e.UiposDomyslnaAkcjaTw).HasColumnName("uipos_DomyslnaAkcjaTw");
            entity.Property(e => e.UiposDomyslnyWidok).HasColumnName("uipos_DomyslnyWidok");
            entity.Property(e => e.UiposKlasyfikatorId).HasColumnName("uipos_KlasyfikatorId");
            entity.Property(e => e.UiposKlawiaturaSystemowa).HasColumnName("uipos_KlawiaturaSystemowa");
            entity.Property(e => e.UiposModulId).HasColumnName("uipos_ModulId");
            entity.Property(e => e.UiposObszarRoboczy)
                .HasDefaultValue(false)
                .HasColumnName("uipos_ObszarRoboczy");
            entity.Property(e => e.UiposOznaczajBrakujacePozycje).HasColumnName("uipos_OznaczajBrakujacePozycje");
            entity.Property(e => e.UiposPodtyp).HasColumnName("uipos_Podtyp");
            entity.Property(e => e.UiposPokazujMiniaturke)
                .HasDefaultValue(true)
                .HasColumnName("uipos_PokazujMiniaturke");
            entity.Property(e => e.UiposPrzyciskiPlatnosci).HasColumnName("uipos_PrzyciskiPlatnosci");
            entity.Property(e => e.UiposResetujKlasyfikator).HasColumnName("uipos_ResetujKlasyfikator");
            entity.Property(e => e.UiposRozmiarKafelkow)
                .HasDefaultValue(5)
                .HasColumnName("uipos_RozmiarKafelkow");
            entity.Property(e => e.UiposTyp).HasColumnName("uipos_Typ");
            entity.Property(e => e.UiposWezelStartowyId).HasColumnName("uipos_WezelStartowyId");

            entity.HasOne(d => d.UiposModul).WithMany(p => p.UiModulPos)
                .HasForeignKey(d => d.UiposModulId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_ModulPOS_ui_Modul");
        });

        modelBuilder.Entity<UiModulPosdok>(entity =>
        {
            entity.HasKey(e => e.UiposdId);

            entity.ToTable("ui_ModulPOSDok");

            entity.Property(e => e.UiposdId)
                .ValueGeneratedNever()
                .HasColumnName("uiposd_Id");
            entity.Property(e => e.UiposdDefiniowalnyId).HasColumnName("uiposd_DefiniowalnyId");
            entity.Property(e => e.UiposdModulPosid).HasColumnName("uiposd_ModulPOSId");
            entity.Property(e => e.UiposdNiedostepnyJakoDomyslny).HasColumnName("uiposd_NiedostepnyJakoDomyslny");
            entity.Property(e => e.UiposdPodtyp).HasColumnName("uiposd_Podtyp");
            entity.Property(e => e.UiposdPozycja).HasColumnName("uiposd_Pozycja");
            entity.Property(e => e.UiposdTyp).HasColumnName("uiposd_Typ");
            entity.Property(e => e.UiposdWidoczny).HasColumnName("uiposd_Widoczny");
        });

        modelBuilder.Entity<UiModulPosxaml>(entity =>
        {
            entity.HasKey(e => e.UiposxId);

            entity.ToTable("ui_ModulPOSXaml");

            entity.Property(e => e.UiposxId)
                .ValueGeneratedNever()
                .HasColumnName("uiposx_Id");
            entity.Property(e => e.UiposxModulPosid).HasColumnName("uiposx_ModulPOSId");
            entity.Property(e => e.UiposxTyp).HasColumnName("uiposx_Typ");
            entity.Property(e => e.UiposxTypEx).HasColumnName("uiposx_TypEx");
            entity.Property(e => e.UiposxXaml)
                .HasColumnType("ntext")
                .HasColumnName("uiposx_Xaml");
            entity.Property(e => e.UiposxXamlData)
                .HasColumnType("datetime")
                .HasColumnName("uiposx_XamlData");
            entity.Property(e => e.UiposxXamlDataWczytania)
                .HasColumnType("datetime")
                .HasColumnName("uiposx_XamlDataWczytania");
            entity.Property(e => e.UiposxXamlNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("uiposx_XamlNazwa");
        });

        modelBuilder.Entity<UiModulPoszakladka>(entity =>
        {
            entity.HasKey(e => e.UiposzId).HasName("PK__ui_Modul__uiposz_Id");

            entity.ToTable("ui_ModulPOSZakladka");

            entity.Property(e => e.UiposzId)
                .ValueGeneratedNever()
                .HasColumnName("uiposz_Id");
            entity.Property(e => e.UiposzKafelekRozmiar)
                .HasDefaultValue(5)
                .HasColumnName("uiposz_KafelekRozmiar");
            entity.Property(e => e.UiposzKafelekSzablon)
                .HasDefaultValue(1)
                .HasColumnName("uiposz_KafelekSzablon");
            entity.Property(e => e.UiposzModulPosid).HasColumnName("uiposz_ModulPOSId");
            entity.Property(e => e.UiposzMultiselekcja).HasColumnName("uiposz_Multiselekcja");
            entity.Property(e => e.UiposzNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uiposz_Nazwa");
            entity.Property(e => e.UiposzSql)
                .HasColumnType("text")
                .HasColumnName("uiposz_Sql");
            entity.Property(e => e.UiposzTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uiposz_Tytul");
            entity.Property(e => e.UiposzWidok).HasColumnName("uiposz_Widok");

            entity.HasOne(d => d.UiposzModulPos).WithMany(p => p.UiModulPoszakladkas)
                .HasForeignKey(d => d.UiposzModulPosid)
                .HasConstraintName("FK__ui_ModulPOSZakladka__ui_ModulPOS");
        });

        modelBuilder.Entity<UiModulPowiazany>(entity =>
        {
            entity.HasKey(e => e.UimpId);

            entity.ToTable("ui_ModulPowiazany");

            entity.Property(e => e.UimpId)
                .ValueGeneratedNever()
                .HasColumnName("uimp_Id");
            entity.Property(e => e.UimpIdModulu).HasColumnName("uimp_IdModulu");
            entity.Property(e => e.UimpIdObiektu).HasColumnName("uimp_IdObiektu");
            entity.Property(e => e.UimpNapis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uimp_Napis");
            entity.Property(e => e.UimpPozycja).HasColumnName("uimp_Pozycja");
            entity.Property(e => e.UimpStyl).HasColumnName("uimp_Styl");
            entity.Property(e => e.UimpTyp).HasColumnName("uimp_Typ");

            entity.HasOne(d => d.UimpIdModuluNavigation).WithMany(p => p.UiModulPowiazanies)
                .HasForeignKey(d => d.UimpIdModulu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_ModulPowiazany_ui_Modul");
        });

        modelBuilder.Entity<UiOperacja>(entity =>
        {
            entity.HasKey(e => e.UioId);

            entity.ToTable("ui_Operacja");

            entity.HasIndex(e => e.UioStrId, "IX_ui_Operacja").IsUnique();

            entity.Property(e => e.UioId)
                .ValueGeneratedNever()
                .HasColumnName("uio_Id");
            entity.Property(e => e.Odpowiedzialny)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ODPOWIEDZIALNY");
            entity.Property(e => e.UioIdUprawnienia).HasColumnName("uio_IdUprawnienia");
            entity.Property(e => e.UioKontekst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uio_Kontekst");
            entity.Property(e => e.UioNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uio_Nazwa");
            entity.Property(e => e.UioOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uio_Opis");
            entity.Property(e => e.UioParametr)
                .HasColumnType("ntext")
                .HasColumnName("uio_Parametr");
            entity.Property(e => e.UioProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uio_ProgId");
            entity.Property(e => e.UioStrId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uio_StrId");
            entity.Property(e => e.UioTyp).HasColumnName("uio_Typ");
            entity.Property(e => e.UioTypKontekstu)
                .HasDefaultValue(1)
                .HasColumnName("uio_TypKontekstu");
            entity.Property(e => e.UioUkryte).HasColumnName("uio_Ukryte");

            entity.HasOne(d => d.UioIdUprawnieniaNavigation).WithMany(p => p.UiOperacjas)
                .HasForeignKey(d => d.UioIdUprawnienia)
                .HasConstraintName("FK_ui_Operacja_pd_Uprawnienie");
        });

        modelBuilder.Entity<UiOperacjaModul>(entity =>
        {
            entity.HasKey(e => e.UiomId);

            entity.ToTable("ui_OperacjaModul");

            entity.Property(e => e.UiomId)
                .ValueGeneratedNever()
                .HasColumnName("uiom_Id");
            entity.Property(e => e.UiomIdOperacji).HasColumnName("uiom_IdOperacji");
            entity.Property(e => e.UiomIdWzorcaModulu).HasColumnName("uiom_IdWzorcaModulu");

            entity.HasOne(d => d.UiomIdOperacjiNavigation).WithMany(p => p.UiOperacjaModuls)
                .HasForeignKey(d => d.UiomIdOperacji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_OperacjaModul_ui_Operacja");

            entity.HasOne(d => d.UiomIdWzorcaModuluNavigation).WithMany(p => p.UiOperacjaModuls)
                .HasForeignKey(d => d.UiomIdWzorcaModulu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_OperacjaModul_ui_Modul");
        });

        modelBuilder.Entity<UiPodwidok>(entity =>
        {
            entity.HasKey(e => e.UigId).HasName("PK_ui_Grid");

            entity.ToTable("ui_Podwidok");

            entity.Property(e => e.UigId)
                .ValueGeneratedNever()
                .HasColumnName("uig_Id");
            entity.Property(e => e.UigIdModulu).HasColumnName("uig_IdModulu");
            entity.Property(e => e.UigIdWidoku).HasColumnName("uig_IdWidoku");
            entity.Property(e => e.UigKonfiguracja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uig_Konfiguracja");
            entity.Property(e => e.UigNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("uig_Nazwa");

            entity.HasOne(d => d.UigIdModuluNavigation).WithMany(p => p.UiPodwidoks)
                .HasForeignKey(d => d.UigIdModulu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_Podwidok_ui_Modul");
        });

        modelBuilder.Entity<UiSkrotModul>(entity =>
        {
            entity.HasKey(e => e.UisId);

            entity.ToTable("ui_SkrotModul");

            entity.Property(e => e.UisId)
                .ValueGeneratedNever()
                .HasColumnName("uis_Id");
            entity.Property(e => e.UisAlt).HasColumnName("uis_Alt");
            entity.Property(e => e.UisCtrl).HasColumnName("uis_Ctrl");
            entity.Property(e => e.UisIdModulu).HasColumnName("uis_IdModulu");
            entity.Property(e => e.UisIdOperacji).HasColumnName("uis_IdOperacji");
            entity.Property(e => e.UisKlawisz).HasColumnName("uis_Klawisz");
            entity.Property(e => e.UisShift).HasColumnName("uis_Shift");
            entity.Property(e => e.UisTypOperacji).HasColumnName("uis_TypOperacji");

            entity.HasOne(d => d.UisIdModuluNavigation).WithMany(p => p.UiSkrotModuls)
                .HasForeignKey(d => d.UisIdModulu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ui_SkrotModul_ui_Modul");
        });

        modelBuilder.Entity<UiZasob>(entity =>
        {
            entity.HasKey(e => e.UizId);

            entity.ToTable("ui_Zasob");

            entity.Property(e => e.UizId)
                .ValueGeneratedNever()
                .HasColumnName("uiz_Id");
            entity.Property(e => e.UizDane)
                .HasColumnType("image")
                .HasColumnName("uiz_Dane");
            entity.Property(e => e.UizTyp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("uiz_Typ");
        });

        modelBuilder.Entity<Update>(entity =>
        {
            entity.ToTable("__Update");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Sqlupdate)
                .HasColumnType("text")
                .HasColumnName("SQLUpdate");
        });

        modelBuilder.Entity<VatDaneVat>(entity =>
        {
            entity.HasKey(e => e.DvId);

            entity.ToTable("vat_DaneVAT");

            entity.HasIndex(e => e.DvIdEwidVat, "IX_vat_DaneVAT_IdEwidVAT");

            entity.HasIndex(e => e.DvIdStawkiVat, "IX_vat_DaneVAT_IdStawkiVAT");

            entity.Property(e => e.DvId)
                .ValueGeneratedNever()
                .HasColumnName("dv_Id");
            entity.Property(e => e.DvBrutto)
                .HasColumnType("money")
                .HasColumnName("dv_Brutto");
            entity.Property(e => e.DvIdEwidVat).HasColumnName("dv_IdEwidVAT");
            entity.Property(e => e.DvIdStawkiVat).HasColumnName("dv_IdStawkiVAT");
            entity.Property(e => e.DvKwotaVat)
                .HasColumnType("money")
                .HasColumnName("dv_KwotaVAT");
            entity.Property(e => e.DvNetto)
                .HasColumnType("money")
                .HasColumnName("dv_Netto");
            entity.Property(e => e.DvTyp).HasColumnName("dv_Typ");
            entity.Property(e => e.DvWartosc)
                .HasComputedColumnSql("([dv_Netto])", false)
                .HasColumnType("money")
                .HasColumnName("dv_Wartosc");

            entity.HasOne(d => d.DvIdEwidVatNavigation).WithMany(p => p.VatDaneVats)
                .HasForeignKey(d => d.DvIdEwidVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_DaneVAT_vat__EwidVAT");

            entity.HasOne(d => d.DvIdStawkiVatNavigation).WithMany(p => p.VatDaneVats)
                .HasForeignKey(d => d.DvIdStawkiVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_DaneVAT_sl_StawkaVAT");
        });

        modelBuilder.Entity<VatEwidVat>(entity =>
        {
            entity.HasKey(e => e.EvId);

            entity.ToTable("vat__EwidVAT", tb => tb.HasTrigger("tr_VatSpNrDokumentuSort_InsertUpdate "));

            entity.HasIndex(e => e.EvIdTypuEwidVat, "IX_vat__EwidVAT_IdTypuEwidVAT");

            entity.Property(e => e.EvId)
                .ValueGeneratedNever()
                .HasColumnName("ev_Id");
            entity.Property(e => e.EvAutoPrzeliczaj)
                .HasDefaultValue(true)
                .HasColumnName("ev_AutoPrzeliczaj");
            entity.Property(e => e.EvBrutto)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("ev_Brutto");
            entity.Property(e => e.EvCelZakupu).HasColumnName("ev_CelZakupu");
            entity.Property(e => e.EvDataPlatnosciRr)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataPlatnosciRR");
            entity.Property(e => e.EvDataSz)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataSZ");
            entity.Property(e => e.EvDataWpisu)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataWpisu");
            entity.Property(e => e.EvDataZakDostawy)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataZakDostawy");
            entity.Property(e => e.EvDokVatMarza).HasColumnName("ev_DokVatMarza");
            entity.Property(e => e.EvDostawaMarzowa).HasColumnName("ev_DostawaMarzowa");
            entity.Property(e => e.EvFakturaRr).HasColumnName("ev_FakturaRR");
            entity.Property(e => e.EvIdDokImport).HasColumnName("ev_IdDokImport");
            entity.Property(e => e.EvIdDokVat).HasColumnName("ev_IdDokVAT");
            entity.Property(e => e.EvIdDokVatdod).HasColumnName("ev_IdDokVATDod");
            entity.Property(e => e.EvIdKategorii).HasColumnName("ev_IdKategorii");
            entity.Property(e => e.EvIdKh).HasColumnName("ev_IdKh");
            entity.Property(e => e.EvIdObiektu).HasColumnName("ev_IdObiektu");
            entity.Property(e => e.EvIdOkresuRoku).HasColumnName("ev_IdOkresuRoku");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiStatusuVat).HasColumnName("ev_IdOstatniWpisWeryfikacjiStatusuVAT");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiStatusuVies).HasColumnName("ev_IdOstatniWpisWeryfikacjiStatusuVIES");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiWykazPodatnikowVat).HasColumnName("ev_IdOstatniWpisWeryfikacjiWykazPodatnikowVAT");
            entity.Property(e => e.EvIdRachunkuZaPrzejazd).HasColumnName("ev_IdRachunkuZaPrzejazd");
            entity.Property(e => e.EvIdTerminPlatnosci).HasColumnName("ev_IdTerminPlatnosci");
            entity.Property(e => e.EvIdTypuEwidVat).HasColumnName("ev_IdTypuEwidVAT");
            entity.Property(e => e.EvImportPochodzenie).HasColumnName("ev_ImportPochodzenie");
            entity.Property(e => e.EvImportowany).HasColumnName("ev_Importowany");
            entity.Property(e => e.EvKodPocztowyKh)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_KodPocztowyKh");
            entity.Property(e => e.EvKorektaSn).HasColumnName("ev_KorektaSN");
            entity.Property(e => e.EvKorektaVatdataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATDataPlatnosci");
            entity.Property(e => e.EvKorektaVatdataWystawieniaDokKorygowany)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATDataWystawieniaDokKorygowany");
            entity.Property(e => e.EvKorektaVatidDokKorygowany).HasColumnName("ev_KorektaVATIdDokKorygowany");
            entity.Property(e => e.EvKorektaVatnrDokKorygowany)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ev_KorektaVATNrDokKorygowany");
            entity.Property(e => e.EvKorektaVatplatnoscCzesciowa).HasColumnName("ev_KorektaVATPlatnoscCzesciowa");
            entity.Property(e => e.EvKorektaVatterminKorekty)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATTerminKorekty");
            entity.Property(e => e.EvKorektaVatterminPlatnosciDokKorygowany)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATTerminPlatnosciDokKorygowany");
            entity.Property(e => e.EvKorektaVattyp).HasColumnName("ev_KorektaVATTyp");
            entity.Property(e => e.EvKsiegowany)
                .HasDefaultValue(true)
                .HasColumnName("ev_Ksiegowany");
            entity.Property(e => e.EvKwotaVat)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("ev_KwotaVAT");
            entity.Property(e => e.EvMalyPojazd).HasColumnName("ev_MalyPojazd");
            entity.Property(e => e.EvMiastoKh)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_MiastoKh");
            entity.Property(e => e.EvMiesiacOdliczVat)
                .HasColumnType("datetime")
                .HasColumnName("ev_MiesiacOdliczVAT");
            entity.Property(e => e.EvNazwaKh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_NazwaKh");
            entity.Property(e => e.EvNazwaPelnaKh)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_NazwaPelnaKh");
            entity.Property(e => e.EvNetto)
                .HasDefaultValueSql("((0.0))")
                .HasColumnType("money")
                .HasColumnName("ev_Netto");
            entity.Property(e => e.EvNieWliczanyDoPb).HasColumnName("ev_NieWliczanyDoPB");
            entity.Property(e => e.EvNipkh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_NIPKh");
            entity.Property(e => e.EvNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ev_NrDokumentu");
            entity.Property(e => e.EvNrDokumentuSort)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_NrDokumentuSort");
            entity.Property(e => e.EvNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("ev_NumerKSeF");
            entity.Property(e => e.EvOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_Opis");
            entity.Property(e => e.EvPlatnoscKredyt).HasColumnName("ev_PlatnoscKredyt");
            entity.Property(e => e.EvPodtypDok).HasColumnName("ev_PodtypDok");
            entity.Property(e => e.EvPrzypadekSzczegolnyPit).HasColumnName("ev_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.EvRodzaj).HasColumnName("ev_Rodzaj");
            entity.Property(e => e.EvRodzajZakupu).HasColumnName("ev_RodzajZakupu");
            entity.Property(e => e.EvRozliczanaUsluga).HasColumnName("ev_RozliczanaUsluga");
            entity.Property(e => e.EvSposobOdliczania).HasColumnName("ev_SposobOdliczania");
            entity.Property(e => e.EvSymbolKh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_SymbolKh");
            entity.Property(e => e.EvTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("ev_TerminPlatnosci");
            entity.Property(e => e.EvTransakcjaVat).HasColumnName("ev_TransakcjaVAT");
            entity.Property(e => e.EvTypDokImport).HasColumnName("ev_TypDokImport");
            entity.Property(e => e.EvTypObiektu).HasColumnName("ev_TypObiektu");
            entity.Property(e => e.EvUlicaKh)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_UlicaKh");
            entity.Property(e => e.EvUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ev_Uwagi");
            entity.Property(e => e.EvVatMetodaKasowa).HasColumnName("ev_VatMetodaKasowa");
            entity.Property(e => e.EvWartoscVatmarza)
                .HasColumnType("money")
                .HasColumnName("ev_WartoscVATMarza");
            entity.Property(e => e.EvWlaczKorygowanieVat).HasColumnName("ev_WlaczKorygowanieVAT");

            entity.HasOne(d => d.EvIdKategoriiNavigation).WithMany(p => p.VatEwidVats)
                .HasForeignKey(d => d.EvIdKategorii)
                .HasConstraintName("FK_vat__EwidVAT_sl_Kategorie");

            entity.HasOne(d => d.EvIdKhNavigation).WithMany(p => p.VatEwidVats)
                .HasForeignKey(d => d.EvIdKh)
                .HasConstraintName("FK_vat__EwidVAT_kh__Kontrahent");

            entity.HasOne(d => d.EvIdOstatniWpisWeryfikacjiStatusuVatNavigation).WithMany(p => p.VatEwidVats)
                .HasForeignKey(d => d.EvIdOstatniWpisWeryfikacjiStatusuVat)
                .HasConstraintName("FK_vat__EwidVAT_kh_WeryfikacjaNIP");

            entity.HasOne(d => d.EvIdOstatniWpisWeryfikacjiStatusuViesNavigation).WithMany(p => p.VatEwidVats)
                .HasForeignKey(d => d.EvIdOstatniWpisWeryfikacjiStatusuVies)
                .HasConstraintName("FK_vat__EwidVAT_kh_Vies");

            entity.HasOne(d => d.EvIdTerminPlatnosciNavigation).WithMany(p => p.VatEwidVats)
                .HasForeignKey(d => d.EvIdTerminPlatnosci)
                .HasConstraintName("FK_vat__EwidVAT_sl_FormaPlatnosci");

            entity.HasOne(d => d.EvIdTypuEwidVatNavigation).WithMany(p => p.VatEwidVats)
                .HasForeignKey(d => d.EvIdTypuEwidVat)
                .HasConstraintName("FK_vat__EwidVAT_sl_TypEwidVAT");

            entity.HasOne(d => d.EvKorektaVatidDokKorygowanyNavigation).WithMany(p => p.InverseEvKorektaVatidDokKorygowanyNavigation)
                .HasForeignKey(d => d.EvKorektaVatidDokKorygowany)
                .HasConstraintName("FK_vat__EwidVAT_vat__EwidVAT");
        });

        modelBuilder.Entity<VatKorektaProporcji>(entity =>
        {
            entity.HasKey(e => e.VkpId);

            entity.ToTable("vat_KorektaProporcji");

            entity.Property(e => e.VkpId)
                .ValueGeneratedNever()
                .HasColumnName("vkp_Id");
            entity.Property(e => e.VkpIdEwidVat).HasColumnName("vkp_IdEwidVAT");
            entity.Property(e => e.VkpRzeczPreproporcja)
                .HasColumnType("money")
                .HasColumnName("vkp_RzeczPreproporcja");
            entity.Property(e => e.VkpRzeczProporcja)
                .HasColumnType("money")
                .HasColumnName("vkp_RzeczProporcja");
            entity.Property(e => e.VkpVatcalkowity)
                .HasColumnType("money")
                .HasColumnName("vkp_VATCalkowity");
            entity.Property(e => e.VkpVatdoOdliczenia)
                .HasColumnType("money")
                .HasColumnName("vkp_VATDoOdliczenia");
            entity.Property(e => e.VkpVatrzeczProporcja)
                .HasColumnType("money")
                .HasColumnName("vkp_VATRzeczProporcja");
            entity.Property(e => e.VkpZastPreproporcja)
                .HasColumnType("money")
                .HasColumnName("vkp_ZastPreproporcja");
            entity.Property(e => e.VkpZastProporcja)
                .HasColumnType("money")
                .HasColumnName("vkp_ZastProporcja");

            entity.HasOne(d => d.VkpIdEwidVatNavigation).WithMany(p => p.VatKorektaProporcjis)
                .HasForeignKey(d => d.VkpIdEwidVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_KorektaProporcji_vat__EwidVAT");
        });

        modelBuilder.Entity<VatMetodaRozl>(entity =>
        {
            entity.HasKey(e => e.MvId);

            entity.ToTable("vat_MetodaRozl");

            entity.Property(e => e.MvId)
                .ValueGeneratedNever()
                .HasColumnName("mv_Id");
            entity.Property(e => e.MvIdObiektu)
                .HasDefaultValue(1)
                .HasColumnName("mv_IdObiektu");
            entity.Property(e => e.MvIdPrzyczynaZwolnienia).HasColumnName("mv_IdPrzyczynaZwolnienia");
            entity.Property(e => e.MvKwartal).HasColumnName("mv_Kwartal");
            entity.Property(e => e.MvMetoda).HasColumnName("mv_Metoda");
            entity.Property(e => e.MvMetodaKasowa).HasColumnName("mv_MetodaKasowa");
            entity.Property(e => e.MvPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("mv_Poczatek");
            entity.Property(e => e.MvRok).HasColumnName("mv_Rok");

            entity.HasOne(d => d.MvIdPrzyczynaZwolnieniaNavigation).WithMany(p => p.VatMetodaRozls)
                .HasForeignKey(d => d.MvIdPrzyczynaZwolnienia)
                .HasConstraintName("FK_vat_MetodaRozl_sl_ZwolnienieZVAT");
        });

        modelBuilder.Entity<VatMetodaRozlUe>(entity =>
        {
            entity.HasKey(e => e.MvuId);

            entity.ToTable("vat_MetodaRozlUE");

            entity.Property(e => e.MvuId)
                .ValueGeneratedNever()
                .HasColumnName("mvu_Id");
            entity.Property(e => e.MvuIdObiektu).HasColumnName("mvu_IdObiektu");
            entity.Property(e => e.MvuKwartal).HasColumnName("mvu_Kwartal");
            entity.Property(e => e.MvuMetoda).HasColumnName("mvu_Metoda");
            entity.Property(e => e.MvuRok).HasColumnName("mvu_Rok");
        });

        modelBuilder.Entity<VatOznaczeniaJpksprzedaz>(entity =>
        {
            entity.HasKey(e => e.VjsId).HasName("PK__vat_OznaczeniaJPKSprzedaz");

            entity.ToTable("vat_OznaczeniaJPKSprzedaz");

            entity.Property(e => e.VjsId)
                .ValueGeneratedNever()
                .HasColumnName("vjs_Id");
            entity.Property(e => e.VjsBMpvProwizja).HasColumnName("vjs_B_MPV_PROWIZJA");
            entity.Property(e => e.VjsBSpv).HasColumnName("vjs_B_SPV");
            entity.Property(e => e.VjsBSpvDostawa).HasColumnName("vjs_B_SPV_DOSTAWA");
            entity.Property(e => e.VjsEe).HasColumnName("vjs_EE");
            entity.Property(e => e.VjsGtu01).HasColumnName("vjs_GTU_01");
            entity.Property(e => e.VjsGtu02).HasColumnName("vjs_GTU_02");
            entity.Property(e => e.VjsGtu03).HasColumnName("vjs_GTU_03");
            entity.Property(e => e.VjsGtu04).HasColumnName("vjs_GTU_04");
            entity.Property(e => e.VjsGtu05).HasColumnName("vjs_GTU_05");
            entity.Property(e => e.VjsGtu06).HasColumnName("vjs_GTU_06");
            entity.Property(e => e.VjsGtu07).HasColumnName("vjs_GTU_07");
            entity.Property(e => e.VjsGtu08).HasColumnName("vjs_GTU_08");
            entity.Property(e => e.VjsGtu09).HasColumnName("vjs_GTU_09");
            entity.Property(e => e.VjsGtu10).HasColumnName("vjs_GTU_10");
            entity.Property(e => e.VjsGtu11).HasColumnName("vjs_GTU_11");
            entity.Property(e => e.VjsGtu12).HasColumnName("vjs_GTU_12");
            entity.Property(e => e.VjsGtu13).HasColumnName("vjs_GTU_13");
            entity.Property(e => e.VjsI42).HasColumnName("vjs_I_42");
            entity.Property(e => e.VjsI63).HasColumnName("vjs_I_63");
            entity.Property(e => e.VjsIdEwidVat).HasColumnName("vjs_IdEwidVAT");
            entity.Property(e => e.VjsIed).HasColumnName("vjs_IED");
            entity.Property(e => e.VjsMpp).HasColumnName("vjs_MPP");
            entity.Property(e => e.VjsMrT).HasColumnName("vjs_MR_T");
            entity.Property(e => e.VjsMrUz).HasColumnName("vjs_MR_UZ");
            entity.Property(e => e.VjsOznaczenieDowodu).HasColumnName("vjs_OznaczenieDowodu");
            entity.Property(e => e.VjsSw).HasColumnName("vjs_SW");
            entity.Property(e => e.VjsTp).HasColumnName("vjs_TP");
            entity.Property(e => e.VjsTtD).HasColumnName("vjs_TT_D");
            entity.Property(e => e.VjsTtWnt).HasColumnName("vjs_TT_WNT");
            entity.Property(e => e.VjsWstoEe).HasColumnName("vjs_WSTO_EE");

            entity.HasOne(d => d.VjsIdEwidVatNavigation).WithMany(p => p.VatOznaczeniaJpksprzedazs)
                .HasForeignKey(d => d.VjsIdEwidVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__vat_OznaczeniaJPKSprzedaz_vat__EwidVAT");
        });

        modelBuilder.Entity<VatOznaczeniaJpkzakup>(entity =>
        {
            entity.HasKey(e => e.VjzId).HasName("PK__vat_OznaczeniaJPKZakup");

            entity.ToTable("vat_OznaczeniaJPKZakup");

            entity.Property(e => e.VjzId)
                .ValueGeneratedNever()
                .HasColumnName("vjz_Id");
            entity.Property(e => e.VjzIdEwidVat).HasColumnName("vjz_IdEwidVAT");
            entity.Property(e => e.VjzImp).HasColumnName("vjz_IMP");
            entity.Property(e => e.VjzMpp).HasColumnName("vjz_MPP");
            entity.Property(e => e.VjzOznaczenieDowodu).HasColumnName("vjz_OznaczenieDowodu");

            entity.HasOne(d => d.VjzIdEwidVatNavigation).WithMany(p => p.VatOznaczeniaJpkzakups)
                .HasForeignKey(d => d.VjzIdEwidVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__vat_OznaczeniaJPKZakup_vat__EwidVAT");
        });

        modelBuilder.Entity<VatParametr>(entity =>
        {
            entity.HasKey(e => e.VatpId);

            entity.ToTable("vat_Parametr");

            entity.HasIndex(e => e.VatpParamEwidId, "IX_vat_Parametr").IsUnique();

            entity.Property(e => e.VatpId)
                .ValueGeneratedNever()
                .HasColumnName("vatp_Id");
            entity.Property(e => e.VatpAktTransImport)
                .HasDefaultValue(true)
                .HasColumnName("vatp_AktTransImport");
            entity.Property(e => e.VatpAktTransImuv).HasColumnName("vatp_AktTransIMUV");
            entity.Property(e => e.VatpAktTransItpu).HasColumnName("vatp_AktTransITPU");
            entity.Property(e => e.VatpAktTransNabycia)
                .HasDefaultValue(true)
                .HasColumnName("vatp_AktTransNabycia");
            entity.Property(e => e.VatpAktTransOo).HasColumnName("vatp_AktTransOO");
            entity.Property(e => e.VatpAktTransOodt).HasColumnName("vatp_AktTransOODT");
            entity.Property(e => e.VatpAktTransTtu)
                .HasDefaultValue(true)
                .HasColumnName("vatp_AktTransTTU");
            entity.Property(e => e.VatpAktTransWntps).HasColumnName("vatp_AktTransWNTPS");
            entity.Property(e => e.VatpAktTransWntst).HasColumnName("vatp_AktTransWNTST");
            entity.Property(e => e.VatpBlokujVatInnyOkresZamkniety)
                .HasDefaultValue(true)
                .HasColumnName("vatp_BlokujVatInnyOkresZamkniety");
            entity.Property(e => e.VatpBlokujVatOkresNieistniejacy)
                .HasDefaultValue(true)
                .HasColumnName("vatp_BlokujVatOkresNieistniejacy");
            entity.Property(e => e.VatpBrakKontrahenta).HasColumnName("vatp_BrakKontrahenta");
            entity.Property(e => e.VatpDataSzimport)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZImport");
            entity.Property(e => e.VatpDataSzimuv)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZIMUV");
            entity.Property(e => e.VatpDataSzitpu)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZITPU");
            entity.Property(e => e.VatpDataSznabycia)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZNabycia");
            entity.Property(e => e.VatpDataSzoo)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZOO");
            entity.Property(e => e.VatpDataSzoodt)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZOODT");
            entity.Property(e => e.VatpDataSzttu)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZTTU");
            entity.Property(e => e.VatpDataSzwntps)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZWNTPS");
            entity.Property(e => e.VatpDataSzwntst)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataSZWNTST");
            entity.Property(e => e.VatpDataWpisuImport)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataWpisuImport");
            entity.Property(e => e.VatpDataWpisuImuv)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataWpisuIMUV");
            entity.Property(e => e.VatpDataWpisuItpu)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataWpisuITPU");
            entity.Property(e => e.VatpDataWpisuNabycia)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataWpisuNabycia");
            entity.Property(e => e.VatpDataWpisuOo)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataWpisuOO");
            entity.Property(e => e.VatpDataWpisuOodt)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataWpisuOODT");
            entity.Property(e => e.VatpDataWpisuTtu)
                .HasDefaultValue(2)
                .HasColumnName("vatp_DataWpisuTTU");
            entity.Property(e => e.VatpDataWpisuWntps)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataWpisuWNTPS");
            entity.Property(e => e.VatpDataWpisuWntst)
                .HasDefaultValue(1)
                .HasColumnName("vatp_DataWpisuWNTST");
            entity.Property(e => e.VatpDataZdimport)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDImport");
            entity.Property(e => e.VatpDataZdimuv)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDIMUV");
            entity.Property(e => e.VatpDataZditpu)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDITPU");
            entity.Property(e => e.VatpDataZdnabycia)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDNabycia");
            entity.Property(e => e.VatpDataZdoo)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDOO");
            entity.Property(e => e.VatpDataZdoodt)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDOODT");
            entity.Property(e => e.VatpDataZdttu)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDTTU");
            entity.Property(e => e.VatpDataZdwntps)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDWNTPS");
            entity.Property(e => e.VatpDataZdwntst)
                .HasDefaultValue(3)
                .HasColumnName("vatp_DataZDWNTST");
            entity.Property(e => e.VatpEwidSpSortWydruk)
                .HasDefaultValue(1)
                .HasColumnName("vatp_EwidSpSortWydruk");
            entity.Property(e => e.VatpEwidSpSortowanie).HasColumnName("vatp_EwidSpSortowanie");
            entity.Property(e => e.VatpEwidZakSortWydruk)
                .HasDefaultValue(2)
                .HasColumnName("vatp_EwidZakSortWydruk");
            entity.Property(e => e.VatpEwidZakSortowanie).HasColumnName("vatp_EwidZakSortowanie");
            entity.Property(e => e.VatpGenTransImport)
                .HasDefaultValue(true)
                .HasColumnName("vatp_GenTransImport");
            entity.Property(e => e.VatpGenTransImuv).HasColumnName("vatp_GenTransIMUV");
            entity.Property(e => e.VatpGenTransItpu).HasColumnName("vatp_GenTransITPU");
            entity.Property(e => e.VatpGenTransNabycia)
                .HasDefaultValue(true)
                .HasColumnName("vatp_GenTransNabycia");
            entity.Property(e => e.VatpGenTransOo).HasColumnName("vatp_GenTransOO");
            entity.Property(e => e.VatpGenTransOodt).HasColumnName("vatp_GenTransOODT");
            entity.Property(e => e.VatpGenTransTtu)
                .HasDefaultValue(true)
                .HasColumnName("vatp_GenTransTTU");
            entity.Property(e => e.VatpGenTransWntps).HasColumnName("vatp_GenTransWNTPS");
            entity.Property(e => e.VatpGenTransWntst).HasColumnName("vatp_GenTransWNTST");
            entity.Property(e => e.VatpIdEwidVatspImport)
                .HasDefaultValue(1)
                .HasColumnName("vatp_IdEwidVATSpImport");
            entity.Property(e => e.VatpIdEwidVatspImuv)
                .HasDefaultValue(1)
                .HasColumnName("vatp_IdEwidVATSpIMUV");
            entity.Property(e => e.VatpIdEwidVatspItpu)
                .HasDefaultValue(100006)
                .HasColumnName("vatp_IdEwidVATSpITPU");
            entity.Property(e => e.VatpIdEwidVatspNabycia)
                .HasDefaultValue(1)
                .HasColumnName("vatp_IdEwidVATSpNabycia");
            entity.Property(e => e.VatpIdEwidVatspOo)
                .HasDefaultValue(1)
                .HasColumnName("vatp_IdEwidVATSpOO");
            entity.Property(e => e.VatpIdEwidVatspOodt)
                .HasDefaultValue(100008)
                .HasColumnName("vatp_IdEwidVATSpOODT");
            entity.Property(e => e.VatpIdEwidVatspTtu)
                .HasDefaultValue(100011)
                .HasColumnName("vatp_IdEwidVATSpTTU");
            entity.Property(e => e.VatpIdEwidVatspWntps)
                .HasDefaultValue(7)
                .HasColumnName("vatp_IdEwidVATSpWNTPS");
            entity.Property(e => e.VatpIdEwidVatspWntst)
                .HasDefaultValue(7)
                .HasColumnName("vatp_IdEwidVATSpWNTST");
            entity.Property(e => e.VatpKolumnaKsKoszt)
                .HasDefaultValue(14)
                .HasColumnName("vatp_KolumnaKsKoszt");
            entity.Property(e => e.VatpKolumnaKsZao)
                .HasDefaultValue(10)
                .HasColumnName("vatp_KolumnaKsZao");
            entity.Property(e => e.VatpKontrolaUniqNrDokumentu)
                .HasDefaultValue(true)
                .HasColumnName("vatp_KontrolaUniqNrDokumentu");
            entity.Property(e => e.VatpKorektaZakupuTylkoVat)
                .HasDefaultValue(true)
                .HasColumnName("vatp_KorektaZakupuTylkoVAT");
            entity.Property(e => e.VatpKsDataWpisuKoszt)
                .HasDefaultValue(2)
                .HasColumnName("vatp_KsDataWpisuKoszt");
            entity.Property(e => e.VatpKsDataWpisuZao)
                .HasDefaultValue(2)
                .HasColumnName("vatp_KsDataWpisuZao");
            entity.Property(e => e.VatpKsDataZdGospKoszt)
                .HasDefaultValue(2)
                .HasColumnName("vatp_KsDataZdGospKoszt");
            entity.Property(e => e.VatpKsDataZdGospZao)
                .HasDefaultValue(2)
                .HasColumnName("vatp_KsDataZdGospZao");
            entity.Property(e => e.VatpKsSpDataWpisu)
                .HasDefaultValue(4)
                .HasColumnName("vatp_KsSpDataWpisu");
            entity.Property(e => e.VatpKsSpDataZdGosp)
                .HasDefaultValue(4)
                .HasColumnName("vatp_KsSpDataZdGosp");
            entity.Property(e => e.VatpKsSpKolumna)
                .HasDefaultValue(7)
                .HasColumnName("vatp_KsSpKolumna");
            entity.Property(e => e.VatpKsSpWgParam)
                .HasDefaultValue(true)
                .HasColumnName("vatp_KsSpWgParam");
            entity.Property(e => e.VatpKsWyborKolumn)
                .HasDefaultValue(1)
                .HasColumnName("vatp_KsWyborKolumn");
            entity.Property(e => e.VatpKursIdBanku)
                .HasDefaultValue(1)
                .HasColumnName("vatp_KursIdBanku");
            entity.Property(e => e.VatpKursPobierajOstatni)
                .HasDefaultValue(true)
                .HasColumnName("vatp_KursPobierajOstatni");
            entity.Property(e => e.VatpKursRodzaj)
                .HasDefaultValue(1)
                .HasColumnName("vatp_KursRodzaj");
            entity.Property(e => e.VatpKursRodzajDaty).HasColumnName("vatp_KursRodzajDaty");
            entity.Property(e => e.VatpNetto50).HasColumnName("vatp_Netto50");
            entity.Property(e => e.VatpOznaczeniaDostawyJpk).HasColumnName("vatp_OznaczeniaDostawyJPK");
            entity.Property(e => e.VatpOznaczeniaProcedurJpk).HasColumnName("vatp_OznaczeniaProcedurJPK");
            entity.Property(e => e.VatpOznaczenieDowoduJpk).HasColumnName("vatp_OznaczenieDowoduJPK");
            entity.Property(e => e.VatpParamEwidId).HasColumnName("vatp_ParamEwidId");
            entity.Property(e => e.VatpProporcjaBazowaTylkoVat)
                .HasDefaultValue(true)
                .HasColumnName("vatp_ProporcjaBazowaTylkoVAT");
            entity.Property(e => e.VatpPrzeliczajDokImportowane).HasColumnName("vatp_PrzeliczajDokImportowane");
            entity.Property(e => e.VatpPrzenoszenieDatyEwidSp).HasColumnName("vatp_PrzenoszenieDatyEwidSp");
            entity.Property(e => e.VatpPrzenoszenieDatyEwidZak).HasColumnName("vatp_PrzenoszenieDatyEwidZak");
            entity.Property(e => e.VatpPrzepisywanieCelZakupu)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieCelZakupu");
            entity.Property(e => e.VatpPrzepisywanieDatyZaplaty)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieDatyZaplaty");
            entity.Property(e => e.VatpPrzepisywanieDtSpWyst)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieDtSpWyst");
            entity.Property(e => e.VatpPrzepisywanieDtWpisu)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieDtWpisu");
            entity.Property(e => e.VatpPrzepisywanieDtZakDost)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieDtZakDost");
            entity.Property(e => e.VatpPrzepisywanieEwidVat)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieEwidVAT");
            entity.Property(e => e.VatpPrzepisywanieKategorii)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieKategorii");
            entity.Property(e => e.VatpPrzepisywanieKh)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieKh");
            entity.Property(e => e.VatpPrzepisywanieKorektyVat)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieKorektyVAT");
            entity.Property(e => e.VatpPrzepisywanieMov)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieMOV");
            entity.Property(e => e.VatpPrzepisywanieOpisu)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieOpisu");
            entity.Property(e => e.VatpPrzepisywaniePrzypadekSzczegolny).HasColumnName("vatp_PrzepisywaniePrzypadekSzczegolny");
            entity.Property(e => e.VatpPrzepisywanieSo)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieSO");
            entity.Property(e => e.VatpPrzepisywanieTp)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieTP");
            entity.Property(e => e.VatpPrzepisywanieTransakcjiVat)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieTransakcjiVAT");
            entity.Property(e => e.VatpPrzepisywanieVatMk)
                .HasDefaultValue(true)
                .HasColumnName("vatp_PrzepisywanieVatMK");
            entity.Property(e => e.VatpPrzypadekSzczegolnyPit)
                .HasDefaultValue(2)
                .HasColumnName("vatp_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.VatpPrzypadekSzczegolnyTylkoVat).HasColumnName("vatp_PrzypadekSzczegolnyTylkoVAT");
            entity.Property(e => e.VatpPrzypadekSzczegolnyZaokr).HasColumnName("vatp_PrzypadekSzczegolnyZaokr");
            entity.Property(e => e.VatpSpKorygowanieVat).HasColumnName("vatp_SpKorygowanieVAT");
            entity.Property(e => e.VatpVatNpo)
                .HasDefaultValue(true)
                .HasColumnName("vatp_VatNpo");
            entity.Property(e => e.VatpVatkorygMsgBox).HasColumnName("vatp_VATKorygMsgBox");
            entity.Property(e => e.VatpVatuzupelnianieDblClck).HasColumnName("vatp_VATUzupelnianieDblClck");
            entity.Property(e => e.VatpZakKorygowanieVat).HasColumnName("vatp_ZakKorygowanieVAT");

            entity.HasOne(d => d.VatpIdEwidVatspImportNavigation).WithMany(p => p.VatParametrVatpIdEwidVatspImportNavigations)
                .HasForeignKey(d => d.VatpIdEwidVatspImport)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_Parametr_sl_TypEwidVAT1");

            entity.HasOne(d => d.VatpIdEwidVatspItpuNavigation).WithMany(p => p.VatParametrVatpIdEwidVatspItpuNavigations)
                .HasForeignKey(d => d.VatpIdEwidVatspItpu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_Parametr_sl_TypEwidVATIPTU");

            entity.HasOne(d => d.VatpIdEwidVatspNabyciaNavigation).WithMany(p => p.VatParametrVatpIdEwidVatspNabyciaNavigations)
                .HasForeignKey(d => d.VatpIdEwidVatspNabycia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_Parametr_sl_TypEwidVAT");

            entity.HasOne(d => d.VatpIdEwidVatspOoNavigation).WithMany(p => p.VatParametrVatpIdEwidVatspOoNavigations)
                .HasForeignKey(d => d.VatpIdEwidVatspOo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_Parametr_sl_TypEwidVATOO");

            entity.HasOne(d => d.VatpKursIdBankuNavigation).WithMany(p => p.VatParametrs)
                .HasForeignKey(d => d.VatpKursIdBanku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_Parametr_sl_WalutaBank");

            entity.HasOne(d => d.VatpParamEwid).WithOne(p => p.VatParametr)
                .HasForeignKey<VatParametr>(d => d.VatpParamEwidId)
                .HasConstraintName("FK_vat_Parametr_par__Ewid");
        });

        modelBuilder.Entity<VatPozycja>(entity =>
        {
            entity.HasKey(e => e.PozId);

            entity.ToTable("vat_Pozycja");

            entity.Property(e => e.PozId)
                .ValueGeneratedNever()
                .HasColumnName("poz_Id");
            entity.Property(e => e.PozIdEwVat).HasColumnName("poz_IdEwVat");
            entity.Property(e => e.PozNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("poz_Nazwa");
            entity.Property(e => e.PozOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("poz_Opis");
            entity.Property(e => e.PozWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("poz_WartoscBrutto");
            entity.Property(e => e.PozWartoscNetto)
                .HasColumnType("money")
                .HasColumnName("poz_WartoscNetto");

            entity.HasOne(d => d.PozIdEwVatNavigation).WithMany(p => p.VatPozycjas)
                .HasForeignKey(d => d.PozIdEwVat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vat_Pozycja_vat__EwidVAT");
        });

        modelBuilder.Entity<VatProporcjaBazowa>(entity =>
        {
            entity.HasKey(e => e.VpbId);

            entity.ToTable("vat_ProporcjaBazowa");

            entity.Property(e => e.VpbId)
                .ValueGeneratedNever()
                .HasColumnName("vpb_Id");
            entity.Property(e => e.VpbOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("vpb_OkresDo");
            entity.Property(e => e.VpbOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("vpb_OkresOd");
            entity.Property(e => e.VpbOpn)
                .HasColumnType("money")
                .HasColumnName("vpb_OPN");
            entity.Property(e => e.VpbOz)
                .HasColumnType("money")
                .HasColumnName("vpb_OZ");
            entity.Property(e => e.VpbRok).HasColumnName("vpb_Rok");
            entity.Property(e => e.VpbSd)
                .HasColumnType("money")
                .HasColumnName("vpb_SD");
            entity.Property(e => e.VpbWartosc)
                .HasColumnType("money")
                .HasColumnName("vpb_Wartosc");
            entity.Property(e => e.VpbWartoscDoDeklaracji)
                .HasColumnType("money")
                .HasColumnName("vpb_WartoscDoDeklaracji");
            entity.Property(e => e.VpbWartoscPreproporcja)
                .HasDefaultValue(100m)
                .HasColumnType("money")
                .HasColumnName("vpb_WartoscPreproporcja");
        });

        modelBuilder.Entity<VatPrzypomnienium>(entity =>
        {
            entity.HasKey(e => e.PrzyId);

            entity.ToTable("vat_Przypomnienia");

            entity.Property(e => e.PrzyId).HasColumnName("przy_Id");
            entity.Property(e => e.PrzyDataPonownegoPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("przy_DataPonownegoPrzypomnienia");
            entity.Property(e => e.PrzyProgram).HasColumnName("przy_Program");
            entity.Property(e => e.PrzyStatusPrzypomnieniaZmianyVat).HasColumnName("przy_StatusPrzypomnieniaZmianyVAT");
        });

        modelBuilder.Entity<VatWizTowar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("vat_WizTowar");

            entity.Property(e => e.VwtwBlokadaSpr).HasColumnName("vwtw_BlokadaSpr");
            entity.Property(e => e.VwtwBlokadaZak).HasColumnName("vwtw_BlokadaZak");
            entity.Property(e => e.VwtwData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("vwtw_Data");
            entity.Property(e => e.VwtwId).HasColumnName("vwtw_Id");
            entity.Property(e => e.VwtwIdVatSpNew).HasColumnName("vwtw_IdVatSpNew");
            entity.Property(e => e.VwtwIdVatSpOld).HasColumnName("vwtw_IdVatSpOld");
            entity.Property(e => e.VwtwIdVatZakNew).HasColumnName("vwtw_IdVatZakNew");
            entity.Property(e => e.VwtwIdVatZakOld).HasColumnName("vwtw_IdVatZakOld");
            entity.Property(e => e.VwtwLiczbaUruchom).HasColumnName("vwtw_LiczbaUruchom");
            entity.Property(e => e.VwtwWersja).HasColumnName("vwtw_Wersja");
        });

        modelBuilder.Entity<VatWizTowar2013>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("vat_WizTowar2013");

            entity.Property(e => e.Vwtw2BlokadaSpr).HasColumnName("vwtw2_BlokadaSpr");
            entity.Property(e => e.Vwtw2BlokadaZak).HasColumnName("vwtw2_BlokadaZak");
            entity.Property(e => e.Vwtw2Data)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("vwtw2_Data");
            entity.Property(e => e.Vwtw2Id).HasColumnName("vwtw2_Id");
            entity.Property(e => e.Vwtw2IdVatSpNew).HasColumnName("vwtw2_IdVatSpNew");
            entity.Property(e => e.Vwtw2IdVatSpOld).HasColumnName("vwtw2_IdVatSpOld");
            entity.Property(e => e.Vwtw2IdVatZakNew).HasColumnName("vwtw2_IdVatZakNew");
            entity.Property(e => e.Vwtw2IdVatZakOld).HasColumnName("vwtw2_IdVatZakOld");
            entity.Property(e => e.Vwtw2LiczbaUruchom).HasColumnName("vwtw2_LiczbaUruchom");
            entity.Property(e => e.Vwtw2Wersja).HasColumnName("vwtw2_Wersja");
        });

        modelBuilder.Entity<VatWizzard>(entity =>
        {
            entity.HasKey(e => e.VwId);

            entity.ToTable("vat_Wizzard");

            entity.Property(e => e.VwId).HasColumnName("vw_Id");
            entity.Property(e => e.VwData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("vw_Data");
            entity.Property(e => e.VwKrok)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vw_Krok");
            entity.Property(e => e.VwWersja).HasColumnName("vw_Wersja");
        });

        modelBuilder.Entity<VatWizzard2013>(entity =>
        {
            entity.HasKey(e => e.Vw2Id);

            entity.ToTable("vat_Wizzard2013");

            entity.Property(e => e.Vw2Id).HasColumnName("vw2_Id");
            entity.Property(e => e.Vw2Data)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("vw2_Data");
            entity.Property(e => e.Vw2Krok)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vw2_Krok");
            entity.Property(e => e.Vw2Wersja).HasColumnName("vw2_Wersja");
        });

        modelBuilder.Entity<VatWizzard2014>(entity =>
        {
            entity.HasKey(e => e.Vw3Id);

            entity.ToTable("vat_Wizzard2014");

            entity.Property(e => e.Vw3Id).HasColumnName("vw3_Id");
            entity.Property(e => e.Vw3Data)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("vw3_Data");
            entity.Property(e => e.Vw3Krok)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vw3_Krok");
            entity.Property(e => e.Vw3Wersja).HasColumnName("vw3_Wersja");
        });

        modelBuilder.Entity<VwAlarm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Alarm");

            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.FlgId).HasColumnName("flg_Id");
            entity.Property(e => e.FlgNumer).HasColumnName("flg_Numer");
            entity.Property(e => e.FlgText)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("flg_Text");
            entity.Property(e => e.FlwIdFlagi).HasColumnName("flw_IdFlagi");
            entity.Property(e => e.FlwKomentarz)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("flw_Komentarz");
            entity.Property(e => e.PtzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ptz_Nazwa");
            entity.Property(e => e.ZdBezCzasu).HasColumnName("zd_BezCzasu");
            entity.Property(e => e.ZdCykliczne).HasColumnName("zd_Cykliczne");
            entity.Property(e => e.ZdId).HasColumnName("zd_Id");
            entity.Property(e => e.ZdNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zd_NastepnePrzypomnienie");
            entity.Property(e => e.ZdPersonel).HasColumnName("zd_Personel");
            entity.Property(e => e.ZdPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("zd_Poczatek");
            entity.Property(e => e.ZdPriorytet).HasColumnName("zd_Priorytet");
            entity.Property(e => e.ZdPrzypomniane).HasColumnName("zd_Przypomniane");
            entity.Property(e => e.ZdRodzaj).HasColumnName("zd_Rodzaj");
            entity.Property(e => e.ZdTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("zd_Temat");
            entity.Property(e => e.ZdUczestnicy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Uczestnicy");
            entity.Property(e => e.ZdkIdKlienta).HasColumnName("zdk_IdKlienta");
            entity.Property(e => e.ZdkNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zdk_NastepnePrzypomnienie");
            entity.Property(e => e.ZdkPrzypomniane).HasColumnName("zdk_Przypomniane");
            entity.Property(e => e.ZdvwStatus).HasColumnName("zdvw_Status");
        });

        modelBuilder.Entity<VwAlarmyUzytkownika>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_AlarmyUzytkownika");

            entity.Property(e => e.ZdId).HasColumnName("zd_Id");
            entity.Property(e => e.ZdNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zd_NastepnePrzypomnienie");
            entity.Property(e => e.ZdPersonel).HasColumnName("zd_Personel");
            entity.Property(e => e.ZdPrzypomniane).HasColumnName("zd_Przypomniane");
            entity.Property(e => e.ZdkIdKlienta).HasColumnName("zdk_IdKlienta");
            entity.Property(e => e.ZdkNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zdk_NastepnePrzypomnienie");
            entity.Property(e => e.ZdkPrzypomniane).HasColumnName("zdk_Przypomniane");
        });

        modelBuilder.Entity<VwAp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAP2");

            entity.Property(e => e.DataUruchomienia).HasColumnType("datetime");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OkresDo).HasColumnType("datetime");
            entity.Property(e => e.OkresOd).HasColumnType("datetime");
            entity.Property(e => e.Uruchomil)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAplogPod>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAPLogPod");

            entity.Property(e => e.AlDataUruchomienia)
                .HasColumnType("datetime")
                .HasColumnName("al_DataUruchomienia");
            entity.Property(e => e.AlId).HasColumnName("al_Id");
            entity.Property(e => e.AlIdAp).HasColumnName("al_IdAP");
            entity.Property(e => e.AlLog)
                .HasColumnType("ntext")
                .HasColumnName("al_Log");
            entity.Property(e => e.AlNazwaUzytkownika)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("al_NazwaUzytkownika");
            entity.Property(e => e.AlNrDekretu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("al_NrDekretu");
            entity.Property(e => e.AlOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("al_OkresDo");
            entity.Property(e => e.AlOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("al_OkresOd");
            entity.Property(e => e.AlWynik).HasColumnName("al_Wynik");
            entity.Property(e => e.ApNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ap_Nazwa");
        });

        modelBuilder.Entity<VwAprun>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAPRun");

            entity.Property(e => e.AlDataUruchomienia)
                .HasColumnType("datetime")
                .HasColumnName("al_DataUruchomienia");
            entity.Property(e => e.AlOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("al_OkresDo");
            entity.Property(e => e.AlOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("al_OkresOd");
            entity.Property(e => e.ApId).HasColumnName("ap_Id");
            entity.Property(e => e.ApNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ap_Nazwa");
        });

        modelBuilder.Entity<VwBankowoscTransakcjeOczekujace>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankowoscTransakcjeOczekujace");

            entity.Property(e => e.AdresKontrahenta)
                .HasMaxLength(133)
                .IsUnicode(false);
            entity.Property(e => e.AdrhId).HasColumnName("adrh_Id");
            entity.Property(e => e.DataRealizacji).HasColumnType("datetime");
            entity.Property(e => e.DataWyslania).HasColumnType("datetime");
            entity.Property(e => e.HbDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataKsiegowania");
            entity.Property(e => e.HbDataWaluty)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataWaluty");
            entity.Property(e => e.IdentBank)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.IdentPaczki)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.KhrDataWeryfikacji)
                .HasColumnType("datetime")
                .HasColumnName("khr_DataWeryfikacji");
            entity.Property(e => e.KhrNaBialejLiscie).HasColumnName("khr_NaBialejLiscie");
            entity.Property(e => e.Kwota).HasColumnType("money");
            entity.Property(e => e.NazwaDoPrzelewu)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NazwaKontrahenta)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nippeselkontrahenta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NIPPESELKontrahenta");
            entity.Property(e => e.NrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NumerRachunkuKontrahenta)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumerRachunkuKontrahentaHist)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumerRachunkuNaszego)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SymbolKontrahenta)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Tytul)
                .HasMaxLength(146)
                .IsUnicode(false);
            entity.Property(e => e.Vat)
                .HasColumnType("money")
                .HasColumnName("VAT");
            entity.Property(e => e.Waluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Wystawil)
                .HasMaxLength(51)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBibliotekaDokumentow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBibliotekaDokumentow");

            entity.Property(e => e.BibDataDodania)
                .HasColumnType("datetime")
                .HasColumnName("bib_DataDodania");
            entity.Property(e => e.BibDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("bib_DataModyfikacji");
            entity.Property(e => e.BibDodal).HasColumnName("bib_Dodal");
            entity.Property(e => e.BibEAkta).HasColumnName("bib_eAkta");
            entity.Property(e => e.BibEpodpis).HasColumnName("bib_EPodpis");
            entity.Property(e => e.BibId).HasColumnName("bib_Id");
            entity.Property(e => e.BibIdKategorii).HasColumnName("bib_IdKategorii");
            entity.Property(e => e.BibIdObiektu).HasColumnName("bib_IdObiektu");
            entity.Property(e => e.BibJestWbazie)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bib_JestWBazie");
            entity.Property(e => e.BibNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bib_Nazwa");
            entity.Property(e => e.BibNazwaObiektu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("bib_NazwaObiektu");
            entity.Property(e => e.BibOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bib_Opis");
            entity.Property(e => e.BibPodkategoria).HasColumnName("bib_Podkategoria");
            entity.Property(e => e.BibPowiazanyNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bib_PowiazanyNazwa");
            entity.Property(e => e.BibRozmiar)
                .HasColumnType("money")
                .HasColumnName("bib_Rozmiar");
            entity.Property(e => e.BibSciezkaDoPliku)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("bib_SciezkaDoPliku");
            entity.Property(e => e.BibStanowisko)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bib_Stanowisko");
            entity.Property(e => e.BibTyp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("bib_Typ");
            entity.Property(e => e.BibTypObiektu).HasColumnName("bib_TypObiektu");
            entity.Property(e => e.BibTypObiektuTxt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bib_TypObiektuTxt");
            entity.Property(e => e.BibWyeksportowany).HasColumnName("bib_Wyeksportowany");
            entity.Property(e => e.BibZablokowany).HasColumnName("bib_Zablokowany");
            entity.Property(e => e.BibZmodyfikowal).HasColumnName("bib_Zmodyfikowal");
            entity.Property(e => e.KdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kd_Nazwa");
            entity.Property(e => e.PmoNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pmo_Nazwa");
            entity.Property(e => e.UzUtwNazwiskoImie)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("uz_Utw_NazwiskoImie");
            entity.Property(e => e.UzZmodNazwiskoImie)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("uz_Zmod_NazwiskoImie");
        });

        modelBuilder.Entity<VwCelePrzetwarzanium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCelePrzetwarzania");

            entity.Property(e => e.CptCzasTrwania).HasColumnName("cpt_CzasTrwania");
            entity.Property(e => e.CptCzyAktywny).HasColumnName("cpt_CzyAktywny");
            entity.Property(e => e.CptCzyDrukowac).HasColumnName("cpt_CzyDrukowac");
            entity.Property(e => e.CptDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("cpt_DataZakonczenia");
            entity.Property(e => e.CptId).HasColumnName("cpt_Id");
            entity.Property(e => e.CptNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cpt_Nazwa");
            entity.Property(e => e.CptRodzOkresowosci).HasColumnName("cpt_RodzOkresowosci");
            entity.Property(e => e.CptTresc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("cpt_Tresc");
        });

        modelBuilder.Entity<VwCesje>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCesje");

            entity.Property(e => e.DowodKsiegowy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NzcId).HasColumnName("nzc_Id");
            entity.Property(e => e.NzcIdCesyjny).HasColumnName("nzc_IdCesyjny");
            entity.Property(e => e.NzcIdSplata).HasColumnName("nzc_IdSplata");
            entity.Property(e => e.NzcNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nzc_Numer");
            entity.Property(e => e.NzcRodzaj).HasColumnName("nzc_Rodzaj");
            entity.Property(e => e.NzcStatusKsieg).HasColumnName("nzc_StatusKsieg");
            entity.Property(e => e.NzcTyp).HasColumnName("nzc_Typ");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfIdKarta).HasColumnName("nzf_IdKarta");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
        });

        modelBuilder.Entity<VwDataDokHandlowego>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDataDokHandlowego");

            entity.Property(e => e.TypDaty).HasColumnName("TYP_DATY");
        });

        modelBuilder.Entity<VwDatyBlokad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDatyBlokad");

            entity.Property(e => e.BlBlokadaRew)
                .HasColumnType("datetime")
                .HasColumnName("bl_BlokadaRew");
            entity.Property(e => e.BlBlokadaSubiekt)
                .HasColumnType("datetime")
                .HasColumnName("bl_BlokadaSubiekt");
            entity.Property(e => e.BlId).HasColumnName("bl_Id");
            entity.Property(e => e.BlParamEwidId).HasColumnName("bl_ParamEwidId");
        });

        modelBuilder.Entity<VwDekl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDekl");

            entity.Property(e => e.DeCzyGlownyZal).HasColumnName("de_CzyGlownyZal");
            entity.Property(e => e.DeDataAktualizacji)
                .HasColumnType("datetime")
                .HasColumnName("de_DataAktualizacji");
            entity.Property(e => e.DeDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("de_DoZaplaty");
            entity.Property(e => e.DeDochodPrzychodPdstSklZdr)
                .HasColumnType("money")
                .HasColumnName("de_DochodPrzychodPdstSklZdr");
            entity.Property(e => e.DeId).HasColumnName("de_Id");
            entity.Property(e => e.DeIdDeklGlownej).HasColumnName("de_IdDeklGlownej");
            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeIdWzorca).HasColumnName("de_idWzorca");
            entity.Property(e => e.DeKorekta).HasColumnName("de_Korekta");
            entity.Property(e => e.DeNazwaObiektu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("de_NazwaObiektu");
            entity.Property(e => e.DeOkres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("de_Okres");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DeOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresOd");
            entity.Property(e => e.DePdstSkladkiZdrowotnej)
                .HasColumnType("money")
                .HasColumnName("de_PdstSkladkiZdrowotnej");
            entity.Property(e => e.DeTypObiektu).HasColumnName("de_TypObiektu");
            entity.Property(e => e.DeWersjaRobocza).HasColumnName("de_WersjaRobocza");
            entity.Property(e => e.WysStatus).HasColumnName("wys_Status");
        });

        modelBuilder.Entity<VwDeklZu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklZus");

            entity.Property(e => e.DznData)
                .HasColumnType("datetime")
                .HasColumnName("dzn_Data");
            entity.Property(e => e.DznFormat).HasColumnName("dzn_Format");
            entity.Property(e => e.DznId).HasColumnName("dzn_Id");
            entity.Property(e => e.DznMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("dzn_Miesiac");
            entity.Property(e => e.DznOpis)
                .HasMaxLength(321)
                .IsUnicode(false)
                .HasColumnName("dzn_Opis");
            entity.Property(e => e.DznTyp)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dzn_Typ");
            entity.Property(e => e.DznWyslane).HasColumnName("dzn_Wyslane");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyKwartVer1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyKwart_ver1");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_nrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyKwartVer2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyKwart_ver2");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_nrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyKwartVer3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyKwart_ver3");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyKwartVer4>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyKwart_ver4");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyKwartVer5>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyKwart_ver5");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyMiesVer1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyMies_ver1");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_nrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyMiesVer2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyMies_ver2");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_nrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyMiesVer3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyMies_ver3");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyMiesVer4>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyMies_ver4");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyMiesVer5>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_LiniowyMies_ver5");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBLiniowyVer6>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_Liniowy_ver6");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresKwartVer1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresKwart_ver1");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_nrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresKwartVer2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresKwart_ver2");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_nrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresKwartVer3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresKwart_ver3");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresKwartVer4>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresKwart_ver4");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresKwartVer5>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresKwart_ver5");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresMiesVer1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresMies_ver1");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_nrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresMiesVer2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresMies_ver2");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_nrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresMiesVer3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresMies_ver3");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.Miejsce)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Miejsce");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Regon)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_REGON");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresMiesVer4>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresMies_ver4");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresMiesVer5>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_ProgresMies_ver5");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDeklaracjePitBProgresVer6>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeklaracjePitB_Progres_ver6");

            entity.Property(e => e.DeIdObiektu).HasColumnName("de_IdObiektu");
            entity.Property(e => e.DeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("de_OkresDo");
            entity.Property(e => e.DpNrPola).HasColumnName("dp_NrPola");
            entity.Property(e => e.Koszty)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Koszty");
            entity.Property(e => e.NazwaPelna)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NazwaPelna");
            entity.Property(e => e.Nip)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_NIP");
            entity.Property(e => e.Przychod)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Przychod");
            entity.Property(e => e.Udzial)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("_Udzial");
        });

        modelBuilder.Entity<VwDekretBankowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDekretBankowy");

            entity.Property(e => e.DkrId).HasColumnName("dkr_Id");
            entity.Property(e => e.DkrIdDokImport).HasColumnName("dkr_IdDokImport");
            entity.Property(e => e.DkrNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dkr_NrPelny");
        });

        modelBuilder.Entity<VwDekretHandlowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDekretHandlowy");

            entity.Property(e => e.DkrId).HasColumnName("dkr_Id");
            entity.Property(e => e.DkrIdDokImport).HasColumnName("dkr_IdDokImport");
            entity.Property(e => e.DkrNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dkr_NrPelny");
        });

        modelBuilder.Entity<VwDekretKasowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDekretKasowy");

            entity.Property(e => e.DkrId).HasColumnName("dkr_Id");
            entity.Property(e => e.DkrIdDokImport).HasColumnName("dkr_IdDokImport");
            entity.Property(e => e.DkrNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dkr_NrPelny");
        });

        modelBuilder.Entity<VwDok4Fsfzgrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4FSFZGrid");

            entity.Property(e => e.DkpDataOtrzymaniaJakoDataDlaBlokadyOkresu).HasColumnName("dkp_DataOtrzymaniaJakoDataDlaBlokadyOkresu");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokBladKseF)
                .IsUnicode(false)
                .HasColumnName("dok_BladKSeF");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCzekaNaKseF).HasColumnName("dok_CzekaNaKSeF");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataNumeruKseF)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataNumeruKSeF");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokFormaDokumentowania).HasColumnName("dok_FormaDokumentowania");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestKseFupo).HasColumnName("dok_JestKSeFUPO");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKorNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_KorNrPelny");
            entity.Property(e => e.DokKorNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_KorNrPelnyOryg");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKartaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwKartaPrzedplata");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokKwWartoscWwalucie)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartoscWWalucie");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_NumerKSeF");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_Przedplata");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKseF).HasColumnName("dok_StatusKSeF");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.LspStatus).HasColumnName("lsp_Status");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwDok4FsfzgridSimple>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4FSFZGridSimple");

            entity.Property(e => e.DkpDataOtrzymaniaJakoDataDlaBlokadyOkresu).HasColumnName("dkp_DataOtrzymaniaJakoDataDlaBlokadyOkresu");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokBladKseF)
                .IsUnicode(false)
                .HasColumnName("dok_BladKSeF");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCzekaNaKseF).HasColumnName("dok_CzekaNaKSeF");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataNumeruKseF)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataNumeruKSeF");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokFormaDokumentowania).HasColumnName("dok_FormaDokumentowania");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestKseFupo).HasColumnName("dok_JestKSeFUPO");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKorNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_KorNrPelny");
            entity.Property(e => e.DokKorNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_KorNrPelnyOryg");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKartaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwKartaPrzedplata");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokKwWartoscWwalucie)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartoscWWalucie");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_NumerKSeF");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_Przedplata");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKseF).HasColumnName("dok_StatusKSeF");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.LspStatus).HasColumnName("lsp_Status");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwDok4Gtagrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4GTAGrid");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.Statusreal).HasColumnName("statusreal");
        });

        modelBuilder.Entity<VwDok4Ist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4IST");

            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdPanstwaKonsumenta).HasColumnName("dok_IdPanstwaKonsumenta");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwDok4Kfsgrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4KFSGrid");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokBladKseF)
                .IsUnicode(false)
                .HasColumnName("dok_BladKSeF");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokCzekaNaKseF).HasColumnName("dok_CzekaNaKSeF");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataNumeruKseF)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataNumeruKSeF");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataUjeciaKorekty)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataUjeciaKorekty");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokFormaDokumentowania).HasColumnName("dok_FormaDokumentowania");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestKseFupo).HasColumnName("dok_JestKSeFUPO");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKartaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwKartaPrzedplata");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokKwWartoscWwalucie)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartoscWWalucie");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_NumerKSeF");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_Przedplata");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKseF).HasColumnName("dok_StatusKSeF");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypDatyUjeciaKorekty).HasColumnName("dok_TypDatyUjeciaKorekty");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.LspStatus).HasColumnName("lsp_Status");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwDok4Kfzgrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4KFZGrid");

            entity.Property(e => e.DkpDataOtrzymaniaJakoDataDlaBlokadyOkresu).HasColumnName("dkp_DataOtrzymaniaJakoDataDlaBlokadyOkresu");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCzekaNaKseF).HasColumnName("dok_CzekaNaKSeF");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataNumeruKseF)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataNumeruKSeF");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataUjeciaKorekty)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataUjeciaKorekty");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDoDokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelnyOryg");
            entity.Property(e => e.DokFormaDokumentowania).HasColumnName("dok_FormaDokumentowania");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKartaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwKartaPrzedplata");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokKwWartoscWwalucie)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartoscWWalucie");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("dok_NumerKSeF");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_Przedplata");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKseF).HasColumnName("dok_StatusKSeF");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypDatyUjeciaKorekty).HasColumnName("dok_TypDatyUjeciaKorekty");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwDok4Pagrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4PAGrid");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKartaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwKartaPrzedplata");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_Przedplata");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.LspStatus).HasColumnName("lsp_Status");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwDok4ZamGrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4ZamGrid");

            entity.Property(e => e.Blokada).HasColumnName("blokada");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKartaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwKartaPrzedplata");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokKwWartoscWwalucie)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartoscWWalucie");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_Przedplata");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.LspStatus).HasColumnName("lsp_Status");
            entity.Property(e => e.PowDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("pow_DataWyst");
            entity.Property(e => e.PowNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pow_NrPelny");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.SsPrzetworzonoZkwZd).HasColumnName("ss_PrzetworzonoZKwZD");
            entity.Property(e => e.Statusreal).HasColumnName("statusreal");
            entity.Property(e => e.Statusrez).HasColumnName("statusrez");
            entity.Property(e => e.VenderoData2).HasColumnType("datetime");
            entity.Property(e => e.ZaliczkaZk)
                .HasColumnType("money")
                .HasColumnName("ZaliczkaZK");
            entity.Property(e => e.ZreKwWartosc)
                .HasColumnType("money")
                .HasColumnName("zre_KwWartosc");
        });

        modelBuilder.Entity<VwDok4ZamGridvenderoNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4ZamGridvenderoNO");

            entity.Property(e => e.Blokada).HasColumnName("blokada");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.PowDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("pow_DataWyst");
            entity.Property(e => e.PowNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pow_NrPelny");
            entity.Property(e => e.SsPrzetworzonoZkwZd).HasColumnName("ss_PrzetworzonoZKwZD");
            entity.Property(e => e.Statusreal).HasColumnName("statusreal");
            entity.Property(e => e.Statusrez).HasColumnName("statusrez");
            entity.Property(e => e.ZreKwWartosc)
                .HasColumnType("money")
                .HasColumnName("zre_KwWartosc");
        });

        modelBuilder.Entity<VwDok4ZamGridvenderoOp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4ZamGridvenderoOP");

            entity.Property(e => e.Blokada).HasColumnName("blokada");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.PowDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("pow_DataWyst");
            entity.Property(e => e.PowNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pow_NrPelny");
            entity.Property(e => e.SsPrzetworzonoZkwZd).HasColumnName("ss_PrzetworzonoZKwZD");
            entity.Property(e => e.Statusreal).HasColumnName("statusreal");
            entity.Property(e => e.Statusrez).HasColumnName("statusrez");
            entity.Property(e => e.ZreKwWartosc)
                .HasColumnType("money")
                .HasColumnName("zre_KwWartosc");
        });

        modelBuilder.Entity<VwDok4Zwgrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDok4ZWGrid");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKartaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwKartaPrzedplata");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_Przedplata");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwDokDoDekretacji>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokDoDekretacji");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(82)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhMiejscowosc)
                .HasMaxLength(40)
                .HasColumnName("adrh_Miejscowosc");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(144)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.KatId).HasColumnName("kat_Id");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(30)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.NazwaTypu)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.Si).HasColumnName("SI");
        });

        modelBuilder.Entity<VwDokDoEwidOsszest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokDoEwidOSSZest");

            entity.Property(e => e.DojEe).HasColumnName("doj_EE");
            entity.Property(e => e.DojSw).HasColumnName("doj_SW");
            entity.Property(e => e.DojWstoEe).HasColumnName("doj_WSTO_EE");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdPanstwoKonsumenta).HasColumnName("dok_IdPanstwoKonsumenta");
            entity.Property(e => e.DokInformacjeDodatkowe)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dok_InformacjeDodatkowe");
            entity.Property(e => e.DokKhAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("dok_KhAdres");
            entity.Property(e => e.DokKhGrupa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_KhGrupa");
            entity.Property(e => e.DokKhMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_KhMiejscowosc");
            entity.Property(e => e.DokKhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("dok_KhNazwa");
            entity.Property(e => e.DokKhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_KhSymbol");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokOznaczeniaJpk)
                .IsUnicode(false)
                .HasColumnName("dok_OznaczeniaJpk");
            entity.Property(e => e.DokPanstwoKonsumenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_PanstwoKonsumenta");
            entity.Property(e => e.DokPanstwoWysylki)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_PanstwoWysylki");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartBruttoWaluta)
                .HasColumnType("money")
                .HasColumnName("dok_WartBruttoWaluta");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartNettoWaluta)
                .HasColumnType("money")
                .HasColumnName("dok_WartNettoWaluta");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWartVatWaluta)
                .HasColumnType("money")
                .HasColumnName("dok_WartVatWaluta");
        });

        modelBuilder.Entity<VwDokFwpowiazane>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokFWPowiazane");

            entity.Property(e => e.FwnCenyPoziom).HasColumnName("fwn_CenyPoziom");
            entity.Property(e => e.FwnDataSprz)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataSprz");
            entity.Property(e => e.FwnDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataWyst");
            entity.Property(e => e.FwnDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DoDokDataWyst");
            entity.Property(e => e.FwnDoDokId).HasColumnName("fwn_DoDokId");
            entity.Property(e => e.FwnDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_DoDokNrPelny");
            entity.Property(e => e.FwnId).HasColumnName("fwn_Id");
            entity.Property(e => e.FwnJestVatAuto).HasColumnName("fwn_JestVatAuto");
            entity.Property(e => e.FwnKatId).HasColumnName("fwn_KatId");
            entity.Property(e => e.FwnKhntAdreshId).HasColumnName("fwn_KhntAdreshId");
            entity.Property(e => e.FwnKhntId).HasColumnName("fwn_KhntId");
            entity.Property(e => e.FwnKodRodzajuTransakcji).HasColumnName("fwn_KodRodzajuTransakcji");
            entity.Property(e => e.FwnKontrolaTyp).HasColumnName("fwn_KontrolaTyp");
            entity.Property(e => e.FwnKorDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_KorDataWyst");
            entity.Property(e => e.FwnKorId).HasColumnName("fwn_KorId");
            entity.Property(e => e.FwnKorNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_KorNrPelny");
            entity.Property(e => e.FwnMagId).HasColumnName("fwn_MagId");
            entity.Property(e => e.FwnMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_MscWyst");
            entity.Property(e => e.FwnNr).HasColumnName("fwn_Nr");
            entity.Property(e => e.FwnNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_NrPelny");
            entity.Property(e => e.FwnNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fwn_NrRoz");
            entity.Property(e => e.FwnOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_Odebral");
            entity.Property(e => e.FwnPersonelId).HasColumnName("fwn_PersonelId");
            entity.Property(e => e.FwnPodtyp).HasColumnName("fwn_Podtyp");
            entity.Property(e => e.FwnPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fwn_Podtytul");
            entity.Property(e => e.FwnRodzajOperacjiVat).HasColumnName("fwn_RodzajOperacjiVat");
            entity.Property(e => e.FwnStatus).HasColumnName("fwn_Status");
            entity.Property(e => e.FwnStatusKsieg).HasColumnName("fwn_StatusKsieg");
            entity.Property(e => e.FwnTyp).HasColumnName("fwn_Typ");
            entity.Property(e => e.FwnTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fwn_Tytul");
            entity.Property(e => e.FwnUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fwn_Uwagi");
            entity.Property(e => e.FwnVatTyp).HasColumnName("fwn_VatTyp");
            entity.Property(e => e.FwnWartBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartBrutto");
            entity.Property(e => e.FwnWartNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartNetto");
            entity.Property(e => e.FwnWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("fwn_WartOpWyd");
            entity.Property(e => e.FwnWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("fwn_WartOpZwr");
            entity.Property(e => e.FwnWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartTwBrutto");
            entity.Property(e => e.FwnWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartTwNetto");
            entity.Property(e => e.FwnWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartUsBrutto");
            entity.Property(e => e.FwnWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartUsNetto");
            entity.Property(e => e.FwnWartVat)
                .HasColumnType("money")
                .HasColumnName("fwn_WartVat");
            entity.Property(e => e.FwnWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_Wystawil");
            entity.Property(e => e.PowId).HasColumnName("pow_Id");
        });

        modelBuilder.Entity<VwDokKorKoszt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokKorKoszt");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDoDokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelnyOryg");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwDokLookupDlaKorekt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokLookupDlaKorekt");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
        });

        modelBuilder.Entity<VwDokLookupDlaKorektZak>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokLookupDlaKorektZak");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
        });

        modelBuilder.Entity<VwDokLookupSprzed>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokLookupSprzed");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
        });

        modelBuilder.Entity<VwDokMagWart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokMagWart");

            entity.Property(e => e.MwCena)
                .HasColumnType("money")
                .HasColumnName("mw_Cena");
            entity.Property(e => e.MwData)
                .HasColumnType("datetime")
                .HasColumnName("mw_Data");
            entity.Property(e => e.MwPozId).HasColumnName("mw_PozId");
            entity.Property(e => e.MwSeriaId).HasColumnName("mw_SeriaId");
        });

        modelBuilder.Entity<VwDokPowiazane>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokPowiazane");

            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.PowId).HasColumnName("pow_Id");
        });

        modelBuilder.Entity<VwDokPowiazaneInw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokPowiazaneInw");

            entity.Property(e => e.AdrhNazwa).HasColumnName("adrh_Nazwa");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokNrPelny).HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.IwPwId).HasColumnName("iw_PwId");
            entity.Property(e => e.IwRwId).HasColumnName("iw_RwId");
        });

        modelBuilder.Entity<VwDokPowiazaneZaliczki>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokPowiazaneZaliczki");

            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.PowId).HasColumnName("pow_Id");
        });

        modelBuilder.Entity<VwDokPozycjaFinalna>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokPozycjaFinalna");

            entity.Property(e => e.CenaPierwotna)
                .HasColumnType("money")
                .HasColumnName("cenaPierwotna");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObCenaMag)
                .HasColumnType("money")
                .HasColumnName("ob_CenaMag");
            entity.Property(e => e.ObCenaNetto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNetto");
            entity.Property(e => e.ObCenaWaluta)
                .HasColumnType("money")
                .HasColumnName("ob_CenaWaluta");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObRabat)
                .HasColumnType("money")
                .HasColumnName("ob_Rabat");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObVatProc)
                .HasColumnType("money")
                .HasColumnName("ob_VatProc");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwDokZwroty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dok_zwroty");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDoDokPodtyp).HasColumnName("dok_DoDokPodtyp");
            entity.Property(e => e.DokDoDokTyp).HasColumnName("dok_DoDokTyp");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.MDokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("m_dok_WartBrutto");
            entity.Property(e => e.MDokWartMag)
                .HasColumnType("money")
                .HasColumnName("m_dok_WartMag");
            entity.Property(e => e.MDokWartNetto)
                .HasColumnType("money")
                .HasColumnName("m_dok_WartNetto");
            entity.Property(e => e.MDokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("m_dok_WartTwBrutto");
            entity.Property(e => e.MDokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("m_dok_WartTwNetto");
        });

        modelBuilder.Entity<VwDokumInfTwKontrahenci>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokum_InfTwKontrahenci");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
        });

        modelBuilder.Entity<VwDokumentJestFsZalCzKfsCr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokumentJestFsZalCzKFS_CR");

            entity.Property(e => e.DokId).HasColumnName("dok_Id");
        });

        modelBuilder.Entity<VwDokumenty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokumenty");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_id");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrpelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_nrpelny");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObCenaNetto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNetto");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_jm");
            entity.Property(e => e.ObTowid).HasColumnName("ob_towid");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwDokumenty2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokumenty2");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObKategoriaId).HasColumnName("ob_KategoriaId");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
        });

        modelBuilder.Entity<VwDokumentyCzastkoweKfsCr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokumentyCzastkoweKFS_CR");

            entity.Property(e => e.DoDokId).HasColumnName("doDokId");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
        });

        modelBuilder.Entity<VwDokumentyFirmy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokumentyFirmy");

            entity.Property(e => e.DataDokumentu).HasColumnType("datetime");
            entity.Property(e => e.DataPrzeslania).HasColumnType("datetime");
            entity.Property(e => e.DataWystawienia).HasColumnType("datetime");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.MiesiacRozliczeniowy).HasColumnType("datetime");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Notatka)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.NumerDokumentu)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.NumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("NumerKSeF");
            entity.Property(e => e.RodzajFakturyKseF)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("RodzajFakturyKSeF");
            entity.Property(e => e.Sygnatura)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDokumentyPortalBiura>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDokumentyPortalBiura");

            entity.Property(e => e.DataDokumentu).HasColumnType("datetime");
            entity.Property(e => e.DataPrzeslania).HasColumnType("datetime");
            entity.Property(e => e.DataWystawienia).HasColumnType("datetime");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.MiesiacRozliczeniowy).HasColumnType("datetime");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Notatka)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.NumerDokumentu)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.NumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("NumerKSeF");
            entity.Property(e => e.RodzajFakturyKseF)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("RodzajFakturyKSeF");
        });

        modelBuilder.Entity<VwEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Email");

            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(311)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.EmAccount)
                .HasMaxLength(50)
                .HasColumnName("em_Account");
            entity.Property(e => e.EmAccountId).HasColumnName("em_AccountId");
            entity.Property(e => e.EmAttachements).HasColumnName("em_Attachements");
            entity.Property(e => e.EmAttachmentCount).HasColumnName("em_AttachmentCount");
            entity.Property(e => e.EmAuctionId).HasColumnName("em_AuctionId");
            entity.Property(e => e.EmBccTo)
                .HasMaxLength(1000)
                .HasColumnName("em_BccTo");
            entity.Property(e => e.EmCcTo)
                .HasMaxLength(1000)
                .HasColumnName("em_CcTo");
            entity.Property(e => e.EmCustomerId).HasColumnName("em_CustomerId");
            entity.Property(e => e.EmDeleteStat).HasColumnName("em_DeleteStat");
            entity.Property(e => e.EmDeletedFrom)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("em_DeletedFrom");
            entity.Property(e => e.EmDispositionNotification).HasColumnName("em_DispositionNotification");
            entity.Property(e => e.EmDzialanie).HasColumnName("em_Dzialanie");
            entity.Property(e => e.EmFlag).HasColumnName("em_Flag");
            entity.Property(e => e.EmFrom)
                .HasMaxLength(255)
                .HasColumnName("em_From");
            entity.Property(e => e.EmFromAddress)
                .HasMaxLength(255)
                .HasColumnName("em_FromAddress");
            entity.Property(e => e.EmFromName)
                .HasMaxLength(255)
                .HasColumnName("em_FromName");
            entity.Property(e => e.EmGroupId).HasColumnName("em_GroupId");
            entity.Property(e => e.EmHandled).HasColumnName("em_Handled");
            entity.Property(e => e.EmId).HasColumnName("em_Id");
            entity.Property(e => e.EmIsSpam).HasColumnName("em_IsSpam");
            entity.Property(e => e.EmPackageId).HasColumnName("em_PackageId");
            entity.Property(e => e.EmPriority).HasColumnName("em_Priority");
            entity.Property(e => e.EmPrivate).HasColumnName("em_Private");
            entity.Property(e => e.EmPrivateFor).HasColumnName("em_PrivateFor");
            entity.Property(e => e.EmRead).HasColumnName("em_Read");
            entity.Property(e => e.EmReceived)
                .HasColumnType("datetime")
                .HasColumnName("em_Received");
            entity.Property(e => e.EmReplyTo)
                .HasMaxLength(255)
                .HasColumnName("em_ReplyTo");
            entity.Property(e => e.EmSent)
                .HasColumnType("datetime")
                .HasColumnName("em_Sent");
            entity.Property(e => e.EmSourceSize).HasColumnName("em_SourceSize");
            entity.Property(e => e.EmStatus).HasColumnName("em_Status");
            entity.Property(e => e.EmSubject)
                .HasMaxLength(1000)
                .HasColumnName("em_Subject");
            entity.Property(e => e.EmTo)
                .HasMaxLength(1000)
                .HasColumnName("em_To");
            entity.Property(e => e.EmTransId).HasColumnName("em_TransId");
            entity.Property(e => e.EmTransakcja).HasColumnName("em_Transakcja");
            entity.Property(e => e.GwaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gwa_Nazwa");
            entity.Property(e => e.KhId).HasColumnName("kh_Id");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.KhTyp).HasColumnName("kh_Typ");
            entity.Property(e => e.TrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_Nazwa");
            entity.Property(e => e.TrSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_Symbol");
            entity.Property(e => e.ZdTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("zd_Temat");
        });

        modelBuilder.Entity<VwEmailTempl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_EmailTempl");

            entity.Property(e => e.EtHtml).HasColumnName("et_HTML");
            entity.Property(e => e.EtId).HasColumnName("et_Id");
            entity.Property(e => e.EtName)
                .HasMaxLength(50)
                .HasColumnName("et_Name");
            entity.Property(e => e.EtSubject)
                .HasMaxLength(1000)
                .HasColumnName("et_Subject");
        });

        modelBuilder.Entity<VwEwidVat4grid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEwidVAT4Grid");

            entity.Property(e => e.EvId2).HasColumnName("ev_Id_2");
            entity.Property(e => e.EvNrDokumentu2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ev_NrDokumentu_2");
        });

        modelBuilder.Entity<VwEwidVatzakupuOdliczanie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEwidVATZakupuOdliczanie");

            entity.Property(e => e.EvAutoPrzeliczaj).HasColumnName("ev_AutoPrzeliczaj");
            entity.Property(e => e.EvBrutto)
                .HasColumnType("money")
                .HasColumnName("ev_Brutto");
            entity.Property(e => e.EvCelZakupu).HasColumnName("ev_CelZakupu");
            entity.Property(e => e.EvDataPlatnosciRr)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataPlatnosciRR");
            entity.Property(e => e.EvDataSz)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataSZ");
            entity.Property(e => e.EvDataWpisu)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataWpisu");
            entity.Property(e => e.EvDataZakDostawy)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataZakDostawy");
            entity.Property(e => e.EvDokVatMarza).HasColumnName("ev_DokVatMarza");
            entity.Property(e => e.EvFakturaRr).HasColumnName("ev_FakturaRR");
            entity.Property(e => e.EvId).HasColumnName("ev_Id");
            entity.Property(e => e.EvIdDokImport).HasColumnName("ev_IdDokImport");
            entity.Property(e => e.EvIdDokVat).HasColumnName("ev_IdDokVAT");
            entity.Property(e => e.EvIdDokVatdod).HasColumnName("ev_IdDokVATDod");
            entity.Property(e => e.EvIdKategorii).HasColumnName("ev_IdKategorii");
            entity.Property(e => e.EvIdKh).HasColumnName("ev_IdKh");
            entity.Property(e => e.EvIdObiektu).HasColumnName("ev_IdObiektu");
            entity.Property(e => e.EvIdOkresuRoku).HasColumnName("ev_IdOkresuRoku");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiStatusuVat).HasColumnName("ev_IdOstatniWpisWeryfikacjiStatusuVAT");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiStatusuVies).HasColumnName("ev_IdOstatniWpisWeryfikacjiStatusuVIES");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiWykazPodatnikowVat).HasColumnName("ev_IdOstatniWpisWeryfikacjiWykazPodatnikowVAT");
            entity.Property(e => e.EvIdRachunkuZaPrzejazd).HasColumnName("ev_IdRachunkuZaPrzejazd");
            entity.Property(e => e.EvIdTerminPlatnosci).HasColumnName("ev_IdTerminPlatnosci");
            entity.Property(e => e.EvIdTypuEwidVat).HasColumnName("ev_IdTypuEwidVAT");
            entity.Property(e => e.EvImportPochodzenie).HasColumnName("ev_ImportPochodzenie");
            entity.Property(e => e.EvImportowany).HasColumnName("ev_Importowany");
            entity.Property(e => e.EvKodPocztowyKh)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ev_KodPocztowyKh");
            entity.Property(e => e.EvKorektaSn).HasColumnName("ev_KorektaSN");
            entity.Property(e => e.EvKorektaVatdataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATDataPlatnosci");
            entity.Property(e => e.EvKorektaVatdataWystawieniaDokKorygowany)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATDataWystawieniaDokKorygowany");
            entity.Property(e => e.EvKorektaVatidDokKorygowany).HasColumnName("ev_KorektaVATIdDokKorygowany");
            entity.Property(e => e.EvKorektaVatnrDokKorygowany)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ev_KorektaVATNrDokKorygowany");
            entity.Property(e => e.EvKorektaVatplatnoscCzesciowa).HasColumnName("ev_KorektaVATPlatnoscCzesciowa");
            entity.Property(e => e.EvKorektaVatterminKorekty)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATTerminKorekty");
            entity.Property(e => e.EvKorektaVatterminPlatnosciDokKorygowany)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATTerminPlatnosciDokKorygowany");
            entity.Property(e => e.EvKorektaVattyp).HasColumnName("ev_KorektaVATTyp");
            entity.Property(e => e.EvKsiegowany).HasColumnName("ev_Ksiegowany");
            entity.Property(e => e.EvKwotaVat)
                .HasColumnType("money")
                .HasColumnName("ev_KwotaVAT");
            entity.Property(e => e.EvMalyPojazd).HasColumnName("ev_MalyPojazd");
            entity.Property(e => e.EvMiastoKh)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ev_MiastoKh");
            entity.Property(e => e.EvMiesiacOdliczVat)
                .HasColumnType("datetime")
                .HasColumnName("ev_MiesiacOdliczVAT");
            entity.Property(e => e.EvNazwaKh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ev_NazwaKh");
            entity.Property(e => e.EvNazwaPelnaKh)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_NazwaPelnaKh");
            entity.Property(e => e.EvNetto)
                .HasColumnType("money")
                .HasColumnName("ev_Netto");
            entity.Property(e => e.EvNieWliczanyDoPb).HasColumnName("ev_NieWliczanyDoPB");
            entity.Property(e => e.EvNipkh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ev_NIPKh");
            entity.Property(e => e.EvNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ev_NrDokumentu");
            entity.Property(e => e.EvNrDokumentuSort)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_NrDokumentuSort");
            entity.Property(e => e.EvNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("ev_NumerKSeF");
            entity.Property(e => e.EvOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_Opis");
            entity.Property(e => e.EvPlatnoscKredyt).HasColumnName("ev_PlatnoscKredyt");
            entity.Property(e => e.EvPodtypDok).HasColumnName("ev_PodtypDok");
            entity.Property(e => e.EvPrzypadekSzczegolnyPit).HasColumnName("ev_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.EvRodzaj).HasColumnName("ev_Rodzaj");
            entity.Property(e => e.EvRodzajZakupu).HasColumnName("ev_RodzajZakupu");
            entity.Property(e => e.EvRozliczanaUsluga).HasColumnName("ev_RozliczanaUsluga");
            entity.Property(e => e.EvSposobOdliczania).HasColumnName("ev_SposobOdliczania");
            entity.Property(e => e.EvTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("ev_TerminPlatnosci");
            entity.Property(e => e.EvTransakcjaVat).HasColumnName("ev_TransakcjaVAT");
            entity.Property(e => e.EvTypDokImport).HasColumnName("ev_TypDokImport");
            entity.Property(e => e.EvTypObiektu).HasColumnName("ev_TypObiektu");
            entity.Property(e => e.EvUlicaKh)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ev_UlicaKh");
            entity.Property(e => e.EvUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ev_Uwagi");
            entity.Property(e => e.EvVatMetodaKasowa).HasColumnName("ev_VatMetodaKasowa");
            entity.Property(e => e.EvWartoscVatmarza)
                .HasColumnType("money")
                .HasColumnName("ev_WartoscVATMarza");
            entity.Property(e => e.EvWlaczKorygowanieVat).HasColumnName("ev_WlaczKorygowanieVAT");
            entity.Property(e => e.VatBezOdliczenia).HasColumnType("money");
            entity.Property(e => e.VatOdliczany).HasColumnType("money");
        });

        modelBuilder.Entity<VwFakturyWewnetrzneGrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFakturyWewnetrzneGrid");

            entity.Property(e => e.FwnCenyPoziom).HasColumnName("fwn_CenyPoziom");
            entity.Property(e => e.FwnDataSprz)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataSprz");
            entity.Property(e => e.FwnDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataWyst");
            entity.Property(e => e.FwnDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DoDokDataWyst");
            entity.Property(e => e.FwnDoDokId).HasColumnName("fwn_DoDokId");
            entity.Property(e => e.FwnDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_DoDokNrPelny");
            entity.Property(e => e.FwnId).HasColumnName("fwn_Id");
            entity.Property(e => e.FwnJestVatAuto).HasColumnName("fwn_JestVatAuto");
            entity.Property(e => e.FwnKatId).HasColumnName("fwn_KatId");
            entity.Property(e => e.FwnKhntAdreshId).HasColumnName("fwn_KhntAdreshId");
            entity.Property(e => e.FwnKhntId).HasColumnName("fwn_KhntId");
            entity.Property(e => e.FwnKodRodzajuTransakcji).HasColumnName("fwn_KodRodzajuTransakcji");
            entity.Property(e => e.FwnKontrolaTyp).HasColumnName("fwn_KontrolaTyp");
            entity.Property(e => e.FwnKorDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_KorDataWyst");
            entity.Property(e => e.FwnKorId).HasColumnName("fwn_KorId");
            entity.Property(e => e.FwnKorNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_KorNrPelny");
            entity.Property(e => e.FwnMagId).HasColumnName("fwn_MagId");
            entity.Property(e => e.FwnMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_MscWyst");
            entity.Property(e => e.FwnNr).HasColumnName("fwn_Nr");
            entity.Property(e => e.FwnNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_NrPelny");
            entity.Property(e => e.FwnNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_NrPelnyOryg");
            entity.Property(e => e.FwnNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fwn_NrRoz");
            entity.Property(e => e.FwnOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_Odebral");
            entity.Property(e => e.FwnPersonelId).HasColumnName("fwn_PersonelId");
            entity.Property(e => e.FwnPodpisanoElektronicznie).HasColumnName("fwn_PodpisanoElektronicznie");
            entity.Property(e => e.FwnPodtyp).HasColumnName("fwn_Podtyp");
            entity.Property(e => e.FwnPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fwn_Podtytul");
            entity.Property(e => e.FwnRodzajOperacjiVat).HasColumnName("fwn_RodzajOperacjiVat");
            entity.Property(e => e.FwnStatus).HasColumnName("fwn_Status");
            entity.Property(e => e.FwnStatusKsieg).HasColumnName("fwn_StatusKsieg");
            entity.Property(e => e.FwnTyp).HasColumnName("fwn_Typ");
            entity.Property(e => e.FwnTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fwn_Tytul");
            entity.Property(e => e.FwnUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fwn_Uwagi");
            entity.Property(e => e.FwnVatTyp).HasColumnName("fwn_VatTyp");
            entity.Property(e => e.FwnWartBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartBrutto");
            entity.Property(e => e.FwnWartNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartNetto");
            entity.Property(e => e.FwnWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("fwn_WartOpWyd");
            entity.Property(e => e.FwnWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("fwn_WartOpZwr");
            entity.Property(e => e.FwnWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartTwBrutto");
            entity.Property(e => e.FwnWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartTwNetto");
            entity.Property(e => e.FwnWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartUsBrutto");
            entity.Property(e => e.FwnWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartUsNetto");
            entity.Property(e => e.FwnWartVat)
                .HasColumnType("money")
                .HasColumnName("fwn_WartVat");
            entity.Property(e => e.FwnWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_Wystawil");
        });

        modelBuilder.Entity<VwFakturyWewnetrzneGridSub>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFakturyWewnetrzneGridSub");

            entity.Property(e => e.FwnCenyPoziom).HasColumnName("fwn_CenyPoziom");
            entity.Property(e => e.FwnDataSprz)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataSprz");
            entity.Property(e => e.FwnDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataWyst");
            entity.Property(e => e.FwnDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DoDokDataWyst");
            entity.Property(e => e.FwnDoDokId).HasColumnName("fwn_DoDokId");
            entity.Property(e => e.FwnDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_DoDokNrPelny");
            entity.Property(e => e.FwnId).HasColumnName("fwn_Id");
            entity.Property(e => e.FwnJestVatAuto).HasColumnName("fwn_JestVatAuto");
            entity.Property(e => e.FwnKatId).HasColumnName("fwn_KatId");
            entity.Property(e => e.FwnKhntAdreshId).HasColumnName("fwn_KhntAdreshId");
            entity.Property(e => e.FwnKhntId).HasColumnName("fwn_KhntId");
            entity.Property(e => e.FwnKodRodzajuTransakcji).HasColumnName("fwn_KodRodzajuTransakcji");
            entity.Property(e => e.FwnKontrolaTyp).HasColumnName("fwn_KontrolaTyp");
            entity.Property(e => e.FwnKorDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_KorDataWyst");
            entity.Property(e => e.FwnKorId).HasColumnName("fwn_KorId");
            entity.Property(e => e.FwnKorNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_KorNrPelny");
            entity.Property(e => e.FwnMagId).HasColumnName("fwn_MagId");
            entity.Property(e => e.FwnMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_MscWyst");
            entity.Property(e => e.FwnNr).HasColumnName("fwn_Nr");
            entity.Property(e => e.FwnNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_NrPelny");
            entity.Property(e => e.FwnNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_NrPelnyOryg");
            entity.Property(e => e.FwnNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fwn_NrRoz");
            entity.Property(e => e.FwnOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_Odebral");
            entity.Property(e => e.FwnPersonelId).HasColumnName("fwn_PersonelId");
            entity.Property(e => e.FwnPodpisanoElektronicznie).HasColumnName("fwn_PodpisanoElektronicznie");
            entity.Property(e => e.FwnPodtyp).HasColumnName("fwn_Podtyp");
            entity.Property(e => e.FwnPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fwn_Podtytul");
            entity.Property(e => e.FwnRodzajOperacjiVat).HasColumnName("fwn_RodzajOperacjiVat");
            entity.Property(e => e.FwnStatus).HasColumnName("fwn_Status");
            entity.Property(e => e.FwnStatusKsieg).HasColumnName("fwn_StatusKsieg");
            entity.Property(e => e.FwnTyp).HasColumnName("fwn_Typ");
            entity.Property(e => e.FwnTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fwn_Tytul");
            entity.Property(e => e.FwnUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fwn_Uwagi");
            entity.Property(e => e.FwnVatTyp).HasColumnName("fwn_VatTyp");
            entity.Property(e => e.FwnWartBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartBrutto");
            entity.Property(e => e.FwnWartNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartNetto");
            entity.Property(e => e.FwnWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("fwn_WartOpWyd");
            entity.Property(e => e.FwnWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("fwn_WartOpZwr");
            entity.Property(e => e.FwnWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartTwBrutto");
            entity.Property(e => e.FwnWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartTwNetto");
            entity.Property(e => e.FwnWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartUsBrutto");
            entity.Property(e => e.FwnWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartUsNetto");
            entity.Property(e => e.FwnWartVat)
                .HasColumnType("money")
                .HasColumnName("fwn_WartVat");
            entity.Property(e => e.FwnWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("fwn_Wystawil");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.SsTypObiektu).HasColumnName("ss_typ_obiektu");
            entity.Property(e => e.SsTypObiektuEx).HasColumnName("ss_typ_obiektu_ex");
        });

        modelBuilder.Entity<VwFeniksCechaTw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksCechaTw");
        });

        modelBuilder.Entity<VwFeniksCenaTw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksCenaTw");

            entity.Property(e => e.ParMultiStoreId1).HasColumnName("par_MultiStoreId1");
            entity.Property(e => e.ParMultiStoreId10).HasColumnName("par_MultiStoreId10");
            entity.Property(e => e.ParMultiStoreId2).HasColumnName("par_MultiStoreId2");
            entity.Property(e => e.ParMultiStoreId3).HasColumnName("par_MultiStoreId3");
            entity.Property(e => e.ParMultiStoreId4).HasColumnName("par_MultiStoreId4");
            entity.Property(e => e.ParMultiStoreId5).HasColumnName("par_MultiStoreId5");
            entity.Property(e => e.ParMultiStoreId6).HasColumnName("par_MultiStoreId6");
            entity.Property(e => e.ParMultiStoreId7).HasColumnName("par_MultiStoreId7");
            entity.Property(e => e.ParMultiStoreId8).HasColumnName("par_MultiStoreId8");
            entity.Property(e => e.ParMultiStoreId9).HasColumnName("par_MultiStoreId9");
            entity.Property(e => e.TcCenaBrutto1)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto1");
            entity.Property(e => e.TcCenaBrutto10)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto10");
            entity.Property(e => e.TcCenaBrutto2)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto2");
            entity.Property(e => e.TcCenaBrutto3)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto3");
            entity.Property(e => e.TcCenaBrutto4)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto4");
            entity.Property(e => e.TcCenaBrutto5)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto5");
            entity.Property(e => e.TcCenaBrutto6)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto6");
            entity.Property(e => e.TcCenaBrutto7)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto7");
            entity.Property(e => e.TcCenaBrutto8)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto8");
            entity.Property(e => e.TcCenaBrutto9)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto9");
            entity.Property(e => e.TcCenaNetto1)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto1");
            entity.Property(e => e.TcCenaNetto10)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto10");
            entity.Property(e => e.TcCenaNetto2)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto2");
            entity.Property(e => e.TcCenaNetto3)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto3");
            entity.Property(e => e.TcCenaNetto4)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto4");
            entity.Property(e => e.TcCenaNetto5)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto5");
            entity.Property(e => e.TcCenaNetto6)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto6");
            entity.Property(e => e.TcCenaNetto7)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto7");
            entity.Property(e => e.TcCenaNetto8)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto8");
            entity.Property(e => e.TcCenaNetto9)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto9");
            entity.Property(e => e.TcDataKursuWaluty)
                .HasColumnType("datetime")
                .HasColumnName("tc_DataKursuWaluty");
            entity.Property(e => e.TcIdWaluta1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta1");
            entity.Property(e => e.TcIdWaluta10)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta10");
            entity.Property(e => e.TcIdWaluta2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta2");
            entity.Property(e => e.TcIdWaluta3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta3");
            entity.Property(e => e.TcIdWaluta4)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta4");
            entity.Property(e => e.TcIdWaluta5)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta5");
            entity.Property(e => e.TcIdWaluta6)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta6");
            entity.Property(e => e.TcIdWaluta7)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta7");
            entity.Property(e => e.TcIdWaluta8)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta8");
            entity.Property(e => e.TcIdWaluta9)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta9");
            entity.Property(e => e.TcKursWaluty1).HasColumnName("tc_KursWaluty1");
            entity.Property(e => e.TcKursWaluty10).HasColumnName("tc_KursWaluty10");
            entity.Property(e => e.TcKursWaluty2).HasColumnName("tc_KursWaluty2");
            entity.Property(e => e.TcKursWaluty3).HasColumnName("tc_KursWaluty3");
            entity.Property(e => e.TcKursWaluty4).HasColumnName("tc_KursWaluty4");
            entity.Property(e => e.TcKursWaluty5).HasColumnName("tc_KursWaluty5");
            entity.Property(e => e.TcKursWaluty6).HasColumnName("tc_KursWaluty6");
            entity.Property(e => e.TcKursWaluty7).HasColumnName("tc_KursWaluty7");
            entity.Property(e => e.TcKursWaluty8).HasColumnName("tc_KursWaluty8");
            entity.Property(e => e.TcKursWaluty9).HasColumnName("tc_KursWaluty9");
        });

        modelBuilder.Entity<VwFeniksDokumentSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksDokumentSync");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FirstDocId).HasColumnName("firstDocId");
            entity.Property(e => e.FirstDocNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("firstDocNrPelny");
            entity.Property(e => e.FirstDocRealisationDocumentNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("firstDocRealisationDocumentNumber");
            entity.Property(e => e.FirstDocStatus).HasColumnName("firstDocStatus");
            entity.Property(e => e.FirstDocTyp).HasColumnName("firstDocTyp");
            entity.Property(e => e.IsPaid).HasColumnName("isPaid");
            entity.Property(e => e.SecondDocId).HasColumnName("secondDocId");
            entity.Property(e => e.SecondDocNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("secondDocNrPelny");
            entity.Property(e => e.SecondDocStatus).HasColumnName("secondDocStatus");
            entity.Property(e => e.SecondDocTyp).HasColumnName("secondDocTyp");
        });

        modelBuilder.Entity<VwFeniksFirmaSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksFirmaSync");

            entity.Property(e => e.AdrAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adr_Adres");
            entity.Property(e => e.AdrFaks)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("adr_Faks");
            entity.Property(e => e.AdrGmina)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Gmina");
            entity.Property(e => e.AdrKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("adr_Kod");
            entity.Property(e => e.AdrMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Miejscowosc");
            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.AdrNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("adr_NazwaPelna");
            entity.Property(e => e.AdrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adr_NIP");
            entity.Property(e => e.AdrNrDomu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("adr_NrDomu");
            entity.Property(e => e.AdrNrLokalu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("adr_NrLokalu");
            entity.Property(e => e.AdrPoczta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Poczta");
            entity.Property(e => e.AdrPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Powiat");
            entity.Property(e => e.AdrSkrytka)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("adr_Skrytka");
            entity.Property(e => e.AdrSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adr_Symbol");
            entity.Property(e => e.AdrTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("adr_Telefon");
            entity.Property(e => e.AdrUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("adr_Ulica");
            entity.Property(e => e.MtLastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastChangeDate");
            entity.Property(e => e.MtLastSynchDate)
                .HasColumnType("datetime")
                .HasColumnName("mt_LastSynchDate");
            entity.Property(e => e.MtStateId).HasColumnName("mt_StateId");
            entity.Property(e => e.NazwaBanku)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NazwaPanstwa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NazwaRachunku)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NazwaWojewodztwa)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PdEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("pd_Email");
            entity.Property(e => e.PdRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pd_Regon");
            entity.Property(e => e.PdWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pd_WWW");
        });

        modelBuilder.Entity<VwFeniksGrupaTwSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksGrupaTwSync");

            entity.Property(e => e.GrtId).HasColumnName("grt_Id");
            entity.Property(e => e.GrtNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("grt_Nazwa");
            entity.Property(e => e.GrtNrAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("grt_NrAnalityka");
        });

        modelBuilder.Entity<VwFeniksJednostkaMiaryTwSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksJednostkaMiaryTwSync");

            entity.Property(e => e.PrzelicznikJednostki).HasColumnType("money");
            entity.Property(e => e.SymbolJednostki)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFeniksKategoriaSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksKategoriaSync");

            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.KatPodtytul)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("kat_Podtytul");
        });

        modelBuilder.Entity<VwFeniksKontrahentSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksKontrahentSync");

            entity.Property(e => e.AddressCity)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.AddressCountry)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressCounty)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLocalNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AddressPostCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.AddressStreet)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AddressStreetNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CustomerEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CustomerFullName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.CustomerNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustomerNIP");
            entity.Property(e => e.CustomerPhone)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.CustomerRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustomerREGON");
            entity.Property(e => e.CustomerSymbol)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CustomerWWW");
        });

        modelBuilder.Entity<VwFeniksMagazynSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksMagazynSync");

            entity.Property(e => e.MagAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mag_Analityka");
            entity.Property(e => e.MagGlowny).HasColumnName("mag_Glowny");
            entity.Property(e => e.MagId).HasColumnName("mag_Id");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.MagOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_Opis");
            entity.Property(e => e.MagPos).HasColumnName("mag_POS");
            entity.Property(e => e.MagStatus).HasColumnName("mag_Status");
            entity.Property(e => e.MagSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("mag_Symbol");
        });

        modelBuilder.Entity<VwFeniksParametrSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksParametrSync");

            entity.Property(e => e.MtMultiStoreGrupaId).HasColumnName("mt_MultiStoreGrupaId");
            entity.Property(e => e.MtSubiektGrupaId).HasColumnName("mt_SubiektGrupaId");
            entity.Property(e => e.TwpId).HasColumnName("twp_Id");
            entity.Property(e => e.TwpNazwa1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa1");
            entity.Property(e => e.TwpNazwa2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa2");
            entity.Property(e => e.TwpNazwa3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa3");
            entity.Property(e => e.TwpNazwa4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa4");
            entity.Property(e => e.TwpNazwa5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa5");
            entity.Property(e => e.TwpNazwa6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa6");
            entity.Property(e => e.TwpNazwa7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa7");
            entity.Property(e => e.TwpNazwa8)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa8");
            entity.Property(e => e.TwpNazwaCeny1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny1");
            entity.Property(e => e.TwpNazwaCeny10)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny10");
            entity.Property(e => e.TwpNazwaCeny2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny2");
            entity.Property(e => e.TwpNazwaCeny3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny3");
            entity.Property(e => e.TwpNazwaCeny4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny4");
            entity.Property(e => e.TwpNazwaCeny5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny5");
            entity.Property(e => e.TwpNazwaCeny6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny6");
            entity.Property(e => e.TwpNazwaCeny7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny7");
            entity.Property(e => e.TwpNazwaCeny8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny8");
            entity.Property(e => e.TwpNazwaCeny9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("twp_NazwaCeny9");
            entity.Property(e => e.TwpWalutaCeny1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny1");
            entity.Property(e => e.TwpWalutaCeny10)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny10");
            entity.Property(e => e.TwpWalutaCeny2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny2");
            entity.Property(e => e.TwpWalutaCeny3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny3");
            entity.Property(e => e.TwpWalutaCeny4)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny4");
            entity.Property(e => e.TwpWalutaCeny5)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny5");
            entity.Property(e => e.TwpWalutaCeny6)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny6");
            entity.Property(e => e.TwpWalutaCeny7)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny7");
            entity.Property(e => e.TwpWalutaCeny8)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny8");
            entity.Property(e => e.TwpWalutaCeny9)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("twp_WalutaCeny9");
        });

        modelBuilder.Entity<VwFeniksPlatnoscSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksPlatnoscSync");

            entity.Property(e => e.FpAktywna).HasColumnName("fp_Aktywna");
            entity.Property(e => e.FpCentId).HasColumnName("fp_CentId");
            entity.Property(e => e.FpFormaPlatnosciWysylajJako).HasColumnName("fp_FormaPlatnosciWysylajJako");
            entity.Property(e => e.FpGlowna).HasColumnName("fp_Glowna");
            entity.Property(e => e.FpId).HasColumnName("fp_Id");
            entity.Property(e => e.FpInstKredytId).HasColumnName("fp_InstKredytId");
            entity.Property(e => e.FpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fp_Nazwa");
            entity.Property(e => e.FpOpisPlatnosciInna)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("fp_OpisPlatnosciInna");
            entity.Property(e => e.FpRachBankId).HasColumnName("fp_RachBankId");
            entity.Property(e => e.FpTermin).HasColumnName("fp_Termin");
            entity.Property(e => e.FpTerminalPlatniczy).HasColumnName("fp_TerminalPlatniczy");
            entity.Property(e => e.FpTyp).HasColumnName("fp_Typ");
        });

        modelBuilder.Entity<VwFeniksPoleWlasneSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksPoleWlasneSync");

            entity.Property(e => e.TwpId).HasColumnName("twp_Id");
            entity.Property(e => e.TwpNazwa1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa1");
            entity.Property(e => e.TwpNazwa2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa2");
            entity.Property(e => e.TwpNazwa3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa3");
            entity.Property(e => e.TwpNazwa4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa4");
            entity.Property(e => e.TwpNazwa5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa5");
            entity.Property(e => e.TwpNazwa6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa6");
            entity.Property(e => e.TwpNazwa7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa7");
            entity.Property(e => e.TwpNazwa8)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("twp_Nazwa8");
        });

        modelBuilder.Entity<VwFeniksProducentSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksProducentSync");

            entity.Property(e => e.AdrFaks)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("adr_Faks");
            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.AdrNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("adr_NazwaPelna");
            entity.Property(e => e.AdrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adr_NIP");
            entity.Property(e => e.AdrTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("adr_Telefon");
            entity.Property(e => e.KhEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_EMail");
            entity.Property(e => e.KhRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_REGON");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.KhWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_WWW");
        });

        modelBuilder.Entity<VwFeniksPromocjaPoziomCenSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksPromocjaPoziomCenSync");
        });

        modelBuilder.Entity<VwFeniksPromocjaSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksPromocjaSync");

            entity.Property(e => e.PromotionDescription)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PromotionFrom).HasColumnType("datetime");
            entity.Property(e => e.PromotionName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PromotionPercentDiscount).HasColumnType("money");
            entity.Property(e => e.PromotionSymbol)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PromotionTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwFeniksPromocjaTowarSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksPromocjaTowarSync");
        });

        modelBuilder.Entity<VwFeniksSlCechaTwSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksSlCechaTwSync");

            entity.Property(e => e.CtwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ctw_Nazwa");
        });

        modelBuilder.Entity<VwFeniksSlModelTwSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksSlModelTwSync");

            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFeniksSlRabatSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksSlRabatSync");

            entity.Property(e => e.NazwaRabatu)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcentRabatu).HasColumnType("money");
        });

        modelBuilder.Entity<VwFeniksSlWalutaSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksSlWalutaSync");

            entity.Property(e => e.WlAktywna).HasColumnName("wl_Aktywna");
            entity.Property(e => e.WlLiczbaJednostek).HasColumnName("wl_LiczbaJednostek");
            entity.Property(e => e.WlNazwa)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("wl_Nazwa");
            entity.Property(e => e.WlSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("wl_Symbol");
        });

        modelBuilder.Entity<VwFeniksSlWlasciwoscCechaTwSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksSlWlasciwoscCechaTwSync");
        });

        modelBuilder.Entity<VwFeniksSlWlasciwoscTwSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksSlWlasciwoscTwSync");

            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFeniksStanSync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksStanSync");

            entity.Property(e => e.MtMultiStoreTowarId).HasColumnName("mt_MultiStoreTowarId");
            entity.Property(e => e.MtMultiStoreWarehouseId).HasColumnName("mt_MultiStoreWarehouseId");
            entity.Property(e => e.MtSubiektProductId).HasColumnName("mt_SubiektProductId");
            entity.Property(e => e.MtSubiektWarehouseId).HasColumnName("mt_SubiektWarehouseId");
            entity.Property(e => e.StStan)
                .HasColumnType("money")
                .HasColumnName("st_Stan");
        });

        modelBuilder.Entity<VwFeniksStawkaVatsync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksStawkaVATSync");

            entity.Property(e => e.VatCzySystemowa).HasColumnName("vat_CzySystemowa");
            entity.Property(e => e.VatCzyWidoczna).HasColumnName("vat_CzyWidoczna");
            entity.Property(e => e.VatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vat_Nazwa");
            entity.Property(e => e.VatPozDomyslna).HasColumnName("vat_PozDomyslna");
            entity.Property(e => e.VatPozRr).HasColumnName("vat_PozRR");
            entity.Property(e => e.VatPozSprzedaz).HasColumnName("vat_PozSprzedaz");
            entity.Property(e => e.VatPozZakup).HasColumnName("vat_PozZakup");
            entity.Property(e => e.VatPozycja).HasColumnName("vat_Pozycja");
            entity.Property(e => e.VatRodzaj).HasColumnName("vat_Rodzaj");
            entity.Property(e => e.VatStawka)
                .HasColumnType("money")
                .HasColumnName("vat_Stawka");
            entity.Property(e => e.VatSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vat_Symbol");
        });

        modelBuilder.Entity<VwFeniksTowarKodySync>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFeniksTowarKodySync");

            entity.Property(e => e.KodBloz12)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("KodBLOZ12");
            entity.Property(e => e.KodBloz7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("KodBLOZ7");
            entity.Property(e => e.KodEan)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KodEAN");
            entity.Property(e => e.KodIsbn)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("KodISBN");
            entity.Property(e => e.KodUproducenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("KodUProducenta");
            entity.Property(e => e.Producent)
                .HasMaxLength(53)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFinanseBankRazem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseBankRazem");

            entity.Property(e => e.DeId).HasColumnName("de_Id");
            entity.Property(e => e.JestNaWyciagu).HasColumnName("jest_na_wyciagu");
            entity.Property(e => e.KhrDataWeryfikacji)
                .HasColumnType("datetime")
                .HasColumnName("khr_DataWeryfikacji");
            entity.Property(e => e.KhrNaBialejLiscie).HasColumnName("khr_NaBialejLiscie");
            entity.Property(e => e.NrWyciagu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nr_wyciagu");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdSesjiKasowej).HasColumnName("nzf_IdSesjiKasowej");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfKwotaRachunkuVat)
                .HasColumnType("money")
                .HasColumnName("nzf_KwotaRachunkuVAT");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Opis");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpierwotny)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotny");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWyslanaHb).HasColumnName("nzf_WyslanaHB");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.PowiazanieZtransakcja).HasColumnName("PowiazanieZTransakcja");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.Wplata)
                .HasColumnType("money")
                .HasColumnName("wplata");
            entity.Property(e => e.WplataWaluta)
                .HasColumnType("money")
                .HasColumnName("wplataWaluta");
            entity.Property(e => e.Wyplata)
                .HasColumnType("money")
                .HasColumnName("wyplata");
            entity.Property(e => e.WyplataWaluta)
                .HasColumnType("money")
                .HasColumnName("wyplataWaluta");
        });

        modelBuilder.Entity<VwFinanseBankRazemRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseBankRazemRew");

            entity.Property(e => e.DeId).HasColumnName("de_Id");
            entity.Property(e => e.JestNaWyciagu).HasColumnName("jest_na_wyciagu");
            entity.Property(e => e.KhrDataWeryfikacji)
                .HasColumnType("datetime")
                .HasColumnName("khr_DataWeryfikacji");
            entity.Property(e => e.KhrNaBialejLiscie).HasColumnName("khr_NaBialejLiscie");
            entity.Property(e => e.NrWyciagu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nr_wyciagu");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdSesjiKasowej).HasColumnName("nzf_IdSesjiKasowej");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfKwotaRachunkuVat)
                .HasColumnType("money")
                .HasColumnName("nzf_KwotaRachunkuVAT");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Opis");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpierwotny)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotny");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWyslanaHb).HasColumnName("nzf_WyslanaHB");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.PowiazanieZtransakcja).HasColumnName("PowiazanieZTransakcja");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.Wplata)
                .HasColumnType("money")
                .HasColumnName("wplata");
            entity.Property(e => e.WplataWaluta)
                .HasColumnType("money")
                .HasColumnName("wplataWaluta");
            entity.Property(e => e.Wyplata)
                .HasColumnType("money")
                .HasColumnName("wyplata");
            entity.Property(e => e.WyplataWaluta)
                .HasColumnType("money")
                .HasColumnName("wyplataWaluta");
        });

        modelBuilder.Entity<VwFinanseDekrety>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseDekrety");

            entity.Property(e => e.DkoKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dko_Konto");
            entity.Property(e => e.DkrNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dkr_NrPelny");
            entity.Property(e => e.NzdIdDekretu).HasColumnName("nzd_IdDekretu");
            entity.Property(e => e.NzdIdRozrachunku).HasColumnName("nzd_IdRozrachunku");
        });

        modelBuilder.Entity<VwFinanseDekretyKompensat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseDekretyKompensat");

            entity.Property(e => e.DkrDataDekretacji)
                .HasColumnType("datetime")
                .HasColumnName("dkr_DataDekretacji");
            entity.Property(e => e.DkrDataDokumentu)
                .HasColumnType("datetime")
                .HasColumnName("dkr_DataDokumentu");
            entity.Property(e => e.DkrDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dkr_DataKursu");
            entity.Property(e => e.DkrDataOperacji)
                .HasColumnType("datetime")
                .HasColumnName("dkr_DataOperacji");
            entity.Property(e => e.DkrDekretowal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dkr_Dekretowal");
            entity.Property(e => e.DkrDokumentZrodlowy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dkr_DokumentZrodlowy");
            entity.Property(e => e.DkrId).HasColumnName("dkr_Id");
            entity.Property(e => e.DkrIdBanku).HasColumnName("dkr_IdBanku");
            entity.Property(e => e.DkrIdDokImport).HasColumnName("dkr_IdDokImport");
            entity.Property(e => e.DkrIdKategorii).HasColumnName("dkr_IdKategorii");
            entity.Property(e => e.DkrIdKh).HasColumnName("dkr_IdKh");
            entity.Property(e => e.DkrIdObiektu).HasColumnName("dkr_IdObiektu");
            entity.Property(e => e.DkrIdRoku).HasColumnName("dkr_IdRoku");
            entity.Property(e => e.DkrImportPochodzenie).HasColumnName("dkr_ImportPochodzenie");
            entity.Property(e => e.DkrKontrolaBilansowania).HasColumnName("dkr_KontrolaBilansowania");
            entity.Property(e => e.DkrKsiegowal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dkr_Ksiegowal");
            entity.Property(e => e.DkrKursDokumentu)
                .HasColumnType("money")
                .HasColumnName("dkr_KursDokumentu");
            entity.Property(e => e.DkrKwota)
                .HasColumnType("money")
                .HasColumnName("dkr_Kwota");
            entity.Property(e => e.DkrKwotaMa)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaMa");
            entity.Property(e => e.DkrKwotaWaluta)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaWaluta");
            entity.Property(e => e.DkrKwotaWalutaMa)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaWalutaMa");
            entity.Property(e => e.DkrKwotaWalutaWn)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaWalutaWn");
            entity.Property(e => e.DkrKwotaWn)
                .HasColumnType("money")
                .HasColumnName("dkr_KwotaWn");
            entity.Property(e => e.DkrLiczbaJednostek).HasColumnName("dkr_LiczbaJednostek");
            entity.Property(e => e.DkrNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dkr_NrPelny");
            entity.Property(e => e.DkrNrWdzienniku).HasColumnName("dkr_NrWDzienniku");
            entity.Property(e => e.DkrNumer).HasColumnName("dkr_Numer");
            entity.Property(e => e.DkrOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dkr_Opis");
            entity.Property(e => e.DkrPodtyp).HasColumnName("dkr_Podtyp");
            entity.Property(e => e.DkrRejestr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dkr_Rejestr");
            entity.Property(e => e.DkrRodzajDowodu).HasColumnName("dkr_RodzajDowodu");
            entity.Property(e => e.DkrRodzajKursu).HasColumnName("dkr_RodzajKursu");
            entity.Property(e => e.DkrStatus).HasColumnName("dkr_Status");
            entity.Property(e => e.DkrStorno).HasColumnName("dkr_Storno");
            entity.Property(e => e.DkrSymbolKh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dkr_SymbolKh");
            entity.Property(e => e.DkrTrybWprowadzaniaRozrachunkow).HasColumnName("dkr_TrybWprowadzaniaRozrachunkow");
            entity.Property(e => e.DkrTypDokImport).HasColumnName("dkr_TypDokImport");
            entity.Property(e => e.DkrTypObiektu).HasColumnName("dkr_TypObiektu");
            entity.Property(e => e.DkrUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dkr_Uwagi");
            entity.Property(e => e.DkrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dkr_Waluta");
            entity.Property(e => e.DkrWalutaKursWyswietlany)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dkr_WalutaKursWyswietlany");
            entity.Property(e => e.DkrWalutaWyswietlana)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("dkr_WalutaWyswietlana");
        });

        modelBuilder.Entity<VwFinanseDekretyWszystkie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseDekretyWszystkie");

            entity.Property(e => e.DkoKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dko_Konto");
            entity.Property(e => e.DkrId).HasColumnName("dkr_Id");
            entity.Property(e => e.DkrNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dkr_NrPelny");
            entity.Property(e => e.DkrNumer).HasColumnName("dkr_Numer");
            entity.Property(e => e.DkrRejestr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dkr_Rejestr");
            entity.Property(e => e.NzdIdDekretu).HasColumnName("nzd_IdDekretu");
            entity.Property(e => e.NzdIdRoku).HasColumnName("nzd_IdRoku");
            entity.Property(e => e.NzdIdRozrachunku).HasColumnName("nzd_IdRozrachunku");
            entity.Property(e => e.NzdStatus).HasColumnName("nzd_Status");
        });

        modelBuilder.Entity<VwFinanseDokumentKasowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseDokumentKasowy");

            entity.Property(e => e.DksData)
                .HasColumnType("datetime")
                .HasColumnName("dks_Data");
            entity.Property(e => e.DksDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dks_DataKursu");
            entity.Property(e => e.DksDlaNieznany).HasColumnName("dks_DlaNieznany");
            entity.Property(e => e.DksGenerujTytulem).HasColumnName("dks_GenerujTytulem");
            entity.Property(e => e.DksId).HasColumnName("dks_Id");
            entity.Property(e => e.DksIdAdresu).HasColumnName("dks_IdAdresu");
            entity.Property(e => e.DksIdBanku).HasColumnName("dks_IdBanku");
            entity.Property(e => e.DksIdDokumentAuto).HasColumnName("dks_IdDokumentAuto");
            entity.Property(e => e.DksIdHistoriiAdresu).HasColumnName("dks_IdHistoriiAdresu");
            entity.Property(e => e.DksIdKasy).HasColumnName("dks_IdKasy");
            entity.Property(e => e.DksIdKategorii).HasColumnName("dks_IdKategorii");
            entity.Property(e => e.DksIdObiektu).HasColumnName("dks_IdObiektu");
            entity.Property(e => e.DksIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dks_IdWaluty");
            entity.Property(e => e.DksIdWystawil).HasColumnName("dks_IdWystawil");
            entity.Property(e => e.DksImport).HasColumnName("dks_Import");
            entity.Property(e => e.DksKurs)
                .HasColumnType("money")
                .HasColumnName("dks_Kurs");
            entity.Property(e => e.DksLiczbaJednostek).HasColumnName("dks_LiczbaJednostek");
            entity.Property(e => e.DksNumer).HasColumnName("dks_Numer");
            entity.Property(e => e.DksNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("dks_NumerPelny");
            entity.Property(e => e.DksOdebral)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dks_Odebral");
            entity.Property(e => e.DksOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dks_Opis");
            entity.Property(e => e.DksRodzajKursu).HasColumnName("dks_RodzajKursu");
            entity.Property(e => e.DksSplata)
                .HasColumnType("money")
                .HasColumnName("dks_Splata");
            entity.Property(e => e.DksSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("dks_SplataWaluta");
            entity.Property(e => e.DksStatus).HasColumnName("dks_Status");
            entity.Property(e => e.DksTyp).HasColumnName("dks_Typ");
            entity.Property(e => e.DksTypObiektu).HasColumnName("dks_TypObiektu");
            entity.Property(e => e.DksTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("dks_Tytulem");
            entity.Property(e => e.DksWartosc)
                .HasColumnType("money")
                .HasColumnName("dks_Wartosc");
            entity.Property(e => e.DksWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("dks_WartoscWaluta");
            entity.Property(e => e.DksWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dks_Wystawil");
            entity.Property(e => e.DksZaliczka).HasColumnName("dks_Zaliczka");
        });

        modelBuilder.Entity<VwFinanseDokumenty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseDokumenty");

            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotna).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotnaWaluta).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
        });

        modelBuilder.Entity<VwFinanseKasaRazem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseKasaRazem");

            entity.Property(e => e.JestNaRaporcie).HasColumnName("jest_na_raporcie");
            entity.Property(e => e.NrRaportu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nr_raportu");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfGenerujTytulem).HasColumnName("nzf_GenerujTytulem");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdSesjiKasowej).HasColumnName("nzf_IdSesjiKasowej");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNumer).HasColumnName("nzf_Numer");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfOdebral)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Odebral");
            entity.Property(e => e.NzfOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Opis");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStatusIkona).HasColumnName("nzf_StatusIkona");
            entity.Property(e => e.NzfTransfer).HasColumnName("nzf_Transfer");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Oczekujacy).HasColumnName("oczekujacy");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.Wplata)
                .HasColumnType("money")
                .HasColumnName("wplata");
            entity.Property(e => e.WplataWaluta)
                .HasColumnType("money")
                .HasColumnName("wplataWaluta");
            entity.Property(e => e.Wyplata)
                .HasColumnType("money")
                .HasColumnName("wyplata");
            entity.Property(e => e.WyplataWaluta)
                .HasColumnType("money")
                .HasColumnName("wyplataWaluta");
        });

        modelBuilder.Entity<VwFinanseKasaRazemRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseKasaRazemRew");

            entity.Property(e => e.JestNaRaporcie).HasColumnName("jest_na_raporcie");
            entity.Property(e => e.NrRaportu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nr_raportu");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfGenerujTytulem).HasColumnName("nzf_GenerujTytulem");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdSesjiKasowej).HasColumnName("nzf_IdSesjiKasowej");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNumer).HasColumnName("nzf_Numer");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfOdebral)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Odebral");
            entity.Property(e => e.NzfOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Opis");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStatusIkona).HasColumnName("nzf_StatusIkona");
            entity.Property(e => e.NzfTransfer).HasColumnName("nzf_Transfer");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Oczekujacy).HasColumnName("oczekujacy");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.Wplata)
                .HasColumnType("money")
                .HasColumnName("wplata");
            entity.Property(e => e.WplataWaluta)
                .HasColumnType("money")
                .HasColumnName("wplataWaluta");
            entity.Property(e => e.Wyplata)
                .HasColumnType("money")
                .HasColumnName("wyplata");
            entity.Property(e => e.WyplataWaluta)
                .HasColumnType("money")
                .HasColumnName("wyplataWaluta");
        });

        modelBuilder.Entity<VwFinanseNumeracja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseNumeracja");

            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfNumer).HasColumnName("nzf_Numer");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
        });

        modelBuilder.Entity<VwFinanseOperacjaBankowa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseOperacjaBankowa");

            entity.Property(e => e.OpData)
                .HasColumnType("datetime")
                .HasColumnName("op_Data");
            entity.Property(e => e.OpDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("op_DataKursu");
            entity.Property(e => e.OpDataUzgodnienia)
                .HasColumnType("datetime")
                .HasColumnName("op_DataUzgodnienia");
            entity.Property(e => e.OpGenerujTytulem).HasColumnName("op_GenerujTytulem");
            entity.Property(e => e.OpGotowkowa).HasColumnName("op_Gotowkowa");
            entity.Property(e => e.OpId).HasColumnName("op_Id");
            entity.Property(e => e.OpIdAdresu).HasColumnName("op_IdAdresu");
            entity.Property(e => e.OpIdBanku).HasColumnName("op_IdBanku");
            entity.Property(e => e.OpIdDokumentAuto).HasColumnName("op_IdDokumentAuto");
            entity.Property(e => e.OpIdHistoriiAdresu).HasColumnName("op_IdHistoriiAdresu");
            entity.Property(e => e.OpIdKategorii).HasColumnName("op_IdKategorii");
            entity.Property(e => e.OpIdObiektu).HasColumnName("op_IdObiektu");
            entity.Property(e => e.OpIdRachObiekt).HasColumnName("op_IdRachObiekt");
            entity.Property(e => e.OpIdRachObiektHist).HasColumnName("op_IdRachObiektHist");
            entity.Property(e => e.OpIdRachunku).HasColumnName("op_IdRachunku");
            entity.Property(e => e.OpIdRachunkuHist).HasColumnName("op_IdRachunkuHist");
            entity.Property(e => e.OpIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_IdWaluty");
            entity.Property(e => e.OpIdWystawil).HasColumnName("op_IdWystawil");
            entity.Property(e => e.OpImport).HasColumnName("op_Import");
            entity.Property(e => e.OpKurs)
                .HasColumnType("money")
                .HasColumnName("op_Kurs");
            entity.Property(e => e.OpLiczbaJednostek).HasColumnName("op_LiczbaJednostek");
            entity.Property(e => e.OpNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("op_NumerWyciagu");
            entity.Property(e => e.OpObslugaRachunku).HasColumnName("op_ObslugaRachunku");
            entity.Property(e => e.OpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("op_Opis");
            entity.Property(e => e.OpPodIdentyfikacjaZobowiazania)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("op_PodIdentyfikacjaZobowiazania");
            entity.Property(e => e.OpPodOkres)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_PodOkres");
            entity.Property(e => e.OpPodSymbol)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_PodSymbol");
            entity.Property(e => e.OpPodtyp).HasColumnName("op_Podtyp");
            entity.Property(e => e.OpRodzajKursu).HasColumnName("op_RodzajKursu");
            entity.Property(e => e.OpSplata)
                .HasColumnType("money")
                .HasColumnName("op_Splata");
            entity.Property(e => e.OpSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("op_SplataWaluta");
            entity.Property(e => e.OpStatus).HasColumnName("op_Status");
            entity.Property(e => e.OpTransfer).HasColumnName("op_Transfer");
            entity.Property(e => e.OpTyp).HasColumnName("op_Typ");
            entity.Property(e => e.OpTypObiektu).HasColumnName("op_TypObiektu");
            entity.Property(e => e.OpTypPrzelewu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_TypPrzelewu");
            entity.Property(e => e.OpTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("op_Tytulem");
            entity.Property(e => e.OpVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("op_VATPierwotnyWaluta");
            entity.Property(e => e.OpWartosc)
                .HasColumnType("money")
                .HasColumnName("op_Wartosc");
            entity.Property(e => e.OpWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("op_WartoscWaluta");
            entity.Property(e => e.OpWydrukowana).HasColumnName("op_Wydrukowana");
            entity.Property(e => e.OpWyslanaHb).HasColumnName("op_WyslanaHB");
            entity.Property(e => e.OpWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("op_Wystawil");
            entity.Property(e => e.OpZaliczka).HasColumnName("op_Zaliczka");
            entity.Property(e => e.OpZusdeklaracja)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_ZUSDeklaracja");
            entity.Property(e => e.OpZusnrDecyzji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("op_ZUSNrDecyzji");
            entity.Property(e => e.OpZusnrDeklaracji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_ZUSNrDeklaracji");
            entity.Property(e => e.OpZuspodIdentyfikator)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_ZUSPodIdentyfikator");
            entity.Property(e => e.OpZuspodTypIdentyfikatora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_ZUSPodTypIdentyfikatora");
            entity.Property(e => e.OpZustypWplaty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("op_ZUSTypWplaty");
        });

        modelBuilder.Entity<VwFinanseRozDekretow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozDekretow");

            entity.Property(e => e.DkoIdDokumentu).HasColumnName("dko_IdDokumentu");
            entity.Property(e => e.DkoKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dko_Konto");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("wartosc");
            entity.Property(e => e.WartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("wartoscPierwotna");
            entity.Property(e => e.WartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("wartoscPierwotnaWaluta");
            entity.Property(e => e.WartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("wartoscWaluta");
        });

        modelBuilder.Entity<VwFinanseRozDokumenty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozDokumenty");

            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozDokumentyWszystkie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozDokumentyWszystkie");

            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataKursu");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdBanku).HasColumnName("nzf_IdBanku");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfKwotaRachunkuVat)
                .HasColumnType("money")
                .HasColumnName("nzf_KwotaRachunkuVAT");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfVatpierwotny)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotny");
            entity.Property(e => e.NzfVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotnyWaluta");
            entity.Property(e => e.NzfVatpozostalo)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostalo");
            entity.Property(e => e.NzfVatpozostaloWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostaloWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozKhInstykt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKhInstykt");

            entity.Property(e => e.Analityka1)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Analityka2)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.GaduGadu)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Nazwa)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.Opis)
                .HasMaxLength(210)
                .IsUnicode(false);
            entity.Property(e => e.Skype)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Symbol)
                .HasMaxLength(74)
                .IsUnicode(false);
            entity.Property(e => e.Ulica)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFinanseRozKhInstyktKontum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKhInstyktKonta");

            entity.Property(e => e.Konto)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFinanseRozKhLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKhLookup");

            entity.Property(e => e.Analityka1)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Analityka2)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Nazwa)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.Opis)
                .HasMaxLength(210)
                .IsUnicode(false);
            entity.Property(e => e.Symbol)
                .HasMaxLength(74)
                .IsUnicode(false);
            entity.Property(e => e.Ulica)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFinanseRozKontrahenci>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKontrahenci");

            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozKontrahenciDok>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKontrahenciDok");

            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozKontrahenciDokBazowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKontrahenciDokBazowy");

            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozKontrahenciDokBazowyWszystkie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKontrahenciDokBazowyWszystkie");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozKontrahenciDokRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKontrahenciDokRew");

            entity.Property(e => e.Analityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA");
            entity.Property(e => e.AnalitykaD)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_D");
            entity.Property(e => e.AnalitykaO)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_O");
            entity.Property(e => e.AnalitykaWspolna)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_WSPOLNA");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozKontrahenciDokRewBazowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKontrahenciDokRewBazowy");

            entity.Property(e => e.Analityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA");
            entity.Property(e => e.AnalitykaD)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_D");
            entity.Property(e => e.AnalitykaO)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_O");
            entity.Property(e => e.AnalitykaWspolna)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_WSPOLNA");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozKontrahenciDokRewBazowyWszystkie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKontrahenciDokRewBazowyWszystkie");

            entity.Property(e => e.Analityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA");
            entity.Property(e => e.AnalitykaD)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_D");
            entity.Property(e => e.AnalitykaO)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_O");
            entity.Property(e => e.AnalitykaWspolna)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_WSPOLNA");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozKontrahenciDokWszystkie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozKontrahenciDokWszystkie");

            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozNierozliczone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozNierozliczone");

            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozRozliczone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozRozliczone");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozRozliczoneRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozRozliczoneRew");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozSplaty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozSplaty");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdSyncDivision).HasColumnName("nzf_IdSyncDivision");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzedplataOddzial).HasColumnName("nzf_PrzedplataOddzial");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotnyWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotna).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotnaWaluta).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
        });

        modelBuilder.Entity<VwFinanseRozSplatyDoWyk>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozSplatyDoWyk");

            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataKursu");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDataUzgodnienia)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataUzgodnienia");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfGenerujTytulem).HasColumnName("nzf_GenerujTytulem");
            entity.Property(e => e.NzfGotowkowa).HasColumnName("nzf_Gotowkowa");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdBanku).HasColumnName("nzf_IdBanku");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdRachunkuHist).HasColumnName("nzf_IdRachunkuHist");
            entity.Property(e => e.NzfIdRachunkuWirtualnego).HasColumnName("nzf_IdRachunkuWirtualnego");
            entity.Property(e => e.NzfIdRozliczenia).HasColumnName("nzf_IdRozliczenia");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdTransakcjiVat).HasColumnName("nzf_IdTransakcjiVat");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfIzbaCelna).HasColumnName("nzf_IzbaCelna");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumer).HasColumnName("nzf_Numer");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfObslugaRachunku).HasColumnName("nzf_ObslugaRachunku");
            entity.Property(e => e.NzfOdebral)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Odebral");
            entity.Property(e => e.NzfOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Opis");
            entity.Property(e => e.NzfPodIdentyfikacjaZobowiazania)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("nzf_PodIdentyfikacjaZobowiazania");
            entity.Property(e => e.NzfPodOkres)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_PodOkres");
            entity.Property(e => e.NzfPodSymbol)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_PodSymbol");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfRodzajSplaty).HasColumnName("nzf_RodzajSplaty");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTransfer).HasColumnName("nzf_Transfer");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypKorekty).HasColumnName("nzf_TypKorekty");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTypPrzelewu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_TypPrzelewu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotnyWaluta");
            entity.Property(e => e.NzfVatpozostaloWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostaloWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWyslanaHb).HasColumnName("nzf_WyslanaHB");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.NzfZusdeklaracja)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSDeklaracja");
            entity.Property(e => e.NzfZusnrDecyzji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_ZUSNrDecyzji");
            entity.Property(e => e.NzfZusnrDeklaracji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSNrDeklaracji");
            entity.Property(e => e.NzfZuspodIdentyfikator)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSPodIdentyfikator");
            entity.Property(e => e.NzfZuspodTypIdentyfikatora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSPodTypIdentyfikatora");
            entity.Property(e => e.NzfZustypWplaty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSTypWplaty");
            entity.Property(e => e.Wartosc).HasColumnType("money");
        });

        modelBuilder.Entity<VwFinanseRozSplatyRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozSplatyRew");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotna).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotnaWaluta).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
        });

        modelBuilder.Entity<VwFinanseRozSplatyRozliczeniaOddzial>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozSplatyRozliczenia_Oddzial");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IdWalutyDokRozliczajacego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdWalutyRozRozliczanego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotnyWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.NzsAuto).HasColumnName("nzs_Auto");
            entity.Property(e => e.NzsAutoPrzeliczanie).HasColumnName("nzs_AutoPrzeliczanie");
            entity.Property(e => e.NzsBrakKontroliSumy).HasColumnName("nzs_BrakKontroliSumy");
            entity.Property(e => e.NzsData)
                .HasColumnType("datetime")
                .HasColumnName("nzs_Data");
            entity.Property(e => e.NzsId).HasColumnName("nzs_Id");
            entity.Property(e => e.NzsIdDlugu).HasColumnName("nzs_IdDlugu");
            entity.Property(e => e.NzsIdKategorii).HasColumnName("nzs_IdKategorii");
            entity.Property(e => e.NzsIdKompensaty).HasColumnName("nzs_IdKompensaty");
            entity.Property(e => e.NzsIdSplaty).HasColumnName("nzs_IdSplaty");
            entity.Property(e => e.NzsIdTransakcjiVat).HasColumnName("nzs_IdTransakcjiVat");
            entity.Property(e => e.NzsIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWaluty");
            entity.Property(e => e.NzsIdWalutyDlugu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWalutyDlugu");
            entity.Property(e => e.NzsMetodaKasowa).HasColumnName("nzs_MetodaKasowa");
            entity.Property(e => e.NzsPrzedplata).HasColumnName("nzs_Przedplata");
            entity.Property(e => e.NzsRodzaj).HasColumnName("nzs_Rodzaj");
            entity.Property(e => e.NzsStatusKsieg).HasColumnName("nzs_StatusKsieg");
            entity.Property(e => e.NzsTyp).HasColumnName("nzs_Typ");
            entity.Property(e => e.NzsVatdluguWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATDluguWaluta");
            entity.Property(e => e.NzsVatsplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATSplatyWaluta");
            entity.Property(e => e.NzsWartosc)
                .HasColumnType("money")
                .HasColumnName("nzs_Wartosc");
            entity.Property(e => e.NzsWartoscDluguPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscDluguPLN");
            entity.Property(e => e.NzsWartoscSplatyPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscSplatyPLN");
            entity.Property(e => e.NzsWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWaluta");
            entity.Property(e => e.NzsWartoscWalutaDlugu)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWalutaDlugu");
            entity.Property(e => e.NzsWylaczBadanieZgodnosci).HasColumnName("nzs_WylaczBadanieZgodnosci");
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotna).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotnaWaluta).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
        });

        modelBuilder.Entity<VwFinanseRozSplatyRozliczeniaRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozSplatyRozliczeniaRew");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IdWalutyDokRozliczajacego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdWalutyRozRozliczanego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotnyWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.NzsAuto).HasColumnName("nzs_Auto");
            entity.Property(e => e.NzsAutoPrzeliczanie).HasColumnName("nzs_AutoPrzeliczanie");
            entity.Property(e => e.NzsBrakKontroliSumy).HasColumnName("nzs_BrakKontroliSumy");
            entity.Property(e => e.NzsData)
                .HasColumnType("datetime")
                .HasColumnName("nzs_Data");
            entity.Property(e => e.NzsId).HasColumnName("nzs_Id");
            entity.Property(e => e.NzsIdDlugu).HasColumnName("nzs_IdDlugu");
            entity.Property(e => e.NzsIdKategorii).HasColumnName("nzs_IdKategorii");
            entity.Property(e => e.NzsIdKompensaty).HasColumnName("nzs_IdKompensaty");
            entity.Property(e => e.NzsIdSplaty).HasColumnName("nzs_IdSplaty");
            entity.Property(e => e.NzsIdTransakcjiVat).HasColumnName("nzs_IdTransakcjiVat");
            entity.Property(e => e.NzsIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWaluty");
            entity.Property(e => e.NzsIdWalutyDlugu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWalutyDlugu");
            entity.Property(e => e.NzsMetodaKasowa).HasColumnName("nzs_MetodaKasowa");
            entity.Property(e => e.NzsPrzedplata).HasColumnName("nzs_Przedplata");
            entity.Property(e => e.NzsRodzaj).HasColumnName("nzs_Rodzaj");
            entity.Property(e => e.NzsStatusKsieg).HasColumnName("nzs_StatusKsieg");
            entity.Property(e => e.NzsTyp).HasColumnName("nzs_Typ");
            entity.Property(e => e.NzsVatdluguWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATDluguWaluta");
            entity.Property(e => e.NzsVatsplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATSplatyWaluta");
            entity.Property(e => e.NzsWartosc)
                .HasColumnType("money")
                .HasColumnName("nzs_Wartosc");
            entity.Property(e => e.NzsWartoscDluguPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscDluguPLN");
            entity.Property(e => e.NzsWartoscSplatyPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscSplatyPLN");
            entity.Property(e => e.NzsWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWaluta");
            entity.Property(e => e.NzsWartoscWalutaDlugu)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWalutaDlugu");
            entity.Property(e => e.NzsWylaczBadanieZgodnosci).HasColumnName("nzs_WylaczBadanieZgodnosci");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotna).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotnaWaluta).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
        });

        modelBuilder.Entity<VwFinanseRozSplatyRozliczenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozSplatyRozliczenia");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IdWalutyDokRozliczajacego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdWalutyRozRozliczanego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdSyncDivision).HasColumnName("nzf_IdSyncDivision");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzedplataOddzial).HasColumnName("nzf_PrzedplataOddzial");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotnyWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.NzsAuto).HasColumnName("nzs_Auto");
            entity.Property(e => e.NzsAutoPrzeliczanie).HasColumnName("nzs_AutoPrzeliczanie");
            entity.Property(e => e.NzsBrakKontroliSumy).HasColumnName("nzs_BrakKontroliSumy");
            entity.Property(e => e.NzsData)
                .HasColumnType("datetime")
                .HasColumnName("nzs_Data");
            entity.Property(e => e.NzsId).HasColumnName("nzs_Id");
            entity.Property(e => e.NzsIdDlugu).HasColumnName("nzs_IdDlugu");
            entity.Property(e => e.NzsIdKategorii).HasColumnName("nzs_IdKategorii");
            entity.Property(e => e.NzsIdKompensaty).HasColumnName("nzs_IdKompensaty");
            entity.Property(e => e.NzsIdSplaty).HasColumnName("nzs_IdSplaty");
            entity.Property(e => e.NzsIdTransakcjiVat).HasColumnName("nzs_IdTransakcjiVat");
            entity.Property(e => e.NzsIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWaluty");
            entity.Property(e => e.NzsIdWalutyDlugu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzs_IdWalutyDlugu");
            entity.Property(e => e.NzsMetodaKasowa).HasColumnName("nzs_MetodaKasowa");
            entity.Property(e => e.NzsPrzedplata).HasColumnName("nzs_Przedplata");
            entity.Property(e => e.NzsRodzaj).HasColumnName("nzs_Rodzaj");
            entity.Property(e => e.NzsStatusKsieg).HasColumnName("nzs_StatusKsieg");
            entity.Property(e => e.NzsTyp).HasColumnName("nzs_Typ");
            entity.Property(e => e.NzsVatdluguWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATDluguWaluta");
            entity.Property(e => e.NzsVatsplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_VATSplatyWaluta");
            entity.Property(e => e.NzsWartosc)
                .HasColumnType("money")
                .HasColumnName("nzs_Wartosc");
            entity.Property(e => e.NzsWartoscDluguPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscDluguPLN");
            entity.Property(e => e.NzsWartoscSplatyPln)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscSplatyPLN");
            entity.Property(e => e.NzsWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWaluta");
            entity.Property(e => e.NzsWartoscWalutaDlugu)
                .HasColumnType("money")
                .HasColumnName("nzs_WartoscWalutaDlugu");
            entity.Property(e => e.NzsWylaczBadanieZgodnosci).HasColumnName("nzs_WylaczBadanieZgodnosci");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.Wartosc).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotna).HasColumnType("money");
            entity.Property(e => e.WartoscPierwotnaWaluta).HasColumnType("money");
            entity.Property(e => e.WartoscWaluta).HasColumnType("money");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
        });

        modelBuilder.Entity<VwFinanseRozliczenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozliczenia");

            entity.Property(e => e.DataRozliczenia).HasColumnType("datetime");
            entity.Property(e => e.DataRozrachunku).HasColumnType("datetime");
            entity.Property(e => e.DataSplaty).HasColumnType("datetime");
            entity.Property(e => e.KontoRozrachunku)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KontoSplaty)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KontrahentNazwa)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.KontrahentSymbol)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.KwotaRozliczeniaPln)
                .HasColumnType("money")
                .HasColumnName("KwotaRozliczeniaPLN");
            entity.Property(e => e.KwotaRozliczeniaWaluta).HasColumnType("money");
            entity.Property(e => e.NrPelnyRozliczenia)
                .HasMaxLength(291)
                .IsUnicode(false);
            entity.Property(e => e.NrPelnyRozrachunku)
                .HasMaxLength(144)
                .IsUnicode(false);
            entity.Property(e => e.NrPelnySplaty)
                .HasMaxLength(144)
                .IsUnicode(false);
            entity.Property(e => e.WalutaRozliczenia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WartoscPierwotnaRozrachunkuPln)
                .HasColumnType("money")
                .HasColumnName("WartoscPierwotnaRozrachunkuPLN");
            entity.Property(e => e.WartoscPierwotnaSplatyPln)
                .HasColumnType("money")
                .HasColumnName("WartoscPierwotnaSplatyPLN");
            entity.Property(e => e.WartoscRozrachunkuPln)
                .HasColumnType("money")
                .HasColumnName("WartoscRozrachunkuPLN");
            entity.Property(e => e.WartoscSplatyPln)
                .HasColumnType("money")
                .HasColumnName("WartoscSplatyPLN");
        });

        modelBuilder.Entity<VwFinanseRozrachunek>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozrachunek");

            entity.Property(e => e.NzDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nz_DataOstatniejSplaty");
            entity.Property(e => e.NzDataPowstania)
                .HasColumnType("datetime")
                .HasColumnName("nz_DataPowstania");
            entity.Property(e => e.NzId).HasColumnName("nz_Id");
            entity.Property(e => e.NzIdAdresu).HasColumnName("nz_IdAdresu");
            entity.Property(e => e.NzIdDokumentAuto).HasColumnName("nz_IdDokumentAuto");
            entity.Property(e => e.NzIdHistoriiAdresu).HasColumnName("nz_IdHistoriiAdresu");
            entity.Property(e => e.NzIdKategorii).HasColumnName("nz_IdKategorii");
            entity.Property(e => e.NzIdObiektu).HasColumnName("nz_IdObiektu");
            entity.Property(e => e.NzIdRozrachunku).HasColumnName("nz_IdRozrachunku");
            entity.Property(e => e.NzIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nz_IdWaluty");
            entity.Property(e => e.NzIdWystawil).HasColumnName("nz_IdWystawil");
            entity.Property(e => e.NzKorekta).HasColumnName("nz_Korekta");
            entity.Property(e => e.NzKurs)
                .HasColumnType("money")
                .HasColumnName("nz_Kurs");
            entity.Property(e => e.NzNota).HasColumnName("nz_Nota");
            entity.Property(e => e.NzPodtyp).HasColumnName("nz_Podtyp");
            entity.Property(e => e.NzPowiazanie).HasColumnName("nz_Powiazanie");
            entity.Property(e => e.NzPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nz_PRB");
            entity.Property(e => e.NzProgram).HasColumnName("nz_Program");
            entity.Property(e => e.NzPrzeniesiony).HasColumnName("nz_Przeniesiony");
            entity.Property(e => e.NzRodzajKursu).HasColumnName("nz_RodzajKursu");
            entity.Property(e => e.NzStatus).HasColumnName("nz_Status");
            entity.Property(e => e.NzStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nz_StopaOdsetek");
            entity.Property(e => e.NzTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nz_TerminPlatnosci");
            entity.Property(e => e.NzTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nz_Transakcja");
            entity.Property(e => e.NzTyp).HasColumnName("nz_Typ");
            entity.Property(e => e.NzTypObiektu).HasColumnName("nz_TypObiektu");
            entity.Property(e => e.NzTypOdsetek).HasColumnName("nz_TypOdsetek");
            entity.Property(e => e.NzTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nz_Tytulem");
            entity.Property(e => e.NzWartosc)
                .HasColumnType("money")
                .HasColumnName("nz_Wartosc");
            entity.Property(e => e.NzWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nz_WartoscPierwotna");
            entity.Property(e => e.NzWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nz_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nz_WartoscWaluta");
            entity.Property(e => e.NzZrodlo).HasColumnName("nz_Zrodlo");
        });

        modelBuilder.Entity<VwFinanseRozrachunkiDoKorekty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozrachunkiDoKorekty");

            entity.Property(e => e.DataDoKorekty).HasColumnType("datetime");
            entity.Property(e => e.DataDoKorekty30).HasColumnType("datetime");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NaleznoscSplaty)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplaty");
            entity.Property(e => e.NaleznoscSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyPierwotne");
            entity.Property(e => e.NaleznoscSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWaluta");
            entity.Property(e => e.NaleznoscSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWalutaPierwotne");
            entity.Property(e => e.NkpData)
                .HasColumnType("datetime")
                .HasColumnName("nkp_Data");
            entity.Property(e => e.NkpId).HasColumnName("nkp_Id");
            entity.Property(e => e.NkpMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("nkp_Miesiac");
            entity.Property(e => e.NkpPozostaje)
                .HasColumnType("money")
                .HasColumnName("nkp_Pozostaje");
            entity.Property(e => e.NkpStatus).HasColumnName("nkp_Status");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpNalPierwotna)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotna");
            entity.Property(e => e.SpNalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotnaWaluta");
            entity.Property(e => e.SpNalWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalWaluta");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.SpZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotna");
            entity.Property(e => e.SpZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotnaWaluta");
            entity.Property(e => e.SpZobWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobWaluta");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.WartoscRd)
                .HasColumnType("money")
                .HasColumnName("WartoscRD");
            entity.Property(e => e.WartoscRu)
                .HasColumnType("money")
                .HasColumnName("WartoscRU");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.ZobowiazaniaSplaty)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplaty");
            entity.Property(e => e.ZobowiazaniaSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyPierwotne");
            entity.Property(e => e.ZobowiazaniaSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWaluta");
            entity.Property(e => e.ZobowiazaniaSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWalutaPierwotne");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozrachunkiWgDokumentow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozrachunkiWgDokumentow");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NaleznoscSplaty)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplaty");
            entity.Property(e => e.NaleznoscSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyPierwotne");
            entity.Property(e => e.NaleznoscSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWaluta");
            entity.Property(e => e.NaleznoscSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWalutaPierwotne");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpNalPierwotna)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotna");
            entity.Property(e => e.SpNalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotnaWaluta");
            entity.Property(e => e.SpNalWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalWaluta");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.SpZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotna");
            entity.Property(e => e.SpZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotnaWaluta");
            entity.Property(e => e.SpZobWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobWaluta");
            entity.Property(e => e.WartoscRd)
                .HasColumnType("money")
                .HasColumnName("WartoscRD");
            entity.Property(e => e.WartoscRu)
                .HasColumnType("money")
                .HasColumnName("WartoscRU");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.ZobowiazaniaSplaty)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplaty");
            entity.Property(e => e.ZobowiazaniaSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyPierwotne");
            entity.Property(e => e.ZobowiazaniaSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWaluta");
            entity.Property(e => e.ZobowiazaniaSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWalutaPierwotne");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozrachunkiWgDokumentowRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozrachunkiWgDokumentowRew");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NaleznoscSplaty)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplaty");
            entity.Property(e => e.NaleznoscSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyPierwotne");
            entity.Property(e => e.NaleznoscSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWaluta");
            entity.Property(e => e.NaleznoscSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWalutaPierwotne");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpNalPierwotna)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotna");
            entity.Property(e => e.SpNalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotnaWaluta");
            entity.Property(e => e.SpNalWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalWaluta");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.SpZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotna");
            entity.Property(e => e.SpZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotnaWaluta");
            entity.Property(e => e.SpZobWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobWaluta");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.WartoscRd)
                .HasColumnType("money")
                .HasColumnName("WartoscRD");
            entity.Property(e => e.WartoscRu)
                .HasColumnType("money")
                .HasColumnName("WartoscRU");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.ZobowiazaniaSplaty)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplaty");
            entity.Property(e => e.ZobowiazaniaSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyPierwotne");
            entity.Property(e => e.ZobowiazaniaSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWaluta");
            entity.Property(e => e.ZobowiazaniaSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWalutaPierwotne");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozrachunkiWgKontrahentow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozrachunkiWgKontrahentow");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NaleznoscSplaty)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplaty");
            entity.Property(e => e.NaleznoscSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyPierwotne");
            entity.Property(e => e.NaleznoscSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWaluta");
            entity.Property(e => e.NaleznoscSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWalutaPierwotne");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpNalPierwotna)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotna");
            entity.Property(e => e.SpNalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotnaWaluta");
            entity.Property(e => e.SpNalWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalWaluta");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.SpZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotna");
            entity.Property(e => e.SpZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotnaWaluta");
            entity.Property(e => e.SpZobWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobWaluta");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.WartoscRd)
                .HasColumnType("money")
                .HasColumnName("WartoscRD");
            entity.Property(e => e.WartoscRu)
                .HasColumnType("money")
                .HasColumnName("WartoscRU");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.ZobowiazaniaSplaty)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplaty");
            entity.Property(e => e.ZobowiazaniaSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyPierwotne");
            entity.Property(e => e.ZobowiazaniaSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWaluta");
            entity.Property(e => e.ZobowiazaniaSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWalutaPierwotne");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozrachunkiWgKontrahentowKh>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozrachunkiWgKontrahentowKh");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozrachunkiWgKontrahentowKhRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozrachunkiWgKontrahentowKhRew");

            entity.Property(e => e.Analityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA");
            entity.Property(e => e.AnalitykaD)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_D");
            entity.Property(e => e.AnalitykaO)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_O");
            entity.Property(e => e.AnalitykaWspolna)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ANALITYKA_WSPOLNA");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseRozrachunkiWgKontrahentowRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseRozrachunkiWgKontrahentowRew");

            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NaleznoscSplaty)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplaty");
            entity.Property(e => e.NaleznoscSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyPierwotne");
            entity.Property(e => e.NaleznoscSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWaluta");
            entity.Property(e => e.NaleznoscSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("naleznoscSplatyWalutaPierwotne");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.OdblokowanoVat).HasColumnType("money");
            entity.Property(e => e.PotVatDoOdblokowania).HasColumnType("money");
            entity.Property(e => e.PotVatDoZablokowania).HasColumnType("money");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpNalPierwotna)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotna");
            entity.Property(e => e.SpNalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotnaWaluta");
            entity.Property(e => e.SpNalWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalWaluta");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.SpZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotna");
            entity.Property(e => e.SpZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotnaWaluta");
            entity.Property(e => e.SpZobWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobWaluta");
            entity.Property(e => e.Spoznienie).HasColumnName("spoznienie");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.WartoscRd)
                .HasColumnType("money")
                .HasColumnName("WartoscRD");
            entity.Property(e => e.WartoscRu)
                .HasColumnType("money")
                .HasColumnName("WartoscRU");
            entity.Property(e => e.ZablokowanoVat).HasColumnType("money");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.ZobowiazaniaSplaty)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplaty");
            entity.Property(e => e.ZobowiazaniaSplatyPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyPierwotne");
            entity.Property(e => e.ZobowiazaniaSplatyWaluta)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWaluta");
            entity.Property(e => e.ZobowiazaniaSplatyWalutaPierwotne)
                .HasColumnType("money")
                .HasColumnName("zobowiazaniaSplatyWalutaPierwotne");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwFinanseSesjiKasowych>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseSesjiKasowych");

            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdSesjiKasowej).HasColumnName("nzf_IdSesjiKasowej");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfTransfer).HasColumnName("nzf_Transfer");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.VwfskFormaPlatnosci).HasColumnName("vwfsk_FormaPlatnosci");
            entity.Property(e => e.VwfskGridTyp).HasColumnName("vwfsk_GridTyp");
            entity.Property(e => e.VwfskNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("vwfsk_NumerPelny");
            entity.Property(e => e.VwfskPrzychod)
                .HasColumnType("money")
                .HasColumnName("vwfsk_Przychod");
            entity.Property(e => e.VwfskPrzychodWaluta)
                .HasColumnType("money")
                .HasColumnName("vwfsk_PrzychodWaluta");
            entity.Property(e => e.VwfskRozchod)
                .HasColumnType("money")
                .HasColumnName("vwfsk_Rozchod");
            entity.Property(e => e.VwfskRozchodWaluta)
                .HasColumnType("money")
                .HasColumnName("vwfsk_RozchodWaluta");
        });

        modelBuilder.Entity<VwFinanseWolneSplaty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseWolneSplaty");

            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpNalPierwotna)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotna");
            entity.Property(e => e.SpNalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotnaWaluta");
            entity.Property(e => e.SpNalWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalWaluta");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.SpZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotna");
            entity.Property(e => e.SpZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotnaWaluta");
            entity.Property(e => e.SpZobWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobWaluta");
        });

        modelBuilder.Entity<VwFinanseWolneSplatyRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseWolneSplatyRew");

            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.SpNal)
                .HasColumnType("money")
                .HasColumnName("spNal");
            entity.Property(e => e.SpNalPierwotna)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotna");
            entity.Property(e => e.SpNalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalPierwotnaWaluta");
            entity.Property(e => e.SpNalWaluta)
                .HasColumnType("money")
                .HasColumnName("spNalWaluta");
            entity.Property(e => e.SpZob)
                .HasColumnType("money")
                .HasColumnName("spZob");
            entity.Property(e => e.SpZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotna");
            entity.Property(e => e.SpZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobPierwotnaWaluta");
            entity.Property(e => e.SpZobWaluta)
                .HasColumnType("money")
                .HasColumnName("spZobWaluta");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwFinanseWszystkie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFinanseWszystkie");

            entity.Property(e => e.DokPlatnikAdresHid).HasColumnName("dok_PlatnikAdresHId");
            entity.Property(e => e.NalPierwotna)
                .HasColumnType("money")
                .HasColumnName("nalPierwotna");
            entity.Property(e => e.NalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nalPierwotnaWaluta");
            entity.Property(e => e.NalWaluta)
                .HasColumnType("money")
                .HasColumnName("nalWaluta");
            entity.Property(e => e.Naleznosc)
                .HasColumnType("money")
                .HasColumnName("naleznosc");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.ZobPierwotna)
                .HasColumnType("money")
                .HasColumnName("zobPierwotna");
            entity.Property(e => e.ZobPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zobPierwotnaWaluta");
            entity.Property(e => e.ZobWaluta)
                .HasColumnType("money")
                .HasColumnName("zobWaluta");
            entity.Property(e => e.Zobowiazanie)
                .HasColumnType("money")
                .HasColumnName("zobowiazanie");
        });

        modelBuilder.Entity<VwGmina>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGmina");

            entity.Property(e => e.GmAktualna).HasColumnName("gm_Aktualna");
            entity.Property(e => e.GmGmina)
                .HasMaxLength(142)
                .IsUnicode(false)
                .HasColumnName("gm_Gmina");
            entity.Property(e => e.GmId).HasColumnName("gm_Id");
            entity.Property(e => e.GmKodGus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("gm_KodGUS");
            entity.Property(e => e.GmNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("gm_Nazwa");
            entity.Property(e => e.GmPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("gm_Powiat");
            entity.Property(e => e.GmTyp).HasColumnName("gm_Typ");
        });

        modelBuilder.Entity<VwGratAkordy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratAkordy");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(86)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Ilosc)
                .HasColumnType("money")
                .HasColumnName("ILOSC");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.RachId).HasColumnName("RACH_ID");
            entity.Property(e => e.RodzajUmowy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_UMOWY");
            entity.Property(e => e.RodzajUmowyId).HasColumnName("RODZAJ_UMOWY_ID");
            entity.Property(e => e.Sposob).HasColumnName("SPOSOB");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.StawkaAkordowa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STAWKA_AKORDOWA");
            entity.Property(e => e.StawkaId).HasColumnName("STAWKA_ID");
            entity.Property(e => e.Umowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UMOWA");
            entity.Property(e => e.UmowaCpId).HasColumnName("UMOWA_CP_ID");
            entity.Property(e => e.UmowaId).HasColumnName("UMOWA_ID");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
            entity.Property(e => e.WyplataId).HasColumnName("WYPLATA_ID");
            entity.Property(e => e.Zatrudnienie)
                .HasMaxLength(108)
                .IsUnicode(false)
                .HasColumnName("ZATRUDNIENIE");
        });

        modelBuilder.Entity<VwGratCrakord>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRAkord");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(86)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Ilosc)
                .HasColumnType("money")
                .HasColumnName("ILOSC");
            entity.Property(e => e.Opis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPIS");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.RodzajUmowy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_UMOWY");
            entity.Property(e => e.Sposob).HasColumnName("SPOSOB");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.StawkaId).HasColumnName("STAWKA_ID");
            entity.Property(e => e.Umowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UMOWA");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
        });

        modelBuilder.Entity<VwGratCrkartaWynagrodzenAdresGmina>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRKartaWynagrodzenAdresGmina");

            entity.Property(e => e.AdresId).HasColumnName("ADRES_ID");
            entity.Property(e => e.AdresIdobiektu).HasColumnName("ADRES_IDOBIEKTU");
            entity.Property(e => e.AdresKodMiejscowosc)
                .HasMaxLength(136)
                .IsUnicode(false)
                .HasColumnName("ADRES_KOD_MIEJSCOWOSC");
            entity.Property(e => e.AdresTyp).HasColumnName("ADRES_TYP");
            entity.Property(e => e.Gmina)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("GMINA");
        });

        modelBuilder.Entity<VwGratCrkartaWynagrodzenDaty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRKartaWynagrodzenDaty");

            entity.Property(e => e.Data).HasColumnName("DATA");
        });

        modelBuilder.Entity<VwGratCrkartaWynagrodzenPracownik>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRKartaWynagrodzenPracownik");

            entity.Property(e => e.DataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("DATA_URODZENIA");
            entity.Property(e => e.IdPracownika).HasColumnName("ID_PRACOWNIKA");
            entity.Property(e => e.Imie)
                .HasMaxLength(43)
                .IsUnicode(false)
                .HasColumnName("IMIE");
            entity.Property(e => e.ImieMatki)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE_MATKI");
            entity.Property(e => e.ImieOjca)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE_OJCA");
            entity.Property(e => e.MiejsceUrodzenia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MIEJSCE_URODZENIA");
            entity.Property(e => e.Nazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NAZWISKO");
            entity.Property(e => e.Nip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NIP");
            entity.Property(e => e.Pesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PESEL");
        });

        modelBuilder.Entity<VwGratCrkartaWynagrodzenRachunki>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRKartaWynagrodzenRachunki");

            entity.Property(e => e.BruttoDuze)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_DUZE");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DataZaliczki)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ZALICZKI");
            entity.Property(e => e.Dochod)
                .HasColumnType("money")
                .HasColumnName("DOCHOD");
            entity.Property(e => e.IdPracownika).HasColumnName("ID_PRACOWNIKA");
            entity.Property(e => e.KosztUzyskania)
                .HasColumnType("money")
                .HasColumnName("KOSZT_UZYSKANIA");
            entity.Property(e => e.Miesiac)
                .HasColumnType("datetime")
                .HasColumnName("MIESIAC");
            entity.Property(e => e.NalZalNaPodDoch)
                .HasColumnType("money")
                .HasColumnName("NAL_ZAL_NA_POD_DOCH");
            entity.Property(e => e.ObZalNaPodDoch)
                .HasColumnType("money")
                .HasColumnName("OB_ZAL_NA_POD_DOCH");
            entity.Property(e => e.PrzychodyBrutto)
                .HasColumnType("money")
                .HasColumnName("PRZYCHODY_BRUTTO");
            entity.Property(e => e.Ryczalt).HasColumnName("RYCZALT");
            entity.Property(e => e.UbChorobowe)
                .HasColumnType("money")
                .HasColumnName("UB_CHOROBOWE");
            entity.Property(e => e.UbEmerytalne)
                .HasColumnType("money")
                .HasColumnName("UB_EMERYTALNE");
            entity.Property(e => e.UbRentowe)
                .HasColumnType("money")
                .HasColumnName("UB_RENTOWE");
            entity.Property(e => e.UbezpieczenieZdrowotneNieodliczane)
                .HasColumnType("money")
                .HasColumnName("UBEZPIECZENIE_ZDROWOTNE_NIEODLICZANE");
            entity.Property(e => e.UbezpieczenieZdrowotneOdliczane)
                .HasColumnType("money")
                .HasColumnName("UBEZPIECZENIE_ZDROWOTNE_ODLICZANE");
            entity.Property(e => e.UmowaOd)
                .HasColumnType("datetime")
                .HasColumnName("UMOWA_OD");
        });

        modelBuilder.Entity<VwGratCrkartaWynagrodzenWyplaty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRKartaWynagrodzenWyplaty");

            entity.Property(e => e.BruttoDuze)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_DUZE");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DataZaliczki)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ZALICZKI");
            entity.Property(e => e.Dochod)
                .HasColumnType("money")
                .HasColumnName("DOCHOD");
            entity.Property(e => e.IdPracownika).HasColumnName("ID_PRACOWNIKA");
            entity.Property(e => e.KosztUzyskania)
                .HasColumnType("money")
                .HasColumnName("KOSZT_UZYSKANIA");
            entity.Property(e => e.Miesiac)
                .HasColumnType("datetime")
                .HasColumnName("MIESIAC");
            entity.Property(e => e.NalZalNaPodDoch)
                .HasColumnType("money")
                .HasColumnName("NAL_ZAL_NA_POD_DOCH");
            entity.Property(e => e.ObZalNaPodDoch)
                .HasColumnType("money")
                .HasColumnName("OB_ZAL_NA_POD_DOCH");
            entity.Property(e => e.PrzychodyBrutto)
                .HasColumnType("money")
                .HasColumnName("PRZYCHODY_BRUTTO");
            entity.Property(e => e.UbChorobowe)
                .HasColumnType("money")
                .HasColumnName("UB_CHOROBOWE");
            entity.Property(e => e.UbEmerytalne)
                .HasColumnType("money")
                .HasColumnName("UB_EMERYTALNE");
            entity.Property(e => e.UbRentowe)
                .HasColumnType("money")
                .HasColumnName("UB_RENTOWE");
            entity.Property(e => e.UbezpieczenieZdrowotneNieodliczane)
                .HasColumnType("money")
                .HasColumnName("UBEZPIECZENIE_ZDROWOTNE_NIEODLICZANE");
            entity.Property(e => e.UbezpieczenieZdrowotneOdliczane)
                .HasColumnType("money")
                .HasColumnName("UBEZPIECZENIE_ZDROWOTNE_ODLICZANE");
            entity.Property(e => e.UmowaOd)
                .HasColumnType("datetime")
                .HasColumnName("UMOWA_OD");
        });

        modelBuilder.Entity<VwGratCrkwestionariuszOsobowyPracownicy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRKwestionariuszOsobowyPracownicy");

            entity.Property(e => e.DataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("DATA_URODZENIA");
            entity.Property(e => e.DowodTozsamosciDataWydania)
                .HasColumnType("datetime")
                .HasColumnName("DOWOD_TOZSAMOSCI_DATA_WYDANIA");
            entity.Property(e => e.DowodTozsamosciNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOWOD_TOZSAMOSCI_NUMER");
            entity.Property(e => e.DowodTozsamosciWydanyPrzez)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOWOD_TOZSAMOSCI_WYDANY_PRZEZ");
            entity.Property(e => e.IdPracownika).HasColumnName("ID_PRACOWNIKA");
            entity.Property(e => e.Imie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("IMIE");
            entity.Property(e => e.Imie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE2");
            entity.Property(e => e.ImieMatki)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE_MATKI");
            entity.Property(e => e.ImieOjca)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE_OJCA");
            entity.Property(e => e.Nazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NAZWISKO");
            entity.Property(e => e.Nip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NIP");
            entity.Property(e => e.NumerKsWojskowej)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMER_KS_WOJSKOWEJ");
            entity.Property(e => e.NumerSpecjalnosciWojskowej)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMER_SPECJALNOSCI_WOJSKOWEJ");
            entity.Property(e => e.ObowiazekObronny)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBOWIAZEK_OBRONNY");
            entity.Property(e => e.Obywatelstwo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBYWATELSTWO");
            entity.Property(e => e.Pesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PESEL");
            entity.Property(e => e.RokUkonczeniaSzkoly).HasColumnName("ROK_UKONCZENIA_SZKOLY");
            entity.Property(e => e.StopienWojskowy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STOPIEN_WOJSKOWY");
            entity.Property(e => e.Szkola)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SZKOLA");
            entity.Property(e => e.Wku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WKU");
            entity.Property(e => e.Wyksztalcenie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("WYKSZTALCENIE");
            entity.Property(e => e.ZawodWyuczony)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ZAWOD_WYUCZONY");
            entity.Property(e => e.Zdjecie)
                .HasColumnType("image")
                .HasColumnName("ZDJECIE");
        });

        modelBuilder.Entity<VwGratCrlistaPlac>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlac");

            entity.Property(e => e.DataWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("DATA_WYPLATY");
            entity.Property(e => e.IdLp).HasColumnName("ID_LP");
            entity.Property(e => e.Miesiac)
                .HasColumnType("datetime")
                .HasColumnName("MIESIAC");
            entity.Property(e => e.Numer)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.Tytul)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("TYTUL");
        });

        modelBuilder.Entity<VwGratCrlistaPlacKasowaWyplaty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacKasowaWyplaty");

            entity.Property(e => e.IdListyPlac).HasColumnName("ID_LISTY_PLAC");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.KwotaWKasie)
                .HasColumnType("money")
                .HasColumnName("KWOTA_W_KASIE");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(74)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSkladnik>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSkladnik");

            entity.Property(e => e.Aktywny).HasColumnName("AKTYWNY");
            entity.Property(e => e.IdSkladnika).HasColumnName("ID_SKLADNIKA");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
            entity.Property(e => e.Opodatkowany).HasColumnName("OPODATKOWANY");
            entity.Property(e => e.PlatnyPrzez).HasColumnName("PLATNY_PRZEZ");
            entity.Property(e => e.Rodzaj).HasColumnName("RODZAJ");
            entity.Property(e => e.Typ).HasColumnName("TYP");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSzczegolowyOdcinek>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSzczegolowyOdcinek");

            entity.Property(e => e.IdPracownika).HasColumnName("ID_PRACOWNIKA");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.LpDataWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("LP_DATA_WYPLATY");
            entity.Property(e => e.LpMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("lp_Miesiac");
            entity.Property(e => e.LpNumer)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("lp_Numer");
            entity.Property(e => e.LpTytul)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("lp_Tytul");
            entity.Property(e => e.PrEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("pr_EMail");
            entity.Property(e => e.PrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pr_NIP");
            entity.Property(e => e.PrPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("pr_PESEL");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(74)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.Umowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UMOWA");
            entity.Property(e => e.UpWymiar)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("UP_WYMIAR");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSzczegolowyOdcinekBrutto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSzczegolowyOdcinekBrutto");

            entity.Property(e => e.BruttoDuze)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_DUZE");
            entity.Property(e => e.BruttoMale)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_MALE");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.InneZwolnienia)
                .HasColumnType("money")
                .HasColumnName("INNE_ZWOLNIENIA");
            entity.Property(e => e.ObnizeniePodstawyZus)
                .HasColumnType("money")
                .HasColumnName("OBNIZENIE_PODSTAWY_ZUS");
            entity.Property(e => e.ZusPrac)
                .HasColumnType("money")
                .HasColumnName("ZUS_PRAC");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSzczegolowyOdcinekDoWyplaty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSzczegolowyOdcinekDoWyplaty");

            entity.Property(e => e.DoReki)
                .HasColumnType("money")
                .HasColumnName("DO_REKI");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.Netto)
                .HasColumnType("money")
                .HasColumnName("NETTO");
            entity.Property(e => e.PracownikOtrzymuje)
                .HasColumnType("money")
                .HasColumnName("PRACOWNIK_OTRZYMUJE");
            entity.Property(e => e.Przelew)
                .HasColumnType("money")
                .HasColumnName("PRZELEW");
            entity.Property(e => e.UbezpieczenieZdrowotne2)
                .HasColumnType("money")
                .HasColumnName("UBEZPIECZENIE_ZDROWOTNE_2");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSzczegolowyOdcinekNetto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSzczegolowyOdcinekNetto");

            entity.Property(e => e.BruttoMale)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_MALE");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.InneZwolnienia)
                .HasColumnType("money")
                .HasColumnName("INNE_ZWOLNIENIA");
            entity.Property(e => e.KosztUzyskania)
                .HasColumnType("money")
                .HasColumnName("KOSZT_UZYSKANIA");
            entity.Property(e => e.Netto)
                .HasColumnType("money")
                .HasColumnName("NETTO");
            entity.Property(e => e.Odliczenia)
                .HasColumnType("money")
                .HasColumnName("ODLICZENIA");
            entity.Property(e => e.Podatek)
                .HasColumnType("money")
                .HasColumnName("PODATEK");
            entity.Property(e => e.PodstUbZdrowotn)
                .HasColumnType("money")
                .HasColumnName("PODST_UB_ZDROWOTN");
            entity.Property(e => e.PodstawaOpodatkowania)
                .HasColumnType("money")
                .HasColumnName("PODSTAWA_OPODATKOWANIA");
            entity.Property(e => e.PpkPracodawcy)
                .HasColumnType("money")
                .HasColumnName("PPK_PRACODAWCY");
            entity.Property(e => e.PpkPracownika)
                .HasColumnType("money")
                .HasColumnName("PPK_PRACOWNIKA");
            entity.Property(e => e.UbezpieczenieZdrowotne)
                .HasColumnType("money")
                .HasColumnName("UBEZPIECZENIE_ZDROWOTNE");
            entity.Property(e => e.UlgaDlaKlasySredniej)
                .HasColumnType("money")
                .HasColumnName("ULGA_DLA_KLASY_SREDNIEJ");
            entity.Property(e => e.ZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("ZALICZKA_NA_PODATEK");
            entity.Property(e => e.ZaliczkaObliczona)
                .HasColumnType("money")
                .HasColumnName("ZALICZKA_OBLICZONA");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSzczegolowyOdcinekPodatek>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSzczegolowyOdcinekPodatek");

            entity.Property(e => e.BruttoDuze)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_DUZE");
            entity.Property(e => e.BruttoMale)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_MALE");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.NeRazem)
                .HasColumnType("money")
                .HasColumnName("NE_RAZEM");
            entity.Property(e => e.Netto)
                .HasColumnType("money")
                .HasColumnName("NETTO");
            entity.Property(e => e.PracownikOtrzymuje)
                .HasColumnType("money")
                .HasColumnName("PRACOWNIK_OTRZYMUJE");
            entity.Property(e => e.ZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("ZALICZKA_NA_PODATEK");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSzczegolowyOdcinekSkladniki>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSzczegolowyOdcinekSkladniki");

            entity.Property(e => e.IdRecordu).HasColumnName("ID_RECORDU");
            entity.Property(e => e.IdSkladnika).HasColumnName("ID_SKLADNIKA");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
            entity.Property(e => e.Opodatkowany).HasColumnName("OPODATKOWANY");
            entity.Property(e => e.Typ).HasColumnName("TYP");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSzczegolowyOdcinekUbezpieczenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSzczegolowyOdcinekUbezpieczenia");

            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.ObciazeniePracodawcy)
                .HasColumnType("money")
                .HasColumnName("OBCIAZENIE_PRACODAWCY");
            entity.Property(e => e.Zus)
                .HasColumnType("money")
                .HasColumnName("ZUS");
            entity.Property(e => e.ZusFirma)
                .HasColumnType("money")
                .HasColumnName("ZUS_FIRMA");
            entity.Property(e => e.ZusPrac)
                .HasColumnType("money")
                .HasColumnName("ZUS_PRAC");
            entity.Property(e => e.ZusRazem)
                .HasColumnType("money")
                .HasColumnName("ZUS_RAZEM");
            entity.Property(e => e.ZusZasilki)
                .HasColumnType("money")
                .HasColumnName("ZUS_ZASILKI");
        });

        modelBuilder.Entity<VwGratCrlistaPlacSzczegolowyOdcinekZu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacSzczegolowyOdcinekZUS");

            entity.Property(e => e.Fep)
                .HasColumnType("money")
                .HasColumnName("FEP");
            entity.Property(e => e.Fgsp)
                .HasColumnType("money")
                .HasColumnName("FGSP");
            entity.Property(e => e.Fp)
                .HasColumnType("money")
                .HasColumnName("FP");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.PodstUbChorWyp)
                .HasColumnType("money")
                .HasColumnName("PODST_UB_CHOR_WYP");
            entity.Property(e => e.PodstUbEmerRent)
                .HasColumnType("money")
                .HasColumnName("PODST_UB_EMER_RENT");
            entity.Property(e => e.ZusUbChorobowePrac)
                .HasColumnType("money")
                .HasColumnName("ZUS_UB_CHOROBOWE_PRAC");
            entity.Property(e => e.ZusUbEmeryt1firma)
                .HasColumnType("money")
                .HasColumnName("ZUS_UB_EMERYT_1FIRMA");
            entity.Property(e => e.ZusUbEmeryt1prac)
                .HasColumnType("money")
                .HasColumnName("ZUS_UB_EMERYT_1PRAC");
            entity.Property(e => e.ZusUbEmeryt2prac)
                .HasColumnType("money")
                .HasColumnName("ZUS_UB_EMERYT_2PRAC");
            entity.Property(e => e.ZusUbRentoweFirma)
                .HasColumnType("money")
                .HasColumnName("ZUS_UB_RENTOWE_FIRMA");
            entity.Property(e => e.ZusUbRentowePrac)
                .HasColumnType("money")
                .HasColumnName("ZUS_UB_RENTOWE_PRAC");
            entity.Property(e => e.ZusUbWypFirma)
                .HasColumnType("money")
                .HasColumnName("ZUS_UB_WYP_FIRMA");
        });

        modelBuilder.Entity<VwGratCrlistaPlacWyplaty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacWyplaty");

            entity.Property(e => e.BruttoDuze)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_DUZE");
            entity.Property(e => e.BruttoMale)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_MALE");
            entity.Property(e => e.DataWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("DATA_WYPLATY");
            entity.Property(e => e.DoReki)
                .HasColumnType("money")
                .HasColumnName("DO_REKI");
            entity.Property(e => e.Fep)
                .HasColumnType("money")
                .HasColumnName("FEP");
            entity.Property(e => e.Fgsp)
                .HasColumnType("money")
                .HasColumnName("FGSP");
            entity.Property(e => e.Fp)
                .HasColumnType("money")
                .HasColumnName("FP");
            entity.Property(e => e.IdListyPlac).HasColumnName("ID_LISTY_PLAC");
            entity.Property(e => e.IdPracownika).HasColumnName("ID_PRACOWNIKA");
            entity.Property(e => e.IdRecordu).HasColumnName("ID_RECORDU");
            entity.Property(e => e.InneZwolnienia)
                .HasColumnType("money")
                .HasColumnName("INNE_ZWOLNIENIA");
            entity.Property(e => e.KosztUzyskania)
                .HasColumnType("money")
                .HasColumnName("KOSZT_UZYSKANIA");
            entity.Property(e => e.MiesiacLp)
                .HasColumnType("datetime")
                .HasColumnName("MIESIAC_LP");
            entity.Property(e => e.Netto)
                .HasColumnType("money")
                .HasColumnName("NETTO");
            entity.Property(e => e.NumerLp)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("NUMER_LP");
            entity.Property(e => e.NumerUmowy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER_UMOWY");
            entity.Property(e => e.ObnizeniePodstawyZus)
                .HasColumnType("money")
                .HasColumnName("OBNIZENIE_PODSTAWY_ZUS");
            entity.Property(e => e.Odliczenia)
                .HasColumnType("money")
                .HasColumnName("ODLICZENIA");
            entity.Property(e => e.Podatek)
                .HasColumnType("money")
                .HasColumnName("PODATEK");
            entity.Property(e => e.PodstawaChWy)
                .HasColumnType("money")
                .HasColumnName("PODSTAWA_CH_WY");
            entity.Property(e => e.PodstawaEmRe)
                .HasColumnType("money")
                .HasColumnName("PODSTAWA_EM_RE");
            entity.Property(e => e.PodstawaOpodatkowania)
                .HasColumnType("money")
                .HasColumnName("PODSTAWA_OPODATKOWANIA");
            entity.Property(e => e.PodstawaUbezpieczeniaZdrowotnego)
                .HasColumnType("money")
                .HasColumnName("PODSTAWA_UBEZPIECZENIA_ZDROWOTNEGO");
            entity.Property(e => e.PpkOpodatkowane)
                .HasColumnType("money")
                .HasColumnName("PPK_OPODATKOWANE");
            entity.Property(e => e.PpkPracodawcy)
                .HasColumnType("money")
                .HasColumnName("PPK_PRACODAWCY");
            entity.Property(e => e.PpkPracownika)
                .HasColumnType("money")
                .HasColumnName("PPK_PRACOWNIKA");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(74)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.PracownikOtrzymuje)
                .HasColumnType("money")
                .HasColumnName("PRACOWNIK_OTRZYMUJE");
            entity.Property(e => e.Przelew)
                .HasColumnType("money")
                .HasColumnName("PRZELEW");
            entity.Property(e => e.StatDniChoroby).HasColumnName("STAT_DNI_CHOROBY");
            entity.Property(e => e.StatDniDoPrzepr).HasColumnName("STAT_DNI_DO_PRZEPR");
            entity.Property(e => e.StatDniMiesiaca).HasColumnName("STAT_DNI_MIESIACA");
            entity.Property(e => e.StatDniNieobNieusp).HasColumnName("STAT_DNI_NIEOB_NIEUSP");
            entity.Property(e => e.StatDniNieobUspNiepl).HasColumnName("STAT_DNI_NIEOB_USP_NIEPL");
            entity.Property(e => e.StatDniNieobUspPl).HasColumnName("STAT_DNI_NIEOB_USP_PL");
            entity.Property(e => e.StatDniOpieki).HasColumnName("STAT_DNI_OPIEKI");
            entity.Property(e => e.StatDniOpiekiNadDzieckiem).HasColumnName("STAT_DNI_OPIEKI_NAD_DZIECKIEM");
            entity.Property(e => e.StatDniPoszPracy).HasColumnName("STAT_DNI_POSZ_PRACY");
            entity.Property(e => e.StatDniPrzepr).HasColumnName("STAT_DNI_PRZEPR");
            entity.Property(e => e.StatDniSluzby).HasColumnName("STAT_DNI_SLUZBY");
            entity.Property(e => e.StatDniUrlBezpl).HasColumnName("STAT_DNI_URL_BEZPL");
            entity.Property(e => e.StatDniUrlMac).HasColumnName("STAT_DNI_URL_MAC");
            entity.Property(e => e.StatDniUrlWych).HasColumnName("STAT_DNI_URL_WYCH");
            entity.Property(e => e.StatDniUrlWyp).HasColumnName("STAT_DNI_URL_WYP");
            entity.Property(e => e.StatDniZwolnOkolPl).HasColumnName("STAT_DNI_ZWOLN_OKOL_PL");
            entity.Property(e => e.StatDniZwolnPl).HasColumnName("STAT_DNI_ZWOLN_PL");
            entity.Property(e => e.StatGodzAbsDoPotr).HasColumnName("STAT_GODZ_ABS_DO_POTR");
            entity.Property(e => e.StatGodzAbsDoRozl).HasColumnName("STAT_GODZ_ABS_DO_ROZL");
            entity.Property(e => e.StatGodzBilansDoRozl).HasColumnName("STAT_GODZ_BILANS_DO_ROZL");
            entity.Property(e => e.StatGodzDoPrzepr).HasColumnName("STAT_GODZ_DO_PRZEPR");
            entity.Property(e => e.StatGodzNadlDoWypl).HasColumnName("STAT_GODZ_NADL_DO_WYPL");
            entity.Property(e => e.StatGodzNadlDoWyplKolejne).HasColumnName("STAT_GODZ_NADL_DO_WYPL_KOLEJNE");
            entity.Property(e => e.StatGodzNadlDoWyplPierwsze).HasColumnName("STAT_GODZ_NADL_DO_WYPL_PIERWSZE");
            entity.Property(e => e.StatGodzNadlNoc).HasColumnName("STAT_GODZ_NADL_NOC");
            entity.Property(e => e.StatGodzNadlRozl).HasColumnName("STAT_GODZ_NADL_ROZL");
            entity.Property(e => e.StatGodzNadlRozlSuma).HasColumnName("STAT_GODZ_NADL_ROZL_SUMA");
            entity.Property(e => e.StatGodzNadlWDniSwiateczne).HasColumnName("STAT_GODZ_NADL_W_DNI_SWIATECZNE");
            entity.Property(e => e.StatGodzNadlWDniWolne).HasColumnName("STAT_GODZ_NADL_W_DNI_WOLNE");
            entity.Property(e => e.StatGodzNoc).HasColumnName("STAT_GODZ_NOC");
            entity.Property(e => e.StatGodzPrzepr).HasColumnName("STAT_GODZ_PRZEPR");
            entity.Property(e => e.StatGodzPrzeprWszystkie).HasColumnName("STAT_GODZ_PRZEPR_WSZYSTKIE");
            entity.Property(e => e.StatSumaGodzNocnych).HasColumnName("STAT_SUMA_GODZ_NOCNYCH");
            entity.Property(e => e.SumaUbezpieczeniaZdrowotnegoPrac)
                .HasColumnType("money")
                .HasColumnName("SUMA_UBEZPIECZENIA_ZDROWOTNEGO_PRAC");
            entity.Property(e => e.TytulLp)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("TYTUL_LP");
            entity.Property(e => e.UbezpieczenieZdrowotne)
                .HasColumnType("money")
                .HasColumnName("UBEZPIECZENIE_ZDROWOTNE");
            entity.Property(e => e.UbezpieczenieZdrowotne2)
                .HasColumnType("money")
                .HasColumnName("UBEZPIECZENIE_ZDROWOTNE_2");
            entity.Property(e => e.UlgaDlaKlasySredniej)
                .HasColumnType("money")
                .HasColumnName("ULGA_DLA_KLASY_SREDNIEJ");
            entity.Property(e => e.ZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("ZALICZKA_NA_PODATEK");
            entity.Property(e => e.ZaliczkaObliczona)
                .HasColumnType("money")
                .HasColumnName("ZALICZKA_OBLICZONA");
            entity.Property(e => e.Zus)
                .HasColumnType("money")
                .HasColumnName("ZUS");
            entity.Property(e => e.ZusChorPrac)
                .HasColumnType("money")
                .HasColumnName("ZUS_CHOR_PRAC");
            entity.Property(e => e.ZusEmer1Firma)
                .HasColumnType("money")
                .HasColumnName("ZUS_EMER_1_FIRMA");
            entity.Property(e => e.ZusEmer1Prac)
                .HasColumnType("money")
                .HasColumnName("ZUS_EMER_1_PRAC");
            entity.Property(e => e.ZusEmer2Prac)
                .HasColumnType("money")
                .HasColumnName("ZUS_EMER_2_PRAC");
            entity.Property(e => e.ZusFirma)
                .HasColumnType("money")
                .HasColumnName("ZUS_FIRMA");
            entity.Property(e => e.ZusPrac)
                .HasColumnType("money")
                .HasColumnName("ZUS_PRAC");
            entity.Property(e => e.ZusRentFirma)
                .HasColumnType("money")
                .HasColumnName("ZUS_RENT_FIRMA");
            entity.Property(e => e.ZusRentPrac)
                .HasColumnType("money")
                .HasColumnName("ZUS_RENT_PRAC");
            entity.Property(e => e.ZusWypFirma)
                .HasColumnType("money")
                .HasColumnName("ZUS_WYP_FIRMA");
        });

        modelBuilder.Entity<VwGratCrlistaPlacWyplatySkladniki>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRListaPlacWyplatySkladniki");

            entity.Property(e => e.IdSkladnika).HasColumnName("ID_SKLADNIKA");
            entity.Property(e => e.IdWyplaty).HasColumnName("ID_WYPLATY");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
        });

        modelBuilder.Entity<VwGratCrnaliczeniaPotracenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRNaliczeniaPotracenia");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(86)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.IdPracownika).HasColumnName("ID_PRACOWNIKA");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Kwota)
                .HasColumnType("money")
                .HasColumnName("KWOTA");
            entity.Property(e => e.Opis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPIS");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.Skladnik)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKLADNIK");
            entity.Property(e => e.SkladnikDoPodstChWy).HasColumnName("SKLADNIK_DO_PODST_CH_WY");
            entity.Property(e => e.SkladnikDoPodstEmRe).HasColumnName("SKLADNIK_DO_PODST_EM_RE");
            entity.Property(e => e.SkladnikDoPodstZdr).HasColumnName("SKLADNIK_DO_PODST_ZDR");
            entity.Property(e => e.SkladnikNazwaNaLisciePlac)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKLADNIK_NAZWA_NA_LISCIE_PLAC");
            entity.Property(e => e.SkladnikOpodotkowany).HasColumnName("SKLADNIK_OPODOTKOWANY");
            entity.Property(e => e.Sposob).HasColumnName("SPOSOB");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Typ).HasColumnName("TYP");
            entity.Property(e => e.Umowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UMOWA");
        });

        modelBuilder.Entity<VwGratCrpracownicy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRPracownicy");

            entity.Property(e => e.Pracownik)
                .HasMaxLength(74)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.PracownikId).HasColumnName("PRACOWNIK_ID");
        });

        modelBuilder.Entity<VwGratCrpracownicyWdziale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRPracownicyWDziale");

            entity.Property(e => e.DzialId).HasColumnName("DZIAL_ID");
            entity.Property(e => e.DzialNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DZIAL_NAZWA");
            entity.Property(e => e.GrupaPracownikaId).HasColumnName("GRUPA_PRACOWNIKA_ID");
            entity.Property(e => e.PracownikId).HasColumnName("PRACOWNIK_ID");
            entity.Property(e => e.PracownikImie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK_IMIE");
            entity.Property(e => e.PracownikImie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK_IMIE2");
            entity.Property(e => e.PracownikNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK_NAZWISKO");
            entity.Property(e => e.UmowaPracyNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UMOWA_PRACY_NUMER");
            entity.Property(e => e.UmowaPracyWDzialeDataDo)
                .HasColumnType("datetime")
                .HasColumnName("UMOWA_PRACY_W_DZIALE_DATA_DO");
            entity.Property(e => e.UmowaPracyWDzialeDataOd)
                .HasColumnType("datetime")
                .HasColumnName("UMOWA_PRACY_W_DZIALE_DATA_OD");
        });

        modelBuilder.Entity<VwGratCrprowizja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRProwizja");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(86)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Ilosc)
                .HasColumnType("money")
                .HasColumnName("ILOSC");
            entity.Property(e => e.Opis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPIS");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.RodzajUmowy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_UMOWY");
            entity.Property(e => e.Sposob).HasColumnName("SPOSOB");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.StawkaId).HasColumnName("STAWKA_ID");
            entity.Property(e => e.Umowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UMOWA");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
        });

        modelBuilder.Entity<VwGratCrskladnikPlacowyDefinicje>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRSkladnikPlacowyDefinicje");

            entity.Property(e => e.DataDo)
                .HasColumnType("datetime")
                .HasColumnName("DATA_DO");
            entity.Property(e => e.DataOd)
                .HasColumnType("datetime")
                .HasColumnName("DATA_OD");
            entity.Property(e => e.IdSp).HasColumnName("ID_SP");
            entity.Property(e => e.IdSpdef).HasColumnName("ID_SPDEF");
            entity.Property(e => e.Opis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPIS");
            entity.Property(e => e.Typ).HasColumnName("TYP");
        });

        modelBuilder.Entity<VwGratCrzestawPlacowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRZestawPlacowy");

            entity.Property(e => e.LpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LP_NAZWA");
            entity.Property(e => e.LpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("LP_OPIS");
            entity.Property(e => e.ZpCzerwiec).HasColumnName("ZP_CZERWIEC");
            entity.Property(e => e.ZpGrudzien).HasColumnName("ZP_GRUDZIEN");
            entity.Property(e => e.ZpId).HasColumnName("ZP_ID");
            entity.Property(e => e.ZpKwiecien).HasColumnName("ZP_KWIECIEN");
            entity.Property(e => e.ZpLipiec).HasColumnName("ZP_LIPIEC");
            entity.Property(e => e.ZpListopad).HasColumnName("ZP_LISTOPAD");
            entity.Property(e => e.ZpLuty).HasColumnName("ZP_LUTY");
            entity.Property(e => e.ZpMaj).HasColumnName("ZP_MAJ");
            entity.Property(e => e.ZpMarzec).HasColumnName("ZP_MARZEC");
            entity.Property(e => e.ZpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZP_NAZWA");
            entity.Property(e => e.ZpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ZP_OPIS");
            entity.Property(e => e.ZpPazdzienik).HasColumnName("ZP_PAZDZIENIK");
            entity.Property(e => e.ZpRozliczacAkordy).HasColumnName("ZP_ROZLICZAC_AKORDY");
            entity.Property(e => e.ZpRozliczacEcp).HasColumnName("ZP_ROZLICZAC_ECP");
            entity.Property(e => e.ZpRozliczacNadgodziny).HasColumnName("ZP_ROZLICZAC_NADGODZINY");
            entity.Property(e => e.ZpRozliczacNalPot).HasColumnName("ZP_ROZLICZAC_NAL_POT");
            entity.Property(e => e.ZpRozliczacPkzp).HasColumnName("ZP_ROZLICZAC_PKZP");
            entity.Property(e => e.ZpRozliczacProwizje).HasColumnName("ZP_ROZLICZAC_PROWIZJE");
            entity.Property(e => e.ZpSierpien).HasColumnName("ZP_SIERPIEN");
            entity.Property(e => e.ZpStyczen).HasColumnName("ZP_STYCZEN");
            entity.Property(e => e.ZpUzupelnienieDoMinimalnej).HasColumnName("ZP_UZUPELNIENIE_DO_MINIMALNEJ");
            entity.Property(e => e.ZpWrzesien).HasColumnName("ZP_WRZESIEN");
        });

        modelBuilder.Entity<VwGratCrzestawPlacowySkladniki>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratCRZestawPlacowySkladniki");

            entity.Property(e => e.IdSkladnika).HasColumnName("ID_SKLADNIKA");
            entity.Property(e => e.IdZp).HasColumnName("ID_ZP");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
            entity.Property(e => e.PodstawaChorobowego).HasColumnName("PODSTAWA_CHOROBOWEGO");
            entity.Property(e => e.PodstawaEmeryturyRenty).HasColumnName("PODSTAWA_EMERYTURY_RENTY");
            entity.Property(e => e.PodstawaZdrowotnego).HasColumnName("PODSTAWA_ZDROWOTNEGO");
            entity.Property(e => e.Rodzaj).HasColumnName("RODZAJ");
            entity.Property(e => e.Typ).HasColumnName("TYP");
        });

        modelBuilder.Entity<VwGratInfoPracUmowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratInfoPrac_Umowy");

            entity.Property(e => e.DataDo).HasColumnType("datetime");
            entity.Property(e => e.DziNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dzi_Nazwa");
            entity.Property(e => e.Rodzaj)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SlkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("slk_Nazwa");
            entity.Property(e => e.StnNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("stn_Nazwa");
            entity.Property(e => e.UpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("up_DataOd");
            entity.Property(e => e.UpId).HasColumnName("up_Id");
            entity.Property(e => e.UpIdPracownika).HasColumnName("up_IdPracownika");
            entity.Property(e => e.UpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("up_Numer");
            entity.Property(e => e.Wymiar)
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwGratInfoPracUmowyCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratInfoPrac_UmowyCP");

            entity.Property(e => e.DataDo).HasColumnType("datetime");
            entity.Property(e => e.Okres)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Rodzaj)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UcpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ucp_DataOd");
            entity.Property(e => e.UcpId).HasColumnName("ucp_Id");
            entity.Property(e => e.UcpIdPracownika).HasColumnName("ucp_IdPracownika");
            entity.Property(e => e.UcpKwota)
                .HasColumnType("money")
                .HasColumnName("ucp_Kwota");
            entity.Property(e => e.UcpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ucp_Numer");
            entity.Property(e => e.UcpTytul)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("ucp_Tytul");
        });

        modelBuilder.Entity<VwGratNaliczeniaPotracenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratNaliczeniaPotracenia");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(86)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Naliczenie)
                .HasColumnType("money")
                .HasColumnName("NALICZENIE");
            entity.Property(e => e.Parametr)
                .HasColumnType("money")
                .HasColumnName("PARAMETR");
            entity.Property(e => e.Potracenie)
                .HasColumnType("money")
                .HasColumnName("POTRACENIE");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.Skladnik)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SKLADNIK");
            entity.Property(e => e.SkladnikId).HasColumnName("SKLADNIK_ID");
            entity.Property(e => e.Sposob).HasColumnName("SPOSOB");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Typ).HasColumnName("TYP");
            entity.Property(e => e.Umowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UMOWA");
            entity.Property(e => e.UmowaId).HasColumnName("UMOWA_ID");
            entity.Property(e => e.WyplataId).HasColumnName("WYPLATA_ID");
            entity.Property(e => e.Zatrudnienie)
                .HasMaxLength(108)
                .IsUnicode(false)
                .HasColumnName("ZATRUDNIENIE");
        });

        modelBuilder.Entity<VwGratPlanowaniePracy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratPlanowaniePracy");

            entity.Property(e => e.Pracownik)
                .HasMaxLength(74)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwGratPotraceniaKomornicze>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratPotraceniaKomornicze");

            entity.Property(e => e.DataDoWirtualna).HasColumnType("datetime");
            entity.Property(e => e.FlgId).HasColumnName("flg_Id");
            entity.Property(e => e.FlgNumer).HasColumnName("flg_Numer");
            entity.Property(e => e.FlgText)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("flg_Text");
            entity.Property(e => e.FlwCzasOstatniejZmiany)
                .HasColumnType("datetime")
                .HasColumnName("flw_CzasOstatniejZmiany");
            entity.Property(e => e.FlwIdFlagi).HasColumnName("flw_IdFlagi");
            entity.Property(e => e.FlwKomentarz)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("flw_Komentarz");
            entity.Property(e => e.IdUmowaOpraceOstatnia).HasColumnName("IdUmowaOPraceOstatnia");
            entity.Property(e => e.KpCzestotliwoscPotracania).HasColumnName("kp_CzestotliwoscPotracania");
            entity.Property(e => e.KpCzyNaSwiadectwiePracy).HasColumnName("kp_CzyNaSwiadectwiePracy");
            entity.Property(e => e.KpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("kp_DataDo");
            entity.Property(e => e.KpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("kp_DataOd");
            entity.Property(e => e.KpId).HasColumnName("kp_Id");
            entity.Property(e => e.KpIdPracownika).HasColumnName("kp_IdPracownika");
            entity.Property(e => e.KpIdSkladnika).HasColumnName("kp_IdSkladnika");
            entity.Property(e => e.KpKomornik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kp_Komornik");
            entity.Property(e => e.KpKwotaPotraceniaMiesiecznego)
                .HasColumnType("money")
                .HasColumnName("kp_KwotaPotraceniaMiesiecznego");
            entity.Property(e => e.KpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kp_Nazwa");
            entity.Property(e => e.KpPriorytetPotracenia).HasColumnName("kp_PriorytetPotracenia");
            entity.Property(e => e.KpProcentOchronyWynagrodzenia)
                .HasColumnType("money")
                .HasColumnName("kp_ProcentOchronyWynagrodzenia");
            entity.Property(e => e.KpProcentWynagrodzeniaPotracany)
                .HasColumnType("money")
                .HasColumnName("kp_ProcentWynagrodzeniaPotracany");
            entity.Property(e => e.KpRodzaj).HasColumnName("kp_Rodzaj");
            entity.Property(e => e.KpSposobPotracania).HasColumnName("kp_SposobPotracania");
            entity.Property(e => e.KpSumaPotracenia)
                .HasColumnType("money")
                .HasColumnName("kp_SumaPotracenia");
            entity.Property(e => e.KpSygnaturaSprawy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kp_SygnaturaSprawy");
            entity.Property(e => e.KpZawieszenieDataDo)
                .HasColumnType("datetime")
                .HasColumnName("kp_ZawieszenieDataDo");
            entity.Property(e => e.KpZawieszenieDataOd)
                .HasColumnType("datetime")
                .HasColumnName("kp_ZawieszenieDataOd");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.Rodzaj)
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.Saldo).HasColumnType("money");
            entity.Property(e => e.Skladnik)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.SposobPotracania)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.SumKwotaPotracona).HasColumnType("money");
            entity.Property(e => e.SumKwotaWyliczona).HasColumnType("money");
            entity.Property(e => e.UzIdentyfikator)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("uz_Identyfikator");
            entity.Property(e => e.WartoscPotraceniaJednorazowoNext).HasColumnType("money");
        });

        modelBuilder.Entity<VwGratPracownicyLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratPracownicyLookup");

            entity.Property(e => e.AdrAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adr_Adres");
            entity.Property(e => e.AdrMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Miejscowosc");
            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.GrpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("grp_Nazwa");
            entity.Property(e => e.PrAktywny).HasColumnName("pr_Aktywny");
            entity.Property(e => e.PrDataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("pr_DataUrodzenia");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.PrImie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("pr_Imie");
            entity.Property(e => e.PrImie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pr_Imie2");
            entity.Property(e => e.PrNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pr_Nazwisko");
            entity.Property(e => e.PrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pr_NIP");
            entity.Property(e => e.PrPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("pr_PESEL");
            entity.Property(e => e.UpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("up_Numer");
        });

        modelBuilder.Entity<VwGratPracownicyLookupPpk>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratPracownicyLookupPPK");

            entity.Property(e => e.AdrAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adr_Adres");
            entity.Property(e => e.AdrMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Miejscowosc");
            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.GrpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("grp_Nazwa");
            entity.Property(e => e.PpkUczestnictwo).HasColumnName("ppk_Uczestnictwo");
            entity.Property(e => e.PrAktywny).HasColumnName("pr_Aktywny");
            entity.Property(e => e.PrDataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("pr_DataUrodzenia");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.PrImie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("pr_Imie");
            entity.Property(e => e.PrImie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pr_Imie2");
            entity.Property(e => e.PrNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pr_Nazwisko");
            entity.Property(e => e.PrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pr_NIP");
            entity.Property(e => e.PrPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("pr_PESEL");
            entity.Property(e => e.UpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("up_Numer");
        });

        modelBuilder.Entity<VwGratProwizje>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratProwizje");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(86)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Ilosc)
                .HasColumnType("money")
                .HasColumnName("ILOSC");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.RachId).HasColumnName("RACH_ID");
            entity.Property(e => e.RodzajUmowy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_UMOWY");
            entity.Property(e => e.RodzajUmowyId).HasColumnName("RODZAJ_UMOWY_ID");
            entity.Property(e => e.Sposob).HasColumnName("SPOSOB");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.StawkaId).HasColumnName("STAWKA_ID");
            entity.Property(e => e.StawkaProwizyjna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STAWKA_PROWIZYJNA");
            entity.Property(e => e.Umowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UMOWA");
            entity.Property(e => e.UmowaCpId).HasColumnName("UMOWA_CP_ID");
            entity.Property(e => e.UmowaId).HasColumnName("UMOWA_ID");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
            entity.Property(e => e.WyplataId).HasColumnName("WYPLATA_ID");
            entity.Property(e => e.Zatrudnienie)
                .HasMaxLength(108)
                .IsUnicode(false)
                .HasColumnName("ZATRUDNIENIE");
        });

        modelBuilder.Entity<VwGratRachunkiDoUmowCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratRachunkiDoUmowCP");

            entity.Property(e => e.BruttoDuze)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_DUZE");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DataDo)
                .HasColumnType("datetime")
                .HasColumnName("DATA_DO");
            entity.Property(e => e.DataOd)
                .HasColumnType("datetime")
                .HasColumnName("DATA_OD");
            entity.Property(e => e.DataRozwiazania)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ROZWIAZANIA");
            entity.Property(e => e.DoWyplaty)
                .HasColumnType("money")
                .HasColumnName("DO_WYPLATY");
            entity.Property(e => e.IdKategoria).HasColumnName("ID_KATEGORIA");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.KategoriaNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KATEGORIA_NAZWA");
            entity.Property(e => e.NaCzas)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("NA_CZAS");
            entity.Property(e => e.Netto)
                .HasColumnType("money")
                .HasColumnName("NETTO");
            entity.Property(e => e.Nip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NIP");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.NumerUmowy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER_UMOWY");
            entity.Property(e => e.Pesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PESEL");
            entity.Property(e => e.PodstawaEmerRent)
                .HasColumnType("money")
                .HasColumnName("PODSTAWA_EMER_RENT");
            entity.Property(e => e.PodstawaOpodatkowania)
                .HasColumnType("money")
                .HasColumnName("PODSTAWA_OPODATKOWANIA");
            entity.Property(e => e.Ppkpracodawca)
                .HasColumnType("money")
                .HasColumnName("PPKPracodawca");
            entity.Property(e => e.Ppkpracownik)
                .HasColumnType("money")
                .HasColumnName("PPKPracownik");
            entity.Property(e => e.Ppksuma)
                .HasColumnType("money")
                .HasColumnName("PPKSuma");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.RodzajUmowy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_UMOWY");
            entity.Property(e => e.RodzajUmowyId).HasColumnName("RODZAJ_UMOWY_ID");
            entity.Property(e => e.RuBylKw).HasColumnName("ru_BylKW");
            entity.Property(e => e.RuBylPrzelew).HasColumnName("ru_BylPrzelew");
            entity.Property(e => e.RuBylWydruk).HasColumnName("ru_BylWydruk");
            entity.Property(e => e.RuDoReki)
                .HasColumnType("money")
                .HasColumnName("ru_DoReki");
            entity.Property(e => e.RuFlagi).HasColumnName("ru_Flagi");
            entity.Property(e => e.RuOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ru_Opis");
            entity.Property(e => e.RuPodatekProcent)
                .HasColumnType("money")
                .HasColumnName("ru_PodatekProcent");
            entity.Property(e => e.RuPrzelew)
                .HasColumnType("money")
                .HasColumnName("ru_Przelew");
            entity.Property(e => e.RuRokPrzychodu).HasColumnName("ru_RokPrzychodu");
            entity.Property(e => e.RuRyczalt).HasColumnName("ru_Ryczalt");
            entity.Property(e => e.RuStatusImportuPpk).HasColumnName("ru_StatusImportuPPK");
            entity.Property(e => e.StatusRach).HasColumnName("STATUS_RACH");
            entity.Property(e => e.StatusSkladki).HasColumnName("STATUS_SKLADKI");
            entity.Property(e => e.StatusZaliczki).HasColumnName("STATUS_ZALICZKI");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
            entity.Property(e => e.ZaliczkaPodatek)
                .HasColumnType("money")
                .HasColumnName("ZALICZKA_PODATEK");
            entity.Property(e => e.Zatwierdzony).HasColumnName("ZATWIERDZONY");
            entity.Property(e => e.Zdrowotne)
                .HasColumnType("money")
                .HasColumnName("ZDROWOTNE");
            entity.Property(e => e.ZusPracodawca)
                .HasColumnType("money")
                .HasColumnName("ZUS_PRACODAWCA");
            entity.Property(e => e.ZusPracownik)
                .HasColumnType("money")
                .HasColumnName("ZUS_PRACOWNIK");
        });

        modelBuilder.Entity<VwGratSkladnikPlacowyInstytucja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSkladnikPlacowyInstytucja");

            entity.Property(e => e.InstytucjaAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_ADRES");
            entity.Property(e => e.InstytucjaEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_EMAIL");
            entity.Property(e => e.InstytucjaFaks)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_FAKS");
            entity.Property(e => e.InstytucjaGmina)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_GMINA");
            entity.Property(e => e.InstytucjaId).HasColumnName("INSTYTUCJA_ID");
            entity.Property(e => e.InstytucjaKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_KOD");
            entity.Property(e => e.InstytucjaMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_MIEJSCOWOSC");
            entity.Property(e => e.InstytucjaNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_NAZWA");
            entity.Property(e => e.InstytucjaNazwapelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_NAZWAPELNA");
            entity.Property(e => e.InstytucjaNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_NIP");
            entity.Property(e => e.InstytucjaPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_POWIAT");
            entity.Property(e => e.InstytucjaRodzaj).HasColumnName("INSTYTUCJA_RODZAJ");
            entity.Property(e => e.InstytucjaSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_SYMBOL");
            entity.Property(e => e.InstytucjaTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_TELEFON");
            entity.Property(e => e.InstytucjaWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("INSTYTUCJA_WWW");
        });

        modelBuilder.Entity<VwGratSkladnikiPlacowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSkladnikiPlacowe");

            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.SpAktywny).HasColumnName("sp_Aktywny");
            entity.Property(e => e.SpDoPodstChWy).HasColumnName("sp_DoPodstChWy");
            entity.Property(e => e.SpDoPodstEmRe).HasColumnName("sp_DoPodstEmRe");
            entity.Property(e => e.SpDoPodstZdr).HasColumnName("sp_DoPodstZdr");
            entity.Property(e => e.SpId).HasColumnName("sp_Id");
            entity.Property(e => e.SpNazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("sp_Nazwa");
            entity.Property(e => e.SpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sp_Opis");
            entity.Property(e => e.SpOpodatkowany).HasColumnName("sp_Opodatkowany");
            entity.Property(e => e.SpPlatnyPrzez).HasColumnName("sp_PlatnyPrzez");
            entity.Property(e => e.SpRodzaj).HasColumnName("sp_Rodzaj");
            entity.Property(e => e.SpTyp).HasColumnName("sp_Typ");
            entity.Property(e => e.SpZwolnienieZpodatku).HasColumnName("sp_ZwolnienieZPodatku");
            entity.Property(e => e.SpZwolnienieZpodatkuDlaMlodych).HasColumnName("sp_ZwolnienieZPodatkuDlaMlodych");
            entity.Property(e => e.SpdDataDo)
                .HasColumnType("datetime")
                .HasColumnName("spd_DataDo");
            entity.Property(e => e.SpdDataOd)
                .HasColumnType("datetime")
                .HasColumnName("spd_DataOd");
            entity.Property(e => e.Wartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("WARTOSC");
        });

        modelBuilder.Entity<VwGratSqlViewAkord>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSqlView_Akord");

            entity.Property(e => e.AkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ak_Opis");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Ilosc)
                .HasColumnType("money")
                .HasColumnName("ILOSC");
            entity.Property(e => e.Imie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("IMIE");
            entity.Property(e => e.Imie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE2");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
            entity.Property(e => e.Nazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NAZWISKO");
            entity.Property(e => e.PrzelicznikLiniowy)
                .HasColumnType("money")
                .HasColumnName("PRZELICZNIK_LINIOWY");
            entity.Property(e => e.Rozliczony)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ROZLICZONY");
            entity.Property(e => e.SaJednostka)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sa_Jednostka");
            entity.Property(e => e.SposobRozliczenia)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("SPOSOB_ROZLICZENIA");
            entity.Property(e => e.Suma)
                .HasColumnType("money")
                .HasColumnName("SUMA");
            entity.Property(e => e.TypStawki)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("TYP_STAWKI");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
        });

        modelBuilder.Entity<VwGratSqlViewHarmonogramRachunkowListum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSqlView_HarmonogramRachunkow_Lista");

            entity.Property(e => e.DataObowiazywaniaDo)
                .HasColumnType("datetime")
                .HasColumnName("DATA_OBOWIAZYWANIA_DO");
            entity.Property(e => e.DataObowiazywaniaOd)
                .HasColumnType("datetime")
                .HasColumnName("DATA_OBOWIAZYWANIA_OD");
            entity.Property(e => e.DataRachunku)
                .HasColumnType("datetime")
                .HasColumnName("DATA_RACHUNKU");
            entity.Property(e => e.DzienRachunku)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("DZIEN_RACHUNKU");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.KwotaPotracen)
                .HasColumnType("money")
                .HasColumnName("KWOTA_POTRACEN");
            entity.Property(e => e.KwotaRachunku)
                .HasColumnType("money")
                .HasColumnName("KWOTA_RACHUNKU");
            entity.Property(e => e.Opis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OPIS");
            entity.Property(e => e.RodzajCyklu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_CYKLU");
            entity.Property(e => e.RodzajHarmonogramu)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_HARMONOGRAMU");
            entity.Property(e => e.RodzajHarmonogramuId).HasColumnName("RODZAJ_HARMONOGRAMU_ID");
            entity.Property(e => e.RozliczAkordy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ROZLICZ_AKORDY");
            entity.Property(e => e.RozliczEcp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ROZLICZ_ECP");
            entity.Property(e => e.RozliczProwizje)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ROZLICZ_PROWIZJE");
            entity.Property(e => e.UchIdUmowy).HasColumnName("uch_IdUmowy");
        });

        modelBuilder.Entity<VwGratSqlViewListaRachunkowUmowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSqlView_ListaRachunkowUmowy");

            entity.Property(e => e.BruttoDuze)
                .HasColumnType("money")
                .HasColumnName("BRUTTO_DUZE");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.IdUmowy).HasColumnName("ID_UMOWY");
            entity.Property(e => e.KwotaDoWyplaty)
                .HasColumnType("money")
                .HasColumnName("KWOTA_DO_WYPLATY");
            entity.Property(e => e.Netto)
                .HasColumnType("money")
                .HasColumnName("NETTO");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.ObciazeniePracodawcy)
                .HasColumnType("money")
                .HasColumnName("OBCIAZENIE_PRACODAWCY");
            entity.Property(e => e.SkladkaZdrowotna)
                .HasColumnType("money")
                .HasColumnName("SKLADKA_ZDROWOTNA");
            entity.Property(e => e.SkladkiZus)
                .HasColumnType("money")
                .HasColumnName("SKLADKI_ZUS");
            entity.Property(e => e.ZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("ZALICZKA_NA_PODATEK");
        });

        modelBuilder.Entity<VwGratSqlViewNaliczeniePotracenie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSqlView_NaliczeniePotracenie");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DoPodstChoroboweWypadkowe)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DO_PODST_CHOROBOWE_WYPADKOWE");
            entity.Property(e => e.DoPodstEmerytalneRentowe)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DO_PODST_EMERYTALNE_RENTOWE");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Imie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("IMIE");
            entity.Property(e => e.Imie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE2");
            entity.Property(e => e.NalpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nalp_Opis");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
            entity.Property(e => e.Nazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NAZWISKO");
            entity.Property(e => e.Opodatkowany)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("OPODATKOWANY");
            entity.Property(e => e.Rodzaj)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RODZAJ");
            entity.Property(e => e.Rozliczony)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ROZLICZONY");
            entity.Property(e => e.SposobRozliczenia)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("SPOSOB_ROZLICZENIA");
            entity.Property(e => e.SumaNaliczen)
                .HasColumnType("money")
                .HasColumnName("SUMA_NALICZEN");
            entity.Property(e => e.SumaPotracen)
                .HasColumnType("money")
                .HasColumnName("SUMA_POTRACEN");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
        });

        modelBuilder.Entity<VwGratSqlViewProwizja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSqlView_Prowizja");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DokumentRozliczajacy)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("DOKUMENT_ROZLICZAJACY");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Imie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("IMIE");
            entity.Property(e => e.Imie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE2");
            entity.Property(e => e.Kwota)
                .HasColumnType("money")
                .HasColumnName("KWOTA");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
            entity.Property(e => e.Nazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NAZWISKO");
            entity.Property(e => e.OpisPrzelicznikaStawki)
                .HasColumnType("money")
                .HasColumnName("OPIS_PRZELICZNIKA_STAWKI");
            entity.Property(e => e.PrOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pr_Opis");
            entity.Property(e => e.Rozliczony)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ROZLICZONY");
            entity.Property(e => e.SposobRozliczenia)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("SPOSOB_ROZLICZENIA");
            entity.Property(e => e.Suma)
                .HasColumnType("money")
                .HasColumnName("SUMA");
            entity.Property(e => e.TypStawki)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("TYP_STAWKI");
            entity.Property(e => e.Wartosc)
                .HasColumnType("money")
                .HasColumnName("WARTOSC");
        });

        modelBuilder.Entity<VwGratSqlViewUmowaCpHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSqlView_UmowaCP_Header");

            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Imie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("IMIE");
            entity.Property(e => e.Imie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMIE2");
            entity.Property(e => e.Nazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NAZWISKO");
            entity.Property(e => e.NumerUmowy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER_UMOWY");
        });

        modelBuilder.Entity<VwGratSqlViewUmowyCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratSqlView_UmowyCP");

            entity.Property(e => e.DataDo)
                .HasColumnType("datetime")
                .HasColumnName("DATA_DO");
            entity.Property(e => e.DataOd)
                .HasColumnType("datetime")
                .HasColumnName("DATA_OD");
            entity.Property(e => e.DataRozwiazania)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ROZWIAZANIA");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Kwota)
                .HasColumnType("money")
                .HasColumnName("KWOTA");
            entity.Property(e => e.NaCzas)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("NA_CZAS");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.PrzyczynaRozwiazania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PRZYCZYNA_ROZWIAZANIA");
            entity.Property(e => e.RodzajUmowyCp)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_UMOWY_CP");
            entity.Property(e => e.Szczegoly)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SZCZEGOLY");
            entity.Property(e => e.Tytul)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("TYTUL");
            entity.Property(e => e.ZusChorobowe)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZUS_CHOROBOWE");
            entity.Property(e => e.ZusEmerytalne)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZUS_EMERYTALNE");
            entity.Property(e => e.ZusFgsp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZUS_FGSP");
            entity.Property(e => e.ZusFp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZUS_FP");
            entity.Property(e => e.ZusRentowe)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZUS_RENTOWE");
            entity.Property(e => e.ZusWypadkowe)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZUS_WYPADKOWE");
            entity.Property(e => e.ZusZdrowotne)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZUS_ZDROWOTNE");
        });

        modelBuilder.Entity<VwGratUcpgodzinyPrzepracowane>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratUCPGodzinyPrzepracowane");

            entity.Property(e => e.Imie)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.Nazwisko)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NrUmowy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SredniaStawkaGodz).HasColumnType("money");
            entity.Property(e => e.SumaRachunkow).HasColumnType("money");
            entity.Property(e => e.UmowaDataDo).HasColumnType("datetime");
            entity.Property(e => e.UmowaDataOd).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwGratUmowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratUmowy");

            entity.Property(e => e.DataOstatniejWyplaty).HasColumnType("datetime");
            entity.Property(e => e.DataZawarcia)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ZAWARCIA");
            entity.Property(e => e.DziId).HasColumnName("dzi_Id");
            entity.Property(e => e.DziNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dzi_Nazwa");
            entity.Property(e => e.PrDataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("pr_DataUrodzenia");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pr_NIP");
            entity.Property(e => e.PrPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("pr_PESEL");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("pracownik");
            entity.Property(e => e.SlkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("slk_Nazwa");
            entity.Property(e => e.StnId).HasColumnName("stn_Id");
            entity.Property(e => e.StnNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("stn_Nazwa");
            entity.Property(e => e.UkId).HasColumnName("uk_Id");
            entity.Property(e => e.UpDataDo)
                .HasColumnType("datetime")
                .HasColumnName("up_DataDo");
            entity.Property(e => e.UpDataOd)
                .HasColumnType("datetime")
                .HasColumnName("up_DataOd");
            entity.Property(e => e.UpDataRozwiazania)
                .HasColumnType("datetime")
                .HasColumnName("up_DataRozwiazania");
            entity.Property(e => e.UpId).HasColumnName("up_Id");
            entity.Property(e => e.UpIdPracownika).HasColumnName("up_IdPracownika");
            entity.Property(e => e.UpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("up_Numer");
            entity.Property(e => e.UpRodzaj).HasColumnName("up_Rodzaj");
            entity.Property(e => e.UpUczen).HasColumnName("up_Uczen");
            entity.Property(e => e.Wymiar)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.Zatrudnienie)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ZatrudnienieKrotkie)
                .HasMaxLength(86)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwGratUmowyCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratUmowyCP");

            entity.Property(e => e.DataRach)
                .HasColumnType("datetime")
                .HasColumnName("DATA_RACH");
            entity.Property(e => e.DataRozp)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ROZP");
            entity.Property(e => e.DataRozw)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ROZW");
            entity.Property(e => e.DataUrodzenia)
                .HasColumnType("datetime")
                .HasColumnName("DATA_URODZENIA");
            entity.Property(e => e.DataZak)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ZAK");
            entity.Property(e => e.DataZawarcia)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ZAWARCIA");
            entity.Property(e => e.IdDzialu).HasColumnName("ID_DZIALU");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.NaCzas)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("NA_CZAS");
            entity.Property(e => e.NaCzasId).HasColumnName("NA_CZAS_ID");
            entity.Property(e => e.Nip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NIP");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.Pesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PESEL");
            entity.Property(e => e.Podatek)
                .HasColumnType("money")
                .HasColumnName("PODATEK");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrIdGrupy).HasColumnName("pr_IdGrupy");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.RodzajId).HasColumnName("RODZAJ_ID");
            entity.Property(e => e.RodzajUmowyCp)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("RODZAJ_UMOWY_CP");
            entity.Property(e => e.Tytul)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("TYTUL");
            entity.Property(e => e.Zatrudnienie)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("ZATRUDNIENIE");
            entity.Property(e => e.ZatrudnienieKrotkie)
                .HasMaxLength(87)
                .IsUnicode(false)
                .HasColumnName("ZATRUDNIENIE_KROTKIE");
        });

        modelBuilder.Entity<VwGratUmowyLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratUmowyLookup");

            entity.Property(e => e.DataDo)
                .HasColumnType("datetime")
                .HasColumnName("DATA_DO");
            entity.Property(e => e.DataOd)
                .HasColumnType("datetime")
                .HasColumnName("DATA_OD");
            entity.Property(e => e.DataZak)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ZAK");
            entity.Property(e => e.IdDzialu).HasColumnName("ID_DZIALU");
            entity.Property(e => e.IdPrac).HasColumnName("ID_PRAC");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.NaCzas).HasColumnName("NA_CZAS");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.PodTyp).HasColumnName("POD_TYP");
            entity.Property(e => e.PracDataUr)
                .HasColumnType("datetime")
                .HasColumnName("PRAC_DATA_UR");
            entity.Property(e => e.PracImie)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PRAC_IMIE");
            entity.Property(e => e.PracNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PRAC_NAZWISKO");
            entity.Property(e => e.PracNazwiskoImie)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRAC_NAZWISKO_IMIE");
            entity.Property(e => e.Typ).HasColumnName("TYP");
        });

        modelBuilder.Entity<VwGratUpZpLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratUpZpLookup");

            entity.Property(e => e.DataDo).HasColumnType("datetime");
            entity.Property(e => e.DataOd).HasColumnType("datetime");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.SlpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("slp_Nazwa");
            entity.Property(e => e.UpId).HasColumnName("up_Id");
            entity.Property(e => e.UpNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("up_Numer");
            entity.Property(e => e.UpRodzaj).HasColumnName("up_Rodzaj");
            entity.Property(e => e.UpzId).HasColumnName("upz_Id");
            entity.Property(e => e.UpzIdSzablonuLp).HasColumnName("upz_IdSzablonuLP");
            entity.Property(e => e.UpzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("upz_Nazwa");
            entity.Property(e => e.UpzRozliczacAkordy).HasColumnName("upz_RozliczacAkordy");
            entity.Property(e => e.UpzRozliczacEcp).HasColumnName("upz_RozliczacECP");
            entity.Property(e => e.UpzRozliczacNadgodziny).HasColumnName("upz_RozliczacNadgodziny");
            entity.Property(e => e.UpzRozliczacNaliczeniaPotracenia).HasColumnName("upz_RozliczacNaliczeniaPotracenia");
            entity.Property(e => e.UpzRozliczacPotraceniaKomornicze).HasColumnName("upz_RozliczacPotraceniaKomornicze");
            entity.Property(e => e.UpzRozliczacProwizje).HasColumnName("upz_RozliczacProwizje");
            entity.Property(e => e.UpzUzupelniacDoMinimalnej).HasColumnName("upz_UzupelniacDoMinimalnej");
        });

        modelBuilder.Entity<VwGratWyplaty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratWyplaty");

            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.KatId).HasColumnName("kat_Id");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.LpCzyPrzychodZaInnyRok).HasColumnName("lp_CzyPrzychodZaInnyRok");
            entity.Property(e => e.LpDataSkladek)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataSkladek");
            entity.Property(e => e.LpDataWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataWyplaty");
            entity.Property(e => e.LpDataZaliczek)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataZaliczek");
            entity.Property(e => e.LpId).HasColumnName("lp_Id");
            entity.Property(e => e.LpMiesiac)
                .HasColumnType("datetime")
                .HasColumnName("lp_Miesiac");
            entity.Property(e => e.LpNumer)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("lp_Numer");
            entity.Property(e => e.LpStatusKsiegowyLp).HasColumnName("lp_StatusKsiegowyLP");
            entity.Property(e => e.LpStatusKsiegowyPpk).HasColumnName("lp_StatusKsiegowyPPK");
            entity.Property(e => e.LpStatusKsiegowySkladki).HasColumnName("lp_StatusKsiegowySkladki");
            entity.Property(e => e.LpStatusKsiegowyZaliczki).HasColumnName("lp_StatusKsiegowyZaliczki");
            entity.Property(e => e.LpZatwierdzona).HasColumnName("lp_Zatwierdzona");
            entity.Property(e => e.Ppkpracodawcy)
                .HasColumnType("money")
                .HasColumnName("PPKPracodawcy");
            entity.Property(e => e.Ppkpracownika)
                .HasColumnType("money")
                .HasColumnName("PPKPracownika");
            entity.Property(e => e.Ppksuma)
                .HasColumnType("money")
                .HasColumnName("PPKSuma");
            entity.Property(e => e.PrId).HasColumnName("pr_Id");
            entity.Property(e => e.PrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pr_NIP");
            entity.Property(e => e.PrPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("pr_PESEL");
            entity.Property(e => e.UpId).HasColumnName("up_Id");
            entity.Property(e => e.UzId).HasColumnName("uz_Id");
            entity.Property(e => e.UzIdentyfikator)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("uz_Identyfikator");
            entity.Property(e => e.WypBruttoDuze)
                .HasColumnType("money")
                .HasColumnName("wyp_BruttoDuze");
            entity.Property(e => e.WypBruttoMale)
                .HasColumnType("money")
                .HasColumnName("wyp_BruttoMale");
            entity.Property(e => e.WypBylKw).HasColumnName("wyp_BylKW");
            entity.Property(e => e.WypBylPrzelew).HasColumnName("wyp_BylPrzelew");
            entity.Property(e => e.WypBylWydruk).HasColumnName("wyp_BylWydruk");
            entity.Property(e => e.WypCzyKorygowana).HasColumnName("wyp_CzyKorygowana");
            entity.Property(e => e.WypDoReki)
                .HasColumnType("money")
                .HasColumnName("wyp_DoReki");
            entity.Property(e => e.WypFlagi).HasColumnName("wyp_Flagi");
            entity.Property(e => e.WypId).HasColumnName("wyp_Id");
            entity.Property(e => e.WypKwotaChorobowego)
                .HasColumnType("money")
                .HasColumnName("wyp_KwotaChorobowego");
            entity.Property(e => e.WypKwotaUrlopowegoStale)
                .HasColumnType("money")
                .HasColumnName("wyp_KwotaUrlopowegoStale");
            entity.Property(e => e.WypKwotaUrlopowegoZmienne)
                .HasColumnType("money")
                .HasColumnName("wyp_KwotaUrlopowegoZmienne");
            entity.Property(e => e.WypNetto)
                .HasColumnType("money")
                .HasColumnName("wyp_Netto");
            entity.Property(e => e.WypObciazeniePracodawcy)
                .HasColumnType("money")
                .HasColumnName("wyp_ObciazeniePracodawcy");
            entity.Property(e => e.WypOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wyp_Opis");
            entity.Property(e => e.WypOstatniaWyplataPracownika).HasColumnName("wyp_OstatniaWyplataPracownika");
            entity.Property(e => e.WypPodstUbEmerRent)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstUbEmerRent");
            entity.Property(e => e.WypPodstawaOpodatkowania)
                .HasColumnType("money")
                .HasColumnName("wyp_PodstawaOpodatkowania");
            entity.Property(e => e.WypPracownikOtrzymuje)
                .HasColumnType("money")
                .HasColumnName("wyp_PracownikOtrzymuje");
            entity.Property(e => e.WypPrzelew)
                .HasColumnType("money")
                .HasColumnName("wyp_Przelew");
            entity.Property(e => e.WypRozliczaAkordy).HasColumnName("wyp_RozliczaAkordy");
            entity.Property(e => e.WypRozliczaEcp).HasColumnName("wyp_RozliczaECP");
            entity.Property(e => e.WypRozliczaNadgodziny).HasColumnName("wyp_RozliczaNadgodziny");
            entity.Property(e => e.WypRozliczaNalPotr).HasColumnName("wyp_RozliczaNalPotr");
            entity.Property(e => e.WypRozliczaProwizje).HasColumnName("wyp_RozliczaProwizje");
            entity.Property(e => e.WypStatus).HasColumnName("wyp_Status");
            entity.Property(e => e.WypZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatek");
            entity.Property(e => e.WypZusfirma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSFirma");
            entity.Property(e => e.WypZusprac)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSPrac");
            entity.Property(e => e.ZdrowotneRazem).HasColumnType("money");
        });

        modelBuilder.Entity<VwGratZawodLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratZawodLookup");

            entity.Property(e => e.ZwId).HasColumnName("zw_Id");
            entity.Property(e => e.ZwKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("zw_Kod");
            entity.Property(e => e.ZwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zw_Opis");
            entity.Property(e => e.ZwUzywane).HasColumnName("zw_Uzywane");
            entity.Property(e => e.ZwWersja).HasColumnName("zw_Wersja");
        });

        modelBuilder.Entity<VwGratZfss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGratZFSS");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.Kwota)
                .HasColumnType("money")
                .HasColumnName("KWOTA");
            entity.Property(e => e.Odbiorca)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ODBIORCA");
            entity.Property(e => e.Opis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OPIS");
            entity.Property(e => e.Rok).HasColumnName("ROK");
            entity.Property(e => e.Typ).HasColumnName("TYP");
            entity.Property(e => e.Zfssid).HasColumnName("ZFSSID");
        });

        modelBuilder.Entity<VwGridCoSlFormatNumeracji>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGridCoSlFormatNumeracji");

            entity.Property(e => e.FnId).HasColumnName("fn_Id");
            entity.Property(e => e.FnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fn_Nazwa");
            entity.Property(e => e.TypNumeru)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwHbOperacjaDoSkojarzeniaEbank>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_operacja_do_skojarzenia_ebank");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(123)
                .IsUnicode(false)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.AdrhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_NIP");
            entity.Property(e => e.AdrhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_Symbol");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfGotowkowa).HasColumnName("nzf_Gotowkowa");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfObslugaRachunku).HasColumnName("nzf_ObslugaRachunku");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpozostaloWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostaloWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.Widoczna).HasColumnName("widoczna");
            entity.Property(e => e.Zamkniety).HasColumnName("zamkniety");
        });

        modelBuilder.Entity<VwHbOperacjaDoSkojarzenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_operacja_do_skojarzenia");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(123)
                .IsUnicode(false)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.AdrhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_NIP");
            entity.Property(e => e.AdrhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_Symbol");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfGotowkowa).HasColumnName("nzf_Gotowkowa");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfObslugaRachunku).HasColumnName("nzf_ObslugaRachunku");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpozostaloWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostaloWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.Widoczna).HasColumnName("widoczna");
            entity.Property(e => e.Zamkniety).HasColumnName("zamkniety");
        });

        modelBuilder.Entity<VwHbOperacje>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_operacje");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(123)
                .IsUnicode(false)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.AdrhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_NIP");
            entity.Property(e => e.AdrhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_Symbol");
            entity.Property(e => e.HbStatus).HasColumnName("hb_Status");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfGotowkowa).HasColumnName("nzf_Gotowkowa");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfObslugaRachunku).HasColumnName("nzf_ObslugaRachunku");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpozostaloWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostaloWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.Widoczna).HasColumnName("widoczna");
            entity.Property(e => e.Zamkniety).HasColumnName("zamkniety");
        });

        modelBuilder.Entity<VwHbOperacjeEbank>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_operacje_ebank");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(123)
                .IsUnicode(false)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.AdrhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_NIP");
            entity.Property(e => e.AdrhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_Symbol");
            entity.Property(e => e.HbStatus).HasColumnName("hb_Status");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfGotowkowa).HasColumnName("nzf_Gotowkowa");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfObslugaRachunku).HasColumnName("nzf_ObslugaRachunku");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpozostaloWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostaloWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.Widoczna).HasColumnName("widoczna");
            entity.Property(e => e.Zamkniety).HasColumnName("zamkniety");
        });

        modelBuilder.Entity<VwHbOperacjeITransakcjeSkojarzone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_operacje_i_transakcje_skojarzone");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.AdrhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_NIP");
            entity.Property(e => e.AdrhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_Symbol");
            entity.Property(e => e.HbDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataKsiegowania");
            entity.Property(e => e.HbDataUtworzeniaWyciagu)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataUtworzeniaWyciagu");
            entity.Property(e => e.HbIdNaglowekTr).HasColumnName("hb_IdNaglowekTr");
            entity.Property(e => e.HbIdTransakcji).HasColumnName("hb_IdTransakcji");
            entity.Property(e => e.HbKodTranzakcji)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_KodTranzakcji");
            entity.Property(e => e.HbKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Kontrahent");
            entity.Property(e => e.HbNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_NumerRachunku");
            entity.Property(e => e.HbNumerWyciagu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("hb_NumerWyciagu");
            entity.Property(e => e.HbOpisTranzakcji)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("hb_OpisTranzakcji");
            entity.Property(e => e.HbRachKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_RachKontrahent");
            entity.Property(e => e.HbTytul)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("hb_Tytul");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataUzgodnienia)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataUzgodnienia");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.Skojarzone).HasColumnName("skojarzone");
            entity.Property(e => e.Zamkniety).HasColumnName("zamkniety");
        });

        modelBuilder.Entity<VwHbSkojarzoneAutomatycznie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_SkojarzoneAutomatycznie");

            entity.Property(e => e.HbDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataKsiegowania");
            entity.Property(e => e.HbIdTransakcji).HasColumnName("hb_IdTransakcji");
            entity.Property(e => e.HbKodTranzakcji)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_KodTranzakcji");
            entity.Property(e => e.HbNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_NumerRachunku");
            entity.Property(e => e.HbZnormalizowanyNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_ZnormalizowanyNumerRachunku");
            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
        });

        modelBuilder.Entity<VwHbTransakcjeDoRozliczeniaGridView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_transakcje_do_rozliczenia_grid_view");

            entity.Property(e => e.HbBilansOtwarciaWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_BilansOtwarciaWaluta");
            entity.Property(e => e.HbDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataKsiegowania");
            entity.Property(e => e.HbDataUtworzeniaWyciagu)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataUtworzeniaWyciagu");
            entity.Property(e => e.HbDataWaluty)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataWaluty");
            entity.Property(e => e.HbIdNaglowekTr).HasColumnName("hb_IdNaglowekTr");
            entity.Property(e => e.HbIdOperacjiBankowej).HasColumnName("hb_idOperacjiBankowej");
            entity.Property(e => e.HbIdTransakcji).HasColumnName("hb_IdTransakcji");
            entity.Property(e => e.HbIdentyfikatorMp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_IdentyfikatorMP");
            entity.Property(e => e.HbKodTranzakcji)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_KodTranzakcji");
            entity.Property(e => e.HbKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Kontrahent");
            entity.Property(e => e.HbKurs)
                .HasColumnType("money")
                .HasColumnName("hb_Kurs");
            entity.Property(e => e.HbKwota)
                .HasColumnType("money")
                .HasColumnName("hb_Kwota");
            entity.Property(e => e.HbKwotaWaluty)
                .HasColumnType("money")
                .HasColumnName("hb_KwotaWaluty");
            entity.Property(e => e.HbNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_NumerRachunku");
            entity.Property(e => e.HbNumerWyciagu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("hb_NumerWyciagu");
            entity.Property(e => e.HbOpisTranzakcji)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("hb_OpisTranzakcji");
            entity.Property(e => e.HbOznaczenie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_Oznaczenie");
            entity.Property(e => e.HbPelnyNumerMp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_PelnyNumerMP");
            entity.Property(e => e.HbRachKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_RachKontrahent");
            entity.Property(e => e.HbSprawdzonoSkojarzanie).HasColumnName("hb_SprawdzonoSkojarzanie");
            entity.Property(e => e.HbStatus).HasColumnName("hbStatus");
            entity.Property(e => e.HbStatus1).HasColumnName("hb_Status");
            entity.Property(e => e.HbTytul)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("hb_Tytul");
            entity.Property(e => e.HbWaluta)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Waluta");
            entity.Property(e => e.RbIdObiektu).HasColumnName("rb_IdObiektu");
            entity.Property(e => e.RbTypObiektu).HasColumnName("rb_TypObiektu");
            entity.Property(e => e.RbWirtualny).HasColumnName("rb_Wirtualny");
            entity.Property(e => e.Waluta)
                .HasMaxLength(390)
                .IsUnicode(false);
            entity.Property(e => e.WieleRozrachunkow).HasColumnName("wieleRozrachunkow");
        });

        modelBuilder.Entity<VwHbTransakcjeDoSkojarzenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_transakcje_do_skojarzenia");

            entity.Property(e => e.HbBilansOtwarciaWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_BilansOtwarciaWaluta");
            entity.Property(e => e.HbDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataKsiegowania");
            entity.Property(e => e.HbDataUtworzeniaWyciagu)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataUtworzeniaWyciagu");
            entity.Property(e => e.HbDataWaluty)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataWaluty");
            entity.Property(e => e.HbIdNaglowekTr).HasColumnName("hb_IdNaglowekTr");
            entity.Property(e => e.HbIdTransakcji).HasColumnName("hb_IdTransakcji");
            entity.Property(e => e.HbKodTranzakcji)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_KodTranzakcji");
            entity.Property(e => e.HbKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Kontrahent");
            entity.Property(e => e.HbKurs)
                .HasColumnType("money")
                .HasColumnName("hb_Kurs");
            entity.Property(e => e.HbKwota)
                .HasColumnType("money")
                .HasColumnName("hb_Kwota");
            entity.Property(e => e.HbKwotaWaluty)
                .HasColumnType("money")
                .HasColumnName("hb_KwotaWaluty");
            entity.Property(e => e.HbNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("hb_NrFaktury");
            entity.Property(e => e.HbNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_NumerRachunku");
            entity.Property(e => e.HbNumerWyciagu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("hb_NumerWyciagu");
            entity.Property(e => e.HbOpisTranzakcji)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("hb_OpisTranzakcji");
            entity.Property(e => e.HbOznaczenie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_Oznaczenie");
            entity.Property(e => e.HbPodtypPp).HasColumnName("hb_PodtypPP");
            entity.Property(e => e.HbRachKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_RachKontrahent");
            entity.Property(e => e.HbStatus).HasColumnName("hb_Status");
            entity.Property(e => e.HbTytul)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("hb_Tytul");
            entity.Property(e => e.HbVat)
                .HasColumnType("money")
                .HasColumnName("hb_VAT");
            entity.Property(e => e.HbWaluta)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Waluta");
            entity.Property(e => e.HbZnormalizowanyNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_ZnormalizowanyNumerRachunku");
            entity.Property(e => e.Waluta)
                .HasMaxLength(390)
                .IsUnicode(false);
            entity.Property(e => e.Widoczna).HasColumnName("widoczna");
        });

        modelBuilder.Entity<VwHbTransakcjeGridView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHB_transakcje_grid_view");

            entity.Property(e => e.HbBilansOtwarciaWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_BilansOtwarciaWaluta");
            entity.Property(e => e.HbDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataKsiegowania");
            entity.Property(e => e.HbDataUtworzeniaWyciagu)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataUtworzeniaWyciagu");
            entity.Property(e => e.HbDataWaluty)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataWaluty");
            entity.Property(e => e.HbIdNaglowekTr).HasColumnName("hb_IdNaglowekTr");
            entity.Property(e => e.HbIdOperacjiBankowej).HasColumnName("hb_idOperacjiBankowej");
            entity.Property(e => e.HbIdTransakcji).HasColumnName("hb_IdTransakcji");
            entity.Property(e => e.HbIdentyfikatorMp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_IdentyfikatorMP");
            entity.Property(e => e.HbKodTranzakcji)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_KodTranzakcji");
            entity.Property(e => e.HbKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Kontrahent");
            entity.Property(e => e.HbKurs)
                .HasColumnType("money")
                .HasColumnName("hb_Kurs");
            entity.Property(e => e.HbKwota)
                .HasColumnType("money")
                .HasColumnName("hb_Kwota");
            entity.Property(e => e.HbKwotaWaluty)
                .HasColumnType("money")
                .HasColumnName("hb_KwotaWaluty");
            entity.Property(e => e.HbNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("hb_NrFaktury");
            entity.Property(e => e.HbNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_NumerRachunku");
            entity.Property(e => e.HbNumerWyciagu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("hb_NumerWyciagu");
            entity.Property(e => e.HbOpisTranzakcji)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("hb_OpisTranzakcji");
            entity.Property(e => e.HbOznaczenie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_Oznaczenie");
            entity.Property(e => e.HbPelnyNumerMp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_PelnyNumerMP");
            entity.Property(e => e.HbPodtypPp).HasColumnName("hb_PodtypPP");
            entity.Property(e => e.HbRachKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_RachKontrahent");
            entity.Property(e => e.HbSprawdzonoSkojarzanie).HasColumnName("hb_SprawdzonoSkojarzanie");
            entity.Property(e => e.HbStatus).HasColumnName("hb_Status");
            entity.Property(e => e.HbTytul)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("hb_Tytul");
            entity.Property(e => e.HbVat)
                .HasColumnType("money")
                .HasColumnName("hb_Vat");
            entity.Property(e => e.HbWaluta)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Waluta");
            entity.Property(e => e.HbZnormalizowanyNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_ZnormalizowanyNumerRachunku");
            entity.Property(e => e.Pominieta).HasColumnName("pominieta");
            entity.Property(e => e.Waluta)
                .HasMaxLength(390)
                .IsUnicode(false);
            entity.Property(e => e.WbData)
                .HasColumnType("datetime")
                .HasColumnName("wb_Data");
            entity.Property(e => e.WbId).HasColumnName("wb_Id");
            entity.Property(e => e.WbNr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("wb_Nr");
        });

        modelBuilder.Entity<VwHbeTransakcjeGridView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHBE_transakcje_grid_view");

            entity.Property(e => e.HbBilansOtwarciaWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_BilansOtwarciaWaluta");
            entity.Property(e => e.HbDataKsiegowania)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataKsiegowania");
            entity.Property(e => e.HbDataUtworzeniaWyciagu)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataUtworzeniaWyciagu");
            entity.Property(e => e.HbDataWaluty)
                .HasColumnType("datetime")
                .HasColumnName("hb_DataWaluty");
            entity.Property(e => e.HbIdNaglowekTr).HasColumnName("hb_IdNaglowekTr");
            entity.Property(e => e.HbIdOperacjiBankowej).HasColumnName("hb_idOperacjiBankowej");
            entity.Property(e => e.HbIdRachunku).HasColumnName("hb_IdRachunku");
            entity.Property(e => e.HbIdTransakcji).HasColumnName("hb_IdTransakcji");
            entity.Property(e => e.HbIdentyfikatorMp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_IdentyfikatorMP");
            entity.Property(e => e.HbKodTranzakcji)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_KodTranzakcji");
            entity.Property(e => e.HbKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Kontrahent");
            entity.Property(e => e.HbKurs)
                .HasColumnType("money")
                .HasColumnName("hb_Kurs");
            entity.Property(e => e.HbKwota)
                .HasColumnType("money")
                .HasColumnName("hb_Kwota");
            entity.Property(e => e.HbKwotaWaluty)
                .HasColumnType("money")
                .HasColumnName("hb_KwotaWaluty");
            entity.Property(e => e.HbNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("hb_NrFaktury");
            entity.Property(e => e.HbNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_NumerRachunku");
            entity.Property(e => e.HbNumerWyciagu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("hb_NumerWyciagu");
            entity.Property(e => e.HbOpisTranzakcji)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("hb_OpisTranzakcji");
            entity.Property(e => e.HbOznaczenie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hb_Oznaczenie");
            entity.Property(e => e.HbPelnyNumerMp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hb_PelnyNumerMP");
            entity.Property(e => e.HbPodtypPp).HasColumnName("hb_PodtypPP");
            entity.Property(e => e.HbRachKontrahent)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_RachKontrahent");
            entity.Property(e => e.HbSprawdzonoSkojarzanie).HasColumnName("hb_SprawdzonoSkojarzanie");
            entity.Property(e => e.HbStatus).HasColumnName("hb_Status");
            entity.Property(e => e.HbTytul)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("hb_Tytul");
            entity.Property(e => e.HbVat)
                .HasColumnType("money")
                .HasColumnName("hb_Vat");
            entity.Property(e => e.HbWaluta)
                .HasMaxLength(390)
                .IsUnicode(false)
                .HasColumnName("hb_Waluta");
            entity.Property(e => e.HbZrodlo).HasColumnName("hb_Zrodlo");
            entity.Property(e => e.HbtoId).HasColumnName("hbto_Id");
            entity.Property(e => e.HbtoProgram).HasColumnName("hbto_Program");
            entity.Property(e => e.Pominieta).HasColumnName("pominieta");
            entity.Property(e => e.Waluta)
                .HasMaxLength(390)
                .IsUnicode(false);
            entity.Property(e => e.WbData)
                .HasColumnType("datetime")
                .HasColumnName("wb_Data");
            entity.Property(e => e.WbId).HasColumnName("wb_Id");
            entity.Property(e => e.WbNr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("wb_Nr");
        });

        modelBuilder.Entity<VwHistoriaTransakcji>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_HistoriaTransakcji");

            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Operator)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.Opis).HasMaxLength(1000);
            entity.Property(e => e.OpisOb)
                .HasMaxLength(111)
                .IsUnicode(false);
            entity.Property(e => e.Syntheticid).HasColumnName("SYNTHETICID");
        });

        modelBuilder.Entity<VwHistoriaZadanium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_HistoriaZadania");

            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Operator)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.Opis).HasMaxLength(1000);
            entity.Property(e => e.OpisOb)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.Syntheticid).HasColumnName("SYNTHETICID");
        });

        modelBuilder.Entity<VwImpFakturyWewnetrzne>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwImp_FakturyWewnetrzne");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adrh_Miejscowosc");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.FwnDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("fwn_DataWyst");
            entity.Property(e => e.FwnId).HasColumnName("fwn_Id");
            entity.Property(e => e.FwnKhntId).HasColumnName("fwn_KhntId");
            entity.Property(e => e.FwnMagId).HasColumnName("fwn_MagId");
            entity.Property(e => e.FwnNr).HasColumnName("fwn_Nr");
            entity.Property(e => e.FwnNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_NrPelny");
            entity.Property(e => e.FwnNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fwn_NrPelnyOryg");
            entity.Property(e => e.FwnPodtyp).HasColumnName("fwn_Podtyp");
            entity.Property(e => e.FwnStatus).HasColumnName("fwn_Status");
            entity.Property(e => e.FwnStatusKsieg).HasColumnName("fwn_StatusKsieg");
            entity.Property(e => e.FwnTyp).HasColumnName("fwn_Typ");
            entity.Property(e => e.FwnWartNetto)
                .HasColumnType("money")
                .HasColumnName("fwn_WartNetto");
            entity.Property(e => e.KatId).HasColumnName("kat_Id");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.NazwaTypu)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
        });

        modelBuilder.Entity<VwImpHandlowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwImp_Handlowe");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adrh_Miejscowosc");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.KatId).HasColumnName("kat_Id");
            entity.Property(e => e.KatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kat_Nazwa");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.NazwaTypu)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
        });

        modelBuilder.Entity<VwImpKorektyKosztow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwImp_KorektyKosztow");

            entity.Property(e => e.Adres)
                .HasMaxLength(30)
                .HasColumnName("ADRES");
            entity.Property(e => e.DokData)
                .HasColumnType("datetime")
                .HasColumnName("dok_Data");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IdKategorii).HasColumnName("ID_KATEGORII");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Kwota)
                .HasColumnType("money")
                .HasColumnName("KWOTA");
            entity.Property(e => e.MagId).HasColumnName("MAG_ID");
            entity.Property(e => e.Miejsc)
                .HasMaxLength(30)
                .HasColumnName("MIEJSC");
            entity.Property(e => e.NazwaKategorii)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAZWA_KATEGORII");
            entity.Property(e => e.NazwaKh)
                .HasMaxLength(30)
                .HasColumnName("NAZWA_KH");
            entity.Property(e => e.NazwaTypu)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NAZWA_TYPU");
            entity.Property(e => e.Nr).HasColumnName("NR");
            entity.Property(e => e.NrOrygnalu)
                .HasMaxLength(30)
                .HasColumnName("NR_ORYGNALU");
            entity.Property(e => e.NrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NR_PELNY");
            entity.Property(e => e.StatusKsieg).HasColumnName("STATUS_KSIEG");
            entity.Property(e => e.SymbolKh)
                .HasMaxLength(30)
                .HasColumnName("SYMBOL_KH");
            entity.Property(e => e.TypZlozony).HasColumnName("TYP_ZLOZONY");
        });

        modelBuilder.Entity<VwImpListaPlac>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwImp_ListaPlac");

            entity.Property(e => e.LpDataSkladek)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataSkladek");
            entity.Property(e => e.LpDataWplatyPpk)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataWplatyPPK");
            entity.Property(e => e.LpDataWyplaty)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataWyplaty");
            entity.Property(e => e.LpDataZaliczek)
                .HasColumnType("datetime")
                .HasColumnName("lp_DataZaliczek");
            entity.Property(e => e.LpId).HasColumnName("lp_Id");
            entity.Property(e => e.LpIdKategorii).HasColumnName("lp_IdKategorii");
            entity.Property(e => e.LpNumer)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("lp_Numer");
            entity.Property(e => e.LpStatusKsiegowyLp).HasColumnName("lp_StatusKsiegowyLP");
            entity.Property(e => e.LpStatusKsiegowyPpk).HasColumnName("lp_StatusKsiegowyPPK");
            entity.Property(e => e.LpStatusKsiegowySkladki).HasColumnName("lp_StatusKsiegowySkladki");
            entity.Property(e => e.LpStatusKsiegowyZaliczki).HasColumnName("lp_StatusKsiegowyZaliczki");
            entity.Property(e => e.LpTytul)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("lp_Tytul");
        });

        modelBuilder.Entity<VwImpRachunek>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwImp_Rachunek");

            entity.Property(e => e.RuDataSkladek)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataSkladek");
            entity.Property(e => e.RuDataWplatyPpk)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataWplatyPPK");
            entity.Property(e => e.RuDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataWystawienia");
            entity.Property(e => e.RuDataZaliczek)
                .HasColumnType("datetime")
                .HasColumnName("ru_DataZaliczek");
            entity.Property(e => e.RuFgsp)
                .HasColumnType("money")
                .HasColumnName("ru_FGSP");
            entity.Property(e => e.RuFp)
                .HasColumnType("money")
                .HasColumnName("ru_FP");
            entity.Property(e => e.RuId).HasColumnName("ru_Id");
            entity.Property(e => e.RuIdKategorii).HasColumnName("ru_IdKategorii");
            entity.Property(e => e.RuIdPracownika).HasColumnName("ru_IdPracownika");
            entity.Property(e => e.RuIdUmowy).HasColumnName("ru_IdUmowy");
            entity.Property(e => e.RuKwotaRachunku)
                .HasColumnType("money")
                .HasColumnName("ru_KwotaRachunku");
            entity.Property(e => e.RuNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ru_Numer");
            entity.Property(e => e.RuStatusImportuPpk).HasColumnName("ru_StatusImportuPPK");
            entity.Property(e => e.RuStatusImportuRachunku).HasColumnName("ru_StatusImportuRachunku");
            entity.Property(e => e.RuStatusImportuSkladek).HasColumnName("ru_StatusImportuSkladek");
            entity.Property(e => e.RuStatusImportuZaliczek).HasColumnName("ru_StatusImportuZaliczek");
            entity.Property(e => e.RuUbezpZdrowotne)
                .HasColumnType("money")
                .HasColumnName("ru_UbezpZdrowotne");
            entity.Property(e => e.RuUbezpZdrowotne2)
                .HasColumnType("money")
                .HasColumnName("ru_UbezpZdrowotne2");
            entity.Property(e => e.RuZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("ru_ZaliczkaNaPodatek");
            entity.Property(e => e.RuZusfirma)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSFirma");
            entity.Property(e => e.RuZusrazem)
                .HasColumnType("money")
                .HasColumnName("ru_ZUSRazem");
            entity.Property(e => e.WplataPracodawcyPpkrazem)
                .HasColumnType("money")
                .HasColumnName("WplataPracodawcyPPKRazem");
        });

        modelBuilder.Entity<VwImpWyplatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwImp_Wyplata");

            entity.Property(e => e.WplataPracodawcyPpkrazem)
                .HasColumnType("money")
                .HasColumnName("WplataPracodawcyPPKRazem");
            entity.Property(e => e.WypBrZasilkiZus)
                .HasColumnType("money")
                .HasColumnName("wyp_BrZasilkiZUS");
            entity.Property(e => e.WypBruttoDuze)
                .HasColumnType("money")
                .HasColumnName("wyp_BruttoDuze");
            entity.Property(e => e.WypFgsp)
                .HasColumnType("money")
                .HasColumnName("wyp_FGSP");
            entity.Property(e => e.WypFp)
                .HasColumnType("money")
                .HasColumnName("wyp_Fp");
            entity.Property(e => e.WypId).HasColumnName("wyp_Id");
            entity.Property(e => e.WypIdListyPlac).HasColumnName("wyp_IdListyPlac");
            entity.Property(e => e.WypNeDoplaty)
                .HasColumnType("money")
                .HasColumnName("wyp_NeDoplaty");
            entity.Property(e => e.WypNeInnePrac)
                .HasColumnType("money")
                .HasColumnName("wyp_NeInnePrac");
            entity.Property(e => e.WypUbezpZdrowotne)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotne");
            entity.Property(e => e.WypUbezpZdrowotne2)
                .HasColumnType("money")
                .HasColumnName("wyp_UbezpZdrowotne2");
            entity.Property(e => e.WypZaliczkaNaPodatek)
                .HasColumnType("money")
                .HasColumnName("wyp_ZaliczkaNaPodatek");
            entity.Property(e => e.WypZusfirma)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSFirma");
            entity.Property(e => e.WypZusrazem)
                .HasColumnType("money")
                .HasColumnName("wyp_ZUSRazem");
        });

        modelBuilder.Entity<VwInsSysprocess>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_InsSysprocesses");

            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.Cmd)
                .HasMaxLength(26)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("cmd");
            entity.Property(e => e.ContextInfo)
                .HasMaxLength(128)
                .IsFixedLength()
                .HasColumnName("context_info");
            entity.Property(e => e.Cpu).HasColumnName("cpu");
            entity.Property(e => e.Dbid).HasColumnName("dbid");
            entity.Property(e => e.Ecid).HasColumnName("ecid");
            entity.Property(e => e.Hostname)
                .HasMaxLength(128)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("hostname");
            entity.Property(e => e.Hostprocess)
                .HasMaxLength(10)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("hostprocess");
            entity.Property(e => e.Kpid).HasColumnName("kpid");
            entity.Property(e => e.LastBatch)
                .HasColumnType("datetime")
                .HasColumnName("last_batch");
            entity.Property(e => e.Lastwaittype)
                .HasMaxLength(32)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("lastwaittype");
            entity.Property(e => e.LoginTime)
                .HasColumnType("datetime")
                .HasColumnName("login_time");
            entity.Property(e => e.Loginame)
                .HasMaxLength(128)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("loginame");
            entity.Property(e => e.Memusage).HasColumnName("memusage");
            entity.Property(e => e.NetAddress)
                .HasMaxLength(12)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("net_address");
            entity.Property(e => e.NetLibrary)
                .HasMaxLength(12)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("net_library");
            entity.Property(e => e.NtDomain)
                .HasMaxLength(128)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("nt_domain");
            entity.Property(e => e.NtUsername)
                .HasMaxLength(128)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("nt_username");
            entity.Property(e => e.OpenTran).HasColumnName("open_tran");
            entity.Property(e => e.PhysicalIo).HasColumnName("physical_io");
            entity.Property(e => e.ProgramName)
                .HasMaxLength(128)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("program_name");
            entity.Property(e => e.Sid)
                .HasMaxLength(86)
                .IsFixedLength()
                .HasColumnName("sid");
            entity.Property(e => e.Spid).HasColumnName("spid");
            entity.Property(e => e.SqlHandle)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("sql_handle");
            entity.Property(e => e.Status)
                .HasMaxLength(30)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("status");
            entity.Property(e => e.StmtEnd).HasColumnName("stmt_end");
            entity.Property(e => e.StmtStart).HasColumnName("stmt_start");
            entity.Property(e => e.Uid).HasColumnName("uid");
            entity.Property(e => e.Waitresource)
                .HasMaxLength(256)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("waitresource");
            entity.Property(e => e.Waittime).HasColumnName("waittime");
            entity.Property(e => e.Waittype)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("waittype");
        });

        modelBuilder.Entity<VwInstynktSzumy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstynktSzumy");

            entity.Property(e => e.SzumId).HasColumnName("szum_Id");
            entity.Property(e => e.SzumItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("szum_Item");
            entity.Property(e => e.SzumTyp).HasColumnName("szum_Typ");
        });

        modelBuilder.Entity<VwInstytucje>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstytucje");

            entity.Property(e => e.IsEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("is_EMail");
            entity.Property(e => e.IsFunduszPromocji).HasColumnName("is_FunduszPromocji");
            entity.Property(e => e.IsId).HasColumnName("is_Id");
            entity.Property(e => e.IsIdRachunkuWirtualnego).HasColumnName("is_IdRachunkuWirtualnego");
            entity.Property(e => e.IsIzbaCelna).HasColumnName("is_IzbaCelna");
            entity.Property(e => e.IsKodUs).HasColumnName("is_KodUS");
            entity.Property(e => e.IsNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("is_NazwaPelna");
            entity.Property(e => e.IsNrAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("is_NrAnalityka");
            entity.Property(e => e.IsRachunekCit).HasColumnName("is_RachunekCIT");
            entity.Property(e => e.IsRachunekPit).HasColumnName("is_RachunekPIT");
            entity.Property(e => e.IsRachunekVat).HasColumnName("is_RachunekVAT");
            entity.Property(e => e.IsRodzaj).HasColumnName("is_Rodzaj");
            entity.Property(e => e.IsSposobNaliczania).HasColumnName("is_SposobNaliczania");
            entity.Property(e => e.IsSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("is_Symbol");
            entity.Property(e => e.IsWartoscNaliczenia)
                .HasColumnType("money")
                .HasColumnName("is_WartoscNaliczenia");
            entity.Property(e => e.IsWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("is_WWW");
        });

        modelBuilder.Entity<VwInwCz>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInwCz");

            entity.Property(e => e.IwCenyIdBanku).HasColumnName("iw_CenyIdBanku");
            entity.Property(e => e.IwCenyKurs)
                .HasColumnType("money")
                .HasColumnName("iw_CenyKurs");
            entity.Property(e => e.IwCenyKursData)
                .HasColumnType("datetime")
                .HasColumnName("iw_CenyKursData");
            entity.Property(e => e.IwCenyLiczbaJedn).HasColumnName("iw_CenyLiczbaJedn");
            entity.Property(e => e.IwCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("iw_CenyNarzut");
            entity.Property(e => e.IwCenyPoziom).HasColumnName("iw_CenyPoziom");
            entity.Property(e => e.IwCenyRodzajKursu).HasColumnName("iw_CenyRodzajKursu");
            entity.Property(e => e.IwDataMag)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataMag");
            entity.Property(e => e.IwDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataWyst");
            entity.Property(e => e.IwDataZatw)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataZatw");
            entity.Property(e => e.IwDoIwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Iw_DoIwNrPelny");
            entity.Property(e => e.IwFiltrCheckCecha).HasColumnName("iw_FiltrCheckCecha");
            entity.Property(e => e.IwFiltrCheckFlaga).HasColumnName("iw_FiltrCheckFlaga");
            entity.Property(e => e.IwFiltrCheckGrupa).HasColumnName("iw_FiltrCheckGrupa");
            entity.Property(e => e.IwFiltrCheckPlu).HasColumnName("iw_FiltrCheckPLU");
            entity.Property(e => e.IwFiltrCheckRodzaje).HasColumnName("iw_FiltrCheckRodzaje");
            entity.Property(e => e.IwFiltrCheckStan).HasColumnName("iw_FiltrCheckStan");
            entity.Property(e => e.IwFiltrPludo).HasColumnName("iw_FiltrPLUDo");
            entity.Property(e => e.IwFiltrPluod).HasColumnName("iw_FiltrPLUOd");
            entity.Property(e => e.IwFiltrRodzaje).HasColumnName("iw_FiltrRodzaje");
            entity.Property(e => e.IwFiltrStan).HasColumnName("iw_FiltrStan");
            entity.Property(e => e.IwId).HasColumnName("iw_Id");
            entity.Property(e => e.IwIdIwcRaport).HasColumnName("iw_IdIWcRaport");
            entity.Property(e => e.IwKatId).HasColumnName("iw_KatId");
            entity.Property(e => e.IwMagId).HasColumnName("iw_MagId");
            entity.Property(e => e.IwMiejsceWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_MiejsceWyst");
            entity.Property(e => e.IwNr).HasColumnName("iw_Nr");
            entity.Property(e => e.IwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("iw_NrPelny");
            entity.Property(e => e.IwNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("iw_NrRoz");
            entity.Property(e => e.IwPersonelId).HasColumnName("iw_PersonelId");
            entity.Property(e => e.IwPodpisanoElektronicznie).HasColumnName("iw_PodpisanoElektronicznie");
            entity.Property(e => e.IwPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("iw_Podtytul");
            entity.Property(e => e.IwPwId).HasColumnName("iw_PwId");
            entity.Property(e => e.IwPwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("iw_PwNrPelny");
            entity.Property(e => e.IwRwId).HasColumnName("iw_RwId");
            entity.Property(e => e.IwRwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("iw_RwNrPelny");
            entity.Property(e => e.IwStatus).HasColumnName("iw_Status");
            entity.Property(e => e.IwStatusBlok).HasColumnName("iw_StatusBlok");
            entity.Property(e => e.IwStatusMagOdlozony).HasColumnName("iw_StatusMagOdlozony");
            entity.Property(e => e.IwTyp).HasColumnName("iw_Typ");
            entity.Property(e => e.IwTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("iw_Tytul");
            entity.Property(e => e.IwUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("iw_Uwagi");
            entity.Property(e => e.IwWartosc)
                .HasColumnType("money")
                .HasColumnName("iw_Wartosc");
            entity.Property(e => e.IwWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_Wystawil");
            entity.Property(e => e.IwZatwierdzil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_Zatwierdzil");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwInwPowiazaneCzastkoweOrazDokMag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInwPowiazaneCzastkoweOrazDokMag");

            entity.Property(e => e.AdrhNazwa).HasColumnName("adrh_Nazwa");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokNrPelny).HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.IwPwId).HasColumnName("iw_PwId");
            entity.Property(e => e.IwRwId).HasColumnName("iw_RwId");
            entity.Property(e => e.IwaIdZb).HasColumnName("iwa_IdZb");
        });

        modelBuilder.Entity<VwInwZb>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInwZb");

            entity.Property(e => e.IwCenyIdBanku).HasColumnName("iw_CenyIdBanku");
            entity.Property(e => e.IwCenyKurs)
                .HasColumnType("money")
                .HasColumnName("iw_CenyKurs");
            entity.Property(e => e.IwCenyKursData)
                .HasColumnType("datetime")
                .HasColumnName("iw_CenyKursData");
            entity.Property(e => e.IwCenyLiczbaJedn).HasColumnName("iw_CenyLiczbaJedn");
            entity.Property(e => e.IwCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("iw_CenyNarzut");
            entity.Property(e => e.IwCenyPoziom).HasColumnName("iw_CenyPoziom");
            entity.Property(e => e.IwCenyRodzajKursu).HasColumnName("iw_CenyRodzajKursu");
            entity.Property(e => e.IwDataMag)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataMag");
            entity.Property(e => e.IwDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataWyst");
            entity.Property(e => e.IwDataZatw)
                .HasColumnType("datetime")
                .HasColumnName("iw_DataZatw");
            entity.Property(e => e.IwDoIwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Iw_DoIwNrPelny");
            entity.Property(e => e.IwFiltrCheckCecha).HasColumnName("iw_FiltrCheckCecha");
            entity.Property(e => e.IwFiltrCheckFlaga).HasColumnName("iw_FiltrCheckFlaga");
            entity.Property(e => e.IwFiltrCheckGrupa).HasColumnName("iw_FiltrCheckGrupa");
            entity.Property(e => e.IwFiltrCheckPlu).HasColumnName("iw_FiltrCheckPLU");
            entity.Property(e => e.IwFiltrCheckRodzaje).HasColumnName("iw_FiltrCheckRodzaje");
            entity.Property(e => e.IwFiltrCheckStan).HasColumnName("iw_FiltrCheckStan");
            entity.Property(e => e.IwFiltrPludo).HasColumnName("iw_FiltrPLUDo");
            entity.Property(e => e.IwFiltrPluod).HasColumnName("iw_FiltrPLUOd");
            entity.Property(e => e.IwFiltrRodzaje).HasColumnName("iw_FiltrRodzaje");
            entity.Property(e => e.IwFiltrStan).HasColumnName("iw_FiltrStan");
            entity.Property(e => e.IwId).HasColumnName("iw_Id");
            entity.Property(e => e.IwIdIwcRaport).HasColumnName("iw_IdIWcRaport");
            entity.Property(e => e.IwKatId).HasColumnName("iw_KatId");
            entity.Property(e => e.IwMagId).HasColumnName("iw_MagId");
            entity.Property(e => e.IwMiejsceWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_MiejsceWyst");
            entity.Property(e => e.IwNr).HasColumnName("iw_Nr");
            entity.Property(e => e.IwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("iw_NrPelny");
            entity.Property(e => e.IwNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("iw_NrRoz");
            entity.Property(e => e.IwPersonelId).HasColumnName("iw_PersonelId");
            entity.Property(e => e.IwPodpisanoElektronicznie).HasColumnName("iw_PodpisanoElektronicznie");
            entity.Property(e => e.IwPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("iw_Podtytul");
            entity.Property(e => e.IwPwId).HasColumnName("iw_PwId");
            entity.Property(e => e.IwPwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("iw_PwNrPelny");
            entity.Property(e => e.IwRwId).HasColumnName("iw_RwId");
            entity.Property(e => e.IwRwNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("iw_RwNrPelny");
            entity.Property(e => e.IwStatus).HasColumnName("iw_Status");
            entity.Property(e => e.IwStatusBlok).HasColumnName("iw_StatusBlok");
            entity.Property(e => e.IwStatusMagOdlozony).HasColumnName("iw_StatusMagOdlozony");
            entity.Property(e => e.IwTyp).HasColumnName("iw_Typ");
            entity.Property(e => e.IwTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("iw_Tytul");
            entity.Property(e => e.IwUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("iw_Uwagi");
            entity.Property(e => e.IwWartosc)
                .HasColumnType("money")
                .HasColumnName("iw_Wartosc");
            entity.Property(e => e.IwWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_Wystawil");
            entity.Property(e => e.IwZatwierdzil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("iw_Zatwierdzil");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwKlienci>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwKlienci");

            entity.Property(e => e.AdrAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adr_Adres");
            entity.Property(e => e.AdrFaks)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("adr_Faks");
            entity.Property(e => e.AdrId).HasColumnName("adr_Id");
            entity.Property(e => e.AdrIdPanstwo).HasColumnName("adr_IdPanstwo");
            entity.Property(e => e.AdrIdWojewodztwo).HasColumnName("adr_IdWojewodztwo");
            entity.Property(e => e.AdrKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("adr_Kod");
            entity.Property(e => e.AdrMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Miejscowosc");
            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.AdrNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("adr_NazwaPelna");
            entity.Property(e => e.AdrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adr_NIP");
            entity.Property(e => e.AdrTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("adr_Telefon");
            entity.Property(e => e.Firma)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.KhDataDodania)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataDodania");
            entity.Property(e => e.KhDataOkolicznosciowa)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataOkolicznosciowa");
            entity.Property(e => e.KhDataZmiany)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataZmiany");
            entity.Property(e => e.KhEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_EMail");
            entity.Property(e => e.KhGaduGadu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_GaduGadu");
            entity.Property(e => e.KhId).HasColumnName("kh_Id");
            entity.Property(e => e.KhIdBranza).HasColumnName("kh_IdBranza");
            entity.Property(e => e.KhIdDodal).HasColumnName("kh_IdDodal");
            entity.Property(e => e.KhIdDzial).HasColumnName("kh_IdDzial");
            entity.Property(e => e.KhIdGrupa).HasColumnName("kh_IdGrupa");
            entity.Property(e => e.KhIdOpiekun).HasColumnName("kh_IdOpiekun");
            entity.Property(e => e.KhIdPozyskany).HasColumnName("kh_IdPozyskany");
            entity.Property(e => e.KhIdRegion).HasColumnName("kh_IdRegion");
            entity.Property(e => e.KhIdRodzajKontaktu).HasColumnName("kh_IdRodzajKontaktu");
            entity.Property(e => e.KhIdZmienil).HasColumnName("kh_IdZmienil");
            entity.Property(e => e.KhJednorazowy).HasColumnName("kh_Jednorazowy");
            entity.Property(e => e.KhLiczbaPrac).HasColumnName("kh_LiczbaPrac");
            entity.Property(e => e.KhPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("kh_PESEL");
            entity.Property(e => e.KhPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole1");
            entity.Property(e => e.KhPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole2");
            entity.Property(e => e.KhPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole3");
            entity.Property(e => e.KhPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole4");
            entity.Property(e => e.KhPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole5");
            entity.Property(e => e.KhPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole6");
            entity.Property(e => e.KhPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole7");
            entity.Property(e => e.KhPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole8");
            entity.Property(e => e.KhPotencjalny).HasColumnName("kh_Potencjalny");
            entity.Property(e => e.KhPracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("kh_Pracownik");
            entity.Property(e => e.KhRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_REGON");
            entity.Property(e => e.KhRodzaj).HasColumnName("kh_Rodzaj");
            entity.Property(e => e.KhSkype)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_Skype");
            entity.Property(e => e.KhStanowisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Stanowisko");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.KhTyp).HasColumnName("kh_Typ");
            entity.Property(e => e.KhUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("kh_Uwagi");
            entity.Property(e => e.KhWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_WWW");
            entity.Property(e => e.KhZablokowany).HasColumnName("kh_Zablokowany");
            entity.Property(e => e.KhZgodaDo).HasColumnName("kh_ZgodaDO");
            entity.Property(e => e.KhZgodaEmail).HasColumnName("kh_ZgodaEMail");
            entity.Property(e => e.KhZgodaMark).HasColumnName("kh_ZgodaMark");
            entity.Property(e => e.PkEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("pk_Email");
            entity.Property(e => e.PkIdKh).HasColumnName("pk_IdKh");
            entity.Property(e => e.PkPodstaw).HasColumnName("pk_Podstaw");
            entity.Property(e => e.PkTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("pk_Telefon");
        });

        modelBuilder.Entity<VwKlientCecha>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_KlientCecha");

            entity.Property(e => e.AdrId).HasColumnName("adr_Id");
        });

        modelBuilder.Entity<VwKlientHistorium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_KlientHistoria");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Idfirmy).HasColumnName("IDFIRMY");
            entity.Property(e => e.Idklienta).HasColumnName("IDKLIENTA");
            entity.Property(e => e.Idpersonelu).HasColumnName("IDPERSONELU");
            entity.Property(e => e.Lot).HasColumnName("LOT");
            entity.Property(e => e.Obiekt)
                .HasMaxLength(111)
                .IsUnicode(false)
                .HasColumnName("OBIEKT");
            entity.Property(e => e.Syntheticid).HasColumnName("SYNTHETICID");
            entity.Property(e => e.Zdarzenie)
                .HasMaxLength(1000)
                .HasColumnName("ZDARZENIE");
        });

        modelBuilder.Entity<VwKompensatyRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwKompensatyRew");

            entity.Property(e => e.NzkDataRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("nzk_DataRealizacji");
            entity.Property(e => e.NzkDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("nzk_DataWystawienia");
            entity.Property(e => e.NzkId).HasColumnName("nzk_Id");
            entity.Property(e => e.NzkIdHistoriiAdresu).HasColumnName("nzk_IdHistoriiAdresu");
            entity.Property(e => e.NzkIdKategorii).HasColumnName("nzk_IdKategorii");
            entity.Property(e => e.NzkIdObiektu).HasColumnName("nzk_IdObiektu");
            entity.Property(e => e.NzkIdPersonelu).HasColumnName("nzk_IdPersonelu");
            entity.Property(e => e.NzkImport).HasColumnName("nzk_Import");
            entity.Property(e => e.NzkNrPelny)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzk_NrPelny");
            entity.Property(e => e.NzkNumer).HasColumnName("nzk_Numer");
            entity.Property(e => e.NzkProgram).HasColumnName("nzk_Program");
            entity.Property(e => e.NzkStatus).HasColumnName("nzk_Status");
            entity.Property(e => e.NzkTypObiektu).HasColumnName("nzk_TypObiektu");
            entity.Property(e => e.NzkWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzk_Waluta");
            entity.Property(e => e.NzkWartosc)
                .HasColumnType("money")
                .HasColumnName("nzk_Wartosc");
            entity.Property(e => e.NzkWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzk_WartoscWaluta");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.SsTypObiektu).HasColumnName("ss_typ_obiektu");
            entity.Property(e => e.SsTypObiektuEx).HasColumnName("ss_typ_obiektu_ex");
        });

        modelBuilder.Entity<VwKonfiguracja>(entity =>
        {
            entity.HasKey(e => new { e.VwcgSection, e.VwcgUser, e.VwcgService });

            entity.ToTable("vw__Konfiguracja");

            entity.Property(e => e.VwcgSection)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vwcg_Section");
            entity.Property(e => e.VwcgUser).HasColumnName("vwcg_User");
            entity.Property(e => e.VwcgService).HasColumnName("vwcg_Service");
            entity.Property(e => e.VwcgData)
                .HasColumnType("image")
                .HasColumnName("vwcg_Data");
            entity.Property(e => e.VwcgFiltersData)
                .HasColumnType("image")
                .HasColumnName("vwcg_FiltersData");
        });

        modelBuilder.Entity<VwKontaPrzeciwstawne>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwKontaPrzeciwstawne");

            entity.Property(e => e.IloscKont).HasColumnName("ilosc_Kont");
            entity.Property(e => e.Konto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("konto");
            entity.Property(e => e.Przeciwstawne)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("przeciwstawne");
        });

        modelBuilder.Entity<VwKosztyDoKorekty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwKosztyDoKorekty");

            entity.Property(e => e.KprDataZdarzenia)
                .HasColumnType("datetime")
                .HasColumnName("kpr_DataZdarzenia");
            entity.Property(e => e.KprDataZdarzeniaGospodarczego)
                .HasColumnType("datetime")
                .HasColumnName("kpr_DataZdarzeniaGospodarczego");
            entity.Property(e => e.KprDochod)
                .HasColumnType("money")
                .HasColumnName("kpr_Dochod");
            entity.Property(e => e.KprId).HasColumnName("kpr_Id");
            entity.Property(e => e.KprIdDokImport).HasColumnName("kpr_IdDokImport");
            entity.Property(e => e.KprIdKategorii).HasColumnName("kpr_IdKategorii");
            entity.Property(e => e.KprIdKh).HasColumnName("kpr_IdKh");
            entity.Property(e => e.KprIdObiektu).HasColumnName("kpr_IdObiektu");
            entity.Property(e => e.KprIdOkresu).HasColumnName("kpr_IdOkresu");
            entity.Property(e => e.KprImportowany).HasColumnName("kpr_Importowany");
            entity.Property(e => e.KprKodPocztowyKh)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("kpr_KodPocztowyKh");
            entity.Property(e => e.KprKolBadaniaRozwoj)
                .HasColumnType("money")
                .HasColumnName("kpr_KolBadaniaRozwoj");
            entity.Property(e => e.KprKolInne)
                .HasColumnType("money")
                .HasColumnName("kpr_KolInne");
            entity.Property(e => e.KprKolPrzychPozostale)
                .HasColumnType("money")
                .HasColumnName("kpr_KolPrzychPozostale");
            entity.Property(e => e.KprKolPrzychRazem)
                .HasColumnType("money")
                .HasColumnName("kpr_KolPrzychRazem");
            entity.Property(e => e.KprKolPrzychSpTowUsl)
                .HasColumnType("money")
                .HasColumnName("kpr_KolPrzychSpTowUsl");
            entity.Property(e => e.KprKolUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("kpr_KolUwagi");
            entity.Property(e => e.KprKolWydPozostale)
                .HasColumnType("money")
                .HasColumnName("kpr_KolWydPozostale");
            entity.Property(e => e.KprKolWydRazem)
                .HasColumnType("money")
                .HasColumnName("kpr_KolWydRazem");
            entity.Property(e => e.KprKolWydReprRekl)
                .HasColumnType("money")
                .HasColumnName("kpr_KolWydReprRekl");
            entity.Property(e => e.KprKolWydWynagr)
                .HasColumnType("money")
                .HasColumnName("kpr_KolWydWynagr");
            entity.Property(e => e.KprKolZakKosztyUbocz)
                .HasColumnType("money")
                .HasColumnName("kpr_KolZakKosztyUbocz");
            entity.Property(e => e.KprKolZakTowarow)
                .HasColumnType("money")
                .HasColumnName("kpr_KolZakTowarow");
            entity.Property(e => e.KprKorektaKupdataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("kpr_KorektaKUPDataPlatnosci");
            entity.Property(e => e.KprKorektaKupdowodZaplaty)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("kpr_KorektaKUPDowodZaplaty");
            entity.Property(e => e.KprKorektaKupidDokKorygowany).HasColumnName("kpr_KorektaKUPIdDokKorygowany");
            entity.Property(e => e.KprKorektaKupnrDokKorygowany)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("kpr_KorektaKUPNrDokKorygowany");
            entity.Property(e => e.KprKorektaKupplatnoscCzesciowa).HasColumnName("kpr_KorektaKUPPlatnoscCzesciowa");
            entity.Property(e => e.KprKorektaKupterminKorekty)
                .HasColumnType("datetime")
                .HasColumnName("kpr_KorektaKUPTerminKorekty");
            entity.Property(e => e.KprKorektaKupterminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("kpr_KorektaKUPTerminPlatnosci");
            entity.Property(e => e.KprKorektaKuptyp).HasColumnName("kpr_KorektaKUPTyp");
            entity.Property(e => e.KprKorektaSn).HasColumnName("kpr_KorektaSN");
            entity.Property(e => e.KprMalyPojazd).HasColumnName("kpr_MalyPojazd");
            entity.Property(e => e.KprMiastoKh)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("kpr_MiastoKh");
            entity.Property(e => e.KprNazwaKh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kpr_NazwaKh");
            entity.Property(e => e.KprNazwaPelnaKh)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kpr_NazwaPelnaKh");
            entity.Property(e => e.KprNettoBrutto).HasColumnName("kpr_NettoBrutto");
            entity.Property(e => e.KprNipkh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kpr_NIPKh");
            entity.Property(e => e.KprNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kpr_NrDokumentu");
            entity.Property(e => e.KprOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kpr_Opis");
            entity.Property(e => e.KprOpisKolBadaniaRozwoj)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kpr_OpisKolBadaniaRozwoj");
            entity.Property(e => e.KprPrzypadekSzczegolnyPit).HasColumnName("kpr_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.KprRodzaj).HasColumnName("kpr_Rodzaj");
            entity.Property(e => e.KprStawkaVat).HasColumnName("kpr_StawkaVAT");
            entity.Property(e => e.KprTypDokImport).HasColumnName("kpr_TypDokImport");
            entity.Property(e => e.KprTypObiektu).HasColumnName("kpr_TypObiektu");
            entity.Property(e => e.KprTypOpisuKolBadaniaRozwoj).HasColumnName("kpr_TypOpisuKolBadaniaRozwoj");
            entity.Property(e => e.KprUlicaKh)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("kpr_UlicaKh");
            entity.Property(e => e.KprUniewazniony).HasColumnName("kpr_Uniewazniony");
            entity.Property(e => e.KprWartoscZfaktury)
                .HasColumnType("money")
                .HasColumnName("kpr_WartoscZFaktury");
            entity.Property(e => e.KprWersjaKpiR).HasColumnName("kpr_WersjaKPiR");
            entity.Property(e => e.KprWlaczKorygowanieKup).HasColumnName("kpr_WlaczKorygowanieKUP");
            entity.Property(e => e.KprZakupy)
                .HasColumnType("money")
                .HasColumnName("kpr_Zakupy");
            entity.Property(e => e.KprZakupyWydatki)
                .HasColumnType("money")
                .HasColumnName("kpr_ZakupyWydatki");
            entity.Property(e => e.TmpPonownieZaliczony).HasColumnName("tmp_PonownieZaliczony");
            entity.Property(e => e.TmpSkorygowany).HasColumnName("tmp_Skorygowany");
        });

        modelBuilder.Entity<VwKursyCen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwKursyCen");

            entity.Property(e => e.Kurs1).HasColumnType("money");
            entity.Property(e => e.Kurs10).HasColumnType("money");
            entity.Property(e => e.Kurs2).HasColumnType("money");
            entity.Property(e => e.Kurs3).HasColumnType("money");
            entity.Property(e => e.Kurs4).HasColumnType("money");
            entity.Property(e => e.Kurs5).HasColumnType("money");
            entity.Property(e => e.Kurs6).HasColumnType("money");
            entity.Property(e => e.Kurs7).HasColumnType("money");
            entity.Property(e => e.Kurs8).HasColumnType("money");
            entity.Property(e => e.Kurs9).HasColumnType("money");
        });

        modelBuilder.Entity<VwKwotyStawkiOplatSpecjalnych>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwKwotyStawkiOplatSpecjalnych");

            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObKategoriaId).HasColumnName("ob_KategoriaId");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.SosKwotaOplaty)
                .HasColumnType("money")
                .HasColumnName("sos_KwotaOplaty");
            entity.Property(e => e.SosStawka)
                .HasColumnType("money")
                .HasColumnName("sos_Stawka");
            entity.Property(e => e.SosTyp).HasColumnName("sos_Typ");
        });

        modelBuilder.Entity<VwKwotyStawkiOplatSpecjalnychWszystkieDok>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwKwotyStawkiOplatSpecjalnychWszystkieDok");

            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObKategoriaId).HasColumnName("ob_KategoriaId");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.SosKwotaOplaty)
                .HasColumnType("money")
                .HasColumnName("sos_KwotaOplaty");
            entity.Property(e => e.SosStawka)
                .HasColumnType("money")
                .HasColumnName("sos_Stawka");
            entity.Property(e => e.SosTyp).HasColumnName("sos_Typ");
        });

        modelBuilder.Entity<VwMagazyn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMagazyn");

            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDoDokPodtyp).HasColumnName("dok_DoDokPodtyp");
            entity.Property(e => e.DokDoDokTyp).HasColumnName("dok_DoDokTyp");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
        });

        modelBuilder.Entity<VwMarzaCalkowitaFm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMarzaCalkowitaFM");

            entity.Property(e => e.DokIdFm).HasColumnName("DokIdFM");
            entity.Property(e => e.DokMarzaBrutto).HasColumnType("money");
            entity.Property(e => e.DokMarzaNetto).HasColumnType("money");
        });

        modelBuilder.Entity<VwMisprzedaz>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMISprzedaz");

            entity.Property(e => e.MisDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataModyfikacji");
            entity.Property(e => e.MisDataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataPlatnosci");
            entity.Property(e => e.MisDataPobrania)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataPobrania");
            entity.Property(e => e.MisDataRozdzielenia)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataRozdzielenia");
            entity.Property(e => e.MisDataUtworzenia)
                .HasColumnType("datetime")
                .HasColumnName("mis_DataUtworzenia");
            entity.Property(e => e.MisDokIdMaila).HasColumnName("mis_DokIdMaila");
            entity.Property(e => e.MisDokIdPowiazania).HasColumnName("mis_DokIdPowiazania");
            entity.Property(e => e.MisDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mis_DokNrPelny");
            entity.Property(e => e.MisDokPapierowy).HasColumnName("mis_DokPapierowy");
            entity.Property(e => e.MisDokPapierowyIdAdresu).HasColumnName("mis_DokPapierowyIdAdresu");
            entity.Property(e => e.MisDokPrzyjeciaIdPowiazania).HasColumnName("mis_DokPrzyjeciaIdPowiazania");
            entity.Property(e => e.MisDokPrzyjeciaNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mis_DokPrzyjeciaNrPelny");
            entity.Property(e => e.MisId).HasColumnName("mis_Id");
            entity.Property(e => e.MisIdPartnera).HasColumnName("mis_IdPartnera");
            entity.Property(e => e.MisIdPlatnosci)
                .HasMaxLength(128)
                .HasColumnName("mis_IdPlatnosci");
            entity.Property(e => e.MisIdZamowienia).HasColumnName("mis_IdZamowienia");
            entity.Property(e => e.MisKhEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mis_KhEmail");
            entity.Property(e => e.MisKhIdAdresu).HasColumnName("mis_KhIdAdresu");
            entity.Property(e => e.MisKhIdPowiazania).HasColumnName("mis_KhIdPowiazania");
            entity.Property(e => e.MisKhIdentyfikator)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mis_KhIdentyfikator");
            entity.Property(e => e.MisKhTypIdentyfikatora)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mis_KhTypIdentyfikatora");
            entity.Property(e => e.MisNumer)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("mis_Numer");
            entity.Property(e => e.MisOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mis_Opis");
            entity.Property(e => e.MisStatusKontrahenta).HasColumnName("mis_StatusKontrahenta");
            entity.Property(e => e.MisStatusMapowania).HasColumnName("mis_StatusMapowania");
            entity.Property(e => e.MisStatusObsluzeniaSerwisu).HasColumnName("mis_StatusObsluzeniaSerwisu");
            entity.Property(e => e.MisStatusPoprawnosci).HasColumnName("mis_StatusPoprawnosci");
            entity.Property(e => e.MisStatusPrzetworzenia).HasColumnName("mis_StatusPrzetworzenia");
            entity.Property(e => e.MisWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("mis_WartoscBrutto");
            entity.Property(e => e.MisWersjaPobrania)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("mis_WersjaPobrania");
        });

        modelBuilder.Entity<VwModul>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwModul");

            entity.Property(e => e.UimId).HasColumnName("uim_Id");
            entity.Property(e => e.UimIdWzorca).HasColumnName("uim_IdWzorca");
            entity.Property(e => e.UimOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_Opis");
            entity.Property(e => e.UimProgram).HasColumnName("uim_Program");
            entity.Property(e => e.UimStatusNowosci).HasColumnName("uim_StatusNowosci");
            entity.Property(e => e.UimTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_Tytul");
            entity.Property(e => e.UimTytulWzorca)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_TytulWzorca");
        });

        modelBuilder.Entity<VwNetParametrInd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNetParametrInd");

            entity.Property(e => e.NepId).HasColumnName("nep_Id");
            entity.Property(e => e.NepInfoMarketingowe).HasColumnName("nep_InfoMarketingowe");
            entity.Property(e => e.NepInfoMerytoryczne).HasColumnName("nep_InfoMerytoryczne");
            entity.Property(e => e.NepInfoTechniczne).HasColumnName("nep_InfoTechniczne");
            entity.Property(e => e.NepParamEwidId).HasColumnName("nep_ParamEwidId");
            entity.Property(e => e.NepPokazujWiadomosciPrzez).HasColumnName("nep_PokazujWiadomosciPrzez");
            entity.Property(e => e.NepPowiadomKursy).HasColumnName("nep_PowiadomKursy");
            entity.Property(e => e.NepPowiadomLicRozbieznosci).HasColumnName("nep_PowiadomLicRozbieznosci");
            entity.Property(e => e.NepPowiadomLicWygasanie).HasColumnName("nep_PowiadomLicWygasanie");
            entity.Property(e => e.NepPowiadomWersjaParametrow).HasColumnName("nep_PowiadomWersjaParametrow");
            entity.Property(e => e.NepPowiadomWersjaProgramu).HasColumnName("nep_PowiadomWersjaProgramu");
        });

        modelBuilder.Entity<VwNetWiadomosci>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNetWiadomosci");

            entity.Property(e => e.NewAdresaci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("new_Adresaci");
            entity.Property(e => e.NewData)
                .HasColumnType("datetime")
                .HasColumnName("new_Data");
            entity.Property(e => e.NewId).HasColumnName("new_Id");
            entity.Property(e => e.NewTresc)
                .HasMaxLength(7000)
                .IsUnicode(false)
                .HasColumnName("new_Tresc");
            entity.Property(e => e.NewTyp).HasColumnName("new_Typ");
            entity.Property(e => e.NewTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("new_Tytul");
            entity.Property(e => e.NewZrodloNip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("new_ZrodloNIP");
            entity.Property(e => e.NewZrodloTyp).HasColumnName("new_ZrodloTyp");
            entity.Property(e => e.NewZrodloUzytkownik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("new_ZrodloUzytkownik");
        });

        modelBuilder.Entity<VwNetWiadomosciNowaWersja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNetWiadomosciNowaWersja");

            entity.Property(e => e.NefDataPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("nef_DataPrzypomnienia");
            entity.Property(e => e.NefPobrano).HasColumnName("nef_Pobrano");
            entity.Property(e => e.NewAdresaci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("new_Adresaci");
            entity.Property(e => e.NewData)
                .HasColumnType("datetime")
                .HasColumnName("new_Data");
            entity.Property(e => e.NewId).HasColumnName("new_Id");
            entity.Property(e => e.NewTresc)
                .HasMaxLength(7000)
                .IsUnicode(false)
                .HasColumnName("new_Tresc");
            entity.Property(e => e.NewTyp).HasColumnName("new_Typ");
            entity.Property(e => e.NewTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("new_Tytul");
            entity.Property(e => e.NewZrodloNip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("new_ZrodloNIP");
            entity.Property(e => e.NewZrodloTyp).HasColumnName("new_ZrodloTyp");
            entity.Property(e => e.NewZrodloUzytkownik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("new_ZrodloUzytkownik");
            entity.Property(e => e.OdczytanaWstarejWersji).HasColumnName("OdczytanaWStarejWersji");
        });

        modelBuilder.Entity<VwNotaKoryg4Grid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNotaKoryg4Grid");

            entity.Property(e => e.DnkDataPotw)
                .HasColumnType("datetime")
                .HasColumnName("dnk_DataPotw");
            entity.Property(e => e.DnkDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dnk_DataWyst");
            entity.Property(e => e.DnkId).HasColumnName("dnk_Id");
            entity.Property(e => e.DnkKatId).HasColumnName("dnk_KatId");
            entity.Property(e => e.DnkMagId).HasColumnName("dnk_MagId");
            entity.Property(e => e.DnkMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dnk_MscWyst");
            entity.Property(e => e.DnkNr).HasColumnName("dnk_Nr");
            entity.Property(e => e.DnkNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dnk_NrPelny");
            entity.Property(e => e.DnkNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dnk_NrRoz");
            entity.Property(e => e.DnkOdbiorcaAdreshId).HasColumnName("dnk_OdbiorcaAdreshId");
            entity.Property(e => e.DnkOdbiorcaId).HasColumnName("dnk_OdbiorcaId");
            entity.Property(e => e.DnkOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dnk_Odebral");
            entity.Property(e => e.DnkPersonelId).HasColumnName("dnk_PersonelId");
            entity.Property(e => e.DnkPodtyp).HasColumnName("dnk_Podtyp");
            entity.Property(e => e.DnkPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dnk_Podtytul");
            entity.Property(e => e.DnkPotwierdzenie).HasColumnName("dnk_Potwierdzenie");
            entity.Property(e => e.DnkTrescDoKor)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("dnk_TrescDoKor");
            entity.Property(e => e.DnkTrescPoKor)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("dnk_TrescPoKor");
            entity.Property(e => e.DnkTyp).HasColumnName("dnk_Typ");
            entity.Property(e => e.DnkTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dnk_Tytul");
            entity.Property(e => e.DnkUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dnk_Uwagi");
            entity.Property(e => e.DnkWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dnk_Wystawil");
        });

        modelBuilder.Entity<VwNrParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNrParametr");

            entity.Property(e => e.NpDefiniowalnyId).HasColumnName("np_DefiniowalnyId");
            entity.Property(e => e.NpNrLuka).HasColumnName("np_NrLuka");
            entity.Property(e => e.NpNrMiesiac).HasColumnName("np_NrMiesiac");
            entity.Property(e => e.NpNrRodzaj).HasColumnName("np_NrRodzaj");
            entity.Property(e => e.NpNrRok).HasColumnName("np_NrRok");
            entity.Property(e => e.NpNrRoz).HasColumnName("np_NrRoz");
            entity.Property(e => e.NpNrSymbolRej).HasColumnName("np_NrSymbolRej");
            entity.Property(e => e.NpNrSymbolUzyt).HasColumnName("np_NrSymbolUzyt");
            entity.Property(e => e.NpTyp).HasColumnName("np_Typ");
        });

        modelBuilder.Entity<VwObPowiazane>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwObPowiazane");

            entity.Property(e => e.OpEmailUsuniety).HasColumnName("op_EmailUsuniety");
            entity.Property(e => e.OpEmailUsunietyWskazywanego).HasColumnName("op_EmailUsunietyWskazywanego");
            entity.Property(e => e.OpId).HasColumnName("op_Id");
            entity.Property(e => e.OpIdOb).HasColumnName("op_IdOb");
            entity.Property(e => e.OpIdWskazywanego).HasColumnName("op_IdWskazywanego");
            entity.Property(e => e.OpKontoEmail).HasColumnName("op_KontoEmail");
            entity.Property(e => e.OpKontoEmailWskazywanego).HasColumnName("op_KontoEmailWskazywanego");
            entity.Property(e => e.OpOpiekun).HasColumnName("op_Opiekun");
            entity.Property(e => e.OpOpiekunWskazywanego).HasColumnName("op_OpiekunWskazywanego");
            entity.Property(e => e.OpOpisOb)
                .HasMaxLength(1000)
                .HasColumnName("op_OpisOb");
            entity.Property(e => e.OpOpisObiektu)
                .HasMaxLength(1000)
                .HasColumnName("op_OpisObiektu");
            entity.Property(e => e.OpOpisPowiazania)
                .HasMaxLength(255)
                .HasColumnName("op_OpisPowiazania");
            entity.Property(e => e.OpOpisTypuOb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("op_OpisTypuOb");
            entity.Property(e => e.OpOpisTypuWskazywanego)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("op_OpisTypuWskazywanego");
            entity.Property(e => e.OpPrywatne).HasColumnName("op_Prywatne");
            entity.Property(e => e.OpPrywatneWskazywanego).HasColumnName("op_PrywatneWskazywanego");
            entity.Property(e => e.OpTypOb).HasColumnName("op_TypOb");
            entity.Property(e => e.OpTypWskazywanego).HasColumnName("op_TypWskazywanego");
        });

        modelBuilder.Entity<VwObPowiazaneGrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwObPowiazaneGrid");

            entity.Property(e => e.OpEmailUsuniety).HasColumnName("op_EmailUsuniety");
            entity.Property(e => e.OpId).HasColumnName("op_Id");
            entity.Property(e => e.OpIdIdent).HasColumnName("op_IdIdent");
            entity.Property(e => e.OpIdObiektu).HasColumnName("op_IdObiektu");
            entity.Property(e => e.OpKierunek).HasColumnName("op_Kierunek");
            entity.Property(e => e.OpKontoEmail).HasColumnName("op_KontoEmail");
            entity.Property(e => e.OpOpiekun).HasColumnName("op_Opiekun");
            entity.Property(e => e.OpOpisObiektu)
                .HasMaxLength(1000)
                .HasColumnName("op_OpisObiektu");
            entity.Property(e => e.OpOpisPowiazania)
                .HasMaxLength(255)
                .HasColumnName("op_OpisPowiazania");
            entity.Property(e => e.OpOpisTypu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("op_OpisTypu");
            entity.Property(e => e.OpPrywatne).HasColumnName("op_Prywatne");
            entity.Property(e => e.OpTypIdent).HasColumnName("op_TypIdent");
            entity.Property(e => e.OpTypObiektu).HasColumnName("op_TypObiektu");
        });

        modelBuilder.Entity<VwObPowiazaneGridSymbolTr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwObPowiazaneGridSymbolTr");

            entity.Property(e => e.EmDeleteStat).HasColumnName("em_DeleteStat");
            entity.Property(e => e.OpEmailUsuniety).HasColumnName("op_EmailUsuniety");
            entity.Property(e => e.OpId).HasColumnName("op_Id");
            entity.Property(e => e.OpIdIdent).HasColumnName("op_IdIdent");
            entity.Property(e => e.OpIdObiektu).HasColumnName("op_IdObiektu");
            entity.Property(e => e.OpKierunek).HasColumnName("op_Kierunek");
            entity.Property(e => e.OpOpisObiektu)
                .HasMaxLength(1033)
                .HasColumnName("op_OpisObiektu");
            entity.Property(e => e.OpOpisPowiazania)
                .HasMaxLength(255)
                .HasColumnName("op_OpisPowiazania");
            entity.Property(e => e.OpOpisTypu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("op_OpisTypu");
            entity.Property(e => e.OpPrywatne).HasColumnName("op_Prywatne");
            entity.Property(e => e.OpTypIdent).HasColumnName("op_TypIdent");
            entity.Property(e => e.OpTypObiektu).HasColumnName("op_TypObiektu");
        });

        modelBuilder.Entity<VwOdliczeniaDoliczenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOdliczeniaDoliczenia");

            entity.Property(e => e.KwotaDoliczenia).HasColumnType("money");
            entity.Property(e => e.KwotaOdliczenia).HasColumnType("money");
            entity.Property(e => e.OdDataDo)
                .HasColumnType("datetime")
                .HasColumnName("od_DataDo");
            entity.Property(e => e.OdDataOd)
                .HasColumnType("datetime")
                .HasColumnName("od_DataOd");
            entity.Property(e => e.OdDataZapisu)
                .HasColumnType("datetime")
                .HasColumnName("od_DataZapisu");
            entity.Property(e => e.OdId).HasColumnName("od_Id");
            entity.Property(e => e.OdIdObiektu).HasColumnName("od_IdObiektu");
            entity.Property(e => e.OdIdRodzajuOdliczenia).HasColumnName("od_IdRodzajuOdliczenia");
            entity.Property(e => e.OdIdWspolnika).HasColumnName("od_IdWspolnika");
            entity.Property(e => e.OdKwota)
                .HasColumnType("money")
                .HasColumnName("od_Kwota");
            entity.Property(e => e.OdOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("od_Opis");
            entity.Property(e => e.OdRodzaj).HasColumnName("od_Rodzaj");
            entity.Property(e => e.OdSposobOdliczania).HasColumnName("od_SposobOdliczania");
            entity.Property(e => e.OdTypObiektu).HasColumnName("od_TypObiektu");
        });

        modelBuilder.Entity<VwOperacjePrzyjeciaSt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOperacjePrzyjeciaST");

            entity.Property(e => e.StoCzyAmort).HasColumnName("sto_CzyAmort");
            entity.Property(e => e.StoCzyAmortBil).HasColumnName("sto_CzyAmortBil");
            entity.Property(e => e.StoCzyPduw).HasColumnName("sto_CzyPDUW");
            entity.Property(e => e.StoCzyPodwyzszonaStopa).HasColumnName("sto_CzyPodwyzszonaStopa");
            entity.Property(e => e.StoCzyPodwyzszonaStopaBil).HasColumnName("sto_CzyPodwyzszonaStopaBil");
            entity.Property(e => e.StoData)
                .HasColumnType("datetime")
                .HasColumnName("sto_Data");
            entity.Property(e => e.StoDokSprzedazy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sto_DokSprzedazy");
            entity.Property(e => e.StoId).HasColumnName("sto_Id");
            entity.Property(e => e.StoIdMpk).HasColumnName("sto_IdMPK");
            entity.Property(e => e.StoIdSrodka).HasColumnName("sto_IdSrodka");
            entity.Property(e => e.StoKomisja)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sto_Komisja");
            entity.Property(e => e.StoMetoda).HasColumnName("sto_Metoda");
            entity.Property(e => e.StoMetodaBil).HasColumnName("sto_MetodaBil");
            entity.Property(e => e.StoNabywca)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sto_Nabywca");
            entity.Property(e => e.StoNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sto_NrDok");
            entity.Property(e => e.StoPodwyzszonaStopa)
                .HasColumnType("money")
                .HasColumnName("sto_PodwyzszonaStopa");
            entity.Property(e => e.StoPodwyzszonaStopaBil)
                .HasColumnType("money")
                .HasColumnName("sto_PodwyzszonaStopaBil");
            entity.Property(e => e.StoPrzyczyna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sto_Przyczyna");
            entity.Property(e => e.StoRozpoczecieAm).HasColumnName("sto_RozpoczecieAM");
            entity.Property(e => e.StoRozpoczecieAmbil).HasColumnName("sto_RozpoczecieAMBil");
            entity.Property(e => e.StoSposob)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sto_Sposob");
            entity.Property(e => e.StoStopa)
                .HasColumnType("money")
                .HasColumnName("sto_Stopa");
            entity.Property(e => e.StoStopaBil)
                .HasColumnType("money")
                .HasColumnName("sto_StopaBil");
            entity.Property(e => e.StoTypOper).HasColumnName("sto_TypOper");
            entity.Property(e => e.StoUmorzPocz)
                .HasColumnType("money")
                .HasColumnName("sto_UmorzPocz");
            entity.Property(e => e.StoUmorzPoczBil)
                .HasColumnType("money")
                .HasColumnName("sto_UmorzPoczBil");
            entity.Property(e => e.StoUzytkownik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sto_Uzytkownik");
            entity.Property(e => e.StoWartosc)
                .HasColumnType("money")
                .HasColumnName("sto_Wartosc");
            entity.Property(e => e.StoWartoscBil)
                .HasColumnType("money")
                .HasColumnName("sto_WartoscBil");
            entity.Property(e => e.StoWspolczynnikDegr)
                .HasColumnType("money")
                .HasColumnName("sto_WspolczynnikDegr");
            entity.Property(e => e.StoWspolczynnikDegrBil)
                .HasColumnType("money")
                .HasColumnName("sto_WspolczynnikDegrBil");
        });

        modelBuilder.Entity<VwOplCukrDokZaliczkowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOplCukrDokZaliczkowe");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IloscZnak).HasColumnType("money");
            entity.Property(e => e.IloscZnakMag).HasColumnType("money");
            entity.Property(e => e.ObOplCukrowaCukierZawartoscEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaCukierZawartoscEx");
            entity.Property(e => e.ObOplCukrowaElektrolit).HasColumnName("ob_OplCukrowaElektrolit");
            entity.Property(e => e.ObOplCukrowaKwCukier)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukier");
            entity.Property(e => e.ObOplCukrowaKwCukierEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukierEx");
            entity.Property(e => e.ObOplCukrowaKwKofeina)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwKofeina");
            entity.Property(e => e.ObOplCukrowaObj)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaObj");
            entity.Property(e => e.ObOplCukrowaPodlega).HasColumnName("ob_OplCukrowaPodlega");
            entity.Property(e => e.ObOplCukrowaSok).HasColumnName("ob_OplCukrowaSok");
            entity.Property(e => e.ObOplCukrowaWartSuma)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaWartSuma");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
        });

        modelBuilder.Entity<VwOplCukrDokZbiorcze>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOplCukrDokZbiorcze");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IloscZnak).HasColumnType("money");
            entity.Property(e => e.IloscZnakMag).HasColumnType("money");
            entity.Property(e => e.ObOplCukrowaCukierZawartoscEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaCukierZawartoscEx");
            entity.Property(e => e.ObOplCukrowaElektrolit).HasColumnName("ob_OplCukrowaElektrolit");
            entity.Property(e => e.ObOplCukrowaKwCukier)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukier");
            entity.Property(e => e.ObOplCukrowaKwCukierEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukierEx");
            entity.Property(e => e.ObOplCukrowaKwKofeina)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwKofeina");
            entity.Property(e => e.ObOplCukrowaObj)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaObj");
            entity.Property(e => e.ObOplCukrowaPodlega).HasColumnName("ob_OplCukrowaPodlega");
            entity.Property(e => e.ObOplCukrowaSok).HasColumnName("ob_OplCukrowaSok");
            entity.Property(e => e.ObOplCukrowaWartSuma)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaWartSuma");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
        });

        modelBuilder.Entity<VwOplCukrZest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOplCukrZest");

            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.AdrhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_NIP");
            entity.Property(e => e.AdrhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adrh_Symbol");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IloscZnak).HasColumnType("money");
            entity.Property(e => e.NadwyzkaCukruPonad5gr).HasColumnType("money");
            entity.Property(e => e.ObOplCukrowaElektrolit).HasColumnName("ob_OplCukrowaElektrolit");
            entity.Property(e => e.ObOplCukrowaSok).HasColumnName("ob_OplCukrowaSok");
            entity.Property(e => e.ObOplCukrowaWartSuma)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaWartSuma");
            entity.Property(e => e.ObjetoscWlitrach)
                .HasColumnType("money")
                .HasColumnName("ObjetoscWLitrach");
            entity.Property(e => e.OplataCukrowa).HasColumnType("money");
            entity.Property(e => e.OplataDla5grCukru).HasColumnType("money");
            entity.Property(e => e.OplataKofeina).HasColumnType("money");
            entity.Property(e => e.OplataPowyzej5grCukru).HasColumnType("money");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_Symbol");
        });

        modelBuilder.Entity<VwOplCukrZestDokRazem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOplCukrZestDokRazem");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.IloscZnak).HasColumnType("money");
            entity.Property(e => e.ObOplCukrowaCukierZawartoscEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaCukierZawartoscEx");
            entity.Property(e => e.ObOplCukrowaElektrolit).HasColumnName("ob_OplCukrowaElektrolit");
            entity.Property(e => e.ObOplCukrowaKwCukier)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukier");
            entity.Property(e => e.ObOplCukrowaKwCukierEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukierEx");
            entity.Property(e => e.ObOplCukrowaKwKofeina)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwKofeina");
            entity.Property(e => e.ObOplCukrowaSok).HasColumnName("ob_OplCukrowaSok");
            entity.Property(e => e.ObOplCukrowaWartSuma)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaWartSuma");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObjetoscWlitrach)
                .HasColumnType("money")
                .HasColumnName("ObjetoscWLitrach");
            entity.Property(e => e.ZawartoscCukruPowyzej).HasColumnType("money");
        });

        modelBuilder.Entity<VwPdUprawnienium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPdUprawnienia");

            entity.Property(e => e.UprId).HasColumnName("upr_Id");
            entity.Property(e => e.UprModul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("upr_Modul");
            entity.Property(e => e.UprNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("upr_Nazwa");
            entity.Property(e => e.UprProgram).HasColumnName("upr_Program");
        });

        modelBuilder.Entity<VwPersonelRachunkuBankOnline>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPersonelRachunkuBankOnline");

            entity.Property(e => e.RbeIdRachunku).HasColumnName("rbe_IdRachunku");
            entity.Property(e => e.UzId).HasColumnName("uz_Id");
            entity.Property(e => e.UzIdentyfikator)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("uz_Identyfikator");
            entity.Property(e => e.UzImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("uz_Imie");
            entity.Property(e => e.UzNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("uz_Nazwisko");
        });

        modelBuilder.Entity<VwPodsumowanieKpir>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPodsumowanieKPIR");

            entity.Property(e => e.KprDataZdarzenia).HasColumnName("kpr_DataZdarzenia");
            entity.Property(e => e.SumKprKolumna10)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna10");
            entity.Property(e => e.SumKprKolumna11)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna11");
            entity.Property(e => e.SumKprKolumna12)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna12");
            entity.Property(e => e.SumKprKolumna13)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna13");
            entity.Property(e => e.SumKprKolumna14)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna14");
            entity.Property(e => e.SumKprKolumna15)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna15");
            entity.Property(e => e.SumKprKolumna16)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna16");
            entity.Property(e => e.SumKprKolumna7)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna7");
            entity.Property(e => e.SumKprKolumna8)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna8");
            entity.Property(e => e.SumKprKolumna9)
                .HasColumnType("money")
                .HasColumnName("sum_kpr_Kolumna9");
        });

        modelBuilder.Entity<VwPojEksploatacjaRew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPojEksploatacjaRew");

            entity.Property(e => e.PprCel)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ppr_Cel");
            entity.Property(e => e.PprCenaKm)
                .HasColumnType("money")
                .HasColumnName("ppr_CenaKm");
            entity.Property(e => e.PprCzyVat).HasColumnName("ppr_CzyVAT");
            entity.Property(e => e.PprData)
                .HasColumnType("datetime")
                .HasColumnName("ppr_Data");
            entity.Property(e => e.PprDataOtrzymania)
                .HasColumnType("datetime")
                .HasColumnName("ppr_DataOtrzymania");
            entity.Property(e => e.PprDataZakDost)
                .HasColumnType("datetime")
                .HasColumnName("ppr_DataZakDost");
            entity.Property(e => e.PprId).HasColumnName("ppr_Id");
            entity.Property(e => e.PprIdKategorii).HasColumnName("ppr_IdKategorii");
            entity.Property(e => e.PprIdKh).HasColumnName("ppr_IdKh");
            entity.Property(e => e.PprIdPojazdu).HasColumnName("ppr_IdPojazdu");
            entity.Property(e => e.PprKhKodPocztowy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ppr_KhKodPocztowy");
            entity.Property(e => e.PprKhMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ppr_KhMiasto");
            entity.Property(e => e.PprKhNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ppr_KhNazwa");
            entity.Property(e => e.PprKhNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ppr_KhNazwaPelna");
            entity.Property(e => e.PprKhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ppr_KhNIP");
            entity.Property(e => e.PprKhUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ppr_KhUlica");
            entity.Property(e => e.PprKierowca)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("ppr_Kierowca");
            entity.Property(e => e.PprKm)
                .HasColumnType("money")
                .HasColumnName("ppr_Km");
            entity.Property(e => e.PprMalyPojazd).HasColumnName("ppr_MalyPojazd");
            entity.Property(e => e.PprNettoBrutto).HasColumnName("ppr_NettoBrutto");
            entity.Property(e => e.PprNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ppr_NrDok");
            entity.Property(e => e.PprOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ppr_Opis");
            entity.Property(e => e.PprPrzypadekSzczegolnyPit).HasColumnName("ppr_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.PprStanLicznika)
                .HasColumnType("money")
                .HasColumnName("ppr_StanLicznika");
            entity.Property(e => e.PprStawkaVat).HasColumnName("ppr_StawkaVAT");
            entity.Property(e => e.PprTrasa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ppr_Trasa");
            entity.Property(e => e.PprTyp).HasColumnName("ppr_Typ");
            entity.Property(e => e.PprUdostepnienie).HasColumnName("ppr_Udostepnienie");
            entity.Property(e => e.PprUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ppr_Uwagi");
            entity.Property(e => e.PprWartoscP)
                .HasColumnType("money")
                .HasColumnName("ppr_WartoscP");
            entity.Property(e => e.PprWartoscR)
                .HasColumnType("money")
                .HasColumnName("ppr_WartoscR");
            entity.Property(e => e.PprWartoscZrachunku)
                .HasColumnType("money")
                .HasColumnName("ppr_WartoscZRachunku");
            entity.Property(e => e.PprZaksiegowany).HasColumnName("ppr_Zaksiegowany");
            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.SsTypObiektu).HasColumnName("ss_typ_obiektu");
            entity.Property(e => e.SsTypObiektuEx).HasColumnName("ss_typ_obiektu_ex");
        });

        modelBuilder.Entity<VwPolaWlasneDokument>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPolaWlasne_Dokument");

            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdId).HasColumnName("pwd_Id");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
        });

        modelBuilder.Entity<VwPolaWlasneFinanse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPolaWlasne_Finanse");

            entity.Property(e => e.NzfData)
                .HasColumnType("datetime")
                .HasColumnName("nzf_Data");
            entity.Property(e => e.NzfDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataKursu");
            entity.Property(e => e.NzfDataOstatniejSplaty)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataOstatniejSplaty");
            entity.Property(e => e.NzfDataUzgodnienia)
                .HasColumnType("datetime")
                .HasColumnName("nzf_DataUzgodnienia");
            entity.Property(e => e.NzfDlaNieznany).HasColumnName("nzf_DlaNieznany");
            entity.Property(e => e.NzfFlaga).HasColumnName("nzf_Flaga");
            entity.Property(e => e.NzfFlagaZmianaCzas)
                .HasColumnType("datetime")
                .HasColumnName("nzf_FlagaZmianaCzas");
            entity.Property(e => e.NzfFlagaZmianaPersonelId).HasColumnName("nzf_FlagaZmianaPersonelId");
            entity.Property(e => e.NzfGenerujTytulem).HasColumnName("nzf_GenerujTytulem");
            entity.Property(e => e.NzfGotowkowa).HasColumnName("nzf_Gotowkowa");
            entity.Property(e => e.NzfId).HasColumnName("nzf_Id");
            entity.Property(e => e.NzfIdAdresu).HasColumnName("nzf_IdAdresu");
            entity.Property(e => e.NzfIdBanku).HasColumnName("nzf_IdBanku");
            entity.Property(e => e.NzfIdDokumentAuto).HasColumnName("nzf_IdDokumentAuto");
            entity.Property(e => e.NzfIdHistoriiAdresu).HasColumnName("nzf_IdHistoriiAdresu");
            entity.Property(e => e.NzfIdKasy).HasColumnName("nzf_IdKasy");
            entity.Property(e => e.NzfIdKategorii).HasColumnName("nzf_IdKategorii");
            entity.Property(e => e.NzfIdObiektu).HasColumnName("nzf_IdObiektu");
            entity.Property(e => e.NzfIdRachObiekt).HasColumnName("nzf_IdRachObiekt");
            entity.Property(e => e.NzfIdRachObiektHist).HasColumnName("nzf_IdRachObiektHist");
            entity.Property(e => e.NzfIdRachunku).HasColumnName("nzf_IdRachunku");
            entity.Property(e => e.NzfIdRachunkuHist).HasColumnName("nzf_IdRachunkuHist");
            entity.Property(e => e.NzfIdRachunkuWirtualnego).HasColumnName("nzf_IdRachunkuWirtualnego");
            entity.Property(e => e.NzfIdRozliczenia).HasColumnName("nzf_IdRozliczenia");
            entity.Property(e => e.NzfIdRozrachunku).HasColumnName("nzf_IdRozrachunku");
            entity.Property(e => e.NzfIdSesjiKasowej).HasColumnName("nzf_IdSesjiKasowej");
            entity.Property(e => e.NzfIdTransakcjiVat).HasColumnName("nzf_IdTransakcjiVat");
            entity.Property(e => e.NzfIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_IdWaluty");
            entity.Property(e => e.NzfIdWystawil).HasColumnName("nzf_IdWystawil");
            entity.Property(e => e.NzfImport).HasColumnName("nzf_Import");
            entity.Property(e => e.NzfIzbaCelna).HasColumnName("nzf_IzbaCelna");
            entity.Property(e => e.NzfKorekta).HasColumnName("nzf_Korekta");
            entity.Property(e => e.NzfKurs)
                .HasColumnType("money")
                .HasColumnName("nzf_Kurs");
            entity.Property(e => e.NzfKwotaRachunkuVat)
                .HasColumnType("money")
                .HasColumnName("nzf_KwotaRachunkuVAT");
            entity.Property(e => e.NzfLiczbaJednostek).HasColumnName("nzf_LiczbaJednostek");
            entity.Property(e => e.NzfMechanizmPodzielonejPlatnosci).HasColumnName("nzf_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.NzfMetodaKasowa).HasColumnName("nzf_MetodaKasowa");
            entity.Property(e => e.NzfNota).HasColumnName("nzf_Nota");
            entity.Property(e => e.NzfNrFaktury)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nzf_NrFaktury");
            entity.Property(e => e.NzfNumer).HasColumnName("nzf_Numer");
            entity.Property(e => e.NzfNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerPelny");
            entity.Property(e => e.NzfNumerWyciagu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_NumerWyciagu");
            entity.Property(e => e.NzfObslugaRachunku).HasColumnName("nzf_ObslugaRachunku");
            entity.Property(e => e.NzfOdebral)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Odebral");
            entity.Property(e => e.NzfOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nzf_Opis");
            entity.Property(e => e.NzfPodIdentyfikacjaZobowiazania)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("nzf_PodIdentyfikacjaZobowiazania");
            entity.Property(e => e.NzfPodOkres)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_PodOkres");
            entity.Property(e => e.NzfPodSymbol)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_PodSymbol");
            entity.Property(e => e.NzfPodtyp).HasColumnName("nzf_Podtyp");
            entity.Property(e => e.NzfPodtypPp).HasColumnName("nzf_PodtypPP");
            entity.Property(e => e.NzfPowiazanie).HasColumnName("nzf_Powiazanie");
            entity.Property(e => e.NzfPrb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_PRB");
            entity.Property(e => e.NzfProgram).HasColumnName("nzf_Program");
            entity.Property(e => e.NzfPrzeniesiony).HasColumnName("nzf_Przeniesiony");
            entity.Property(e => e.NzfRodzajKursu).HasColumnName("nzf_RodzajKursu");
            entity.Property(e => e.NzfRodzajSplaty).HasColumnName("nzf_RodzajSplaty");
            entity.Property(e => e.NzfSplata)
                .HasColumnType("money")
                .HasColumnName("nzf_Splata");
            entity.Property(e => e.NzfSplataWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_SplataWaluta");
            entity.Property(e => e.NzfStatus).HasColumnName("nzf_Status");
            entity.Property(e => e.NzfStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("nzf_StopaOdsetek");
            entity.Property(e => e.NzfTermPlatStatus).HasColumnName("nzf_TermPlatStatus");
            entity.Property(e => e.NzfTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("nzf_TermPlatTransId");
            entity.Property(e => e.NzfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("nzf_TerminPlatnosci");
            entity.Property(e => e.NzfTransakcja)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Transakcja");
            entity.Property(e => e.NzfTransfer).HasColumnName("nzf_Transfer");
            entity.Property(e => e.NzfTyp).HasColumnName("nzf_Typ");
            entity.Property(e => e.NzfTypKorekty).HasColumnName("nzf_TypKorekty");
            entity.Property(e => e.NzfTypObiektu).HasColumnName("nzf_TypObiektu");
            entity.Property(e => e.NzfTypOdsetek).HasColumnName("nzf_TypOdsetek");
            entity.Property(e => e.NzfTypPrzelewu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_TypPrzelewu");
            entity.Property(e => e.NzfTytulem)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasColumnName("nzf_Tytulem");
            entity.Property(e => e.NzfVatpierwotny)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotny");
            entity.Property(e => e.NzfVatpierwotnyWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPierwotnyWaluta");
            entity.Property(e => e.NzfVatpozostalo)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostalo");
            entity.Property(e => e.NzfVatpozostaloWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_VATPozostaloWaluta");
            entity.Property(e => e.NzfWartosc)
                .HasColumnType("money")
                .HasColumnName("nzf_Wartosc");
            entity.Property(e => e.NzfWartoscPierwotna)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotna");
            entity.Property(e => e.NzfWartoscPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscPierwotnaWaluta");
            entity.Property(e => e.NzfWartoscWaluta)
                .HasColumnType("money")
                .HasColumnName("nzf_WartoscWaluta");
            entity.Property(e => e.NzfWydrukowana).HasColumnName("nzf_Wydrukowana");
            entity.Property(e => e.NzfWyslanaHb).HasColumnName("nzf_WyslanaHB");
            entity.Property(e => e.NzfWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nzf_Wystawil");
            entity.Property(e => e.NzfZaliczka).HasColumnName("nzf_Zaliczka");
            entity.Property(e => e.NzfZrodlo).HasColumnName("nzf_Zrodlo");
            entity.Property(e => e.NzfZusdeklaracja)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSDeklaracja");
            entity.Property(e => e.NzfZusnrDecyzji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nzf_ZUSNrDecyzji");
            entity.Property(e => e.NzfZusnrDeklaracji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSNrDeklaracji");
            entity.Property(e => e.NzfZuspodIdentyfikator)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSPodIdentyfikator");
            entity.Property(e => e.NzfZuspodTypIdentyfikatora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSPodTypIdentyfikatora");
            entity.Property(e => e.NzfZustypWplaty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nzf_ZUSTypWplaty");
            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdId).HasColumnName("pwd_Id");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
        });

        modelBuilder.Entity<VwPolaWlasneKontrahent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPolaWlasne_Kontrahent");

            entity.Property(e => e.KhAdresDostawy).HasColumnName("kh_AdresDostawy");
            entity.Property(e => e.KhAdresKoresp).HasColumnName("kh_AdresKoresp");
            entity.Property(e => e.KhAkcyza).HasColumnName("kh_Akcyza");
            entity.Property(e => e.KhBrakPpdlaRozrachunkowAuto).HasColumnName("kh_BrakPPDlaRozrachunkowAuto");
            entity.Property(e => e.KhCelZakupu).HasColumnName("kh_CelZakupu");
            entity.Property(e => e.KhCena).HasColumnName("kh_Cena");
            entity.Property(e => e.KhCentrumAut).HasColumnName("kh_CentrumAut");
            entity.Property(e => e.KhCrm).HasColumnName("kh_CRM");
            entity.Property(e => e.KhCzyKomunikat).HasColumnName("kh_CzyKomunikat");
            entity.Property(e => e.KhCzynnyPodatnikVat).HasColumnName("kh_CzynnyPodatnikVAT");
            entity.Property(e => e.KhDataDodania)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataDodania");
            entity.Property(e => e.KhDataOkolicznosciowa)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataOkolicznosciowa");
            entity.Property(e => e.KhDataVat)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataVAT");
            entity.Property(e => e.KhDataWaznosciVat)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataWaznosciVAT");
            entity.Property(e => e.KhDataWyd)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataWyd");
            entity.Property(e => e.KhDataZmiany)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataZmiany");
            entity.Property(e => e.KhDomena)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Domena");
            entity.Property(e => e.KhDomyslnaTransVatsprzedaz).HasColumnName("kh_DomyslnaTransVATSprzedaz");
            entity.Property(e => e.KhDomyslnaTransVatsprzedazFw).HasColumnName("kh_DomyslnaTransVATSprzedazFW");
            entity.Property(e => e.KhDomyslnaTransVatzakup).HasColumnName("kh_DomyslnaTransVATZakup");
            entity.Property(e => e.KhDomyslnaTransVatzakupFw).HasColumnName("kh_DomyslnaTransVATZakupFW");
            entity.Property(e => e.KhDomyslnaWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("kh_DomyslnaWaluta");
            entity.Property(e => e.KhDomyslnaWalutaMode).HasColumnName("kh_DomyslnaWalutaMode");
            entity.Property(e => e.KhDomyslnyRachBankowyId).HasColumnName("kh_DomyslnyRachBankowyId");
            entity.Property(e => e.KhDomyslnyRachBankowyIdMode).HasColumnName("kh_DomyslnyRachBankowyIdMode");
            entity.Property(e => e.KhDomyslnyTypCeny).HasColumnName("kh_DomyslnyTypCeny");
            entity.Property(e => e.KhEfakturyData)
                .HasColumnType("datetime")
                .HasColumnName("kh_EFakturyData");
            entity.Property(e => e.KhEfakturyZgoda).HasColumnName("kh_EFakturyZgoda");
            entity.Property(e => e.KhEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_EMail");
            entity.Property(e => e.KhEwVatspMcOdliczenia).HasColumnName("kh_EwVATSpMcOdliczenia");
            entity.Property(e => e.KhEwVatzakMcOdliczenia).HasColumnName("kh_EwVATZakMcOdliczenia");
            entity.Property(e => e.KhEwVatzakRodzaj).HasColumnName("kh_EwVATZakRodzaj");
            entity.Property(e => e.KhEwVatzakSposobOdliczenia).HasColumnName("kh_EwVATZakSposobOdliczenia");
            entity.Property(e => e.KhGaduGadu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_GaduGadu");
            entity.Property(e => e.KhGrafika)
                .HasColumnType("image")
                .HasColumnName("kh_Grafika");
            entity.Property(e => e.KhId).HasColumnName("kh_Id");
            entity.Property(e => e.KhIdBranza).HasColumnName("kh_IdBranza");
            entity.Property(e => e.KhIdDodal).HasColumnName("kh_IdDodal");
            entity.Property(e => e.KhIdEwVatsp).HasColumnName("kh_IdEwVATSp");
            entity.Property(e => e.KhIdEwVatspKateg).HasColumnName("kh_IdEwVATSpKateg");
            entity.Property(e => e.KhIdEwVatzak).HasColumnName("kh_IdEwVATZak");
            entity.Property(e => e.KhIdEwVatzakKateg).HasColumnName("kh_IdEwVATZakKateg");
            entity.Property(e => e.KhIdFormaP).HasColumnName("kh_IdFormaP");
            entity.Property(e => e.KhIdGrupa).HasColumnName("kh_IdGrupa");
            entity.Property(e => e.KhIdKategoriaKh).HasColumnName("kh_IdKategoriaKH");
            entity.Property(e => e.KhIdNabywca).HasColumnName("kh_IdNabywca");
            entity.Property(e => e.KhIdOdbiorca).HasColumnName("kh_IdOdbiorca");
            entity.Property(e => e.KhIdOpiekun).HasColumnName("kh_IdOpiekun");
            entity.Property(e => e.KhIdOsobaDo).HasColumnName("kh_IdOsobaDO");
            entity.Property(e => e.KhIdOstatniWpisWeryfikacjiStatusuVat).HasColumnName("kh_IdOstatniWpisWeryfikacjiStatusuVAT");
            entity.Property(e => e.KhIdOstatniWpisWeryfikacjiStatusuVies).HasColumnName("kh_IdOstatniWpisWeryfikacjiStatusuVIES");
            entity.Property(e => e.KhIdOstatniWpisWeryfikacjiWykazPodatnikowVat).HasColumnName("kh_IdOstatniWpisWeryfikacjiWykazPodatnikowVAT");
            entity.Property(e => e.KhIdPozyskany).HasColumnName("kh_IdPozyskany");
            entity.Property(e => e.KhIdRabat).HasColumnName("kh_IdRabat");
            entity.Property(e => e.KhIdRachKategPrzychod).HasColumnName("kh_IdRachKategPrzychod");
            entity.Property(e => e.KhIdRachKategRozchod).HasColumnName("kh_IdRachKategRozchod");
            entity.Property(e => e.KhIdRachunkuWirtualnego).HasColumnName("kh_IdRachunkuWirtualnego");
            entity.Property(e => e.KhIdRegion).HasColumnName("kh_IdRegion");
            entity.Property(e => e.KhIdRodzajKontaktu).HasColumnName("kh_IdRodzajKontaktu");
            entity.Property(e => e.KhIdZmienil).HasColumnName("kh_IdZmienil");
            entity.Property(e => e.KhImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Imie");
            entity.Property(e => e.KhInstKredytowa).HasColumnName("kh_InstKredytowa");
            entity.Property(e => e.KhJednorazowy).HasColumnName("kh_Jednorazowy");
            entity.Property(e => e.KhKlientSklepuInternetowego).HasColumnName("kh_KlientSklepuInternetowego");
            entity.Property(e => e.KhKomunikat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_Komunikat");
            entity.Property(e => e.KhKomunikatOd)
                .HasColumnType("datetime")
                .HasColumnName("kh_KomunikatOd");
            entity.Property(e => e.KhKomunikatZawsze).HasColumnName("kh_KomunikatZawsze");
            entity.Property(e => e.KhKontakt)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("kh_Kontakt");
            entity.Property(e => e.KhKorygowanieKup).HasColumnName("kh_KorygowanieKUP");
            entity.Property(e => e.KhKorygowanieVatsp).HasColumnName("kh_KorygowanieVATSp");
            entity.Property(e => e.KhKorygowanieVatzak).HasColumnName("kh_KorygowanieVATZak");
            entity.Property(e => e.KhKrs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_KRS");
            entity.Property(e => e.KhLiczbaPrac).HasColumnName("kh_LiczbaPrac");
            entity.Property(e => e.KhLokalizacja)
                .HasMaxLength(256)
                .HasColumnName("kh_Lokalizacja");
            entity.Property(e => e.KhMalyPojazd).HasColumnName("kh_MalyPojazd");
            entity.Property(e => e.KhMaxDniSp).HasColumnName("kh_MaxDniSp");
            entity.Property(e => e.KhMaxDokKred).HasColumnName("kh_MaxDokKred");
            entity.Property(e => e.KhMaxWartDokKred)
                .HasColumnType("money")
                .HasColumnName("kh_MaxWartDokKred");
            entity.Property(e => e.KhMaxWartKred)
                .HasColumnType("money")
                .HasColumnName("kh_MaxWartKred");
            entity.Property(e => e.KhMetodaKasowa).HasColumnName("kh_MetodaKasowa");
            entity.Property(e => e.KhNazwisko)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("kh_Nazwisko");
            entity.Property(e => e.KhNrAnalitykaD)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("kh_NrAnalitykaD");
            entity.Property(e => e.KhNrAnalitykaO)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("kh_NrAnalitykaO");
            entity.Property(e => e.KhNrDowodu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_NrDowodu");
            entity.Property(e => e.KhOdbDet).HasColumnName("kh_OdbDet");
            entity.Property(e => e.KhOdbiorcaCesjaPlatnosci).HasColumnName("kh_OdbiorcaCesjaPlatnosci");
            entity.Property(e => e.KhOpisOperacji)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_OpisOperacji");
            entity.Property(e => e.KhOrganWyd)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_OrganWyd");
            entity.Property(e => e.KhOsoba).HasColumnName("kh_Osoba");
            entity.Property(e => e.KhOsobaVat).HasColumnName("kh_OsobaVAT");
            entity.Property(e => e.KhOstrzezenieTerminPlatnosciPrzekroczony).HasColumnName("kh_OstrzezenieTerminPlatnosciPrzekroczony");
            entity.Property(e => e.KhPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("kh_PESEL");
            entity.Property(e => e.KhPlatOdroczone).HasColumnName("kh_PlatOdroczone");
            entity.Property(e => e.KhPlatPrzelew).HasColumnName("kh_PlatPrzelew");
            entity.Property(e => e.KhPodVatzarejestrowanyWue).HasColumnName("kh_PodVATZarejestrowanyWUE");
            entity.Property(e => e.KhPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole1");
            entity.Property(e => e.KhPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole2");
            entity.Property(e => e.KhPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole3");
            entity.Property(e => e.KhPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole4");
            entity.Property(e => e.KhPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole5");
            entity.Property(e => e.KhPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole6");
            entity.Property(e => e.KhPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole7");
            entity.Property(e => e.KhPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole8");
            entity.Property(e => e.KhPotencjalny).HasColumnName("kh_Potencjalny");
            entity.Property(e => e.KhPowitanie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_Powitanie");
            entity.Property(e => e.KhPracownik)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("kh_Pracownik");
            entity.Property(e => e.KhPrefKontakt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_PrefKontakt");
            entity.Property(e => e.KhProcGotowka)
                .HasColumnType("money")
                .HasColumnName("kh_ProcGotowka");
            entity.Property(e => e.KhProcKarta)
                .HasColumnType("money")
                .HasColumnName("kh_ProcKarta");
            entity.Property(e => e.KhProcKredyt)
                .HasColumnType("money")
                .HasColumnName("kh_ProcKredyt");
            entity.Property(e => e.KhProcPozostalo)
                .HasColumnType("money")
                .HasColumnName("kh_ProcPozostalo");
            entity.Property(e => e.KhProcPrzelew)
                .HasColumnType("money")
                .HasColumnName("kh_ProcPrzelew");
            entity.Property(e => e.KhPrzypadekSzczegolnyPit).HasColumnName("kh_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.KhRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_REGON");
            entity.Property(e => e.KhRodzaj).HasColumnName("kh_Rodzaj");
            entity.Property(e => e.KhSkype)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_Skype");
            entity.Property(e => e.KhStatusAkcyza).HasColumnName("kh_StatusAkcyza");
            entity.Property(e => e.KhStawkaVatprzychod).HasColumnName("kh_StawkaVATPrzychod");
            entity.Property(e => e.KhStawkaVatwydatek).HasColumnName("kh_StawkaVATWydatek");
            entity.Property(e => e.KhStosujIndywidualnyCennikWsklepieInternetowym).HasColumnName("kh_StosujIndywidualnyCennikWSklepieInternetowym");
            entity.Property(e => e.KhStosujRabatWmultistore).HasColumnName("kh_StosujRabatWMultistore");
            entity.Property(e => e.KhStosujSzybkaPlatnosc).HasColumnName("kh_StosujSzybkaPlatnosc");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.KhTransakcjaVatsp).HasColumnName("kh_TransakcjaVATSp");
            entity.Property(e => e.KhTransakcjaVatzak).HasColumnName("kh_TransakcjaVATZak");
            entity.Property(e => e.KhUpowaznienieVat).HasColumnName("kh_UpowaznienieVAT");
            entity.Property(e => e.KhUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_Uwagi");
            entity.Property(e => e.KhWartoscNettoCzyBrutto).HasColumnName("kh_WartoscNettoCzyBrutto");
            entity.Property(e => e.KhWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_WWW");
            entity.Property(e => e.KhWzwIdCrmTransakcja).HasColumnName("kh_WzwIdCrmTransakcja");
            entity.Property(e => e.KhWzwIdFs).HasColumnName("kh_WzwIdFS");
            entity.Property(e => e.KhWzwIdWz).HasColumnName("kh_WzwIdWZ");
            entity.Property(e => e.KhWzwIdWzvat).HasColumnName("kh_WzwIdWZVAT");
            entity.Property(e => e.KhWzwIdZd).HasColumnName("kh_WzwIdZD");
            entity.Property(e => e.KhWzwIdZk).HasColumnName("kh_WzwIdZK");
            entity.Property(e => e.KhWzwIdZkzal).HasColumnName("kh_WzwIdZKZAL");
            entity.Property(e => e.KhZablokowany).HasColumnName("kh_Zablokowany");
            entity.Property(e => e.KhZgodaDo).HasColumnName("kh_ZgodaDO");
            entity.Property(e => e.KhZgodaEmail).HasColumnName("kh_ZgodaEMail");
            entity.Property(e => e.KhZgodaMark).HasColumnName("kh_ZgodaMark");
            entity.Property(e => e.KhZgodaNewsletterVendero).HasColumnName("kh_ZgodaNewsletterVendero");
            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdId).HasColumnName("pwd_Id");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
        });

        modelBuilder.Entity<VwPolaWlasnePozycja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPolaWlasne_Pozycja");

            entity.Property(e => e.ObAkcyza).HasColumnName("ob_Akcyza");
            entity.Property(e => e.ObAkcyzaKwota)
                .HasColumnType("money")
                .HasColumnName("ob_AkcyzaKwota");
            entity.Property(e => e.ObAkcyzaWartosc)
                .HasColumnType("money")
                .HasColumnName("ob_AkcyzaWartosc");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObCenaMag)
                .HasColumnType("money")
                .HasColumnName("ob_CenaMag");
            entity.Property(e => e.ObCenaNabycia)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNabycia");
            entity.Property(e => e.ObCenaNetto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNetto");
            entity.Property(e => e.ObCenaPobranaZcennika).HasColumnName("ob_CenaPobranaZCennika");
            entity.Property(e => e.ObCenaWaluta)
                .HasColumnType("money")
                .HasColumnName("ob_CenaWaluta");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokHanLp).HasColumnName("ob_DokHanLp");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObDokMagLp).HasColumnName("ob_DokMagLp");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIlosc)
                .HasColumnType("money")
                .HasColumnName("ob_Ilosc");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObKategoriaId).HasColumnName("ob_KategoriaId");
            entity.Property(e => e.ObMagId).HasColumnName("ob_MagId");
            entity.Property(e => e.ObNumerSeryjny)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ob_NumerSeryjny");
            entity.Property(e => e.ObOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ob_Opis");
            entity.Property(e => e.ObPrzyczynaKorektyId).HasColumnName("ob_PrzyczynaKorektyId");
            entity.Property(e => e.ObRabat)
                .HasColumnType("money")
                .HasColumnName("ob_Rabat");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObSyncId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ob_SyncId");
            entity.Property(e => e.ObTermin)
                .HasColumnType("datetime")
                .HasColumnName("ob_Termin");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowKodCn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_TowKodCN");
            entity.Property(e => e.ObTowPkwiu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ob_TowPkwiu");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObVatId).HasColumnName("ob_VatId");
            entity.Property(e => e.ObVatProc)
                .HasColumnType("money")
                .HasColumnName("ob_VatProc");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNabycia)
                .HasColumnType("money")
                .HasColumnName("ob_WartNabycia");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdId).HasColumnName("pwd_Id");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
        });

        modelBuilder.Entity<VwPolaWlasneSzansaSprzedazy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPolaWlasne_SzansaSprzedazy");

            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdId).HasColumnName("pwd_Id");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
            entity.Property(e => e.TrDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataModyfikacji");
            entity.Property(e => e.TrDataOtwarcia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataOtwarcia");
            entity.Property(e => e.TrDataRealizacji)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_DataRealizacji");
            entity.Property(e => e.TrDataUtworzenia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataUtworzenia");
            entity.Property(e => e.TrDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataZamkniecia");
            entity.Property(e => e.TrDlaczegoNieudana).HasColumnName("tr_DlaczegoNieudana");
            entity.Property(e => e.TrDokKoncowy).HasColumnName("tr_DokKoncowy");
            entity.Property(e => e.TrDokKoncowyId).HasColumnName("tr_DokKoncowyId");
            entity.Property(e => e.TrDokKoncowySymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_DokKoncowySymbol");
            entity.Property(e => e.TrDokZamowienie).HasColumnName("tr_DokZamowienie");
            entity.Property(e => e.TrDokZamowienieId).HasColumnName("tr_DokZamowienieId");
            entity.Property(e => e.TrDokZamowienieSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_DokZamowienieSymbol");
            entity.Property(e => e.TrEtap).HasColumnName("tr_Etap");
            entity.Property(e => e.TrGrupa).HasColumnName("tr_Grupa");
            entity.Property(e => e.TrId).HasColumnName("tr_Id");
            entity.Property(e => e.TrIdTransakcji).HasColumnName("tr_IdTransakcji");
            entity.Property(e => e.TrKlient).HasColumnName("tr_Klient");
            entity.Property(e => e.TrKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("tr_Kolor");
            entity.Property(e => e.TrMaObsluzyc).HasColumnName("tr_MaObsluzyc");
            entity.Property(e => e.TrMaObsluzycOdKlienta).HasColumnName("tr_MaObsluzycOdKlienta");
            entity.Property(e => e.TrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_Nazwa");
            entity.Property(e => e.TrOferta).HasColumnName("tr_Oferta");
            entity.Property(e => e.TrPlanowanaDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("tr_PlanowanaDataZamkniecia");
            entity.Property(e => e.TrPlanowanaGodzinaZamkniecia).HasColumnName("tr_PlanowanaGodzinaZamkniecia");
            entity.Property(e => e.TrPokazujWkal).HasColumnName("tr_PokazujWKal");
            entity.Property(e => e.TrPozyskana).HasColumnName("tr_Pozyskana");
            entity.Property(e => e.TrScenariusz).HasColumnName("tr_Scenariusz");
            entity.Property(e => e.TrStan).HasColumnName("tr_Stan");
            entity.Property(e => e.TrStatus).HasColumnName("tr_Status");
            entity.Property(e => e.TrStatusOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_StatusOpis");
            entity.Property(e => e.TrUtworzyl).HasColumnName("tr_Utworzyl");
            entity.Property(e => e.TrUwagiDok)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_UwagiDok");
            entity.Property(e => e.TrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tr_Waluta");
            entity.Property(e => e.TrWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("tr_WalutaKurs");
            entity.Property(e => e.TrWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscBrutto");
            entity.Property(e => e.TrWartoscNetto)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscNetto");
            entity.Property(e => e.TrWartoscRecznie).HasColumnName("tr_WartoscRecznie");
            entity.Property(e => e.TrWartoscVat)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscVat");
            entity.Property(e => e.TrWarunkiDostawy)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_WarunkiDostawy");
            entity.Property(e => e.TrWarunkiPlatnosci)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_WarunkiPlatnosci");
            entity.Property(e => e.TrZamknal).HasColumnName("tr_Zamknal");
            entity.Property(e => e.TrZlecenieId).HasColumnName("tr_ZlecenieId");
            entity.Property(e => e.TrZmodyfikowal).HasColumnName("tr_Zmodyfikowal");
        });

        modelBuilder.Entity<VwPolaWlasneTowar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPolaWlasne_Towar");

            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdId).HasColumnName("pwd_Id");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
            entity.Property(e => e.TwAkcyza).HasColumnName("tw_Akcyza");
            entity.Property(e => e.TwAkcyzaKwota)
                .HasColumnType("money")
                .HasColumnName("tw_AkcyzaKwota");
            entity.Property(e => e.TwAkcyzaZaznacz).HasColumnName("tw_AkcyzaZaznacz");
            entity.Property(e => e.TwBloz12)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_bloz_12");
            entity.Property(e => e.TwBloz7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_bloz_7");
            entity.Property(e => e.TwCenaOtwarta).HasColumnName("tw_CenaOtwarta");
            entity.Property(e => e.TwCharakter)
                .HasColumnType("text")
                .HasColumnName("tw_Charakter");
            entity.Property(e => e.TwCzasDostawy).HasColumnName("tw_CzasDostawy");
            entity.Property(e => e.TwDniWaznosc).HasColumnName("tw_DniWaznosc");
            entity.Property(e => e.TwDodawalnyDoZw).HasColumnName("tw_DodawalnyDoZW");
            entity.Property(e => e.TwDomyslnaKategoria).HasColumnName("tw_DomyslnaKategoria");
            entity.Property(e => e.TwDostSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_DostSymbol");
            entity.Property(e => e.TwGlebokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Glebokosc");
            entity.Property(e => e.TwGrupaJpkVat).HasColumnName("tw_GrupaJpkVat");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.TwIdFundPromocji).HasColumnName("tw_IdFundPromocji");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwIdKrajuPochodzenia).HasColumnName("tw_IdKrajuPochodzenia");
            entity.Property(e => e.TwIdOpakowanie).HasColumnName("tw_IdOpakowanie");
            entity.Property(e => e.TwIdPodstDostawca).HasColumnName("tw_IdPodstDostawca");
            entity.Property(e => e.TwIdProducenta).HasColumnName("tw_IdProducenta");
            entity.Property(e => e.TwIdRabat).HasColumnName("tw_IdRabat");
            entity.Property(e => e.TwIdTypKodu).HasColumnName("tw_IdTypKodu");
            entity.Property(e => e.TwIdUjm).HasColumnName("tw_IdUJM");
            entity.Property(e => e.TwIdVatSp).HasColumnName("tw_IdVatSp");
            entity.Property(e => e.TwIdVatZak).HasColumnName("tw_IdVatZak");
            entity.Property(e => e.TwIsFundPromocji).HasColumnName("tw_IsFundPromocji");
            entity.Property(e => e.TwIsbn)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_isbn");
            entity.Property(e => e.TwJakPrzySp).HasColumnName("tw_JakPrzySp");
            entity.Property(e => e.TwJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiary");
            entity.Property(e => e.TwJednMiarySprz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiarySprz");
            entity.Property(e => e.TwJednMiaryZak)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiaryZak");
            entity.Property(e => e.TwJednStanMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednStanMin");
            entity.Property(e => e.TwJmsprzInna).HasColumnName("tw_JMSprzInna");
            entity.Property(e => e.TwJmzakInna).HasColumnName("tw_JMZakInna");
            entity.Property(e => e.TwKodTowaru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_KodTowaru");
            entity.Property(e => e.TwKodUproducenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_KodUProducenta");
            entity.Property(e => e.TwKomunikat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Komunikat");
            entity.Property(e => e.TwKomunikatDokumenty).HasColumnName("tw_KomunikatDokumenty");
            entity.Property(e => e.TwKomunikatOd)
                .HasColumnType("datetime")
                .HasColumnName("tw_KomunikatOd");
            entity.Property(e => e.TwKontrolaTw).HasColumnName("tw_KontrolaTW");
            entity.Property(e => e.TwLogo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("tw_Logo");
            entity.Property(e => e.TwMasa)
                .HasColumnType("money")
                .HasColumnName("tw_Masa");
            entity.Property(e => e.TwMechanizmPodzielonejPlatnosci).HasColumnName("tw_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwObjetosc)
                .HasColumnType("money")
                .HasColumnName("tw_Objetosc");
            entity.Property(e => e.TwObrotMarza).HasColumnName("tw_ObrotMarza");
            entity.Property(e => e.TwOdwrotneObciazenie).HasColumnName("tw_OdwrotneObciazenie");
            entity.Property(e => e.TwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Opis");
            entity.Property(e => e.TwPkwiU)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PKWiU");
            entity.Property(e => e.TwPlu).HasColumnName("tw_PLU");
            entity.Property(e => e.TwPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PodstKodKresk");
            entity.Property(e => e.TwPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole1");
            entity.Property(e => e.TwPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole2");
            entity.Property(e => e.TwPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole3");
            entity.Property(e => e.TwPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole4");
            entity.Property(e => e.TwPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole5");
            entity.Property(e => e.TwPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole6");
            entity.Property(e => e.TwPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole7");
            entity.Property(e => e.TwPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole8");
            entity.Property(e => e.TwProgKwotowyOo).HasColumnName("tw_ProgKwotowyOO");
            entity.Property(e => e.TwPrzezWartosc).HasColumnName("tw_PrzezWartosc");
            entity.Property(e => e.TwRodzaj).HasColumnName("tw_Rodzaj");
            entity.Property(e => e.TwSerwisAukcyjny).HasColumnName("tw_SerwisAukcyjny");
            entity.Property(e => e.TwSklepInternet).HasColumnName("tw_SklepInternet");
            entity.Property(e => e.TwSprzedazMobilna).HasColumnName("tw_SprzedazMobilna");
            entity.Property(e => e.TwStanMaks)
                .HasColumnType("money")
                .HasColumnName("tw_StanMaks");
            entity.Property(e => e.TwStanMin)
                .HasColumnType("money")
                .HasColumnName("tw_StanMin");
            entity.Property(e => e.TwSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_SWW");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_Symbol");
            entity.Property(e => e.TwSzerokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Szerokosc");
            entity.Property(e => e.TwUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_UrzNazwa");
            entity.Property(e => e.TwUsuniety).HasColumnName("tw_Usuniety");
            entity.Property(e => e.TwUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Uwagi");
            entity.Property(e => e.TwWagaEtykiet).HasColumnName("tw_WagaEtykiet");
            entity.Property(e => e.TwWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_WWW");
            entity.Property(e => e.TwWysokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Wysokosc");
            entity.Property(e => e.TwZablokowany).HasColumnName("tw_Zablokowany");
        });

        modelBuilder.Entity<VwPolaWlasneZadanie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPolaWlasne_Zadanie");

            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdId).HasColumnName("pwd_Id");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
            entity.Property(e => e.ZdBezCzasu).HasColumnName("zd_BezCzasu");
            entity.Property(e => e.ZdCalyDzien).HasColumnName("zd_CalyDzien");
            entity.Property(e => e.ZdCoIle).HasColumnName("zd_CoIle");
            entity.Property(e => e.ZdDefinicjaZlozona).HasColumnName("zd_DefinicjaZlozona");
            entity.Property(e => e.ZdDluznik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Dluznik");
            entity.Property(e => e.ZdDniTygodnia).HasColumnName("zd_DniTygodnia");
            entity.Property(e => e.ZdDokumentId).HasColumnName("zd_DokumentId");
            entity.Property(e => e.ZdDokumentPrzepisuj).HasColumnName("zd_DokumentPrzepisuj");
            entity.Property(e => e.ZdDokumentUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("zd_DokumentUwagi");
            entity.Property(e => e.ZdDzienMiesiaca).HasColumnName("zd_DzienMiesiaca");
            entity.Property(e => e.ZdDzienPorzadek).HasColumnName("zd_DzienPorzadek");
            entity.Property(e => e.ZdDzienRodzaj).HasColumnName("zd_DzienRodzaj");
            entity.Property(e => e.ZdFormaDzialaniaWindykacyjnego).HasColumnName("zd_FormaDzialaniaWindykacyjnego");
            entity.Property(e => e.ZdId).HasColumnName("zd_Id");
            entity.Property(e => e.ZdIdZrodla).HasColumnName("zd_IdZrodla");
            entity.Property(e => e.ZdIlePowtorzen).HasColumnName("zd_IlePowtorzen");
            entity.Property(e => e.ZdInterwal).HasColumnName("zd_Interwal");
            entity.Property(e => e.ZdKiedyPrzypomnienie).HasColumnName("zd_KiedyPrzypomnienie");
            entity.Property(e => e.ZdKierunek).HasColumnName("zd_Kierunek");
            entity.Property(e => e.ZdKlasa).HasColumnName("zd_Klasa");
            entity.Property(e => e.ZdKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("zd_Kolor");
            entity.Property(e => e.ZdKoniec)
                .HasColumnType("datetime")
                .HasColumnName("zd_Koniec");
            entity.Property(e => e.ZdKoniecPowtorzen)
                .HasColumnType("datetime")
                .HasColumnName("zd_KoniecPowtorzen");
            entity.Property(e => e.ZdKotwicz).HasColumnName("zd_Kotwicz");
            entity.Property(e => e.ZdLiczbaUczestnikowBezPersonelu).HasColumnName("zd_LiczbaUczestnikowBezPersonelu");
            entity.Property(e => e.ZdLiczbaUczestnikowWszystkich).HasColumnName("zd_LiczbaUczestnikowWszystkich");
            entity.Property(e => e.ZdLokalizacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("zd_Lokalizacja");
            entity.Property(e => e.ZdLokalizacjaMapy)
                .HasMaxLength(256)
                .HasColumnName("zd_LokalizacjaMapy");
            entity.Property(e => e.ZdMiesiac).HasColumnName("zd_Miesiac");
            entity.Property(e => e.ZdNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zd_NastepnePrzypomnienie");
            entity.Property(e => e.ZdNotaOdsetkowa).HasColumnName("zd_NotaOdsetkowa");
            entity.Property(e => e.ZdNotatkaZakonczona).HasColumnName("zd_NotatkaZakonczona");
            entity.Property(e => e.ZdOpisPowtorzen)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_OpisPowtorzen");
            entity.Property(e => e.ZdPersonel).HasColumnName("zd_Personel");
            entity.Property(e => e.ZdPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("zd_Poczatek");
            entity.Property(e => e.ZdPoczatekZcyklu)
                .HasColumnType("datetime")
                .HasColumnName("zd_PoczatekZCyklu");
            entity.Property(e => e.ZdPodtyp).HasColumnName("zd_Podtyp");
            entity.Property(e => e.ZdPokazujWkalendarzu).HasColumnName("zd_PokazujWKalendarzu");
            entity.Property(e => e.ZdPriorytet).HasColumnName("zd_Priorytet");
            entity.Property(e => e.ZdPrywatne).HasColumnName("zd_Prywatne");
            entity.Property(e => e.ZdPrzypomniane).HasColumnName("zd_Przypomniane");
            entity.Property(e => e.ZdRezultat).HasColumnName("zd_Rezultat");
            entity.Property(e => e.ZdRobocze).HasColumnName("zd_Robocze");
            entity.Property(e => e.ZdRodzaj).HasColumnName("zd_Rodzaj");
            entity.Property(e => e.ZdRodzajPowtorzen).HasColumnName("zd_RodzajPowtorzen");
            entity.Property(e => e.ZdStatus).HasColumnName("zd_Status");
            entity.Property(e => e.ZdTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("zd_Temat");
            entity.Property(e => e.ZdTransakcja).HasColumnName("zd_Transakcja");
            entity.Property(e => e.ZdUczestnicy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Uczestnicy");
            entity.Property(e => e.ZdUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Uwagi");
            entity.Property(e => e.ZdWezwanieDoZaplaty).HasColumnName("zd_WezwanieDoZaplaty");
            entity.Property(e => e.ZdWystapienieDoPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("zd_WystapienieDoPrzypomnienia");
            entity.Property(e => e.ZdWystawionyDokId).HasColumnName("zd_WystawionyDokId");
            entity.Property(e => e.ZdZlecenieId).HasColumnName("zd_ZlecenieId");
        });

        modelBuilder.Entity<VwPolaWlasneZlecenie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPolaWlasne_Zlecenie");

            entity.Property(e => e.PwdData01)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data01");
            entity.Property(e => e.PwdData02)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data02");
            entity.Property(e => e.PwdData03)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data03");
            entity.Property(e => e.PwdData04)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data04");
            entity.Property(e => e.PwdData05)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data05");
            entity.Property(e => e.PwdData06)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data06");
            entity.Property(e => e.PwdData07)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data07");
            entity.Property(e => e.PwdData08)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data08");
            entity.Property(e => e.PwdData09)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data09");
            entity.Property(e => e.PwdData10)
                .HasColumnType("datetime")
                .HasColumnName("pwd_Data10");
            entity.Property(e => e.PwdFk01).HasColumnName("pwd_Fk01");
            entity.Property(e => e.PwdFk02).HasColumnName("pwd_Fk02");
            entity.Property(e => e.PwdFk03).HasColumnName("pwd_Fk03");
            entity.Property(e => e.PwdFk04).HasColumnName("pwd_Fk04");
            entity.Property(e => e.PwdFk05).HasColumnName("pwd_Fk05");
            entity.Property(e => e.PwdFk06).HasColumnName("pwd_Fk06");
            entity.Property(e => e.PwdFk07).HasColumnName("pwd_Fk07");
            entity.Property(e => e.PwdFk08).HasColumnName("pwd_Fk08");
            entity.Property(e => e.PwdFk09).HasColumnName("pwd_Fk09");
            entity.Property(e => e.PwdFk10).HasColumnName("pwd_Fk10");
            entity.Property(e => e.PwdFlaga01).HasColumnName("pwd_Flaga01");
            entity.Property(e => e.PwdFlaga02).HasColumnName("pwd_Flaga02");
            entity.Property(e => e.PwdFlaga03).HasColumnName("pwd_Flaga03");
            entity.Property(e => e.PwdFlaga04).HasColumnName("pwd_Flaga04");
            entity.Property(e => e.PwdFlaga05).HasColumnName("pwd_Flaga05");
            entity.Property(e => e.PwdFlaga06).HasColumnName("pwd_Flaga06");
            entity.Property(e => e.PwdFlaga07).HasColumnName("pwd_Flaga07");
            entity.Property(e => e.PwdFlaga08).HasColumnName("pwd_Flaga08");
            entity.Property(e => e.PwdFlaga09).HasColumnName("pwd_Flaga09");
            entity.Property(e => e.PwdFlaga10).HasColumnName("pwd_Flaga10");
            entity.Property(e => e.PwdId).HasColumnName("pwd_Id");
            entity.Property(e => e.PwdIdObiektu).HasColumnName("pwd_IdObiektu");
            entity.Property(e => e.PwdIdPozycji).HasColumnName("pwd_IdPozycji");
            entity.Property(e => e.PwdKwota01)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota01");
            entity.Property(e => e.PwdKwota02)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota02");
            entity.Property(e => e.PwdKwota03)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota03");
            entity.Property(e => e.PwdKwota04)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota04");
            entity.Property(e => e.PwdKwota05)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota05");
            entity.Property(e => e.PwdKwota06)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota06");
            entity.Property(e => e.PwdKwota07)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota07");
            entity.Property(e => e.PwdKwota08)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota08");
            entity.Property(e => e.PwdKwota09)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota09");
            entity.Property(e => e.PwdKwota10)
                .HasColumnType("money")
                .HasColumnName("pwd_Kwota10");
            entity.Property(e => e.PwdLiczba01).HasColumnName("pwd_Liczba01");
            entity.Property(e => e.PwdLiczba02).HasColumnName("pwd_Liczba02");
            entity.Property(e => e.PwdLiczba03).HasColumnName("pwd_Liczba03");
            entity.Property(e => e.PwdLiczba04).HasColumnName("pwd_Liczba04");
            entity.Property(e => e.PwdLiczba05).HasColumnName("pwd_Liczba05");
            entity.Property(e => e.PwdLiczba06).HasColumnName("pwd_Liczba06");
            entity.Property(e => e.PwdLiczba07).HasColumnName("pwd_Liczba07");
            entity.Property(e => e.PwdLiczba08).HasColumnName("pwd_Liczba08");
            entity.Property(e => e.PwdLiczba09).HasColumnName("pwd_Liczba09");
            entity.Property(e => e.PwdLiczba10).HasColumnName("pwd_Liczba10");
            entity.Property(e => e.PwdTekst01)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst01");
            entity.Property(e => e.PwdTekst02)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst02");
            entity.Property(e => e.PwdTekst03)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst03");
            entity.Property(e => e.PwdTekst04)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst04");
            entity.Property(e => e.PwdTekst05)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst05");
            entity.Property(e => e.PwdTekst06)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst06");
            entity.Property(e => e.PwdTekst07)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst07");
            entity.Property(e => e.PwdTekst08)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst08");
            entity.Property(e => e.PwdTekst09)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst09");
            entity.Property(e => e.PwdTekst10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pwd_Tekst10");
            entity.Property(e => e.PwdTypObiektu).HasColumnName("pwd_TypObiektu");
            entity.Property(e => e.ZlpzAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("zlpz_Analityka");
            entity.Property(e => e.ZlpzDataPlanowanegoRozpoczeciaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataPlanowanegoRozpoczeciaZlecenia");
            entity.Property(e => e.ZlpzDataPlanowanegoZakonczeniaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataPlanowanegoZakonczeniaZlecenia");
            entity.Property(e => e.ZlpzDataRejestracjiZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRejestracjiZlecenia");
            entity.Property(e => e.ZlpzDataRzeczywistegoRozpoczeciaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRzeczywistegoRozpoczeciaZlecenia");
            entity.Property(e => e.ZlpzDataRzeczywistegoZakonczeniaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRzeczywistegoZakonczeniaZlecenia");
            entity.Property(e => e.ZlpzId).HasColumnName("zlpz_Id");
            entity.Property(e => e.ZlpzIdKontrahenta).HasColumnName("zlpz_IdKontrahenta");
            entity.Property(e => e.ZlpzMpk).HasColumnName("zlpz_MPK");
            entity.Property(e => e.ZlpzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("zlpz_Nazwa");
            entity.Property(e => e.ZlpzNumerZlecenia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("zlpz_NumerZlecenia");
            entity.Property(e => e.ZlpzOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("zlpz_Opis");
            entity.Property(e => e.ZlpzStatusZlecenia).HasColumnName("zlpz_StatusZlecenia");
            entity.Property(e => e.ZlpzTerminWykonania)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_TerminWykonania");
        });

        modelBuilder.Entity<VwPowDokLookupGrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PowDokLookupGrid");

            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.DokAdresDostawyAdreshId).HasColumnName("dok_AdresDostawyAdreshId");
            entity.Property(e => e.DokAdresDostawyId).HasColumnName("dok_AdresDostawyId");
            entity.Property(e => e.DokAkcyzaZwolnienieId).HasColumnName("dok_AkcyzaZwolnienieId");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokDstNr).HasColumnName("dok_DstNr");
            entity.Property(e => e.DokDstNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DstNrPelny");
            entity.Property(e => e.DokDstNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_DstNrRoz");
            entity.Property(e => e.DokFakturaUproszczona).HasColumnName("dok_FakturaUproszczona");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokIdSesjiKasowej).HasColumnName("dok_IdSesjiKasowej");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwGotowkaPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowkaPrzedplata");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwPrzelew)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelew");
            entity.Property(e => e.DokKwPrzelewPrzedplata)
                .HasColumnType("money")
                .HasColumnName("dok_KwPrzelewPrzedplata");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrIdentNabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dok_NrIdentNabywcy");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRachunkuBankowegoPdm).HasColumnName("dok_NrRachunkuBankowegoPdm");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokObslugaDokDost).HasColumnName("dok_ObslugaDokDost");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodpisanoElektronicznie).HasColumnName("dok_PodpisanoElektronicznie");
            entity.Property(e => e.DokPodsumaVatFszk).HasColumnName("dok_PodsumaVatFSzk");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokProceduraMarzy).HasColumnName("dok_ProceduraMarzy");
            entity.Property(e => e.DokPromoZenCardStatus).HasColumnName("dok_PromoZenCardStatus");
            entity.Property(e => e.DokPrzetworzonoZkwZd).HasColumnName("dok_PrzetworzonoZKwZD");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokSelloData)
                .HasColumnType("datetime")
                .HasColumnName("dok_SelloData");
            entity.Property(e => e.DokSelloId).HasColumnName("dok_SelloId");
            entity.Property(e => e.DokSelloSymbol)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dok_SelloSymbol");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokSzybkaPlatnosc).HasColumnName("dok_SzybkaPlatnosc");
            entity.Property(e => e.DokTermPlatIdKonfig).HasColumnName("dok_TermPlatIdKonfig");
            entity.Property(e => e.DokTermPlatIdZadania).HasColumnName("dok_TermPlatIdZadania");
            entity.Property(e => e.DokTermPlatStatus).HasColumnName("dok_TermPlatStatus");
            entity.Property(e => e.DokTermPlatTransId)
                .HasMaxLength(128)
                .HasColumnName("dok_TermPlatTransId");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTransakcjaData)
                .HasColumnType("datetime")
                .HasColumnName("dok_TransakcjaData");
            entity.Property(e => e.DokTransakcjaId).HasColumnName("dok_TransakcjaId");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTransakcjaSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_TransakcjaSymbol");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokUwagiExt)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("dok_UwagiExt");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVenderoData)
                .HasColumnType("datetime")
                .HasColumnName("dok_VenderoData");
            entity.Property(e => e.DokVenderoId).HasColumnName("dok_VenderoId");
            entity.Property(e => e.DokVenderoStatus).HasColumnName("dok_VenderoStatus");
            entity.Property(e => e.DokVenderoSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_VenderoSymbol");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.DokZaimportowanoDoEwidencjiAkcyzowej).HasColumnName("dok_ZaimportowanoDoEwidencjiAkcyzowej");
            entity.Property(e => e.DokZlecenieId).HasColumnName("dok_ZlecenieId");
            entity.Property(e => e.Statusreal).HasColumnName("statusreal");
        });

        modelBuilder.Entity<VwPoziomyCen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPoziomyCen");

            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
        });

        modelBuilder.Entity<VwPoziomyCenWaluty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPoziomyCenWaluty");

            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
            entity.Property(e => e.Rodzaj).HasColumnName("RODZAJ");
            entity.Property(e => e.Waluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WALUTA");
        });

        modelBuilder.Entity<VwPracownicyPodmiotuSubiekt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPracownicyPodmiotuSubiekt");

            entity.Property(e => e.MagId).HasColumnName("mag_Id");
            entity.Property(e => e.UzId).HasColumnName("uz_Id");
            entity.Property(e => e.UzImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("uz_Imie");
            entity.Property(e => e.UzImieNazwisko)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("uz_ImieNazwisko");
            entity.Property(e => e.UzNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("uz_Nazwisko");
            entity.Property(e => e.UzNazwiskoImie)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("uz_NazwiskoImie");
        });

        modelBuilder.Entity<VwProfilEwidParam>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfilEwidParam");

            entity.Property(e => e.PeDomyslne).HasColumnName("pe_Domyslne");
            entity.Property(e => e.PeId).HasColumnName("pe_Id");
            entity.Property(e => e.PeIdTypu).HasColumnName("pe_IdTypu");
            entity.Property(e => e.PeNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pe_Nazwa");
            entity.Property(e => e.PeStatusNowosci).HasColumnName("pe_StatusNowosci");
            entity.Property(e => e.PtAppObjId).HasColumnName("pt_AppObjId");
            entity.Property(e => e.PtId).HasColumnName("pt_Id");
            entity.Property(e => e.PtIndywidualizowalny).HasColumnName("pt_Indywidualizowalny");
            entity.Property(e => e.PtNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pt_Nazwa");
            entity.Property(e => e.PtOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pt_Opis");
            entity.Property(e => e.PtProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pt_ProgId");
            entity.Property(e => e.PtProgIdCtx).HasColumnName("pt_ProgIdCtx");
            entity.Property(e => e.PtProgramy).HasColumnName("pt_Programy");
            entity.Property(e => e.PtUkryte).HasColumnName("pt_Ukryte");
        });

        modelBuilder.Entity<VwProfilTypyParam>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfilTypyParam");

            entity.Property(e => e.PtAppObjId).HasColumnName("pt_AppObjId");
            entity.Property(e => e.PtId).HasColumnName("pt_Id");
            entity.Property(e => e.PtIndywidualizowalny).HasColumnName("pt_Indywidualizowalny");
            entity.Property(e => e.PtNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pt_Nazwa");
            entity.Property(e => e.PtOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pt_Opis");
            entity.Property(e => e.PtProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pt_ProgId");
            entity.Property(e => e.PtProgIdCtx).HasColumnName("pt_ProgIdCtx");
            entity.Property(e => e.PtProgramy).HasColumnName("pt_Programy");
            entity.Property(e => e.PtStatusNowosci).HasColumnName("pt_StatusNowosci");
            entity.Property(e => e.PtUkryte).HasColumnName("pt_Ukryte");
        });

        modelBuilder.Entity<VwProfileMagazynyErp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileMagazynyERP");

            entity.Property(e => e.AdrAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adr_Adres");
            entity.Property(e => e.MagId).HasColumnName("mag_Id");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.MagSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("mag_Symbol");
        });

        modelBuilder.Entity<VwProfileModuly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileModuly");

            entity.Property(e => e.UimId).HasColumnName("uim_Id");
            entity.Property(e => e.UimKontekst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_Kontekst");
            entity.Property(e => e.UimOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_Opis");
            entity.Property(e => e.UimProgid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uim_Progid");
            entity.Property(e => e.UimStatusNowosci).HasColumnName("uim_StatusNowosci");
            entity.Property(e => e.UimTypKontekstu).HasColumnName("uim_TypKontekstu");
            entity.Property(e => e.UimTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_Tytul");
        });

        modelBuilder.Entity<VwProfileModulyNav>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileModulyNav");

            entity.Property(e => e.UimId).HasColumnName("uim_Id");
            entity.Property(e => e.UimKontekst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_Kontekst");
            entity.Property(e => e.UimOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_Opis");
            entity.Property(e => e.UimProgid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uim_Progid");
            entity.Property(e => e.UimStatusNowosci).HasColumnName("uim_StatusNowosci");
            entity.Property(e => e.UimTypKontekstu).HasColumnName("uim_TypKontekstu");
            entity.Property(e => e.UimTytul)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uim_Tytul");
        });

        modelBuilder.Entity<VwProfilePodgladyErp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfilePodgladyERP");

            entity.Property(e => e.GtoNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("gto_Nazwa");
            entity.Property(e => e.GttDefinicjaId).HasColumnName("gtt_DefinicjaId");
            entity.Property(e => e.GttDomyslna).HasColumnName("gtt_Domyslna");
            entity.Property(e => e.GttId).HasColumnName("gtt_Id");
            entity.Property(e => e.GttIsBuiltIn).HasColumnName("gtt_IsBuiltIn");
            entity.Property(e => e.GttNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gtt_Nazwa");
            entity.Property(e => e.GttObiektId).HasColumnName("gtt_ObiektId");
            entity.Property(e => e.GttStatusNowosci).HasColumnName("gtt_StatusNowosci");
        });

        modelBuilder.Entity<VwProfileProduktyOdwr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileProduktyOdwr");

            entity.Property(e => e.EprId).HasColumnName("epr_Id");
            entity.Property(e => e.EprLiczbaStanowisk).HasColumnName("epr_LiczbaStanowisk");
            entity.Property(e => e.EprNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("epr_Nazwa");
            entity.Property(e => e.EprStatusNowosci).HasColumnName("epr_StatusNowosci");
            entity.Property(e => e.EprWykorzystanie).HasColumnName("epr_Wykorzystanie");
        });

        modelBuilder.Entity<VwProfileSlowniki>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileSlowniki");

            entity.Property(e => e.SlId).HasColumnName("sl_Id");
            entity.Property(e => e.SlNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sl_Nazwa");
            entity.Property(e => e.SlOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sl_Opis");
            entity.Property(e => e.SlStatusNowosci).HasColumnName("sl_StatusNowosci");
        });

        modelBuilder.Entity<VwProfileUprawnieniaMag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileUprawnieniaMag");

            entity.Property(e => e.UprId).HasColumnName("upr_Id");
            entity.Property(e => e.UprMagazynowe).HasColumnName("upr_Magazynowe");
            entity.Property(e => e.UprModul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("upr_Modul");
            entity.Property(e => e.UprNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("upr_Nazwa");
        });

        modelBuilder.Entity<VwProfileUprawnienium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileUprawnienia");

            entity.Property(e => e.NvpProfilowanieKlientowStylGt).HasColumnName("nvp_ProfilowanieKlientowStylGT");
            entity.Property(e => e.UprId).HasColumnName("upr_Id");
            entity.Property(e => e.UprMagazynowe).HasColumnName("upr_Magazynowe");
            entity.Property(e => e.UprModul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("upr_Modul");
            entity.Property(e => e.UprNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("upr_Nazwa");
            entity.Property(e => e.UprStatusNowosci).HasColumnName("upr_StatusNowosci");
        });

        modelBuilder.Entity<VwProfileUzytkownicyErp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileUzytkownicyERP");

            entity.Property(e => e.Grupa)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("grupa");
            entity.Property(e => e.KsNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ks_Nazwa");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("pracownik");
            entity.Property(e => e.UgNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ug_Nazwa");
            entity.Property(e => e.UiNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ui_Nazwa");
            entity.Property(e => e.UzId).HasColumnName("uz_Id");
            entity.Property(e => e.UzIdGrupy).HasColumnName("uz_IdGrupy");
            entity.Property(e => e.UzIdentyfikator)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("uz_Identyfikator");
            entity.Property(e => e.UzImie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("uz_Imie");
            entity.Property(e => e.UzNazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("uz_Nazwisko");
            entity.Property(e => e.UzPracaZdalna).HasColumnName("uz_PracaZdalna");
            entity.Property(e => e.UzProgram).HasColumnName("uz_Program");
            entity.Property(e => e.UzStatus).HasColumnName("uz_Status");
        });

        modelBuilder.Entity<VwProfileWydrukiErp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileWydrukiERP");

            entity.Property(e => e.WgrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("wgr_Nazwa");
            entity.Property(e => e.WtpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wtp_Nazwa");
            entity.Property(e => e.WzwId).HasColumnName("wzw_Id");
            entity.Property(e => e.WzwNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("wzw_Nazwa");
            entity.Property(e => e.WzwStatusNowosci).HasColumnName("wzw_StatusNowosci");
        });

        modelBuilder.Entity<VwProfileZestawieniaErp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProfileZestawieniaERP");

            entity.Property(e => e.Grupa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("grupa");
            entity.Property(e => e.ZstId).HasColumnName("zst_Id");
            entity.Property(e => e.ZstNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zst_Nazwa");
            entity.Property(e => e.ZstProgId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zst_ProgId");
            entity.Property(e => e.ZstStatusNowosci).HasColumnName("zst_StatusNowosci");
            entity.Property(e => e.ZstTyp).HasColumnName("zst_Typ");
        });

        modelBuilder.Entity<VwRachBankPdm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRachBankPdm");

            entity.Property(e => e.RbAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("rb_Analityka");
            entity.Property(e => e.RbBank)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rb_Bank");
            entity.Property(e => e.RbEbank).HasColumnName("rb_Ebank");
            entity.Property(e => e.RbId).HasColumnName("rb_Id");
            entity.Property(e => e.RbNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rb_Nazwa");
            entity.Property(e => e.RbNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rb_Numer");
            entity.Property(e => e.RbPodstawowy).HasColumnName("rb_Podstawowy");
            entity.Property(e => e.RbUs).HasColumnName("rb_US");
            entity.Property(e => e.RbZfss).HasColumnName("rb_ZFSS");
        });

        modelBuilder.Entity<VwRachunkiBialaListaLogUnikalnePozycje>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_RachunkiBialaListaLogUnikalnePozycje");

            entity.Property(e => e.KhrDataWeryfikacji)
                .HasColumnType("datetime")
                .HasColumnName("khr_DataWeryfikacji");
            entity.Property(e => e.KhrId)
                .ValueGeneratedOnAdd()
                .HasColumnName("khr_Id");
            entity.Property(e => e.KhrIdRachunek).HasColumnName("khr_IdRachunek");
            entity.Property(e => e.KhrNaBialejLiscie).HasColumnName("khr_NaBialejLiscie");
            entity.Property(e => e.KhrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("khr_NIP");
            entity.Property(e => e.KhrNumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("khr_NumerRachunku");
        });

        modelBuilder.Entity<VwRachunkiHarmonogram>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRachunkiHarmonogram");

            entity.Property(e => e.Akordy).HasColumnName("AKORDY");
            entity.Property(e => e.CyklTygodniowy).HasColumnName("CYKL_TYGODNIOWY");
            entity.Property(e => e.CzyJednorazowy).HasColumnName("CZY_JEDNORAZOWY");
            entity.Property(e => e.DataJednorazowa)
                .HasColumnType("datetime")
                .HasColumnName("DATA_JEDNORAZOWA");
            entity.Property(e => e.DodatekRodzinny)
                .HasColumnType("money")
                .HasColumnName("DODATEK_RODZINNY");
            entity.Property(e => e.DodatkiNieopodatkowane)
                .HasColumnType("money")
                .HasColumnName("DODATKI_NIEOPODATKOWANE");
            entity.Property(e => e.DzienMiesiaca).HasColumnName("DZIEN_MIESIACA");
            entity.Property(e => e.DzienTygodnia).HasColumnName("DZIEN_TYGODNIA");
            entity.Property(e => e.Ecp).HasColumnName("ECP");
            entity.Property(e => e.EcpMiesiac).HasColumnName("ECP_MIESIAC");
            entity.Property(e => e.IdHarm).HasColumnName("ID_HARM");
            entity.Property(e => e.KwotaRachunku)
                .HasColumnType("money")
                .HasColumnName("KWOTA_RACHUNKU");
            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAZWA");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.OkresDo)
                .HasColumnType("datetime")
                .HasColumnName("OKRES_DO");
            entity.Property(e => e.OkresOd)
                .HasColumnType("datetime")
                .HasColumnName("OKRES_OD");
            entity.Property(e => e.Pielegnacyjny)
                .HasColumnType("money")
                .HasColumnName("PIELEGNACYJNY");
            entity.Property(e => e.Potracenia)
                .HasColumnType("money")
                .HasColumnName("POTRACENIA");
            entity.Property(e => e.Pracownik)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("PRACOWNIK");
            entity.Property(e => e.Prowizje).HasColumnName("PROWIZJE");
            entity.Property(e => e.Rehabilitacyjne)
                .HasColumnType("money")
                .HasColumnName("REHABILITACYJNE");
            entity.Property(e => e.RodzajPrzychodu).HasColumnName("RODZAJ_PRZYCHODU");
            entity.Property(e => e.SzablonRachunku).HasColumnName("SZABLON_RACHUNKU");
            entity.Property(e => e.ZasilekRodzinny)
                .HasColumnType("money")
                .HasColumnName("ZASILEK_RODZINNY");
            entity.Property(e => e.Zatrudnienie)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("ZATRUDNIENIE");
        });

        modelBuilder.Entity<VwRaportyKasowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRaportyKasowe");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DataZatwierdzenia)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ZATWIERDZENIA");
            entity.Property(e => e.IdKasy).HasColumnName("ID_KASY");
            entity.Property(e => e.IdKategorii).HasColumnName("ID_KATEGORII");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Kategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KATEGORIA");
            entity.Property(e => e.NazwaKasy)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NAZWA_KASY");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.OkresDo)
                .HasColumnType("datetime")
                .HasColumnName("OKRES_DO");
            entity.Property(e => e.OkresOd)
                .HasColumnType("datetime")
                .HasColumnName("OKRES_OD");
            entity.Property(e => e.Persaldo)
                .HasColumnType("money")
                .HasColumnName("PERSALDO");
            entity.Property(e => e.Program).HasColumnName("PROGRAM");
            entity.Property(e => e.SaldoKoncowe)
                .HasColumnType("money")
                .HasColumnName("SALDO_KONCOWE");
            entity.Property(e => e.SaldoPoczatkowe)
                .HasColumnType("money")
                .HasColumnName("SALDO_POCZATKOWE");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.StatusKsiegowy).HasColumnName("STATUS_KSIEGOWY");
            entity.Property(e => e.SymbolKasy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SYMBOL_KASY");
            entity.Property(e => e.Waluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WALUTA");
            entity.Property(e => e.Wystawil)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("WYSTAWIL");
            entity.Property(e => e.Zamkniety).HasColumnName("ZAMKNIETY");
            entity.Property(e => e.Zatwierdzil)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("ZATWIERDZIL");
            entity.Property(e => e.Zatwierdzony).HasColumnName("ZATWIERDZONY");
        });

        modelBuilder.Entity<VwRejKsiegowySymbol>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRejKsiegowySymbol");

            entity.Property(e => e.RksId).HasColumnName("rks_Id");
            entity.Property(e => e.RksSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("rks_Symbol");
        });

        modelBuilder.Entity<VwRejestrUf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRejestrUF");

            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.Operacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("operacja");
            entity.Property(e => e.UkoNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uko_Nazwa");
            entity.Property(e => e.UtrDataCzas)
                .HasColumnType("datetime")
                .HasColumnName("utr_DataCzas");
            entity.Property(e => e.UtrId).HasColumnName("utr_Id");
            entity.Property(e => e.UtrIdKonfiguracja).HasColumnName("utr_IdKonfiguracja");
            entity.Property(e => e.UtrKomputer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("utr_Komputer");
            entity.Property(e => e.UtrStatus).HasColumnName("utr_Status");
            entity.Property(e => e.UtrStatusOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("utr_StatusOpis");
            entity.Property(e => e.Uzytkownik)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("uzytkownik");
        });

        modelBuilder.Entity<VwRewSchematyImportu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRewSchematyImportu");

            entity.Property(e => e.KsNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ks_Nazwa");
            entity.Property(e => e.KsSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ks_Symbol");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.MagSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("mag_Symbol");
            entity.Property(e => e.NazwaGrupyDok)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NazwaTypu)
                .HasMaxLength(559)
                .IsUnicode(false);
            entity.Property(e => e.RbNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rb_Nazwa");
            entity.Property(e => e.SiDataSprzWyst)
                .HasMaxLength(28)
                .IsUnicode(false)
                .HasColumnName("si_DataSprzWyst");
            entity.Property(e => e.SiDataWpisuVat)
                .HasMaxLength(28)
                .IsUnicode(false)
                .HasColumnName("si_DataWpisuVAT");
            entity.Property(e => e.SiDataZakDost).HasColumnName("si_DataZakDost");
            entity.Property(e => e.SiDowolnaKategoria).HasColumnName("si_DowolnaKategoria");
            entity.Property(e => e.SiId).HasColumnName("si_Id");
            entity.Property(e => e.SiIdDataDekretacji)
                .HasMaxLength(28)
                .IsUnicode(false)
                .HasColumnName("si_IdDataDekretacji");
            entity.Property(e => e.SiIdDataDokumentu)
                .HasMaxLength(28)
                .IsUnicode(false)
                .HasColumnName("si_IdDataDokumentu");
            entity.Property(e => e.SiIdDataOperacji)
                .HasMaxLength(28)
                .IsUnicode(false)
                .HasColumnName("si_IdDataOperacji");
            entity.Property(e => e.SiIdDefiniowalnegoTypu).HasColumnName("si_IdDefiniowalnegoTypu");
            entity.Property(e => e.SiIdKatDokZrodlowego).HasColumnName("si_IdKatDokZrodlowego");
            entity.Property(e => e.SiIdKategoriiKh).HasColumnName("si_IdKategoriiKH");
            entity.Property(e => e.SiIdKategoriiVat).HasColumnName("si_IdKategoriiVAT");
            entity.Property(e => e.SiIdRejestruKs).HasColumnName("si_IdRejestruKs");
            entity.Property(e => e.SiImportDoEp).HasColumnName("si_ImportDoEP");
            entity.Property(e => e.SiImportDoKpir).HasColumnName("si_ImportDoKPIR");
            entity.Property(e => e.SiImportDoVat).HasColumnName("si_ImportDoVAT");
            entity.Property(e => e.SiImportDoVatoss).HasColumnName("si_ImportDoVATOSS");
            entity.Property(e => e.SiKryteriumDodatkowe).HasColumnName("si_KryteriumDodatkowe");
            entity.Property(e => e.SiMiesiacOdliczenia).HasColumnName("si_MiesiacOdliczenia");
            entity.Property(e => e.SiNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("si_Nazwa");
            entity.Property(e => e.SiRodzaj).HasColumnName("si_Rodzaj");
            entity.Property(e => e.SiRodzajKryteriumDodatkowego).HasColumnName("si_RodzajKryteriumDodatkowego");
            entity.Property(e => e.SiRozliczenieVat).HasColumnName("si_RozliczenieVat");
            entity.Property(e => e.SiTypDokImport).HasColumnName("si_TypDokImport");
            entity.Property(e => e.SiTypDokZrodlowego).HasColumnName("si_TypDokZrodlowego");
            entity.Property(e => e.SiTypTransakcji).HasColumnName("si_TypTransakcji");
            entity.Property(e => e.SiZablokowany).HasColumnName("si_Zablokowany");
        });

        modelBuilder.Entity<VwRewSchematyImportuUepiK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRewSchematyImportuUEPiK");

            entity.Property(e => e.MagSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("mag_Symbol");
            entity.Property(e => e.NazwaGrupyDok)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NazwaTypu)
                .HasMaxLength(559)
                .IsUnicode(false);
            entity.Property(e => e.SiDataSprzWyst)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("si_DataSprzWyst");
            entity.Property(e => e.SiDataWpisuVat)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("si_DataWpisuVAT");
            entity.Property(e => e.SiDataZakDost).HasColumnName("si_DataZakDost");
            entity.Property(e => e.SiDowolnaKategoria).HasColumnName("si_DowolnaKategoria");
            entity.Property(e => e.SiId).HasColumnName("si_Id");
            entity.Property(e => e.SiIdDataDekretacji)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("si_IdDataDekretacji");
            entity.Property(e => e.SiIdDataDokumentu)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("si_IdDataDokumentu");
            entity.Property(e => e.SiIdDataOperacji)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("si_IdDataOperacji");
            entity.Property(e => e.SiIdDataWpisuZpiK)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("si_IdDataWpisuZPiK");
            entity.Property(e => e.SiIdDataZdarzeniaGospZpiK)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("si_IdDataZdarzeniaGospZPiK");
            entity.Property(e => e.SiIdKatDokZrodlowego).HasColumnName("si_IdKatDokZrodlowego");
            entity.Property(e => e.SiIdKategoriiKh).HasColumnName("si_IdKategoriiKH");
            entity.Property(e => e.SiIdKategoriiVat).HasColumnName("si_IdKategoriiVAT");
            entity.Property(e => e.SiIdKategoriiZpiK).HasColumnName("si_IdKategoriiZPiK");
            entity.Property(e => e.SiIdRejestruKs).HasColumnName("si_IdRejestruKs");
            entity.Property(e => e.SiImportDoEp).HasColumnName("si_ImportDoEP");
            entity.Property(e => e.SiImportDoKpir).HasColumnName("si_ImportDoKPIR");
            entity.Property(e => e.SiImportDoVat).HasColumnName("si_ImportDoVAT");
            entity.Property(e => e.SiKryteriumDodatkowe).HasColumnName("si_KryteriumDodatkowe");
            entity.Property(e => e.SiMiesiacOdliczenia).HasColumnName("si_MiesiacOdliczenia");
            entity.Property(e => e.SiNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("si_Nazwa");
            entity.Property(e => e.SiRodzaj).HasColumnName("si_Rodzaj");
            entity.Property(e => e.SiRodzajKryteriumDodatkowego).HasColumnName("si_RodzajKryteriumDodatkowego");
            entity.Property(e => e.SiRozliczenieVat).HasColumnName("si_RozliczenieVat");
            entity.Property(e => e.SiTypDokImport).HasColumnName("si_TypDokImport");
            entity.Property(e => e.SiTypDokZrodlowego).HasColumnName("si_TypDokZrodlowego");
            entity.Property(e => e.SiTypTransakcji).HasColumnName("si_TypTransakcji");
            entity.Property(e => e.SiZablokowany).HasColumnName("si_Zablokowany");
        });

        modelBuilder.Entity<VwRozliczeniaMiedzyokresoweKosztow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRozliczeniaMiedzyokresoweKosztow");

            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.NazwaKosztu)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumerDok)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NumerKosztu)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.WartoscKosztu).HasColumnType("money");
            entity.Property(e => e.WartoscRozliczenia).HasColumnType("money");
        });

        modelBuilder.Entity<VwRozliczeniaSzybkichPlatnosci>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRozliczeniaSzybkichPlatnosci");

            entity.Property(e => e.DataNaleznosci).HasColumnType("datetime");
            entity.Property(e => e.DataOperacji).HasColumnType("datetime");
            entity.Property(e => e.DataSplaty).HasColumnType("datetime");
            entity.Property(e => e.DataTransakcji).HasColumnType("datetime");
            entity.Property(e => e.KwotaPierwotnaNaleznosci).HasColumnType("money");
            entity.Property(e => e.KwotaPierwotnaOperacji).HasColumnType("money");
            entity.Property(e => e.KwotaPierwotnaSplaty).HasColumnType("money");
            entity.Property(e => e.KwotaPozostalo).HasColumnType("money");
            entity.Property(e => e.KwotaRozliczeniaNaleznosci).HasColumnType("money");
            entity.Property(e => e.KwotaRozliczeniaOperacji).HasColumnType("money");
            entity.Property(e => e.KwotaRozliczeniaSplaty).HasColumnType("money");
            entity.Property(e => e.KwotaSplatyTransakcji).HasColumnType("money");
            entity.Property(e => e.KwotaTransakcji).HasColumnType("money");
            entity.Property(e => e.NazwaPliku)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NazwaPosrednika)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.NumerNaleznosci)
                .HasMaxLength(144)
                .IsUnicode(false);
            entity.Property(e => e.NumerSplaty)
                .HasMaxLength(144)
                .IsUnicode(false);
            entity.Property(e => e.OpisOperacji)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.OpisTransakcji)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Prowizja).HasColumnType("money");
            entity.Property(e => e.SymbolPosrednika)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransId).HasMaxLength(128);
            entity.Property(e => e.TytulOperacji)
                .HasMaxLength(144)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRozszerzeniaSferyczne>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRozszerzeniaSferyczne");

            entity.Property(e => e.Sf2ksId).HasColumnName("sf2ks_Id");
            entity.Property(e => e.Sf2ksNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sf2ks_Nazwa");
            entity.Property(e => e.Sf2ksPliki).HasColumnName("sf2ks_Pliki");
            entity.Property(e => e.Sf2ksProducentEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentEmail");
            entity.Property(e => e.Sf2ksProducentNazwa)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentNazwa");
            entity.Property(e => e.Sf2ksProducentWww)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sf2ks_ProducentWWW");
            entity.Property(e => e.Sf2ksWersja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sf2ks_Wersja");
        });

        modelBuilder.Entity<VwSchematyImportu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSchematyImportu");

            entity.Property(e => e.NazwaTypu)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SiDataSprzWyst).HasColumnName("si_DataSprzWyst");
            entity.Property(e => e.SiDataWpisuVat).HasColumnName("si_DataWpisuVAT");
            entity.Property(e => e.SiDataZakDost).HasColumnName("si_DataZakDost");
            entity.Property(e => e.SiDowolnaKategoria).HasColumnName("si_DowolnaKategoria");
            entity.Property(e => e.SiId).HasColumnName("si_Id");
            entity.Property(e => e.SiIdDataDekretacji).HasColumnName("si_IdDataDekretacji");
            entity.Property(e => e.SiIdDataDokumentu).HasColumnName("si_IdDataDokumentu");
            entity.Property(e => e.SiIdDataOperacji).HasColumnName("si_IdDataOperacji");
            entity.Property(e => e.SiIdDefiniowalnegoTypu).HasColumnName("si_IdDefiniowalnegoTypu");
            entity.Property(e => e.SiIdKatDokZrodlowego).HasColumnName("si_IdKatDokZrodlowego");
            entity.Property(e => e.SiIdKategoriiKh).HasColumnName("si_IdKategoriiKH");
            entity.Property(e => e.SiIdKategoriiVat).HasColumnName("si_IdKategoriiVAT");
            entity.Property(e => e.SiIdRejestruKs).HasColumnName("si_IdRejestruKs");
            entity.Property(e => e.SiImportDoDw).HasColumnName("si_ImportDoDW");
            entity.Property(e => e.SiImportDoEp).HasColumnName("si_ImportDoEP");
            entity.Property(e => e.SiImportDoKpir).HasColumnName("si_ImportDoKPIR");
            entity.Property(e => e.SiImportDoVat).HasColumnName("si_ImportDoVAT");
            entity.Property(e => e.SiImportDoVatoss).HasColumnName("si_ImportDoVATOSS");
            entity.Property(e => e.SiKryteriumDodatkowe).HasColumnName("si_KryteriumDodatkowe");
            entity.Property(e => e.SiMiesiacOdliczenia).HasColumnName("si_MiesiacOdliczenia");
            entity.Property(e => e.SiNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("si_Nazwa");
            entity.Property(e => e.SiPrzeznaczenie).HasColumnName("si_Przeznaczenie");
            entity.Property(e => e.SiRodzaj).HasColumnName("si_Rodzaj");
            entity.Property(e => e.SiRodzajKryteriumDodatkowego).HasColumnName("si_RodzajKryteriumDodatkowego");
            entity.Property(e => e.SiRozliczenieVat).HasColumnName("si_RozliczenieVat");
            entity.Property(e => e.SiTypDokImport).HasColumnName("si_TypDokImport");
            entity.Property(e => e.SiTypDokZrodlowego).HasColumnName("si_TypDokZrodlowego");
            entity.Property(e => e.SiTypTransakcji).HasColumnName("si_TypTransakcji");
            entity.Property(e => e.SiWydatki).HasColumnName("si_Wydatki");
            entity.Property(e => e.SiZablokowany).HasColumnName("si_Zablokowany");
        });

        modelBuilder.Entity<VwSerwisyChmurowePowiazanium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSerwisyChmurowePowiazania");
        });

        modelBuilder.Entity<VwSesjaBlokadum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SesjaBlokada");

            entity.Property(e => e.SsDataBlokadyRach)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_blokady_rach");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.SsTypObiektu).HasColumnName("ss_typ_obiektu");
            entity.Property(e => e.SsTypObiektuEx).HasColumnName("ss_typ_obiektu_ex");
        });

        modelBuilder.Entity<VwSesjeKasowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSesjeKasowe");

            entity.Property(e => e.SksDataOtwarcia)
                .HasColumnType("datetime")
                .HasColumnName("sks_DataOtwarcia");
            entity.Property(e => e.SksDataRozliczenia)
                .HasColumnType("datetime")
                .HasColumnName("sks_DataRozliczenia");
            entity.Property(e => e.SksDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("sks_DataZamkniecia");
            entity.Property(e => e.SksId).HasColumnName("sks_Id");
            entity.Property(e => e.SksIdKasy).HasColumnName("sks_IdKasy");
            entity.Property(e => e.SksIdUzOtworzyl).HasColumnName("sks_IdUzOtworzyl");
            entity.Property(e => e.SksIdUzZamknal).HasColumnName("sks_IdUzZamknal");
            entity.Property(e => e.SksIdUzytkownika).HasColumnName("sks_IdUzytkownika");
            entity.Property(e => e.SksImieNazwiskoOtworzyl)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("sks_ImieNazwiskoOtworzyl");
            entity.Property(e => e.SksImieNazwiskoUzytkownik)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("sks_ImieNazwiskoUzytkownik");
            entity.Property(e => e.SksImieNazwiskoZamknal)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("sks_ImieNazwiskoZamknal");
            entity.Property(e => e.SksNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sks_Numer");
            entity.Property(e => e.SksStatus).HasColumnName("sks_Status");
            entity.Property(e => e.SksStatusZgodnosci).HasColumnName("sks_StatusZgodnosci");
        });

        modelBuilder.Entity<VwSlPanstwo4Ist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSlPanstwo4IST");

            entity.Property(e => e.PaId).HasColumnName("pa_Id");
            entity.Property(e => e.PaKodPanstwaUe)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("pa_KodPanstwaUE");
        });

        modelBuilder.Entity<VwSprzMoolimit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSprzMOOLimit");

            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokTransakcjaJednolitaId).HasColumnName("dok_TransakcjaJednolitaId");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObCenaMag)
                .HasColumnType("money")
                .HasColumnName("ob_CenaMag");
            entity.Property(e => e.ObCenaNetto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNetto");
            entity.Property(e => e.ObCenaWalutaPln)
                .HasColumnType("money")
                .HasColumnName("ob_CenaWalutaPLN");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIlosc)
                .HasColumnType("money")
                .HasColumnName("ob_Ilosc");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObRabat)
                .HasColumnType("money")
                .HasColumnName("ob_Rabat");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
        });

        modelBuilder.Entity<VwStawkaVat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStawkaVAT");

            entity.Property(e => e.VatCzySystemowa).HasColumnName("vat_CzySystemowa");
            entity.Property(e => e.VatCzyWidoczna).HasColumnName("vat_CzyWidoczna");
            entity.Property(e => e.VatId).HasColumnName("vat_Id");
            entity.Property(e => e.VatIdPanstwo).HasColumnName("vat_IdPanstwo");
            entity.Property(e => e.VatNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vat_Nazwa");
            entity.Property(e => e.VatPozDomyslna).HasColumnName("vat_PozDomyslna");
            entity.Property(e => e.VatPozRr).HasColumnName("vat_PozRR");
            entity.Property(e => e.VatPozSprzedaz).HasColumnName("vat_PozSprzedaz");
            entity.Property(e => e.VatPozZakup).HasColumnName("vat_PozZakup");
            entity.Property(e => e.VatPozycja).HasColumnName("vat_Pozycja");
            entity.Property(e => e.VatRodzaj).HasColumnName("vat_Rodzaj");
            entity.Property(e => e.VatStawka)
                .HasColumnType("money")
                .HasColumnName("vat_Stawka");
            entity.Property(e => e.VatSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vat_Symbol");
            entity.Property(e => e.VatUePanstwo).HasColumnName("vat_UePanstwo");
        });

        modelBuilder.Entity<VwStlookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_STLookup");

            entity.Property(e => e.StId).HasColumnName("st_Id");
            entity.Property(e => e.StNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("st_Nazwa");
            entity.Property(e => e.StNrInw)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("st_NrInw");
            entity.Property(e => e.StStatus).HasColumnName("st_Status");
            entity.Property(e => e.StTyp).HasColumnName("st_Typ");
            entity.Property(e => e.StoCzyAmort).HasColumnName("sto_CzyAmort");
            entity.Property(e => e.StoCzyAmortBil).HasColumnName("sto_CzyAmortBil");
        });

        modelBuilder.Entity<VwSubkontum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSubkonta");

            entity.Property(e => e.Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSynchronizacjaImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSynchronizacjaImport");

            entity.Property(e => e.UsyCenaBrutto1)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto1");
            entity.Property(e => e.UsyCenaBrutto10)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto10");
            entity.Property(e => e.UsyCenaBrutto2)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto2");
            entity.Property(e => e.UsyCenaBrutto3)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto3");
            entity.Property(e => e.UsyCenaBrutto4)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto4");
            entity.Property(e => e.UsyCenaBrutto5)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto5");
            entity.Property(e => e.UsyCenaBrutto6)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto6");
            entity.Property(e => e.UsyCenaBrutto7)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto7");
            entity.Property(e => e.UsyCenaBrutto8)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto8");
            entity.Property(e => e.UsyCenaBrutto9)
                .HasColumnType("money")
                .HasColumnName("usy_CenaBrutto9");
            entity.Property(e => e.UsyCenaOtwarta).HasColumnName("usy_CenaOtwarta");
            entity.Property(e => e.UsyDniWaznosc).HasColumnName("usy_DniWaznosc");
            entity.Property(e => e.UsyId).HasColumnName("usy_Id");
            entity.Property(e => e.UsyIdCenaUf1).HasColumnName("usy_IdCenaUF1");
            entity.Property(e => e.UsyIdCenaUf10).HasColumnName("usy_IdCenaUF10");
            entity.Property(e => e.UsyIdCenaUf2).HasColumnName("usy_IdCenaUF2");
            entity.Property(e => e.UsyIdCenaUf3).HasColumnName("usy_IdCenaUF3");
            entity.Property(e => e.UsyIdCenaUf4).HasColumnName("usy_IdCenaUF4");
            entity.Property(e => e.UsyIdCenaUf5).HasColumnName("usy_IdCenaUF5");
            entity.Property(e => e.UsyIdCenaUf6).HasColumnName("usy_IdCenaUF6");
            entity.Property(e => e.UsyIdCenaUf7).HasColumnName("usy_IdCenaUF7");
            entity.Property(e => e.UsyIdCenaUf8).HasColumnName("usy_IdCenaUF8");
            entity.Property(e => e.UsyIdCenaUf9).HasColumnName("usy_IdCenaUF9");
            entity.Property(e => e.UsyIdDzialGrupaUf).HasColumnName("usy_IdDzialGrupaUF");
            entity.Property(e => e.UsyIdGrupa).HasColumnName("usy_IdGrupa");
            entity.Property(e => e.UsyIdInneUf1).HasColumnName("usy_IdInneUF1");
            entity.Property(e => e.UsyIdInneUf2).HasColumnName("usy_IdInneUF2");
            entity.Property(e => e.UsyIdInneUf3).HasColumnName("usy_IdInneUF3");
            entity.Property(e => e.UsyIdInneUf4).HasColumnName("usy_IdInneUF4");
            entity.Property(e => e.UsyIdInneUf5).HasColumnName("usy_IdInneUF5");
            entity.Property(e => e.UsyIdInneUf6).HasColumnName("usy_IdInneUF6");
            entity.Property(e => e.UsyIdInneUf7).HasColumnName("usy_IdInneUF7");
            entity.Property(e => e.UsyIdInneUf8).HasColumnName("usy_IdInneUF8");
            entity.Property(e => e.UsyIdJednostkaUf).HasColumnName("usy_IdJednostkaUF");
            entity.Property(e => e.UsyIdKonfiguracja).HasColumnName("usy_IdKonfiguracja");
            entity.Property(e => e.UsyIdOpakowanie).HasColumnName("usy_IdOpakowanie");
            entity.Property(e => e.UsyIdTowar).HasColumnName("usy_IdTowar");
            entity.Property(e => e.UsyIdVatGrupaUf).HasColumnName("usy_IdVatGrupaUF");
            entity.Property(e => e.UsyIdVatSp).HasColumnName("usy_IdVatSp");
            entity.Property(e => e.UsyIdVatUf).HasColumnName("usy_IdVatUF");
            entity.Property(e => e.UsyIdZadanie).HasColumnName("usy_IdZadanie");
            entity.Property(e => e.UsyJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("usy_JednMiary");
            entity.Property(e => e.UsyOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("usy_Opis");
            entity.Property(e => e.UsyPlu).HasColumnName("usy_PLU");
            entity.Property(e => e.UsyPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usy_PodstKodKresk");
            entity.Property(e => e.UsyPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_Pole1");
            entity.Property(e => e.UsyPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_Pole2");
            entity.Property(e => e.UsyPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_Pole3");
            entity.Property(e => e.UsyPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_Pole4");
            entity.Property(e => e.UsyPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_Pole5");
            entity.Property(e => e.UsyPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_Pole6");
            entity.Property(e => e.UsyPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_Pole7");
            entity.Property(e => e.UsyPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_Pole8");
            entity.Property(e => e.UsyRabatProcent)
                .HasColumnType("money")
                .HasColumnName("usy_RabatProcent");
            entity.Property(e => e.UsyRabatRodzaj).HasColumnName("usy_RabatRodzaj");
            entity.Property(e => e.UsyRodzaj).HasColumnName("usy_Rodzaj");
            entity.Property(e => e.UsyStawkaVat)
                .HasColumnType("money")
                .HasColumnName("usy_StawkaVat");
            entity.Property(e => e.UsySww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usy_SWW");
            entity.Property(e => e.UsySymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usy_Symbol");
            entity.Property(e => e.UsyTowarUf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_TowarUF");
            entity.Property(e => e.UsyUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_UrzNazwa");
            entity.Property(e => e.UsyUrzNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usy_UrzNazwa2");
            entity.Property(e => e.UsyUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("usy_Uwagi");
            entity.Property(e => e.UsyWagaEtykiet).HasColumnName("usy_WagaEtykiet");
        });

        modelBuilder.Entity<VwTowar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTowar");

            entity.Property(e => e.Dostawca)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.Dostepne).HasColumnType("money");
            entity.Property(e => e.Rezerwacja).HasColumnType("money");
            entity.Property(e => e.StMagId).HasColumnName("st_MagId");
            entity.Property(e => e.StStan)
                .HasColumnType("money")
                .HasColumnName("st_Stan");
            entity.Property(e => e.StStanMin)
                .HasColumnType("money")
                .HasColumnName("st_StanMin");
            entity.Property(e => e.StTowId).HasColumnName("st_TowId");
            entity.Property(e => e.Stan).HasColumnType("money");
            entity.Property(e => e.TcCenaBrutto1)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto1");
            entity.Property(e => e.TcCenaBrutto10)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto10");
            entity.Property(e => e.TcCenaBrutto2)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto2");
            entity.Property(e => e.TcCenaBrutto3)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto3");
            entity.Property(e => e.TcCenaBrutto4)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto4");
            entity.Property(e => e.TcCenaBrutto5)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto5");
            entity.Property(e => e.TcCenaBrutto6)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto6");
            entity.Property(e => e.TcCenaBrutto7)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto7");
            entity.Property(e => e.TcCenaBrutto8)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto8");
            entity.Property(e => e.TcCenaBrutto9)
                .HasColumnType("money")
                .HasColumnName("tc_CenaBrutto9");
            entity.Property(e => e.TcCenaNetto0)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto0");
            entity.Property(e => e.TcCenaNetto1)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto1");
            entity.Property(e => e.TcCenaNetto10)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto10");
            entity.Property(e => e.TcCenaNetto2)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto2");
            entity.Property(e => e.TcCenaNetto3)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto3");
            entity.Property(e => e.TcCenaNetto4)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto4");
            entity.Property(e => e.TcCenaNetto5)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto5");
            entity.Property(e => e.TcCenaNetto6)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto6");
            entity.Property(e => e.TcCenaNetto7)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto7");
            entity.Property(e => e.TcCenaNetto8)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto8");
            entity.Property(e => e.TcCenaNetto9)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNetto9");
            entity.Property(e => e.TcCenaNettoWaluta)
                .HasColumnType("money")
                .HasColumnName("tc_CenaNettoWaluta");
            entity.Property(e => e.TcIdTowar).HasColumnName("tc_IdTowar");
            entity.Property(e => e.TcIdWaluta1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta1");
            entity.Property(e => e.TcIdWaluta10)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta10");
            entity.Property(e => e.TcIdWaluta2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta2");
            entity.Property(e => e.TcIdWaluta3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta3");
            entity.Property(e => e.TcIdWaluta4)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta4");
            entity.Property(e => e.TcIdWaluta5)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta5");
            entity.Property(e => e.TcIdWaluta6)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta6");
            entity.Property(e => e.TcIdWaluta7)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta7");
            entity.Property(e => e.TcIdWaluta8)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta8");
            entity.Property(e => e.TcIdWaluta9)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_IdWaluta9");
            entity.Property(e => e.TcMarza1)
                .HasColumnType("money")
                .HasColumnName("tc_Marza1");
            entity.Property(e => e.TcMarza10)
                .HasColumnType("money")
                .HasColumnName("tc_Marza10");
            entity.Property(e => e.TcMarza2)
                .HasColumnType("money")
                .HasColumnName("tc_Marza2");
            entity.Property(e => e.TcMarza3)
                .HasColumnType("money")
                .HasColumnName("tc_Marza3");
            entity.Property(e => e.TcMarza4)
                .HasColumnType("money")
                .HasColumnName("tc_Marza4");
            entity.Property(e => e.TcMarza5)
                .HasColumnType("money")
                .HasColumnName("tc_Marza5");
            entity.Property(e => e.TcMarza6)
                .HasColumnType("money")
                .HasColumnName("tc_Marza6");
            entity.Property(e => e.TcMarza7)
                .HasColumnType("money")
                .HasColumnName("tc_Marza7");
            entity.Property(e => e.TcMarza8)
                .HasColumnType("money")
                .HasColumnName("tc_Marza8");
            entity.Property(e => e.TcMarza9)
                .HasColumnType("money")
                .HasColumnName("tc_Marza9");
            entity.Property(e => e.TcNarzut1)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut1");
            entity.Property(e => e.TcNarzut10)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut10");
            entity.Property(e => e.TcNarzut2)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut2");
            entity.Property(e => e.TcNarzut3)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut3");
            entity.Property(e => e.TcNarzut4)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut4");
            entity.Property(e => e.TcNarzut5)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut5");
            entity.Property(e => e.TcNarzut6)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut6");
            entity.Property(e => e.TcNarzut7)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut7");
            entity.Property(e => e.TcNarzut8)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut8");
            entity.Property(e => e.TcNarzut9)
                .HasColumnType("money")
                .HasColumnName("tc_Narzut9");
            entity.Property(e => e.TcPodstawaKc).HasColumnName("tc_PodstawaKC");
            entity.Property(e => e.TcWalutaId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tc_WalutaId");
            entity.Property(e => e.TcWalutaJedn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tc_WalutaJedn");
            entity.Property(e => e.TcWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("tc_WalutaKurs");
            entity.Property(e => e.TcZysk1)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk1");
            entity.Property(e => e.TcZysk10)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk10");
            entity.Property(e => e.TcZysk2)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk2");
            entity.Property(e => e.TcZysk3)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk3");
            entity.Property(e => e.TcZysk4)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk4");
            entity.Property(e => e.TcZysk5)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk5");
            entity.Property(e => e.TcZysk6)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk6");
            entity.Property(e => e.TcZysk7)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk7");
            entity.Property(e => e.TcZysk8)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk8");
            entity.Property(e => e.TcZysk9)
                .HasColumnType("money")
                .HasColumnName("tc_Zysk9");
            entity.Property(e => e.TwCenaOtwarta).HasColumnName("tw_CenaOtwarta");
            entity.Property(e => e.TwCharakter)
                .HasColumnType("text")
                .HasColumnName("tw_Charakter");
            entity.Property(e => e.TwCzasDostawy).HasColumnName("tw_CzasDostawy");
            entity.Property(e => e.TwDniWaznosc).HasColumnName("tw_DniWaznosc");
            entity.Property(e => e.TwDostSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_DostSymbol");
            entity.Property(e => e.TwGlebokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Glebokosc");
            entity.Property(e => e.TwGrupaJpkVat).HasColumnName("tw_GrupaJpkVat");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwIdOpakowanie).HasColumnName("tw_IdOpakowanie");
            entity.Property(e => e.TwIdPodstDostawca).HasColumnName("tw_IdPodstDostawca");
            entity.Property(e => e.TwIdRabat).HasColumnName("tw_IdRabat");
            entity.Property(e => e.TwIdTypKodu).HasColumnName("tw_IdTypKodu");
            entity.Property(e => e.TwIdVatSp).HasColumnName("tw_IdVatSp");
            entity.Property(e => e.TwIdVatZak).HasColumnName("tw_IdVatZak");
            entity.Property(e => e.TwJakPrzySp).HasColumnName("tw_JakPrzySp");
            entity.Property(e => e.TwJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiary");
            entity.Property(e => e.TwKodTowaru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_KodTowaru");
            entity.Property(e => e.TwLogo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("tw_Logo");
            entity.Property(e => e.TwMechanizmPodzielonejPlatnosci).HasColumnName("tw_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwObrotMarza).HasColumnName("tw_ObrotMarza");
            entity.Property(e => e.TwOdwrotneObciazenie).HasColumnName("tw_OdwrotneObciazenie");
            entity.Property(e => e.TwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Opis");
            entity.Property(e => e.TwOplCukrowaKofeinaPodlega).HasColumnName("tw_OplCukrowaKofeinaPodlega");
            entity.Property(e => e.TwOplCukrowaPodlega).HasColumnName("tw_OplCukrowaPodlega");
            entity.Property(e => e.TwPkwiU)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PKWiU");
            entity.Property(e => e.TwPlu).HasColumnName("tw_PLU");
            entity.Property(e => e.TwPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PodstKodKresk");
            entity.Property(e => e.TwPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole1");
            entity.Property(e => e.TwPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole2");
            entity.Property(e => e.TwPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole3");
            entity.Property(e => e.TwPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole4");
            entity.Property(e => e.TwPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole5");
            entity.Property(e => e.TwPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole6");
            entity.Property(e => e.TwPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole7");
            entity.Property(e => e.TwPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole8");
            entity.Property(e => e.TwPrzezWartosc).HasColumnName("tw_PrzezWartosc");
            entity.Property(e => e.TwRodzaj).HasColumnName("tw_Rodzaj");
            entity.Property(e => e.TwSerwisAukcyjny).HasColumnName("tw_SerwisAukcyjny");
            entity.Property(e => e.TwSklepInternet).HasColumnName("tw_SklepInternet");
            entity.Property(e => e.TwSprzedazMobilna).HasColumnName("tw_SprzedazMobilna");
            entity.Property(e => e.TwStanMaks)
                .HasColumnType("money")
                .HasColumnName("tw_StanMaks");
            entity.Property(e => e.TwStanMin)
                .HasColumnType("money")
                .HasColumnName("tw_StanMin");
            entity.Property(e => e.TwSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_SWW");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_Symbol");
            entity.Property(e => e.TwSzerokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Szerokosc");
            entity.Property(e => e.TwUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_UrzNazwa");
            entity.Property(e => e.TwUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Uwagi");
            entity.Property(e => e.TwWagaEtykiet).HasColumnName("tw_WagaEtykiet");
            entity.Property(e => e.TwWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_WWW");
            entity.Property(e => e.TwWysokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Wysokosc");
            entity.Property(e => e.TwZablokowany).HasColumnName("tw_Zablokowany");
            entity.Property(e => e.VatSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vat_Symbol");
        });

        modelBuilder.Entity<VwTowarListaWszystkie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTowarListaWszystkie");

            entity.Property(e => e.TwAkcyza).HasColumnName("tw_Akcyza");
            entity.Property(e => e.TwAkcyzaKwota)
                .HasColumnType("money")
                .HasColumnName("tw_AkcyzaKwota");
            entity.Property(e => e.TwAkcyzaZaznacz).HasColumnName("tw_AkcyzaZaznacz");
            entity.Property(e => e.TwBloz12)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_bloz_12");
            entity.Property(e => e.TwBloz7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_bloz_7");
            entity.Property(e => e.TwCenaOtwarta).HasColumnName("tw_CenaOtwarta");
            entity.Property(e => e.TwCharakter)
                .HasColumnType("text")
                .HasColumnName("tw_Charakter");
            entity.Property(e => e.TwCzasDostawy).HasColumnName("tw_CzasDostawy");
            entity.Property(e => e.TwDniWaznosc).HasColumnName("tw_DniWaznosc");
            entity.Property(e => e.TwDodawalnyDoZw).HasColumnName("tw_DodawalnyDoZW");
            entity.Property(e => e.TwDomyslnaKategoria).HasColumnName("tw_DomyslnaKategoria");
            entity.Property(e => e.TwDostSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_DostSymbol");
            entity.Property(e => e.TwGlebokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Glebokosc");
            entity.Property(e => e.TwGrupaJpkVat).HasColumnName("tw_GrupaJpkVat");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.TwIdFundPromocji).HasColumnName("tw_IdFundPromocji");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwIdKrajuPochodzenia).HasColumnName("tw_IdKrajuPochodzenia");
            entity.Property(e => e.TwIdOpakowanie).HasColumnName("tw_IdOpakowanie");
            entity.Property(e => e.TwIdPodstDostawca).HasColumnName("tw_IdPodstDostawca");
            entity.Property(e => e.TwIdProducenta).HasColumnName("tw_IdProducenta");
            entity.Property(e => e.TwIdRabat).HasColumnName("tw_IdRabat");
            entity.Property(e => e.TwIdTypKodu).HasColumnName("tw_IdTypKodu");
            entity.Property(e => e.TwIdUjm).HasColumnName("tw_IdUJM");
            entity.Property(e => e.TwIdVatSp).HasColumnName("tw_IdVatSp");
            entity.Property(e => e.TwIdVatZak).HasColumnName("tw_IdVatZak");
            entity.Property(e => e.TwIsFundPromocji).HasColumnName("tw_IsFundPromocji");
            entity.Property(e => e.TwIsbn)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_isbn");
            entity.Property(e => e.TwJakPrzySp).HasColumnName("tw_JakPrzySp");
            entity.Property(e => e.TwJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiary");
            entity.Property(e => e.TwJednMiarySprz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiarySprz");
            entity.Property(e => e.TwJednMiaryZak)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiaryZak");
            entity.Property(e => e.TwJednStanMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednStanMin");
            entity.Property(e => e.TwJmsprzInna).HasColumnName("tw_JMSprzInna");
            entity.Property(e => e.TwJmzakInna).HasColumnName("tw_JMZakInna");
            entity.Property(e => e.TwKodTowaru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_KodTowaru");
            entity.Property(e => e.TwKodUproducenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_KodUProducenta");
            entity.Property(e => e.TwKomunikat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Komunikat");
            entity.Property(e => e.TwKomunikatDokumenty).HasColumnName("tw_KomunikatDokumenty");
            entity.Property(e => e.TwKomunikatOd)
                .HasColumnType("datetime")
                .HasColumnName("tw_KomunikatOd");
            entity.Property(e => e.TwKontrolaTw).HasColumnName("tw_KontrolaTW");
            entity.Property(e => e.TwLogo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("tw_Logo");
            entity.Property(e => e.TwMasa)
                .HasColumnType("money")
                .HasColumnName("tw_Masa");
            entity.Property(e => e.TwMechanizmPodzielonejPlatnosci).HasColumnName("tw_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwObjetosc)
                .HasColumnType("money")
                .HasColumnName("tw_Objetosc");
            entity.Property(e => e.TwObrotMarza).HasColumnName("tw_ObrotMarza");
            entity.Property(e => e.TwOdwrotneObciazenie).HasColumnName("tw_OdwrotneObciazenie");
            entity.Property(e => e.TwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Opis");
            entity.Property(e => e.TwPkwiU)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PKWiU");
            entity.Property(e => e.TwPlu).HasColumnName("tw_PLU");
            entity.Property(e => e.TwPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PodstKodKresk");
            entity.Property(e => e.TwPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole1");
            entity.Property(e => e.TwPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole2");
            entity.Property(e => e.TwPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole3");
            entity.Property(e => e.TwPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole4");
            entity.Property(e => e.TwPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole5");
            entity.Property(e => e.TwPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole6");
            entity.Property(e => e.TwPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole7");
            entity.Property(e => e.TwPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole8");
            entity.Property(e => e.TwProgKwotowyOo).HasColumnName("tw_ProgKwotowyOO");
            entity.Property(e => e.TwPrzezWartosc).HasColumnName("tw_PrzezWartosc");
            entity.Property(e => e.TwRodzaj).HasColumnName("tw_Rodzaj");
            entity.Property(e => e.TwSerwisAukcyjny).HasColumnName("tw_SerwisAukcyjny");
            entity.Property(e => e.TwSklepInternet).HasColumnName("tw_SklepInternet");
            entity.Property(e => e.TwSprzedazMobilna).HasColumnName("tw_SprzedazMobilna");
            entity.Property(e => e.TwStanMaks)
                .HasColumnType("money")
                .HasColumnName("tw_StanMaks");
            entity.Property(e => e.TwStanMin)
                .HasColumnType("money")
                .HasColumnName("tw_StanMin");
            entity.Property(e => e.TwSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_SWW");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_Symbol");
            entity.Property(e => e.TwSzerokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Szerokosc");
            entity.Property(e => e.TwUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_UrzNazwa");
            entity.Property(e => e.TwUsuniety).HasColumnName("tw_Usuniety");
            entity.Property(e => e.TwUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Uwagi");
            entity.Property(e => e.TwWagaEtykiet).HasColumnName("tw_WagaEtykiet");
            entity.Property(e => e.TwWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_WWW");
            entity.Property(e => e.TwWysokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Wysokosc");
            entity.Property(e => e.TwZablokowany).HasColumnName("tw_Zablokowany");
        });

        modelBuilder.Entity<VwTowarListum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTowarLista");

            entity.Property(e => e.TwAkcyza).HasColumnName("tw_Akcyza");
            entity.Property(e => e.TwAkcyzaKwota)
                .HasColumnType("money")
                .HasColumnName("tw_AkcyzaKwota");
            entity.Property(e => e.TwAkcyzaZaznacz).HasColumnName("tw_AkcyzaZaznacz");
            entity.Property(e => e.TwBloz12)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_bloz_12");
            entity.Property(e => e.TwBloz7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_bloz_7");
            entity.Property(e => e.TwCenaOtwarta).HasColumnName("tw_CenaOtwarta");
            entity.Property(e => e.TwCharakter)
                .HasColumnType("text")
                .HasColumnName("tw_Charakter");
            entity.Property(e => e.TwCzasDostawy).HasColumnName("tw_CzasDostawy");
            entity.Property(e => e.TwDniWaznosc).HasColumnName("tw_DniWaznosc");
            entity.Property(e => e.TwDodawalnyDoZw).HasColumnName("tw_DodawalnyDoZW");
            entity.Property(e => e.TwDomyslnaKategoria).HasColumnName("tw_DomyslnaKategoria");
            entity.Property(e => e.TwDostSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_DostSymbol");
            entity.Property(e => e.TwGlebokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Glebokosc");
            entity.Property(e => e.TwGrupaJpkVat).HasColumnName("tw_GrupaJpkVat");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.TwIdFundPromocji).HasColumnName("tw_IdFundPromocji");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwIdKrajuPochodzenia).HasColumnName("tw_IdKrajuPochodzenia");
            entity.Property(e => e.TwIdOpakowanie).HasColumnName("tw_IdOpakowanie");
            entity.Property(e => e.TwIdPodstDostawca).HasColumnName("tw_IdPodstDostawca");
            entity.Property(e => e.TwIdProducenta).HasColumnName("tw_IdProducenta");
            entity.Property(e => e.TwIdRabat).HasColumnName("tw_IdRabat");
            entity.Property(e => e.TwIdTypKodu).HasColumnName("tw_IdTypKodu");
            entity.Property(e => e.TwIdUjm).HasColumnName("tw_IdUJM");
            entity.Property(e => e.TwIdVatSp).HasColumnName("tw_IdVatSp");
            entity.Property(e => e.TwIdVatZak).HasColumnName("tw_IdVatZak");
            entity.Property(e => e.TwIsFundPromocji).HasColumnName("tw_IsFundPromocji");
            entity.Property(e => e.TwIsbn)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_isbn");
            entity.Property(e => e.TwJakPrzySp).HasColumnName("tw_JakPrzySp");
            entity.Property(e => e.TwJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiary");
            entity.Property(e => e.TwJednMiarySprz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiarySprz");
            entity.Property(e => e.TwJednMiaryZak)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiaryZak");
            entity.Property(e => e.TwJednStanMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednStanMin");
            entity.Property(e => e.TwJmsprzInna).HasColumnName("tw_JMSprzInna");
            entity.Property(e => e.TwJmzakInna).HasColumnName("tw_JMZakInna");
            entity.Property(e => e.TwKodTowaru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_KodTowaru");
            entity.Property(e => e.TwKodUproducenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_KodUProducenta");
            entity.Property(e => e.TwKomunikat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Komunikat");
            entity.Property(e => e.TwKomunikatDokumenty).HasColumnName("tw_KomunikatDokumenty");
            entity.Property(e => e.TwKomunikatOd)
                .HasColumnType("datetime")
                .HasColumnName("tw_KomunikatOd");
            entity.Property(e => e.TwKontrolaTw).HasColumnName("tw_KontrolaTW");
            entity.Property(e => e.TwLogo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("tw_Logo");
            entity.Property(e => e.TwMasa)
                .HasColumnType("money")
                .HasColumnName("tw_Masa");
            entity.Property(e => e.TwMechanizmPodzielonejPlatnosci).HasColumnName("tw_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwObjetosc)
                .HasColumnType("money")
                .HasColumnName("tw_Objetosc");
            entity.Property(e => e.TwObrotMarza).HasColumnName("tw_ObrotMarza");
            entity.Property(e => e.TwOdwrotneObciazenie).HasColumnName("tw_OdwrotneObciazenie");
            entity.Property(e => e.TwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Opis");
            entity.Property(e => e.TwPkwiU)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PKWiU");
            entity.Property(e => e.TwPlu).HasColumnName("tw_PLU");
            entity.Property(e => e.TwPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PodstKodKresk");
            entity.Property(e => e.TwPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole1");
            entity.Property(e => e.TwPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole2");
            entity.Property(e => e.TwPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole3");
            entity.Property(e => e.TwPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole4");
            entity.Property(e => e.TwPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole5");
            entity.Property(e => e.TwPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole6");
            entity.Property(e => e.TwPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole7");
            entity.Property(e => e.TwPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole8");
            entity.Property(e => e.TwProgKwotowyOo).HasColumnName("tw_ProgKwotowyOO");
            entity.Property(e => e.TwPrzezWartosc).HasColumnName("tw_PrzezWartosc");
            entity.Property(e => e.TwRodzaj).HasColumnName("tw_Rodzaj");
            entity.Property(e => e.TwSerwisAukcyjny).HasColumnName("tw_SerwisAukcyjny");
            entity.Property(e => e.TwSklepInternet).HasColumnName("tw_SklepInternet");
            entity.Property(e => e.TwSprzedazMobilna).HasColumnName("tw_SprzedazMobilna");
            entity.Property(e => e.TwStanMaks)
                .HasColumnType("money")
                .HasColumnName("tw_StanMaks");
            entity.Property(e => e.TwStanMin)
                .HasColumnType("money")
                .HasColumnName("tw_StanMin");
            entity.Property(e => e.TwSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_SWW");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_Symbol");
            entity.Property(e => e.TwSzerokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Szerokosc");
            entity.Property(e => e.TwUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_UrzNazwa");
            entity.Property(e => e.TwUsuniety).HasColumnName("tw_Usuniety");
            entity.Property(e => e.TwUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Uwagi");
            entity.Property(e => e.TwWagaEtykiet).HasColumnName("tw_WagaEtykiet");
            entity.Property(e => e.TwWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_WWW");
            entity.Property(e => e.TwWysokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Wysokosc");
            entity.Property(e => e.TwZablokowany).HasColumnName("tw_Zablokowany");
        });

        modelBuilder.Entity<VwTowaryCennikiSelekcja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TowaryCennikiSelekcja");

            entity.Property(e => e.TwAkcyza).HasColumnName("tw_Akcyza");
            entity.Property(e => e.TwAkcyzaKwota)
                .HasColumnType("money")
                .HasColumnName("tw_AkcyzaKwota");
            entity.Property(e => e.TwAkcyzaZaznacz).HasColumnName("tw_AkcyzaZaznacz");
            entity.Property(e => e.TwCenaOtwarta).HasColumnName("tw_CenaOtwarta");
            entity.Property(e => e.TwCharakter)
                .HasColumnType("text")
                .HasColumnName("tw_Charakter");
            entity.Property(e => e.TwCzasDostawy).HasColumnName("tw_CzasDostawy");
            entity.Property(e => e.TwDniWaznosc).HasColumnName("tw_DniWaznosc");
            entity.Property(e => e.TwDomyslnaKategoria).HasColumnName("tw_DomyslnaKategoria");
            entity.Property(e => e.TwDostSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_DostSymbol");
            entity.Property(e => e.TwGlebokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Glebokosc");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.TwIdFundPromocji).HasColumnName("tw_IdFundPromocji");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwIdKrajuPochodzenia).HasColumnName("tw_IdKrajuPochodzenia");
            entity.Property(e => e.TwIdOpakowanie).HasColumnName("tw_IdOpakowanie");
            entity.Property(e => e.TwIdPodstDostawca).HasColumnName("tw_IdPodstDostawca");
            entity.Property(e => e.TwIdProducenta).HasColumnName("tw_IdProducenta");
            entity.Property(e => e.TwIdRabat).HasColumnName("tw_IdRabat");
            entity.Property(e => e.TwIdTypKodu).HasColumnName("tw_IdTypKodu");
            entity.Property(e => e.TwIdUjm).HasColumnName("tw_IdUJM");
            entity.Property(e => e.TwIdVatSp).HasColumnName("tw_IdVatSp");
            entity.Property(e => e.TwIdVatZak).HasColumnName("tw_IdVatZak");
            entity.Property(e => e.TwIsFundPromocji).HasColumnName("tw_IsFundPromocji");
            entity.Property(e => e.TwJakPrzySp).HasColumnName("tw_JakPrzySp");
            entity.Property(e => e.TwJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiary");
            entity.Property(e => e.TwJednMiarySprz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiarySprz");
            entity.Property(e => e.TwJednMiaryZak)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiaryZak");
            entity.Property(e => e.TwJednStanMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednStanMin");
            entity.Property(e => e.TwJmsprzInna).HasColumnName("tw_JMSprzInna");
            entity.Property(e => e.TwJmzakInna).HasColumnName("tw_JMZakInna");
            entity.Property(e => e.TwKodTowaru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_KodTowaru");
            entity.Property(e => e.TwKontrolaTw).HasColumnName("tw_KontrolaTW");
            entity.Property(e => e.TwLogo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("tw_Logo");
            entity.Property(e => e.TwMasa)
                .HasColumnType("money")
                .HasColumnName("tw_Masa");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwObjetosc)
                .HasColumnType("money")
                .HasColumnName("tw_Objetosc");
            entity.Property(e => e.TwObrotMarza).HasColumnName("tw_ObrotMarza");
            entity.Property(e => e.TwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Opis");
            entity.Property(e => e.TwPkwiU)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PKWiU");
            entity.Property(e => e.TwPlu).HasColumnName("tw_PLU");
            entity.Property(e => e.TwPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PodstKodKresk");
            entity.Property(e => e.TwPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole1");
            entity.Property(e => e.TwPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole2");
            entity.Property(e => e.TwPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole3");
            entity.Property(e => e.TwPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole4");
            entity.Property(e => e.TwPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole5");
            entity.Property(e => e.TwPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole6");
            entity.Property(e => e.TwPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole7");
            entity.Property(e => e.TwPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole8");
            entity.Property(e => e.TwPrzezWartosc).HasColumnName("tw_PrzezWartosc");
            entity.Property(e => e.TwRodzaj).HasColumnName("tw_Rodzaj");
            entity.Property(e => e.TwSerwisAukcyjny).HasColumnName("tw_SerwisAukcyjny");
            entity.Property(e => e.TwSklepInternet).HasColumnName("tw_SklepInternet");
            entity.Property(e => e.TwSprzedazMobilna).HasColumnName("tw_SprzedazMobilna");
            entity.Property(e => e.TwStanMaks)
                .HasColumnType("money")
                .HasColumnName("tw_StanMaks");
            entity.Property(e => e.TwStanMin)
                .HasColumnType("money")
                .HasColumnName("tw_StanMin");
            entity.Property(e => e.TwSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_SWW");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_Symbol");
            entity.Property(e => e.TwSzerokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Szerokosc");
            entity.Property(e => e.TwUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_UrzNazwa");
            entity.Property(e => e.TwUsuniety).HasColumnName("tw_Usuniety");
            entity.Property(e => e.TwUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Uwagi");
            entity.Property(e => e.TwWagaEtykiet).HasColumnName("tw_WagaEtykiet");
            entity.Property(e => e.TwWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_WWW");
            entity.Property(e => e.TwWysokosc)
                .HasColumnType("money")
                .HasColumnName("tw_Wysokosc");
            entity.Property(e => e.TwZablokowany).HasColumnName("tw_Zablokowany");
        });

        modelBuilder.Entity<VwTowaryTransakcji>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TowaryTransakcji");

            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObCenaBruttoPoRabacie)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBruttoPoRabacie");
            entity.Property(e => e.ObCenaMag)
                .HasColumnType("money")
                .HasColumnName("ob_CenaMag");
            entity.Property(e => e.ObCenaNetto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNetto");
            entity.Property(e => e.ObCenaNettoPoRabacie)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNettoPoRabacie");
            entity.Property(e => e.ObCenaWaluta)
                .HasColumnType("money")
                .HasColumnName("ob_CenaWaluta");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokHanLp).HasColumnName("ob_DokHanLp");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObDokMagLp).HasColumnName("ob_DokMagLp");
            entity.Property(e => e.ObGrupaId).HasColumnName("ob_GrupaId");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIdDoZdj).HasColumnName("ob_IdDoZdj");
            entity.Property(e => e.ObIdOpakowanie).HasColumnName("ob_IdOpakowanie");
            entity.Property(e => e.ObIlosc)
                .HasColumnType("money")
                .HasColumnName("ob_Ilosc");
            entity.Property(e => e.ObIloscJm)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("ob_IloscJm");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ob_Kategoria");
            entity.Property(e => e.ObKategoriaId).HasColumnName("ob_KategoriaId");
            entity.Property(e => e.ObMagId).HasColumnName("ob_MagId");
            entity.Property(e => e.ObMasa)
                .HasColumnType("money")
                .HasColumnName("ob_Masa");
            entity.Property(e => e.ObNumerSeryjny)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ob_NumerSeryjny");
            entity.Property(e => e.ObObjetosc)
                .HasColumnType("money")
                .HasColumnName("ob_Objetosc");
            entity.Property(e => e.ObOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ob_Opis");
            entity.Property(e => e.ObRabat)
                .HasColumnType("money")
                .HasColumnName("ob_Rabat");
            entity.Property(e => e.ObStan)
                .HasColumnType("money")
                .HasColumnName("ob_Stan");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObTermin)
                .HasColumnType("datetime")
                .HasColumnName("ob_Termin");
            entity.Property(e => e.ObTowFlgNumer).HasColumnName("ob_TowFlgNumer");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowMasa)
                .HasColumnType("money")
                .HasColumnName("ob_TowMasa");
            entity.Property(e => e.ObTowNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ob_TowNazwa");
            entity.Property(e => e.ObTowObjetosc)
                .HasColumnType("money")
                .HasColumnName("ob_TowObjetosc");
            entity.Property(e => e.ObTowOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ob_TowOpis");
            entity.Property(e => e.ObTowPkwiu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ob_TowPkwiu");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObTowSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ob_TowSymbol");
            entity.Property(e => e.ObTowSymbolDost)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ob_TowSymbolDost");
            entity.Property(e => e.ObVatId).HasColumnName("ob_VatId");
            entity.Property(e => e.ObVatProc)
                .HasColumnType("money")
                .HasColumnName("ob_VatProc");
            entity.Property(e => e.ObWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ob_Waluta");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartBruttoPrzedRabatem)
                .HasColumnType("money")
                .HasColumnName("ob_WartBruttoPrzedRabatem");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartNettoPrzedRabatem)
                .HasColumnType("money")
                .HasColumnName("ob_WartNettoPrzedRabatem");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObWartVatPrzedRabatem)
                .HasColumnType("money")
                .HasColumnName("ob_WartVatPrzedRabatem");
            entity.Property(e => e.ObZnak).HasColumnName("ob_znak");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
        });

        modelBuilder.Entity<VwTransakcja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Transakcja");

            entity.Property(e => e.AdrNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("adr_NazwaPelna");
            entity.Property(e => e.AdrSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adr_Symbol");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.GodzinaZamknieciaStr)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.KhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("kh_Nazwa");
            entity.Property(e => e.TrDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataModyfikacji");
            entity.Property(e => e.TrDataOtwarcia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataOtwarcia");
            entity.Property(e => e.TrDataRealizacji)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_DataRealizacji");
            entity.Property(e => e.TrDataUtworzenia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataUtworzenia");
            entity.Property(e => e.TrDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataZamkniecia");
            entity.Property(e => e.TrDniSpoznienia).HasColumnName("tr_DniSpoznienia");
            entity.Property(e => e.TrDokKoncowy).HasColumnName("tr_DokKoncowy");
            entity.Property(e => e.TrDokKoncowyId).HasColumnName("tr_DokKoncowyId");
            entity.Property(e => e.TrDokKoncowySymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_DokKoncowySymbol");
            entity.Property(e => e.TrDokZamowienie).HasColumnName("tr_DokZamowienie");
            entity.Property(e => e.TrDokZamowienieId).HasColumnName("tr_DokZamowienieId");
            entity.Property(e => e.TrDokZamowienieSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_DokZamowienieSymbol");
            entity.Property(e => e.TrEtap).HasColumnName("tr_Etap");
            entity.Property(e => e.TrId).HasColumnName("tr_Id");
            entity.Property(e => e.TrKlient).HasColumnName("tr_Klient");
            entity.Property(e => e.TrKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("tr_Kolor");
            entity.Property(e => e.TrKoncowy)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("tr_Koncowy");
            entity.Property(e => e.TrMaObsluzyc).HasColumnName("tr_MaObsluzyc");
            entity.Property(e => e.TrMaObsluzycOdKlienta).HasColumnName("tr_MaObsluzycOdKlienta");
            entity.Property(e => e.TrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_Nazwa");
            entity.Property(e => e.TrOferta).HasColumnName("tr_Oferta");
            entity.Property(e => e.TrPlanowanaDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("tr_PlanowanaDataZamkniecia");
            entity.Property(e => e.TrPlanowanaGodzinaZamkniecia).HasColumnName("tr_PlanowanaGodzinaZamkniecia");
            entity.Property(e => e.TrPokazujWkal).HasColumnName("tr_PokazujWKal");
            entity.Property(e => e.TrPozostaloDni).HasColumnName("tr_PozostaloDni");
            entity.Property(e => e.TrPrzygotowal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tr_Przygotowal");
            entity.Property(e => e.TrStan).HasColumnName("tr_Stan");
            entity.Property(e => e.TrStatus).HasColumnName("tr_Status");
            entity.Property(e => e.TrStatusOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_StatusOpis");
            entity.Property(e => e.TrUwagiDok)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_UwagiDok");
            entity.Property(e => e.TrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tr_Waluta");
            entity.Property(e => e.TrWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscBrutto");
            entity.Property(e => e.TrWartoscBruttoP)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscBruttoP");
            entity.Property(e => e.TrWartoscBruttoW)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("tr_WartoscBruttoW");
            entity.Property(e => e.TrWartoscNetto)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscNetto");
            entity.Property(e => e.TrWartoscNettoP)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscNettoP");
            entity.Property(e => e.TrWartoscNettoW)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("tr_WartoscNettoW");
            entity.Property(e => e.TrWartoscRecznie).HasColumnName("tr_WartoscRecznie");
            entity.Property(e => e.TrWartoscVat)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscVat");
            entity.Property(e => e.TrWartoscVatP)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscVatP");
            entity.Property(e => e.TrWartoscVatW)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("tr_WartoscVatW");
            entity.Property(e => e.TrWarunkiDostawy)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_WarunkiDostawy");
            entity.Property(e => e.TrWarunkiPlatnosci)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_WarunkiPlatnosci");
            entity.Property(e => e.TrZamowienie)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tr_Zamowienie");
            entity.Property(e => e.TrcId).HasColumnName("trc_Id");
            entity.Property(e => e.TrcNazwa)
                .HasMaxLength(50)
                .HasColumnName("trc_Nazwa");
            entity.Property(e => e.TrdId).HasColumnName("trd_Id");
            entity.Property(e => e.TrdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("trd_Nazwa");
            entity.Property(e => e.TrdProcentSukcesu).HasColumnName("trd_ProcentSukcesu");
            entity.Property(e => e.TreNazwa)
                .HasMaxLength(50)
                .HasColumnName("tre_Nazwa");
            entity.Property(e => e.TrgId).HasColumnName("trg_Id");
            entity.Property(e => e.TrgNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("trg_Nazwa");
            entity.Property(e => e.TrnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("trn_Nazwa");
            entity.Property(e => e.UzGaduOdKl)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("uz_GaduOdKl");
            entity.Property(e => e.UzMailOdKl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("uz_MailOdKl");
            entity.Property(e => e.UzNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("uz_Nazwa");
            entity.Property(e => e.UzNazwaOdKl)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("uz_NazwaOdKl");
            entity.Property(e => e.UzSkypeOdKl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uz_SkypeOdKl");
            entity.Property(e => e.UzTelefonOdKl)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("uz_TelefonOdKl");
            entity.Property(e => e.UzZmodyfikowal)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("uz_Zmodyfikowal");
        });

        modelBuilder.Entity<VwTransakcjaGrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransakcjaGrid");

            entity.Property(e => e.AdrNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("adr_NazwaPelna");
            entity.Property(e => e.AdrSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adr_Symbol");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.KhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("kh_Nazwa");
            entity.Property(e => e.TrDataModyfikacji)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataModyfikacji");
            entity.Property(e => e.TrDataOtwarcia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataOtwarcia");
            entity.Property(e => e.TrDataRealizacji)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_DataRealizacji");
            entity.Property(e => e.TrDataUtworzenia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataUtworzenia");
            entity.Property(e => e.TrDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("tr_DataZamkniecia");
            entity.Property(e => e.TrDniSpoznienia).HasColumnName("tr_DniSpoznienia");
            entity.Property(e => e.TrDokKoncowy).HasColumnName("tr_DokKoncowy");
            entity.Property(e => e.TrDokKoncowyId).HasColumnName("tr_DokKoncowyId");
            entity.Property(e => e.TrDokKoncowySymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_DokKoncowySymbol");
            entity.Property(e => e.TrDokZamowienie).HasColumnName("tr_DokZamowienie");
            entity.Property(e => e.TrDokZamowienieId).HasColumnName("tr_DokZamowienieId");
            entity.Property(e => e.TrDokZamowienieSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_DokZamowienieSymbol");
            entity.Property(e => e.TrEtap).HasColumnName("tr_Etap");
            entity.Property(e => e.TrId).HasColumnName("tr_Id");
            entity.Property(e => e.TrKlient).HasColumnName("tr_Klient");
            entity.Property(e => e.TrKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("tr_Kolor");
            entity.Property(e => e.TrKoncowy)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("tr_Koncowy");
            entity.Property(e => e.TrMaObsluzyc).HasColumnName("tr_MaObsluzyc");
            entity.Property(e => e.TrMaObsluzycOdKlienta).HasColumnName("tr_MaObsluzycOdKlienta");
            entity.Property(e => e.TrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_Nazwa");
            entity.Property(e => e.TrOferta).HasColumnName("tr_Oferta");
            entity.Property(e => e.TrPlanowanaDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("tr_PlanowanaDataZamkniecia");
            entity.Property(e => e.TrPlanowanaGodzinaZamkniecia).HasColumnName("tr_PlanowanaGodzinaZamkniecia");
            entity.Property(e => e.TrPlanowanyTerminZamknieciaStr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_PlanowanyTerminZamknieciaStr");
            entity.Property(e => e.TrPokazujWkal).HasColumnName("tr_PokazujWKal");
            entity.Property(e => e.TrPozostaloDni).HasColumnName("tr_PozostaloDni");
            entity.Property(e => e.TrPrzygotowal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tr_Przygotowal");
            entity.Property(e => e.TrStan).HasColumnName("tr_Stan");
            entity.Property(e => e.TrStatus).HasColumnName("tr_Status");
            entity.Property(e => e.TrStatusOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_StatusOpis");
            entity.Property(e => e.TrUwagiDok)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_UwagiDok");
            entity.Property(e => e.TrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tr_Waluta");
            entity.Property(e => e.TrWartoscBrutto)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscBrutto");
            entity.Property(e => e.TrWartoscBruttoP)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscBruttoP");
            entity.Property(e => e.TrWartoscBruttoW)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("tr_WartoscBruttoW");
            entity.Property(e => e.TrWartoscNetto)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscNetto");
            entity.Property(e => e.TrWartoscNettoP)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscNettoP");
            entity.Property(e => e.TrWartoscNettoW)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("tr_WartoscNettoW");
            entity.Property(e => e.TrWartoscRecznie).HasColumnName("tr_WartoscRecznie");
            entity.Property(e => e.TrWartoscVat)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscVat");
            entity.Property(e => e.TrWartoscVatP)
                .HasColumnType("money")
                .HasColumnName("tr_WartoscVatP");
            entity.Property(e => e.TrWartoscVatW)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("tr_WartoscVatW");
            entity.Property(e => e.TrWarunkiDostawy)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_WarunkiDostawy");
            entity.Property(e => e.TrWarunkiPlatnosci)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tr_WarunkiPlatnosci");
            entity.Property(e => e.TrZamowienie)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tr_Zamowienie");
            entity.Property(e => e.TrcId).HasColumnName("trc_Id");
            entity.Property(e => e.TrcNazwa)
                .HasMaxLength(50)
                .HasColumnName("trc_Nazwa");
            entity.Property(e => e.TrdId).HasColumnName("trd_Id");
            entity.Property(e => e.TrdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("trd_Nazwa");
            entity.Property(e => e.TrdProcentSukcesu).HasColumnName("trd_ProcentSukcesu");
            entity.Property(e => e.TreNazwa)
                .HasMaxLength(50)
                .HasColumnName("tre_Nazwa");
            entity.Property(e => e.TrgId).HasColumnName("trg_Id");
            entity.Property(e => e.TrgNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("trg_Nazwa");
            entity.Property(e => e.TrnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("trn_Nazwa");
            entity.Property(e => e.UzGaduOdKl)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("uz_GaduOdKl");
            entity.Property(e => e.UzMailOdKl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("uz_MailOdKl");
            entity.Property(e => e.UzNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("uz_Nazwa");
            entity.Property(e => e.UzNazwaOdKl)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("uz_NazwaOdKl");
            entity.Property(e => e.UzSkypeOdKl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("uz_SkypeOdKl");
            entity.Property(e => e.UzTelefonOdKl)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("uz_TelefonOdKl");
            entity.Property(e => e.UzZmodyfikowal)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("uz_Zmodyfikowal");
        });

        modelBuilder.Entity<VwTwInfStanyMag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTwInfStanyMag");

            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.SsStanDost)
                .HasColumnType("money")
                .HasColumnName("ss_StanDost");
            entity.Property(e => e.StMagId).HasColumnName("st_MagId");
            entity.Property(e => e.StStan)
                .HasColumnType("money")
                .HasColumnName("st_Stan");
            entity.Property(e => e.StStanRez)
                .HasColumnType("money")
                .HasColumnName("st_StanRez");
            entity.Property(e => e.StTowId).HasColumnName("st_TowId");
        });

        modelBuilder.Entity<VwTwParametrNazwaCeny>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTwParametrNazwaCeny");

            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.NazwaCeny)
                .HasMaxLength(56)
                .IsUnicode(false)
                .HasColumnName("NAZWA_CENY");
        });

        modelBuilder.Entity<VwUprawnieniaMagazynowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UprawnieniaMagazynowe");

            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<VwUrzadSkarbowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUrzadSkarbowy");

            entity.Property(e => e.SusId).HasColumnName("sus_id");
            entity.Property(e => e.SusKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("sus_kod");
            entity.Property(e => e.SusOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sus_Opis");
            entity.Property(e => e.SusOpisPelny)
                .HasMaxLength(266)
                .IsUnicode(false)
                .HasColumnName("sus_OpisPelny");
        });

        modelBuilder.Entity<VwUrzadzenie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUrzadzenie");

            entity.Property(e => e.UurId).HasColumnName("uur_Id");
            entity.Property(e => e.UurIdSterownik).HasColumnName("uur_IdSterownik");
            entity.Property(e => e.UurModel)
                .HasMaxLength(101)
                .IsUnicode(false)
                .HasColumnName("uur_Model");
            entity.Property(e => e.UurNazwa)
                .HasMaxLength(101)
                .IsUnicode(false)
                .HasColumnName("uur_Nazwa");
            entity.Property(e => e.UurOperacje).HasColumnName("uur_Operacje");
            entity.Property(e => e.UurTowarUf).HasColumnName("uur_TowarUF");
        });

        modelBuilder.Entity<VwVatspDoKorekty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVATSpDoKorekty");

            entity.Property(e => e.EvAutoPrzeliczaj).HasColumnName("ev_AutoPrzeliczaj");
            entity.Property(e => e.EvBrutto)
                .HasColumnType("money")
                .HasColumnName("ev_Brutto");
            entity.Property(e => e.EvCelZakupu).HasColumnName("ev_CelZakupu");
            entity.Property(e => e.EvDataPlatnosciRr)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataPlatnosciRR");
            entity.Property(e => e.EvDataSz)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataSZ");
            entity.Property(e => e.EvDataWpisu)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataWpisu");
            entity.Property(e => e.EvDataZakDostawy)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataZakDostawy");
            entity.Property(e => e.EvDokVatMarza).HasColumnName("ev_DokVatMarza");
            entity.Property(e => e.EvFakturaRr).HasColumnName("ev_FakturaRR");
            entity.Property(e => e.EvId).HasColumnName("ev_Id");
            entity.Property(e => e.EvIdDokImport).HasColumnName("ev_IdDokImport");
            entity.Property(e => e.EvIdDokVat).HasColumnName("ev_IdDokVAT");
            entity.Property(e => e.EvIdDokVatdod).HasColumnName("ev_IdDokVATDod");
            entity.Property(e => e.EvIdKategorii).HasColumnName("ev_IdKategorii");
            entity.Property(e => e.EvIdKh).HasColumnName("ev_IdKh");
            entity.Property(e => e.EvIdObiektu).HasColumnName("ev_IdObiektu");
            entity.Property(e => e.EvIdOkresuRoku).HasColumnName("ev_IdOkresuRoku");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiStatusuVat).HasColumnName("ev_IdOstatniWpisWeryfikacjiStatusuVAT");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiStatusuVies).HasColumnName("ev_IdOstatniWpisWeryfikacjiStatusuVIES");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiWykazPodatnikowVat).HasColumnName("ev_IdOstatniWpisWeryfikacjiWykazPodatnikowVAT");
            entity.Property(e => e.EvIdRachunkuZaPrzejazd).HasColumnName("ev_IdRachunkuZaPrzejazd");
            entity.Property(e => e.EvIdTerminPlatnosci).HasColumnName("ev_IdTerminPlatnosci");
            entity.Property(e => e.EvIdTypuEwidVat).HasColumnName("ev_IdTypuEwidVAT");
            entity.Property(e => e.EvImportPochodzenie).HasColumnName("ev_ImportPochodzenie");
            entity.Property(e => e.EvImportowany).HasColumnName("ev_Importowany");
            entity.Property(e => e.EvKodPocztowyKh)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ev_KodPocztowyKh");
            entity.Property(e => e.EvKorektaSn).HasColumnName("ev_KorektaSN");
            entity.Property(e => e.EvKorektaVatdataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATDataPlatnosci");
            entity.Property(e => e.EvKorektaVatdataWystawieniaDokKorygowany)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATDataWystawieniaDokKorygowany");
            entity.Property(e => e.EvKorektaVatidDokKorygowany).HasColumnName("ev_KorektaVATIdDokKorygowany");
            entity.Property(e => e.EvKorektaVatnrDokKorygowany)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ev_KorektaVATNrDokKorygowany");
            entity.Property(e => e.EvKorektaVatplatnoscCzesciowa).HasColumnName("ev_KorektaVATPlatnoscCzesciowa");
            entity.Property(e => e.EvKorektaVatterminKorekty)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATTerminKorekty");
            entity.Property(e => e.EvKorektaVatterminPlatnosciDokKorygowany)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATTerminPlatnosciDokKorygowany");
            entity.Property(e => e.EvKorektaVattyp).HasColumnName("ev_KorektaVATTyp");
            entity.Property(e => e.EvKsiegowany).HasColumnName("ev_Ksiegowany");
            entity.Property(e => e.EvKwotaVat)
                .HasColumnType("money")
                .HasColumnName("ev_KwotaVAT");
            entity.Property(e => e.EvMalyPojazd).HasColumnName("ev_MalyPojazd");
            entity.Property(e => e.EvMiastoKh)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ev_MiastoKh");
            entity.Property(e => e.EvMiesiacOdliczVat)
                .HasColumnType("datetime")
                .HasColumnName("ev_MiesiacOdliczVAT");
            entity.Property(e => e.EvNazwaKh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ev_NazwaKh");
            entity.Property(e => e.EvNazwaPelnaKh)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_NazwaPelnaKh");
            entity.Property(e => e.EvNetto)
                .HasColumnType("money")
                .HasColumnName("ev_Netto");
            entity.Property(e => e.EvNieWliczanyDoPb).HasColumnName("ev_NieWliczanyDoPB");
            entity.Property(e => e.EvNipkh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ev_NIPKh");
            entity.Property(e => e.EvNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ev_NrDokumentu");
            entity.Property(e => e.EvNrDokumentuSort)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_NrDokumentuSort");
            entity.Property(e => e.EvOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_Opis");
            entity.Property(e => e.EvPlatnoscKredyt).HasColumnName("ev_PlatnoscKredyt");
            entity.Property(e => e.EvPodtypDok).HasColumnName("ev_PodtypDok");
            entity.Property(e => e.EvPrzypadekSzczegolnyPit).HasColumnName("ev_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.EvRodzaj).HasColumnName("ev_Rodzaj");
            entity.Property(e => e.EvRodzajZakupu).HasColumnName("ev_RodzajZakupu");
            entity.Property(e => e.EvRozliczanaUsluga).HasColumnName("ev_RozliczanaUsluga");
            entity.Property(e => e.EvSposobOdliczania).HasColumnName("ev_SposobOdliczania");
            entity.Property(e => e.EvTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("ev_TerminPlatnosci");
            entity.Property(e => e.EvTransakcjaVat).HasColumnName("ev_TransakcjaVAT");
            entity.Property(e => e.EvTypDokImport).HasColumnName("ev_TypDokImport");
            entity.Property(e => e.EvTypObiektu).HasColumnName("ev_TypObiektu");
            entity.Property(e => e.EvUlicaKh)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ev_UlicaKh");
            entity.Property(e => e.EvUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ev_Uwagi");
            entity.Property(e => e.EvVatMetodaKasowa).HasColumnName("ev_VatMetodaKasowa");
            entity.Property(e => e.EvWartoscVatmarza)
                .HasColumnType("money")
                .HasColumnName("ev_WartoscVATMarza");
            entity.Property(e => e.EvWlaczKorygowanieVat).HasColumnName("ev_WlaczKorygowanieVAT");
            entity.Property(e => e.TmpPonownieZaliczony).HasColumnName("tmp_PonownieZaliczony");
            entity.Property(e => e.TmpSkorygowany).HasColumnName("tmp_Skorygowany");
        });

        modelBuilder.Entity<VwVatzakDoKorekty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVATZakDoKorekty");

            entity.Property(e => e.EvAutoPrzeliczaj).HasColumnName("ev_AutoPrzeliczaj");
            entity.Property(e => e.EvBrutto)
                .HasColumnType("money")
                .HasColumnName("ev_Brutto");
            entity.Property(e => e.EvCelZakupu).HasColumnName("ev_CelZakupu");
            entity.Property(e => e.EvDataPlatnosciRr)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataPlatnosciRR");
            entity.Property(e => e.EvDataSz)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataSZ");
            entity.Property(e => e.EvDataWpisu)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataWpisu");
            entity.Property(e => e.EvDataZakDostawy)
                .HasColumnType("datetime")
                .HasColumnName("ev_DataZakDostawy");
            entity.Property(e => e.EvDokVatMarza).HasColumnName("ev_DokVatMarza");
            entity.Property(e => e.EvFakturaRr).HasColumnName("ev_FakturaRR");
            entity.Property(e => e.EvId).HasColumnName("ev_Id");
            entity.Property(e => e.EvIdDokImport).HasColumnName("ev_IdDokImport");
            entity.Property(e => e.EvIdDokVat).HasColumnName("ev_IdDokVAT");
            entity.Property(e => e.EvIdDokVatdod).HasColumnName("ev_IdDokVATDod");
            entity.Property(e => e.EvIdKategorii).HasColumnName("ev_IdKategorii");
            entity.Property(e => e.EvIdKh).HasColumnName("ev_IdKh");
            entity.Property(e => e.EvIdObiektu).HasColumnName("ev_IdObiektu");
            entity.Property(e => e.EvIdOkresuRoku).HasColumnName("ev_IdOkresuRoku");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiStatusuVat).HasColumnName("ev_IdOstatniWpisWeryfikacjiStatusuVAT");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiStatusuVies).HasColumnName("ev_IdOstatniWpisWeryfikacjiStatusuVIES");
            entity.Property(e => e.EvIdOstatniWpisWeryfikacjiWykazPodatnikowVat).HasColumnName("ev_IdOstatniWpisWeryfikacjiWykazPodatnikowVAT");
            entity.Property(e => e.EvIdRachunkuZaPrzejazd).HasColumnName("ev_IdRachunkuZaPrzejazd");
            entity.Property(e => e.EvIdTerminPlatnosci).HasColumnName("ev_IdTerminPlatnosci");
            entity.Property(e => e.EvIdTypuEwidVat).HasColumnName("ev_IdTypuEwidVAT");
            entity.Property(e => e.EvImportPochodzenie).HasColumnName("ev_ImportPochodzenie");
            entity.Property(e => e.EvImportowany).HasColumnName("ev_Importowany");
            entity.Property(e => e.EvKodPocztowyKh)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ev_KodPocztowyKh");
            entity.Property(e => e.EvKorektaSn).HasColumnName("ev_KorektaSN");
            entity.Property(e => e.EvKorektaVatdataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATDataPlatnosci");
            entity.Property(e => e.EvKorektaVatdataWystawieniaDokKorygowany)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATDataWystawieniaDokKorygowany");
            entity.Property(e => e.EvKorektaVatidDokKorygowany).HasColumnName("ev_KorektaVATIdDokKorygowany");
            entity.Property(e => e.EvKorektaVatnrDokKorygowany)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ev_KorektaVATNrDokKorygowany");
            entity.Property(e => e.EvKorektaVatplatnoscCzesciowa).HasColumnName("ev_KorektaVATPlatnoscCzesciowa");
            entity.Property(e => e.EvKorektaVatterminKorekty)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATTerminKorekty");
            entity.Property(e => e.EvKorektaVatterminPlatnosciDokKorygowany)
                .HasColumnType("datetime")
                .HasColumnName("ev_KorektaVATTerminPlatnosciDokKorygowany");
            entity.Property(e => e.EvKorektaVattyp).HasColumnName("ev_KorektaVATTyp");
            entity.Property(e => e.EvKsiegowany).HasColumnName("ev_Ksiegowany");
            entity.Property(e => e.EvKwotaVat)
                .HasColumnType("money")
                .HasColumnName("ev_KwotaVAT");
            entity.Property(e => e.EvMalyPojazd).HasColumnName("ev_MalyPojazd");
            entity.Property(e => e.EvMiastoKh)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ev_MiastoKh");
            entity.Property(e => e.EvMiesiacOdliczVat)
                .HasColumnType("datetime")
                .HasColumnName("ev_MiesiacOdliczVAT");
            entity.Property(e => e.EvNazwaKh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ev_NazwaKh");
            entity.Property(e => e.EvNazwaPelnaKh)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_NazwaPelnaKh");
            entity.Property(e => e.EvNetto)
                .HasColumnType("money")
                .HasColumnName("ev_Netto");
            entity.Property(e => e.EvNieWliczanyDoPb).HasColumnName("ev_NieWliczanyDoPB");
            entity.Property(e => e.EvNipkh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ev_NIPKh");
            entity.Property(e => e.EvNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ev_NrDokumentu");
            entity.Property(e => e.EvNrDokumentuSort)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_NrDokumentuSort");
            entity.Property(e => e.EvOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ev_Opis");
            entity.Property(e => e.EvPlatnoscKredyt).HasColumnName("ev_PlatnoscKredyt");
            entity.Property(e => e.EvPodtypDok).HasColumnName("ev_PodtypDok");
            entity.Property(e => e.EvPrzypadekSzczegolnyPit).HasColumnName("ev_PrzypadekSzczegolnyPIT");
            entity.Property(e => e.EvRodzaj).HasColumnName("ev_Rodzaj");
            entity.Property(e => e.EvRodzajZakupu).HasColumnName("ev_RodzajZakupu");
            entity.Property(e => e.EvRozliczanaUsluga).HasColumnName("ev_RozliczanaUsluga");
            entity.Property(e => e.EvSposobOdliczania).HasColumnName("ev_SposobOdliczania");
            entity.Property(e => e.EvTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("ev_TerminPlatnosci");
            entity.Property(e => e.EvTransakcjaVat).HasColumnName("ev_TransakcjaVAT");
            entity.Property(e => e.EvTypDokImport).HasColumnName("ev_TypDokImport");
            entity.Property(e => e.EvTypObiektu).HasColumnName("ev_TypObiektu");
            entity.Property(e => e.EvUlicaKh)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ev_UlicaKh");
            entity.Property(e => e.EvUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ev_Uwagi");
            entity.Property(e => e.EvVatMetodaKasowa).HasColumnName("ev_VatMetodaKasowa");
            entity.Property(e => e.EvWartoscVatmarza)
                .HasColumnType("money")
                .HasColumnName("ev_WartoscVATMarza");
            entity.Property(e => e.EvWlaczKorygowanieVat).HasColumnName("ev_WlaczKorygowanieVAT");
            entity.Property(e => e.TmpPonownieZaliczony).HasColumnName("tmp_PonownieZaliczony");
            entity.Property(e => e.TmpSkorygowany).HasColumnName("tmp_Skorygowany");
        });

        modelBuilder.Entity<VwWiarygodnaSciezkaAudytu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWiarygodnaSciezkaAudytu");

            entity.Property(e => e.DataWyst).HasColumnType("datetime");
            entity.Property(e => e.Kategoria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Kontrahent)
                .HasMaxLength(53)
                .IsUnicode(false);
            entity.Property(e => e.Nazwa)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Numer)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.WartoscBrutto).HasColumnType("money");
            entity.Property(e => e.WartoscNetto).HasColumnType("money");
            entity.Property(e => e.Wystawil)
                .HasMaxLength(53)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwWyciagiBankowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWyciagiBankowe");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DataZatwierdzenia)
                .HasColumnType("datetime")
                .HasColumnName("DATA_ZATWIERDZENIA");
            entity.Property(e => e.IdKategorii).HasColumnName("ID_KATEGORII");
            entity.Property(e => e.IdRachunku).HasColumnName("ID_RACHUNKU");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Kategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KATEGORIA");
            entity.Property(e => e.NazwaBanku)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NAZWA_BANKU");
            entity.Property(e => e.NazwaRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAZWA_RACHUNKU");
            entity.Property(e => e.NrWyciaguHb)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NR_WYCIAGU_HB");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.NumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMER_RACHUNKU");
            entity.Property(e => e.OkresDo)
                .HasColumnType("datetime")
                .HasColumnName("OKRES_DO");
            entity.Property(e => e.OkresOd)
                .HasColumnType("datetime")
                .HasColumnName("OKRES_OD");
            entity.Property(e => e.Persaldo)
                .HasColumnType("money")
                .HasColumnName("PERSALDO");
            entity.Property(e => e.Program).HasColumnName("PROGRAM");
            entity.Property(e => e.SaldoKoncowe)
                .HasColumnType("money")
                .HasColumnName("SALDO_KONCOWE");
            entity.Property(e => e.SaldoPoczatkowe)
                .HasColumnType("money")
                .HasColumnName("SALDO_POCZATKOWE");
            entity.Property(e => e.SsDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("ss_data_zamkniecia");
            entity.Property(e => e.StatusKsiegowy).HasColumnName("STATUS_KSIEGOWY");
            entity.Property(e => e.Waluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WALUTA");
            entity.Property(e => e.Wystawil)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("WYSTAWIL");
            entity.Property(e => e.Zamkniety).HasColumnName("ZAMKNIETY");
            entity.Property(e => e.Zatwierdzil)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("ZATWIERDZIL");
            entity.Property(e => e.Zatwierdzony).HasColumnName("ZATWIERDZONY");
        });

        modelBuilder.Entity<VwWyciagiBankoweLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWyciagiBankoweLookup");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.IdKategorii).HasColumnName("ID_KATEGORII");
            entity.Property(e => e.IdRachunku).HasColumnName("ID_RACHUNKU");
            entity.Property(e => e.IdWyciaguHb).HasColumnName("ID_WYCIAGU_HB");
            entity.Property(e => e.Ident).HasColumnName("IDENT");
            entity.Property(e => e.Kategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KATEGORIA");
            entity.Property(e => e.NazwaBanku)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NAZWA_BANKU");
            entity.Property(e => e.NazwaRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAZWA_RACHUNKU");
            entity.Property(e => e.NrWyciaguHb)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NR_WYCIAGU_HB");
            entity.Property(e => e.Numer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NUMER");
            entity.Property(e => e.NumerRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMER_RACHUNKU");
            entity.Property(e => e.OkresDo)
                .HasColumnType("datetime")
                .HasColumnName("OKRES_DO");
            entity.Property(e => e.OkresOd)
                .HasColumnType("datetime")
                .HasColumnName("OKRES_OD");
            entity.Property(e => e.Persaldo)
                .HasColumnType("money")
                .HasColumnName("PERSALDO");
            entity.Property(e => e.SaldoKoncowe)
                .HasColumnType("money")
                .HasColumnName("SALDO_KONCOWE");
            entity.Property(e => e.SaldoPoczatkowe)
                .HasColumnType("money")
                .HasColumnName("SALDO_POCZATKOWE");
            entity.Property(e => e.StatusKsiegowy).HasColumnName("STATUS_KSIEGOWY");
            entity.Property(e => e.Waluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WALUTA");
        });

        modelBuilder.Entity<VwWyszukiwanieKlienciPersonel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_WyszukiwanieKlienciPersonel");

            entity.Property(e => e.AdrId).HasColumnName("adr_Id");
            entity.Property(e => e.KhxEntry)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("khx_Entry");
        });

        modelBuilder.Entity<VwWzorzec>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Wzorzec");

            entity.Property(e => e.WzwId).HasColumnName("wzw_Id");
            entity.Property(e => e.WzwIloscKopii).HasColumnName("wzw_IloscKopii");
            entity.Property(e => e.WzwJezyk).HasColumnName("wzw_Jezyk");
            entity.Property(e => e.WzwNaglowekRaportuId).HasColumnName("wzw_NaglowekRaportuId");
            entity.Property(e => e.WzwNaglowekStronyId).HasColumnName("wzw_NaglowekStronyId");
            entity.Property(e => e.WzwNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("wzw_Nazwa");
            entity.Property(e => e.WzwStatusNowosci).HasColumnName("wzw_StatusNowosci");
            entity.Property(e => e.WzwStopkaRaportuId).HasColumnName("wzw_StopkaRaportuId");
            entity.Property(e => e.WzwStopkaStronyId).HasColumnName("wzw_StopkaStronyId");
            entity.Property(e => e.WzwTyp).HasColumnName("wzw_Typ");
            entity.Property(e => e.WzwTypPliku).HasColumnName("wzw_TypPliku");
            entity.Property(e => e.WzwUkladStrony).HasColumnName("wzw_UkladStrony");
            entity.Property(e => e.WzwWersja)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("wzw_Wersja");
            entity.Property(e => e.WzwWysuwajStrone).HasColumnName("wzw_WysuwajStrone");
            entity.Property(e => e.WzwZablokowany).HasColumnName("wzw_Zablokowany");
            entity.Property(e => e.WzwZrodlo).HasColumnName("wzw_Zrodlo");
        });

        modelBuilder.Entity<VwZadanie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Zadanie");

            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.PtzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ptz_Nazwa");
            entity.Property(e => e.TrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_Nazwa");
            entity.Property(e => e.TrSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_Symbol");
            entity.Property(e => e.VwPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("vw_Poczatek");
            entity.Property(e => e.ZdBezCzasu).HasColumnName("zd_BezCzasu");
            entity.Property(e => e.ZdCalyDzien).HasColumnName("zd_CalyDzien");
            entity.Property(e => e.ZdCoIle).HasColumnName("zd_CoIle");
            entity.Property(e => e.ZdCykliczne).HasColumnName("zd_Cykliczne");
            entity.Property(e => e.ZdDefinicjaZlozona).HasColumnName("zd_DefinicjaZlozona");
            entity.Property(e => e.ZdDniTygodnia).HasColumnName("zd_DniTygodnia");
            entity.Property(e => e.ZdDzienMiesiaca).HasColumnName("zd_DzienMiesiaca");
            entity.Property(e => e.ZdDzienPorzadek).HasColumnName("zd_DzienPorzadek");
            entity.Property(e => e.ZdDzienRodzaj).HasColumnName("zd_DzienRodzaj");
            entity.Property(e => e.ZdFormaDzialaniaWindykacyjnego).HasColumnName("zd_FormaDzialaniaWindykacyjnego");
            entity.Property(e => e.ZdId).HasColumnName("zd_Id");
            entity.Property(e => e.ZdIlePowtorzen).HasColumnName("zd_IlePowtorzen");
            entity.Property(e => e.ZdInterwal).HasColumnName("zd_Interwal");
            entity.Property(e => e.ZdKierunek).HasColumnName("zd_Kierunek");
            entity.Property(e => e.ZdKlasa).HasColumnName("zd_Klasa");
            entity.Property(e => e.ZdKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("zd_Kolor");
            entity.Property(e => e.ZdKoniec)
                .HasColumnType("datetime")
                .HasColumnName("zd_Koniec");
            entity.Property(e => e.ZdKoniecPowtorzen)
                .HasColumnType("datetime")
                .HasColumnName("zd_KoniecPowtorzen");
            entity.Property(e => e.ZdLiczbaUczestnikowBezPersonelu).HasColumnName("zd_LiczbaUczestnikowBezPersonelu");
            entity.Property(e => e.ZdLiczbaUczestnikowWszystkich).HasColumnName("zd_LiczbaUczestnikowWszystkich");
            entity.Property(e => e.ZdLokalizacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("zd_Lokalizacja");
            entity.Property(e => e.ZdMiesiac).HasColumnName("zd_Miesiac");
            entity.Property(e => e.ZdNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zd_NastepnePrzypomnienie");
            entity.Property(e => e.ZdPersonel).HasColumnName("zd_Personel");
            entity.Property(e => e.ZdPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("zd_Poczatek");
            entity.Property(e => e.ZdPodtyp).HasColumnName("zd_Podtyp");
            entity.Property(e => e.ZdPokazujWkalendarzu).HasColumnName("zd_PokazujWKalendarzu");
            entity.Property(e => e.ZdPozostalo).HasColumnName("zd_Pozostalo");
            entity.Property(e => e.ZdPriorytet).HasColumnName("zd_Priorytet");
            entity.Property(e => e.ZdPrywatne).HasColumnName("zd_Prywatne");
            entity.Property(e => e.ZdPrzypomniane).HasColumnName("zd_Przypomniane");
            entity.Property(e => e.ZdRezultat).HasColumnName("zd_Rezultat");
            entity.Property(e => e.ZdRobocze).HasColumnName("zd_Robocze");
            entity.Property(e => e.ZdRodzaj).HasColumnName("zd_Rodzaj");
            entity.Property(e => e.ZdRodzajPowtorzen).HasColumnName("zd_RodzajPowtorzen");
            entity.Property(e => e.ZdTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("zd_Temat");
            entity.Property(e => e.ZdTransakcja).HasColumnName("zd_Transakcja");
            entity.Property(e => e.ZdUczestnicy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Uczestnicy");
            entity.Property(e => e.ZdUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Uwagi");
            entity.Property(e => e.ZdWystapienieDoPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("zd_WystapienieDoPrzypomnienia");
            entity.Property(e => e.ZdvwNotatkaZakonczona).HasColumnName("zdvw_NotatkaZakonczona");
            entity.Property(e => e.ZdvwStatus).HasColumnName("zdvw_Status");
        });

        modelBuilder.Entity<VwZadanieWindykacyjne>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ZadanieWindykacyjne");

            entity.Property(e => e.FdwNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fdw_Nazwa");
            entity.Property(e => e.ZdIdWind).HasColumnName("zd_IdWind");
            entity.Property(e => e.ZdNotaOdsetkowa).HasColumnName("zd_NotaOdsetkowa");
            entity.Property(e => e.ZdTypDokumentu).HasColumnName("zd_TypDokumentu");
            entity.Property(e => e.ZdTypDokumentuOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("zd_TypDokumentuOpis");
            entity.Property(e => e.ZdWezwanieDoZaplaty).HasColumnName("zd_WezwanieDoZaplaty");
        });

        modelBuilder.Entity<VwZadanieWindykacyjneEx>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ZadanieWindykacyjneEx");

            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.FdwNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fdw_Nazwa");
            entity.Property(e => e.PtzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ptz_Nazwa");
            entity.Property(e => e.TrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_Nazwa");
            entity.Property(e => e.TrSymbol)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tr_Symbol");
            entity.Property(e => e.VwPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("vw_Poczatek");
            entity.Property(e => e.ZdBezCzasu).HasColumnName("zd_BezCzasu");
            entity.Property(e => e.ZdCalyDzien).HasColumnName("zd_CalyDzien");
            entity.Property(e => e.ZdCoIle).HasColumnName("zd_CoIle");
            entity.Property(e => e.ZdCykliczne).HasColumnName("zd_Cykliczne");
            entity.Property(e => e.ZdDefinicjaZlozona).HasColumnName("zd_DefinicjaZlozona");
            entity.Property(e => e.ZdDniTygodnia).HasColumnName("zd_DniTygodnia");
            entity.Property(e => e.ZdDzienMiesiaca).HasColumnName("zd_DzienMiesiaca");
            entity.Property(e => e.ZdDzienPorzadek).HasColumnName("zd_DzienPorzadek");
            entity.Property(e => e.ZdDzienRodzaj).HasColumnName("zd_DzienRodzaj");
            entity.Property(e => e.ZdFormaDzialaniaWindykacyjnego).HasColumnName("zd_FormaDzialaniaWindykacyjnego");
            entity.Property(e => e.ZdId).HasColumnName("zd_Id");
            entity.Property(e => e.ZdIdWind).HasColumnName("zd_IdWind");
            entity.Property(e => e.ZdIlePowtorzen).HasColumnName("zd_IlePowtorzen");
            entity.Property(e => e.ZdInterwal).HasColumnName("zd_Interwal");
            entity.Property(e => e.ZdKierunek).HasColumnName("zd_Kierunek");
            entity.Property(e => e.ZdKlasa).HasColumnName("zd_Klasa");
            entity.Property(e => e.ZdKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("zd_Kolor");
            entity.Property(e => e.ZdKoniec)
                .HasColumnType("datetime")
                .HasColumnName("zd_Koniec");
            entity.Property(e => e.ZdKoniecPowtorzen)
                .HasColumnType("datetime")
                .HasColumnName("zd_KoniecPowtorzen");
            entity.Property(e => e.ZdLiczbaUczestnikowBezPersonelu).HasColumnName("zd_LiczbaUczestnikowBezPersonelu");
            entity.Property(e => e.ZdLiczbaUczestnikowWszystkich).HasColumnName("zd_LiczbaUczestnikowWszystkich");
            entity.Property(e => e.ZdLokalizacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("zd_Lokalizacja");
            entity.Property(e => e.ZdMiesiac).HasColumnName("zd_Miesiac");
            entity.Property(e => e.ZdNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zd_NastepnePrzypomnienie");
            entity.Property(e => e.ZdNotaOdsetkowa).HasColumnName("zd_NotaOdsetkowa");
            entity.Property(e => e.ZdPersonel).HasColumnName("zd_Personel");
            entity.Property(e => e.ZdPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("zd_Poczatek");
            entity.Property(e => e.ZdPodtyp).HasColumnName("zd_Podtyp");
            entity.Property(e => e.ZdPokazujWkalendarzu).HasColumnName("zd_PokazujWKalendarzu");
            entity.Property(e => e.ZdPozostalo).HasColumnName("zd_Pozostalo");
            entity.Property(e => e.ZdPriorytet).HasColumnName("zd_Priorytet");
            entity.Property(e => e.ZdPrywatne).HasColumnName("zd_Prywatne");
            entity.Property(e => e.ZdPrzypomniane).HasColumnName("zd_Przypomniane");
            entity.Property(e => e.ZdRezultat).HasColumnName("zd_Rezultat");
            entity.Property(e => e.ZdRobocze).HasColumnName("zd_Robocze");
            entity.Property(e => e.ZdRodzaj).HasColumnName("zd_Rodzaj");
            entity.Property(e => e.ZdRodzajPowtorzen).HasColumnName("zd_RodzajPowtorzen");
            entity.Property(e => e.ZdTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("zd_Temat");
            entity.Property(e => e.ZdTransakcja).HasColumnName("zd_Transakcja");
            entity.Property(e => e.ZdTypDokumentu).HasColumnName("zd_TypDokumentu");
            entity.Property(e => e.ZdTypDokumentuOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("zd_TypDokumentuOpis");
            entity.Property(e => e.ZdUczestnicy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Uczestnicy");
            entity.Property(e => e.ZdUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Uwagi");
            entity.Property(e => e.ZdWezwanieDoZaplaty).HasColumnName("zd_WezwanieDoZaplaty");
            entity.Property(e => e.ZdvwNotatkaZakonczona).HasColumnName("zdvw_NotatkaZakonczona");
            entity.Property(e => e.ZdvwStatus).HasColumnName("zdvw_Status");
        });

        modelBuilder.Entity<VwZbiorczaPozycja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZbiorcza_Pozycja");

            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZbiorczaPozycjaDod>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZbiorcza_Pozycja_Dod");

            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZbiorczaPozycjaEx>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZbiorcza_PozycjaEx");

            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObIloscMagPdst)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMagPdst");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZbiorczaPozycjaHan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZbiorcza_PozycjaHan");

            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZdjecieTowaru>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZdjecieTowaru");

            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.ZdZdjecie)
                .HasColumnType("image")
                .HasColumnName("zd_Zdjecie");
        });

        modelBuilder.Entity<VwZestDefDokSprzedazy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZestDef_DokSprzedazy");

            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_CenyDataKursu");
            entity.Property(e => e.DokCenyIdBanku).HasColumnName("dok_CenyIdBanku");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyLiczbaJednostek).HasColumnName("dok_CenyLiczbaJednostek");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyRodzajKursu).HasColumnName("dok_CenyRodzajKursu");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokObiektGt).HasColumnName("dok_ObiektGT");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRejId).HasColumnName("dok_RejId");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokRozliczony).HasColumnName("dok_Rozliczony");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokTerminRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("dok_TerminRealizacji");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaDataKursu)
                .HasColumnType("datetime")
                .HasColumnName("dok_WalutaDataKursu");
            entity.Property(e => e.DokWalutaIdBanku).HasColumnName("dok_WalutaIdBanku");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWalutaLiczbaJednostek).HasColumnName("dok_WalutaLiczbaJednostek");
            entity.Property(e => e.DokWalutaRodzajKursu).HasColumnName("dok_WalutaRodzajKursu");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
        });

        modelBuilder.Entity<VwZestDefKontrahenci>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZestDef_Kontrahenci");

            entity.Property(e => e.AdrAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adr_Adres");
            entity.Property(e => e.AdrFaks)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("adr_Faks");
            entity.Property(e => e.AdrGmina)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Gmina");
            entity.Property(e => e.AdrId).HasColumnName("adr_Id");
            entity.Property(e => e.AdrIdGminy).HasColumnName("adr_IdGminy");
            entity.Property(e => e.AdrIdObiektu).HasColumnName("adr_IdObiektu");
            entity.Property(e => e.AdrIdPanstwo).HasColumnName("adr_IdPanstwo");
            entity.Property(e => e.AdrIdWojewodztwo).HasColumnName("adr_IdWojewodztwo");
            entity.Property(e => e.AdrKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("adr_Kod");
            entity.Property(e => e.AdrMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Miejscowosc");
            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.AdrNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("adr_NazwaPelna");
            entity.Property(e => e.AdrNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adr_NIP");
            entity.Property(e => e.AdrNrDomu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("adr_NrDomu");
            entity.Property(e => e.AdrNrLokalu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("adr_NrLokalu");
            entity.Property(e => e.AdrPoczta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Poczta");
            entity.Property(e => e.AdrPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adr_Powiat");
            entity.Property(e => e.AdrSkrytka)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("adr_Skrytka");
            entity.Property(e => e.AdrSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adr_Symbol");
            entity.Property(e => e.AdrTelefon)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("adr_Telefon");
            entity.Property(e => e.AdrTypAdresu).HasColumnName("adr_TypAdresu");
            entity.Property(e => e.AdrUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("adr_Ulica");
            entity.Property(e => e.KhAdresKoresp).HasColumnName("kh_AdresKoresp");
            entity.Property(e => e.KhCena).HasColumnName("kh_Cena");
            entity.Property(e => e.KhCentrumAut).HasColumnName("kh_CentrumAut");
            entity.Property(e => e.KhCzyKomunikat).HasColumnName("kh_CzyKomunikat");
            entity.Property(e => e.KhDataVat)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataVAT");
            entity.Property(e => e.KhDataWaznosciVat)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataWaznosciVAT");
            entity.Property(e => e.KhDataWyd)
                .HasColumnType("datetime")
                .HasColumnName("kh_DataWyd");
            entity.Property(e => e.KhEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_EMail");
            entity.Property(e => e.KhEwVatspMcOdliczenia).HasColumnName("kh_EwVATSpMcOdliczenia");
            entity.Property(e => e.KhEwVatzakMcOdliczenia).HasColumnName("kh_EwVATZakMcOdliczenia");
            entity.Property(e => e.KhEwVatzakRodzaj).HasColumnName("kh_EwVATZakRodzaj");
            entity.Property(e => e.KhEwVatzakSposobOdliczenia).HasColumnName("kh_EwVATZakSposobOdliczenia");
            entity.Property(e => e.KhGrafika)
                .HasColumnType("image")
                .HasColumnName("kh_Grafika");
            entity.Property(e => e.KhId).HasColumnName("kh_Id");
            entity.Property(e => e.KhIdEwVatsp).HasColumnName("kh_IdEwVATSp");
            entity.Property(e => e.KhIdEwVatspKateg).HasColumnName("kh_IdEwVATSpKateg");
            entity.Property(e => e.KhIdEwVatzak).HasColumnName("kh_IdEwVATZak");
            entity.Property(e => e.KhIdEwVatzakKateg).HasColumnName("kh_IdEwVATZakKateg");
            entity.Property(e => e.KhIdFormaP).HasColumnName("kh_IdFormaP");
            entity.Property(e => e.KhIdGrupa).HasColumnName("kh_IdGrupa");
            entity.Property(e => e.KhIdKategoriaKh).HasColumnName("kh_IdKategoriaKH");
            entity.Property(e => e.KhIdOdbiorca).HasColumnName("kh_IdOdbiorca");
            entity.Property(e => e.KhIdOsobaDo).HasColumnName("kh_IdOsobaDO");
            entity.Property(e => e.KhIdRabat).HasColumnName("kh_IdRabat");
            entity.Property(e => e.KhIdRachKategPrzychod).HasColumnName("kh_IdRachKategPrzychod");
            entity.Property(e => e.KhIdRachKategRozchod).HasColumnName("kh_IdRachKategRozchod");
            entity.Property(e => e.KhInstKredytowa).HasColumnName("kh_InstKredytowa");
            entity.Property(e => e.KhJednorazowy).HasColumnName("kh_Jednorazowy");
            entity.Property(e => e.KhKomunikat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_Komunikat");
            entity.Property(e => e.KhKomunikatOd)
                .HasColumnType("datetime")
                .HasColumnName("kh_KomunikatOd");
            entity.Property(e => e.KhKomunikatZawsze).HasColumnName("kh_KomunikatZawsze");
            entity.Property(e => e.KhKontakt)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("kh_Kontakt");
            entity.Property(e => e.KhMaxDniSp).HasColumnName("kh_MaxDniSp");
            entity.Property(e => e.KhMaxDokKred).HasColumnName("kh_MaxDokKred");
            entity.Property(e => e.KhMaxWartDokKred)
                .HasColumnType("money")
                .HasColumnName("kh_MaxWartDokKred");
            entity.Property(e => e.KhMaxWartKred)
                .HasColumnType("money")
                .HasColumnName("kh_MaxWartKred");
            entity.Property(e => e.KhNrAnalitykaD)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("kh_NrAnalitykaD");
            entity.Property(e => e.KhNrAnalitykaO)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("kh_NrAnalitykaO");
            entity.Property(e => e.KhNrDowodu)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_NrDowodu");
            entity.Property(e => e.KhOdbDet).HasColumnName("kh_OdbDet");
            entity.Property(e => e.KhOpisOperacji)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_OpisOperacji");
            entity.Property(e => e.KhOrganWyd)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_OrganWyd");
            entity.Property(e => e.KhOsobaVat).HasColumnName("kh_OsobaVAT");
            entity.Property(e => e.KhPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("kh_PESEL");
            entity.Property(e => e.KhPlatOdroczone).HasColumnName("kh_PlatOdroczone");
            entity.Property(e => e.KhPlatPrzelew).HasColumnName("kh_PlatPrzelew");
            entity.Property(e => e.KhPodVatzarejestrowanyWue).HasColumnName("kh_PodVATZarejestrowanyWUE");
            entity.Property(e => e.KhPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole1");
            entity.Property(e => e.KhPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole2");
            entity.Property(e => e.KhPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole3");
            entity.Property(e => e.KhPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole4");
            entity.Property(e => e.KhPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole5");
            entity.Property(e => e.KhPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole6");
            entity.Property(e => e.KhPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole7");
            entity.Property(e => e.KhPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_Pole8");
            entity.Property(e => e.KhPracownik)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("kh_Pracownik");
            entity.Property(e => e.KhPrefKontakt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kh_PrefKontakt");
            entity.Property(e => e.KhProcGotowka)
                .HasColumnType("money")
                .HasColumnName("kh_ProcGotowka");
            entity.Property(e => e.KhProcKarta)
                .HasColumnType("money")
                .HasColumnName("kh_ProcKarta");
            entity.Property(e => e.KhProcKredyt)
                .HasColumnType("money")
                .HasColumnName("kh_ProcKredyt");
            entity.Property(e => e.KhProcPozostalo)
                .HasColumnType("money")
                .HasColumnName("kh_ProcPozostalo");
            entity.Property(e => e.KhRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_REGON");
            entity.Property(e => e.KhRodzaj).HasColumnName("kh_Rodzaj");
            entity.Property(e => e.KhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kh_Symbol");
            entity.Property(e => e.KhTransakcjaVatsp).HasColumnName("kh_TransakcjaVATSp");
            entity.Property(e => e.KhTransakcjaVatzak).HasColumnName("kh_TransakcjaVATZak");
            entity.Property(e => e.KhUpowaznienieVat).HasColumnName("kh_UpowaznienieVAT");
            entity.Property(e => e.KhUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_Uwagi");
            entity.Property(e => e.KhWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("kh_WWW");
            entity.Property(e => e.KhZablokowany).HasColumnName("kh_Zablokowany");
            entity.Property(e => e.KhZgodaDo).HasColumnName("kh_ZgodaDO");
            entity.Property(e => e.KhZgodaEmail).HasColumnName("kh_ZgodaEMail");
            entity.Property(e => e.KhZgodaMark).HasColumnName("kh_ZgodaMark");
        });

        modelBuilder.Entity<VwZestDefPozycjeTowary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZestDef_PozycjeTowary");

            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObCenaMag)
                .HasColumnType("money")
                .HasColumnName("ob_CenaMag");
            entity.Property(e => e.ObCenaNetto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaNetto");
            entity.Property(e => e.ObCenaWaluta)
                .HasColumnType("money")
                .HasColumnName("ob_CenaWaluta");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokHanLp).HasColumnName("ob_DokHanLp");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObDokMagLp).HasColumnName("ob_DokMagLp");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIlosc)
                .HasColumnType("money")
                .HasColumnName("ob_Ilosc");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObMagId).HasColumnName("ob_MagId");
            entity.Property(e => e.ObNumerSeryjny)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ob_NumerSeryjny");
            entity.Property(e => e.ObOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ob_Opis");
            entity.Property(e => e.ObRabat)
                .HasColumnType("money")
                .HasColumnName("ob_Rabat");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObTermin)
                .HasColumnType("datetime")
                .HasColumnName("ob_Termin");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObVatId).HasColumnName("ob_VatId");
            entity.Property(e => e.ObVatProc)
                .HasColumnType("money")
                .HasColumnName("ob_VatProc");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
            entity.Property(e => e.TwCenaOtwarta).HasColumnName("tw_CenaOtwarta");
            entity.Property(e => e.TwCharakter)
                .HasColumnType("text")
                .HasColumnName("tw_Charakter");
            entity.Property(e => e.TwCzasDostawy).HasColumnName("tw_CzasDostawy");
            entity.Property(e => e.TwDniWaznosc).HasColumnName("tw_DniWaznosc");
            entity.Property(e => e.TwDostSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_DostSymbol");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwIdKrajuPochodzenia).HasColumnName("tw_IdKrajuPochodzenia");
            entity.Property(e => e.TwIdOpakowanie).HasColumnName("tw_IdOpakowanie");
            entity.Property(e => e.TwIdPodstDostawca).HasColumnName("tw_IdPodstDostawca");
            entity.Property(e => e.TwIdProducenta).HasColumnName("tw_IdProducenta");
            entity.Property(e => e.TwIdRabat).HasColumnName("tw_IdRabat");
            entity.Property(e => e.TwIdTypKodu).HasColumnName("tw_IdTypKodu");
            entity.Property(e => e.TwIdUjm).HasColumnName("tw_IdUJM");
            entity.Property(e => e.TwIdVatSp).HasColumnName("tw_IdVatSp");
            entity.Property(e => e.TwIdVatZak).HasColumnName("tw_IdVatZak");
            entity.Property(e => e.TwJakPrzySp).HasColumnName("tw_JakPrzySp");
            entity.Property(e => e.TwJednMiary)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiary");
            entity.Property(e => e.TwJednMiarySprz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiarySprz");
            entity.Property(e => e.TwJednMiaryZak)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednMiaryZak");
            entity.Property(e => e.TwJednStanMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tw_JednStanMin");
            entity.Property(e => e.TwJmsprzInna).HasColumnName("tw_JMSprzInna");
            entity.Property(e => e.TwJmzakInna).HasColumnName("tw_JMZakInna");
            entity.Property(e => e.TwKodTowaru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_KodTowaru");
            entity.Property(e => e.TwKontrolaTw).HasColumnName("tw_KontrolaTW");
            entity.Property(e => e.TwLogo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("tw_Logo");
            entity.Property(e => e.TwMasa)
                .HasColumnType("money")
                .HasColumnName("tw_Masa");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwObjetosc)
                .HasColumnType("money")
                .HasColumnName("tw_Objetosc");
            entity.Property(e => e.TwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Opis");
            entity.Property(e => e.TwPkwiU)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PKWiU");
            entity.Property(e => e.TwPlu).HasColumnName("tw_PLU");
            entity.Property(e => e.TwPodstKodKresk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_PodstKodKresk");
            entity.Property(e => e.TwPole1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole1");
            entity.Property(e => e.TwPole2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole2");
            entity.Property(e => e.TwPole3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole3");
            entity.Property(e => e.TwPole4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole4");
            entity.Property(e => e.TwPole5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole5");
            entity.Property(e => e.TwPole6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole6");
            entity.Property(e => e.TwPole7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole7");
            entity.Property(e => e.TwPole8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Pole8");
            entity.Property(e => e.TwPrzezWartosc).HasColumnName("tw_PrzezWartosc");
            entity.Property(e => e.TwRodzaj).HasColumnName("tw_Rodzaj");
            entity.Property(e => e.TwSerwisAukcyjny).HasColumnName("tw_SerwisAukcyjny");
            entity.Property(e => e.TwSklepInternet).HasColumnName("tw_SklepInternet");
            entity.Property(e => e.TwSprzedazMobilna).HasColumnName("tw_SprzedazMobilna");
            entity.Property(e => e.TwStanMin)
                .HasColumnType("money")
                .HasColumnName("tw_StanMin");
            entity.Property(e => e.TwSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_SWW");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_Symbol");
            entity.Property(e => e.TwUrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_UrzNazwa");
            entity.Property(e => e.TwUsuniety).HasColumnName("tw_Usuniety");
            entity.Property(e => e.TwUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_Uwagi");
            entity.Property(e => e.TwWagaEtykiet).HasColumnName("tw_WagaEtykiet");
            entity.Property(e => e.TwWww)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("tw_WWW");
            entity.Property(e => e.TwZablokowany).HasColumnName("tw_Zablokowany");
        });

        modelBuilder.Entity<VwZleceniaKomponent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZleceniaKomponent");

            entity.Property(e => e.ZlpzAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("zlpz_Analityka");
            entity.Property(e => e.ZlpzDataPlanowanegoRozpoczeciaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataPlanowanegoRozpoczeciaZlecenia");
            entity.Property(e => e.ZlpzDataPlanowanegoZakonczeniaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataPlanowanegoZakonczeniaZlecenia");
            entity.Property(e => e.ZlpzDataRejestracjiZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRejestracjiZlecenia");
            entity.Property(e => e.ZlpzDataRzeczywistegoRozpoczeciaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRzeczywistegoRozpoczeciaZlecenia");
            entity.Property(e => e.ZlpzDataRzeczywistegoZakonczeniaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRzeczywistegoZakonczeniaZlecenia");
            entity.Property(e => e.ZlpzId).HasColumnName("zlpz_Id");
            entity.Property(e => e.ZlpzIdKontrahenta).HasColumnName("zlpz_IdKontrahenta");
            entity.Property(e => e.ZlpzMpk).HasColumnName("zlpz_MPK");
            entity.Property(e => e.ZlpzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("zlpz_Nazwa");
            entity.Property(e => e.ZlpzNumerZlecenia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("zlpz_NumerZlecenia");
            entity.Property(e => e.ZlpzOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("zlpz_Opis");
            entity.Property(e => e.ZlpzStatusZlecenia).HasColumnName("zlpz_StatusZlecenia");
            entity.Property(e => e.ZlpzTerminWykonania)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_TerminWykonania");
        });

        modelBuilder.Entity<VwZlecenium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZlecenia");

            entity.Property(e => e.ZlpzAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("zlpz_Analityka");
            entity.Property(e => e.ZlpzDataPlanowanegoRozpoczeciaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataPlanowanegoRozpoczeciaZlecenia");
            entity.Property(e => e.ZlpzDataPlanowanegoZakonczeniaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataPlanowanegoZakonczeniaZlecenia");
            entity.Property(e => e.ZlpzDataRejestracjiZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRejestracjiZlecenia");
            entity.Property(e => e.ZlpzDataRzeczywistegoRozpoczeciaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRzeczywistegoRozpoczeciaZlecenia");
            entity.Property(e => e.ZlpzDataRzeczywistegoZakonczeniaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRzeczywistegoZakonczeniaZlecenia");
            entity.Property(e => e.ZlpzId).HasColumnName("zlpz_Id");
            entity.Property(e => e.ZlpzIdKontrahenta).HasColumnName("zlpz_IdKontrahenta");
            entity.Property(e => e.ZlpzMpk).HasColumnName("zlpz_MPK");
            entity.Property(e => e.ZlpzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("zlpz_Nazwa");
            entity.Property(e => e.ZlpzNumerZlecenia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("zlpz_NumerZlecenia");
            entity.Property(e => e.ZlpzOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("zlpz_Opis");
            entity.Property(e => e.ZlpzStatusZlecenia).HasColumnName("zlpz_StatusZlecenia");
            entity.Property(e => e.ZlpzTerminWykonania)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_TerminWykonania");
        });

        modelBuilder.Entity<VwZstOplatySpecjalneWgAsortymentu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstOplatySpecjalneWgAsortymentu");

            entity.Property(e => e.AdrhAdres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("adrh_Adres");
            entity.Property(e => e.AdrhMiejscowosc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("adrh_Miejscowosc");
            entity.Property(e => e.AdrhNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adrh_Nazwa");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPodlegaOplSpec).HasColumnName("dok_PodlegaOplSpec");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.GrtNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("grt_Nazwa");
            entity.Property(e => e.ObCenaBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_CenaBrutto");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.PosiadaNip).HasColumnName("PosiadaNIP");
            entity.Property(e => e.SosKwotaOplaty)
                .HasColumnType("money")
                .HasColumnName("sos_KwotaOplaty");
            entity.Property(e => e.SosStawka)
                .HasColumnType("money")
                .HasColumnName("sos_Stawka");
            entity.Property(e => e.SosTyp).HasColumnName("sos_Typ");
            entity.Property(e => e.TwId).HasColumnName("tw_Id");
            entity.Property(e => e.TwIdGrupa).HasColumnName("tw_IdGrupa");
            entity.Property(e => e.TwMasa)
                .HasColumnType("money")
                .HasColumnName("tw_Masa");
            entity.Property(e => e.TwNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tw_Nazwa");
            entity.Property(e => e.TwRodzaj).HasColumnName("tw_Rodzaj");
            entity.Property(e => e.TwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tw_Symbol");
        });

        modelBuilder.Entity<VwZstPodatekSprzedazyDetalicznej>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstPodatekSprzedazyDetalicznej");

            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.VwpsdPodatekStatusFiskal).HasColumnName("vwpsd_PodatekStatusFiskal");
            entity.Property(e => e.VwpsdPosiadaNip).HasColumnName("vwpsd_PosiadaNIP");
            entity.Property(e => e.VwpsdWylaczonyZpodatku).HasColumnName("vwpsd_WylaczonyZPodatku");
        });

        modelBuilder.Entity<VwZstPrzWgKhnt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstPrzWgKhnt");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZstRaportFunduszePromocji>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstRaportFunduszePromocji");

            entity.Property(e => e.AdrNazwa)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("adr_Nazwa");
            entity.Property(e => e.AdrhNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("adrh_NazwaPelna");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNaliczajFundusze).HasColumnName("dok_NaliczajFundusze");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_status");
            entity.Property(e => e.WartNaliczenia).HasColumnType("money");
        });

        modelBuilder.Entity<VwZstSprzWgDok>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstSprzWgDok");

            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
        });

        modelBuilder.Entity<VwZstSprzWgDokEx>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstSprzWgDokEx");

            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDefiniowalnyId).HasColumnName("dok_DefiniowalnyId");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTypNrIdentNabywcy).HasColumnName("dok_TypNrIdentNabywcy");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
        });

        modelBuilder.Entity<VwZstSprzWgKhnt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstSprzWgKhnt");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIlosc)
                .HasColumnType("money")
                .HasColumnName("ob_Ilosc");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObOplCukrowaCukierZawartoscEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaCukierZawartoscEx");
            entity.Property(e => e.ObOplCukrowaElektrolit).HasColumnName("ob_OplCukrowaElektrolit");
            entity.Property(e => e.ObOplCukrowaKwCukier)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukier");
            entity.Property(e => e.ObOplCukrowaKwCukierEx)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwCukierEx");
            entity.Property(e => e.ObOplCukrowaKwKofeina)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaKwKofeina");
            entity.Property(e => e.ObOplCukrowaObj)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaObj");
            entity.Property(e => e.ObOplCukrowaPodlega).HasColumnName("ob_OplCukrowaPodlega");
            entity.Property(e => e.ObOplCukrowaSok).HasColumnName("ob_OplCukrowaSok");
            entity.Property(e => e.ObOplCukrowaWartSuma)
                .HasColumnType("money")
                .HasColumnName("ob_OplCukrowaWartSuma");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZstSubRejSprVatDokFw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstSubRejSprVatDokFw");

            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataUjeciaKorekty)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataUjeciaKorekty");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVatRozliczanyPrzezUslugobiorce).HasColumnName("dok_VatRozliczanyPrzezUslugobiorce");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.VtDokId).HasColumnName("vt_DokId");
            entity.Property(e => e.VtId).HasColumnName("vt_Id");
            entity.Property(e => e.VtVatId).HasColumnName("vt_VatId");
            entity.Property(e => e.VtVatProc)
                .HasColumnType("money")
                .HasColumnName("vt_VatProc");
            entity.Property(e => e.VtWartBrutto)
                .HasColumnType("money")
                .HasColumnName("vt_WartBrutto");
            entity.Property(e => e.VtWartNetto)
                .HasColumnType("money")
                .HasColumnName("vt_WartNetto");
            entity.Property(e => e.VtWartVat)
                .HasColumnType("money")
                .HasColumnName("vt_WartVat");
        });

        modelBuilder.Entity<VwZstSubRejVatMarza>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstSubRejVatMarza");

            entity.Property(e => e.BruttoMarza).HasColumnType("money");
            entity.Property(e => e.NettoMarza).HasColumnType("money");
            entity.Property(e => e.VatMarza).HasColumnType("money");
        });

        modelBuilder.Entity<VwZstSubRejZakVatDokFw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstSubRejZakVatDokFw");

            entity.Property(e => e.DataObowiazkuPodatkowego).HasColumnType("datetime");
            entity.Property(e => e.DojWew).HasColumnName("doj_WEW");
            entity.Property(e => e.DokAlgorytm).HasColumnName("dok_Algorytm");
            entity.Property(e => e.DokCenyKurs)
                .HasColumnType("money")
                .HasColumnName("dok_CenyKurs");
            entity.Property(e => e.DokCenyNarzut)
                .HasColumnType("money")
                .HasColumnName("dok_CenyNarzut");
            entity.Property(e => e.DokCenyPoziom).HasColumnName("dok_CenyPoziom");
            entity.Property(e => e.DokCenyTyp).HasColumnName("dok_CenyTyp");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDoDokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DoDokDataWyst");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDoDokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_DoDokNrPelny");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokJestHop).HasColumnName("dok_JestHOP");
            entity.Property(e => e.DokJestRuchMag).HasColumnName("dok_JestRuchMag");
            entity.Property(e => e.DokJestTylkoDoOdczytu).HasColumnName("dok_JestTylkoDoOdczytu");
            entity.Property(e => e.DokJestVatAuto).HasColumnName("dok_JestVatAuto");
            entity.Property(e => e.DokJestVatNaEksport).HasColumnName("dok_JestVatNaEksport");
            entity.Property(e => e.DokJestZmianaDatyDokKas).HasColumnName("dok_JestZmianaDatyDokKas");
            entity.Property(e => e.DokKartaId).HasColumnName("dok_KartaId");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKodRodzajuTransakcji).HasColumnName("dok_KodRodzajuTransakcji");
            entity.Property(e => e.DokKredytId).HasColumnName("dok_KredytId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwReszta)
                .HasColumnType("money")
                .HasColumnName("dok_KwReszta");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokMscWyst)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_MscWyst");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokNrRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_NrRoz");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokOdebral)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Odebral");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatId).HasColumnName("dok_PlatId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokPodtytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Podtytul");
            entity.Property(e => e.DokRabatProc)
                .HasColumnType("money")
                .HasColumnName("dok_RabatProc");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusBlok).HasColumnName("dok_StatusBlok");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokStatusKsieg).HasColumnName("dok_StatusKsieg");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokTytul)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dok_Tytul");
            entity.Property(e => e.DokUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dok_Uwagi");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartMagP)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagP");
            entity.Property(e => e.DokWartMagR)
                .HasColumnType("money")
                .HasColumnName("dok_WartMagR");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.VtDokId).HasColumnName("vt_DokId");
            entity.Property(e => e.VtId).HasColumnName("vt_Id");
            entity.Property(e => e.VtVatId).HasColumnName("vt_VatId");
            entity.Property(e => e.VtVatProc)
                .HasColumnType("money")
                .HasColumnName("vt_VatProc");
            entity.Property(e => e.VtWartBrutto)
                .HasColumnType("money")
                .HasColumnName("vt_WartBrutto");
            entity.Property(e => e.VtWartNetto)
                .HasColumnType("money")
                .HasColumnName("vt_WartNetto");
            entity.Property(e => e.VtWartVat)
                .HasColumnType("money")
                .HasColumnName("vt_WartVat");
        });

        modelBuilder.Entity<VwZstWydWgKhnt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstWydWgKhnt");

            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZstZakWgKhnt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZstZakWgKhnt");

            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokWystawil)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dok_Wystawil");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObJm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ob_Jm");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZwrotDokument>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZwrot__Dokument");

            entity.Property(e => e.DokCesjaPlatnikOdbiorca).HasColumnName("dok_CesjaPlatnikOdbiorca");
            entity.Property(e => e.DokDataMag)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataMag");
            entity.Property(e => e.DokDataOtrzym)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataOtrzym");
            entity.Property(e => e.DokDataUjeciaKorekty)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataUjeciaKorekty");
            entity.Property(e => e.DokDataWyst)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataWyst");
            entity.Property(e => e.DokDataZakonczenia)
                .HasColumnType("datetime")
                .HasColumnName("dok_DataZakonczenia");
            entity.Property(e => e.DokDoDokId).HasColumnName("dok_DoDokId");
            entity.Property(e => e.DokDokumentFiskalnyDlaPodatnikaVat).HasColumnName("dok_DokumentFiskalnyDlaPodatnikaVat");
            entity.Property(e => e.DokId).HasColumnName("dok_Id");
            entity.Property(e => e.DokKatId).HasColumnName("dok_KatId");
            entity.Property(e => e.DokKwDoZaplaty)
                .HasColumnType("money")
                .HasColumnName("dok_KwDoZaplaty");
            entity.Property(e => e.DokKwGotowka)
                .HasColumnType("money")
                .HasColumnName("dok_KwGotowka");
            entity.Property(e => e.DokKwKarta)
                .HasColumnType("money")
                .HasColumnName("dok_KwKarta");
            entity.Property(e => e.DokKwKredyt)
                .HasColumnType("money")
                .HasColumnName("dok_KwKredyt");
            entity.Property(e => e.DokKwWartosc)
                .HasColumnType("money")
                .HasColumnName("dok_KwWartosc");
            entity.Property(e => e.DokMagId).HasColumnName("dok_MagId");
            entity.Property(e => e.DokMechanizmPodzielonejPlatnosci).HasColumnName("dok_MechanizmPodzielonejPlatnosci");
            entity.Property(e => e.DokMetodaKasowa).HasColumnName("dok_MetodaKasowa");
            entity.Property(e => e.DokNr).HasColumnName("dok_Nr");
            entity.Property(e => e.DokNrPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelny");
            entity.Property(e => e.DokNrPelnyOryg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dok_NrPelnyOryg");
            entity.Property(e => e.DokOdbiorcaAdreshId).HasColumnName("dok_OdbiorcaAdreshId");
            entity.Property(e => e.DokOdbiorcaId).HasColumnName("dok_OdbiorcaId");
            entity.Property(e => e.DokPersonelId).HasColumnName("dok_PersonelId");
            entity.Property(e => e.DokPlatTermin)
                .HasColumnType("datetime")
                .HasColumnName("dok_PlatTermin");
            entity.Property(e => e.DokPlatnikAdreshId).HasColumnName("dok_PlatnikAdreshId");
            entity.Property(e => e.DokPlatnikId).HasColumnName("dok_PlatnikId");
            entity.Property(e => e.DokPodtyp).HasColumnName("dok_Podtyp");
            entity.Property(e => e.DokRodzajOperacjiVat).HasColumnName("dok_RodzajOperacjiVat");
            entity.Property(e => e.DokStatus).HasColumnName("dok_Status");
            entity.Property(e => e.DokStatusEx).HasColumnName("dok_StatusEx");
            entity.Property(e => e.DokStatusFiskal).HasColumnName("dok_StatusFiskal");
            entity.Property(e => e.DokTyp).HasColumnName("dok_Typ");
            entity.Property(e => e.DokVatMarza).HasColumnName("dok_VatMarza");
            entity.Property(e => e.DokVatRozliczanyPrzezUslugobiorce).HasColumnName("dok_VatRozliczanyPrzezUslugobiorce");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dok_Waluta");
            entity.Property(e => e.DokWalutaKurs)
                .HasColumnType("money")
                .HasColumnName("dok_WalutaKurs");
            entity.Property(e => e.DokWartBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartBrutto");
            entity.Property(e => e.DokWartMag)
                .HasColumnType("money")
                .HasColumnName("dok_WartMag");
            entity.Property(e => e.DokWartNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartNetto");
            entity.Property(e => e.DokWartOpWyd)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpWyd");
            entity.Property(e => e.DokWartOpZwr)
                .HasColumnType("money")
                .HasColumnName("dok_WartOpZwr");
            entity.Property(e => e.DokWartOplRecykl)
                .HasColumnType("money")
                .HasColumnName("dok_WartOplRecykl");
            entity.Property(e => e.DokWartTwBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwBrutto");
            entity.Property(e => e.DokWartTwNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartTwNetto");
            entity.Property(e => e.DokWartUsBrutto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsBrutto");
            entity.Property(e => e.DokWartUsNetto)
                .HasColumnType("money")
                .HasColumnName("dok_WartUsNetto");
            entity.Property(e => e.DokWartVat)
                .HasColumnType("money")
                .HasColumnName("dok_WartVat");
        });

        modelBuilder.Entity<VwZwrotPozycja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZwrot_Pozycja");

            entity.Property(e => e.ObDoId).HasColumnName("ob_DoId");
            entity.Property(e => e.ObDokHanId).HasColumnName("ob_DokHanId");
            entity.Property(e => e.ObDokMagId).HasColumnName("ob_DokMagId");
            entity.Property(e => e.ObId).HasColumnName("ob_Id");
            entity.Property(e => e.ObIloscMag)
                .HasColumnType("money")
                .HasColumnName("ob_IloscMag");
            entity.Property(e => e.ObStatus).HasColumnName("ob_Status");
            entity.Property(e => e.ObTowId).HasColumnName("ob_TowId");
            entity.Property(e => e.ObTowRodzaj).HasColumnName("ob_TowRodzaj");
            entity.Property(e => e.ObWartBrutto)
                .HasColumnType("money")
                .HasColumnName("ob_WartBrutto");
            entity.Property(e => e.ObWartMag)
                .HasColumnType("money")
                .HasColumnName("ob_WartMag");
            entity.Property(e => e.ObWartNetto)
                .HasColumnType("money")
                .HasColumnName("ob_WartNetto");
            entity.Property(e => e.ObWartVat)
                .HasColumnType("money")
                .HasColumnName("ob_WartVat");
            entity.Property(e => e.ObZnak).HasColumnName("ob_Znak");
        });

        modelBuilder.Entity<VwZwrotVat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwZwrot_Vat");

            entity.Property(e => e.VtDokId).HasColumnName("vt_DokId");
            entity.Property(e => e.VtId).HasColumnName("vt_Id");
            entity.Property(e => e.VtVatId).HasColumnName("vt_VatId");
            entity.Property(e => e.VtVatProc)
                .HasColumnType("money")
                .HasColumnName("vt_VatProc");
            entity.Property(e => e.VtWartBrutto)
                .HasColumnType("money")
                .HasColumnName("vt_WartBrutto");
            entity.Property(e => e.VtWartNetto)
                .HasColumnType("money")
                .HasColumnName("vt_WartNetto");
            entity.Property(e => e.VtWartVat)
                .HasColumnType("money")
                .HasColumnName("vt_WartVat");
        });

        modelBuilder.Entity<VwpDksKasa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_dks_Kasa");

            entity.Property(e => e.KsAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ks_Analityka");
            entity.Property(e => e.KsGlowna).HasColumnName("ks_Glowna");
            entity.Property(e => e.KsId).HasColumnName("ks_Id");
            entity.Property(e => e.KsNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ks_Nazwa");
            entity.Property(e => e.KsOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ks_Opis");
            entity.Property(e => e.KsRkAutoDodawanie).HasColumnName("ks_RK_AutoDodawanie");
            entity.Property(e => e.KsRkFormatNumeru).HasColumnName("ks_RK_FormatNumeru");
            entity.Property(e => e.KsRkKategoria).HasColumnName("ks_RK_Kategoria");
            entity.Property(e => e.KsRkKategoriaKorekty).HasColumnName("ks_RK_KategoriaKorekty");
            entity.Property(e => e.KsRkOkres).HasColumnName("ks_RK_Okres");
            entity.Property(e => e.KsRkPersonalizacja).HasColumnName("ks_RK_Personalizacja");
            entity.Property(e => e.KsRkWieleZaOkres).HasColumnName("ks_RK_WieleZaOkres");
            entity.Property(e => e.KsSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ks_Symbol");
            entity.Property(e => e.KsWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ks_Waluta");
            entity.Property(e => e.KsWielowalutowa).HasColumnName("ks_Wielowalutowa");
            entity.Property(e => e.KsZapisKptjakoOczekujace).HasColumnName("ks_ZapisKPTJakoOczekujace");
        });

        modelBuilder.Entity<VwpDksKasaTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_dks_KasaTransfer");

            entity.Property(e => e.KsAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ks_Analityka");
            entity.Property(e => e.KsGlowna).HasColumnName("ks_Glowna");
            entity.Property(e => e.KsId).HasColumnName("ks_Id");
            entity.Property(e => e.KsNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ks_Nazwa");
            entity.Property(e => e.KsOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ks_Opis");
            entity.Property(e => e.KsRkAutoDodawanie).HasColumnName("ks_RK_AutoDodawanie");
            entity.Property(e => e.KsRkFormatNumeru).HasColumnName("ks_RK_FormatNumeru");
            entity.Property(e => e.KsRkKategoria).HasColumnName("ks_RK_Kategoria");
            entity.Property(e => e.KsRkKategoriaKorekty).HasColumnName("ks_RK_KategoriaKorekty");
            entity.Property(e => e.KsRkOkres).HasColumnName("ks_RK_Okres");
            entity.Property(e => e.KsRkPersonalizacja).HasColumnName("ks_RK_Personalizacja");
            entity.Property(e => e.KsRkWieleZaOkres).HasColumnName("ks_RK_WieleZaOkres");
            entity.Property(e => e.KsSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ks_Symbol");
            entity.Property(e => e.KsWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ks_Waluta");
            entity.Property(e => e.KsWielowalutowa).HasColumnName("ks_Wielowalutowa");
            entity.Property(e => e.KsZapisKptjakoOczekujace).HasColumnName("ks_ZapisKPTJakoOczekujace");
        });

        modelBuilder.Entity<VwpGtTransformacja>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_gt_Transformacja");

            entity.Property(e => e.GttDefinicjaId).HasColumnName("gtt_DefinicjaId");
            entity.Property(e => e.GttDomyslna).HasColumnName("gtt_Domyslna");
            entity.Property(e => e.GttId).HasColumnName("gtt_Id");
            entity.Property(e => e.GttNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gtt_Nazwa");
            entity.Property(e => e.GttObiektId).HasColumnName("gtt_ObiektId");
            entity.Property(e => e.GttRodzajId).HasColumnName("gtt_RodzajId");
            entity.Property(e => e.GttSchemat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("gtt_Schemat");
            entity.Property(e => e.GttTransformacja)
                .HasColumnType("image")
                .HasColumnName("gtt_Transformacja");
        });

        modelBuilder.Entity<VwpParEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_par_Ewid");

            entity.Property(e => e.PeDomyslne).HasColumnName("pe_Domyslne");
            entity.Property(e => e.PeId).HasColumnName("pe_Id");
            entity.Property(e => e.PeIdTypu).HasColumnName("pe_IdTypu");
            entity.Property(e => e.PeNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pe_Nazwa");
            entity.Property(e => e.PtAppObjId).HasColumnName("pt_AppObjId");
            entity.Property(e => e.PtId).HasColumnName("pt_Id");
            entity.Property(e => e.PtIndywidualizowalny).HasColumnName("pt_Indywidualizowalny");
            entity.Property(e => e.PtNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pt_Nazwa");
            entity.Property(e => e.PtOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pt_Opis");
            entity.Property(e => e.PtProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pt_ProgId");
            entity.Property(e => e.PtProgIdCtx).HasColumnName("pt_ProgIdCtx");
            entity.Property(e => e.PtProgramy).HasColumnName("pt_Programy");
            entity.Property(e => e.PtUkryte).HasColumnName("pt_Ukryte");
        });

        modelBuilder.Entity<VwpParametry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_Parametry");

            entity.Property(e => e.PeId).HasColumnName("pe_Id");
            entity.Property(e => e.PtAppObjId).HasColumnName("pt_AppObjId");
            entity.Property(e => e.PtId).HasColumnName("pt_Id");
            entity.Property(e => e.PtIndywidualizowalny).HasColumnName("pt_Indywidualizowalny");
            entity.Property(e => e.PtNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pt_Nazwa");
            entity.Property(e => e.PtOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("pt_Opis");
            entity.Property(e => e.PtProgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pt_ProgId");
            entity.Property(e => e.PtProgIdCtx).HasColumnName("pt_ProgIdCtx");
            entity.Property(e => e.PtProgramy).HasColumnName("pt_Programy");
        });

        modelBuilder.Entity<VwpRbRachBankowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_rb__RachBankowy");

            entity.Property(e => e.RbAnalityka)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("rb_Analityka");
            entity.Property(e => e.RbBank)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rb_Bank");
            entity.Property(e => e.RbDataHist)
                .HasColumnType("datetime")
                .HasColumnName("rb_DataHist");
            entity.Property(e => e.RbDataSaldo)
                .HasColumnType("datetime")
                .HasColumnName("rb_DataSaldo");
            entity.Property(e => e.RbDik)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("rb_Dik");
            entity.Property(e => e.RbEbank).HasColumnName("rb_Ebank");
            entity.Property(e => e.RbIban).HasColumnName("rb_IBAN");
            entity.Property(e => e.RbId).HasColumnName("rb_Id");
            entity.Property(e => e.RbIdKategorii).HasColumnName("rb_IdKategorii");
            entity.Property(e => e.RbIdObiektu).HasColumnName("rb_IdObiektu");
            entity.Property(e => e.RbIdPowiazanyRachunekVat).HasColumnName("rb_IdPowiazanyRachunekVAT");
            entity.Property(e => e.RbIdUslugi).HasColumnName("rb_IdUslugi");
            entity.Property(e => e.RbIdWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rb_IdWaluty");
            entity.Property(e => e.RbIndywPodatkowyWspolnik).HasColumnName("rb_IndywPodatkowyWspolnik");
            entity.Property(e => e.RbIndywWspolnik).HasColumnName("rb_IndywWspolnik");
            entity.Property(e => e.RbIndywidualny).HasColumnName("rb_Indywidualny");
            entity.Property(e => e.RbIndywidualnyPodatkowy).HasColumnName("rb_IndywidualnyPodatkowy");
            entity.Property(e => e.RbLicznik).HasColumnName("rb_Licznik");
            entity.Property(e => e.RbMnemonik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rb_Mnemonik");
            entity.Property(e => e.RbNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rb_Nazwa");
            entity.Property(e => e.RbNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rb_Numer");
            entity.Property(e => e.RbOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rb_Opis");
            entity.Property(e => e.RbPodstawowy).HasColumnName("rb_Podstawowy");
            entity.Property(e => e.RbPodstawowyWirtualny).HasColumnName("rb_PodstawowyWirtualny");
            entity.Property(e => e.RbRachunekVat).HasColumnName("rb_RachunekVAT");
            entity.Property(e => e.RbSaldo)
                .HasColumnType("money")
                .HasColumnName("rb_Saldo");
            entity.Property(e => e.RbStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rb_Status");
            entity.Property(e => e.RbTypIdentyfikacjiPlatnosci).HasColumnName("rb_TypIdentyfikacjiPlatnosci");
            entity.Property(e => e.RbTypObiektu).HasColumnName("rb_TypObiektu");
            entity.Property(e => e.RbUs).HasColumnName("rb_US");
            entity.Property(e => e.RbWirtualny).HasColumnName("rb_Wirtualny");
            entity.Property(e => e.RbZfss).HasColumnName("rb_ZFSS");
        });

        modelBuilder.Entity<VwpSlMagazyn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_sl_magazyn");

            entity.Property(e => e.MagAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mag_Analityka");
            entity.Property(e => e.MagGlowny).HasColumnName("mag_Glowny");
            entity.Property(e => e.MagId).HasColumnName("mag_Id");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.MagOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_Opis");
            entity.Property(e => e.MagPos).HasColumnName("mag_POS");
            entity.Property(e => e.MagPosadres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("mag_POSAdres");
            entity.Property(e => e.MagPosident).HasColumnName("mag_POSIdent");
            entity.Property(e => e.MagPosnazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_POSNazwa");
            entity.Property(e => e.MagStatus).HasColumnName("mag_Status");
            entity.Property(e => e.MagSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("mag_Symbol");
        });

        modelBuilder.Entity<VwpSlMagazynprzesuniecium>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_sl_magazynprzesuniecia");

            entity.Property(e => e.MagAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mag_Analityka");
            entity.Property(e => e.MagGlowny).HasColumnName("mag_Glowny");
            entity.Property(e => e.MagId).HasColumnName("mag_Id");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.MagOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_Opis");
            entity.Property(e => e.MagPos).HasColumnName("mag_POS");
            entity.Property(e => e.MagPosadres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("mag_POSAdres");
            entity.Property(e => e.MagPosident).HasColumnName("mag_POSIdent");
            entity.Property(e => e.MagPosnazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_POSNazwa");
            entity.Property(e => e.MagStatus).HasColumnName("mag_Status");
            entity.Property(e => e.MagSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("mag_Symbol");
        });

        modelBuilder.Entity<VwpSlMagazynzamowieniamm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_sl_magazynzamowieniamm");

            entity.Property(e => e.MagAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mag_Analityka");
            entity.Property(e => e.MagGlowny).HasColumnName("mag_Glowny");
            entity.Property(e => e.MagId).HasColumnName("mag_Id");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mag_Nazwa");
            entity.Property(e => e.MagOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_Opis");
            entity.Property(e => e.MagPos).HasColumnName("mag_POS");
            entity.Property(e => e.MagPosadres)
                .HasMaxLength(82)
                .IsUnicode(false)
                .HasColumnName("mag_POSAdres");
            entity.Property(e => e.MagPosident).HasColumnName("mag_POSIdent");
            entity.Property(e => e.MagPosnazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("mag_POSNazwa");
            entity.Property(e => e.MagStatus).HasColumnName("mag_Status");
            entity.Property(e => e.MagSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("mag_Symbol");
        });

        modelBuilder.Entity<VwpSlSlownik>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_sl__Slownik");

            entity.Property(e => e.SlId).HasColumnName("sl_Id");
            entity.Property(e => e.SlNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sl_Nazwa");
            entity.Property(e => e.SlOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sl_Opis");
            entity.Property(e => e.SlProgramy).HasColumnName("sl_Programy");
            entity.Property(e => e.SlStatusNowosci).HasColumnName("sl_StatusNowosci");
            entity.Property(e => e.SlUkryte).HasColumnName("sl_Ukryte");
        });

        modelBuilder.Entity<VwpWyWzorzec>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_wy_Wzorzec");

            entity.Property(e => e.WzwId).HasColumnName("wzw_Id");
            entity.Property(e => e.WzwIloscKopii).HasColumnName("wzw_IloscKopii");
            entity.Property(e => e.WzwJezyk).HasColumnName("wzw_Jezyk");
            entity.Property(e => e.WzwNaglowekRaportuId).HasColumnName("wzw_NaglowekRaportuId");
            entity.Property(e => e.WzwNaglowekStronyId).HasColumnName("wzw_NaglowekStronyId");
            entity.Property(e => e.WzwNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("wzw_Nazwa");
            entity.Property(e => e.WzwStatusNowosci).HasColumnName("wzw_StatusNowosci");
            entity.Property(e => e.WzwStopkaRaportuId).HasColumnName("wzw_StopkaRaportuId");
            entity.Property(e => e.WzwStopkaStronyId).HasColumnName("wzw_StopkaStronyId");
            entity.Property(e => e.WzwTyp).HasColumnName("wzw_Typ");
            entity.Property(e => e.WzwTypPliku).HasColumnName("wzw_TypPliku");
            entity.Property(e => e.WzwUkladStrony).HasColumnName("wzw_UkladStrony");
            entity.Property(e => e.WzwWersja)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("wzw_Wersja");
            entity.Property(e => e.WzwWidoczny).HasColumnName("wzw_Widoczny");
            entity.Property(e => e.WzwWysuwajStrone).HasColumnName("wzw_WysuwajStrone");
            entity.Property(e => e.WzwZablokowany).HasColumnName("wzw_Zablokowany");
            entity.Property(e => e.WzwZrodlo).HasColumnName("wzw_Zrodlo");
        });

        modelBuilder.Entity<VwpZstEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwp_zst__Ewid");

            entity.Property(e => e.ZstDataUzycia)
                .HasColumnType("datetime")
                .HasColumnName("zst_DataUzycia");
            entity.Property(e => e.ZstDll)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("zst_Dll");
            entity.Property(e => e.ZstId).HasColumnName("zst_Id");
            entity.Property(e => e.ZstIdKategorii).HasColumnName("zst_IdKategorii");
            entity.Property(e => e.ZstIkona).HasColumnName("zst_Ikona");
            entity.Property(e => e.ZstNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zst_Nazwa");
            entity.Property(e => e.ZstOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zst_Opis");
            entity.Property(e => e.ZstProgFlagi).HasColumnName("zst_ProgFlagi");
            entity.Property(e => e.ZstProgId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zst_ProgId");
            entity.Property(e => e.ZstStatusNowosci).HasColumnName("zst_StatusNowosci");
            entity.Property(e => e.ZstTresc)
                .HasColumnType("text")
                .HasColumnName("zst_Tresc");
            entity.Property(e => e.ZstTrescDefiniowalne)
                .HasColumnType("image")
                .HasColumnName("zst_TrescDefiniowalne");
            entity.Property(e => e.ZstTyp).HasColumnName("zst_Typ");
            entity.Property(e => e.ZstUser).HasColumnName("zst_User");
        });

        modelBuilder.Entity<WindParametr>(entity =>
        {
            entity.HasKey(e => e.WpaId).HasName("PK_wind_WindykacjaParametr");

            entity.ToTable("wind_Parametr");

            entity.Property(e => e.WpaId)
                .ValueGeneratedNever()
                .HasColumnName("wpa_Id");
            entity.Property(e => e.WpaRodzajDzialaniaNota)
                .HasDefaultValue(4)
                .HasColumnName("wpa_RodzajDzialaniaNota");
            entity.Property(e => e.WpaRodzajDzialaniaWezwanie)
                .HasDefaultValue(4)
                .HasColumnName("wpa_RodzajDzialaniaWezwanie");
            entity.Property(e => e.WpaSzablonDzialanie).HasColumnName("wpa_SzablonDzialanie");
            entity.Property(e => e.WpaSzablonNota).HasColumnName("wpa_SzablonNota");

            entity.HasOne(d => d.WpaSzablonDzialanieNavigation).WithMany(p => p.WindParametrWpaSzablonDzialanieNavigations)
                .HasForeignKey(d => d.WpaSzablonDzialanie)
                .HasConstraintName("FK_wind_Parametr_sl_SzablonDzialania");

            entity.HasOne(d => d.WpaSzablonNotaNavigation).WithMany(p => p.WindParametrWpaSzablonNotaNavigations)
                .HasForeignKey(d => d.WpaSzablonNota)
                .HasConstraintName("FK_wind_Parametr_sl_SzablonDzialania1");
        });

        modelBuilder.Entity<WizWizard2017>(entity =>
        {
            entity.HasKey(e => e.WwId);

            entity.ToTable("wiz_Wizard2017");

            entity.Property(e => e.WwId).HasColumnName("ww_Id");
            entity.Property(e => e.WwData)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ww_Data");
            entity.Property(e => e.WwKrok)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ww_Krok");
            entity.Property(e => e.WwPrzypomnijData)
                .HasColumnType("datetime")
                .HasColumnName("ww_PrzypomnijData");
            entity.Property(e => e.WwPrzypomnijStatus).HasColumnName("ww_PrzypomnijStatus");
            entity.Property(e => e.WwWersja).HasColumnName("ww_Wersja");
        });

        modelBuilder.Entity<WyDrukarkaDomyslna>(entity =>
        {
            entity.HasKey(e => e.WydId);

            entity.ToTable("wy_DrukarkaDomyslna");

            entity.Property(e => e.WydId)
                .ValueGeneratedNever()
                .HasColumnName("wyd_Id");
            entity.Property(e => e.WydNazwaDrukarki)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wyd_NazwaDrukarki");
            entity.Property(e => e.WydNazwaKomputera)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wyd_NazwaKomputera");
            entity.Property(e => e.WydWzorzecId).HasColumnName("wyd_WzorzecId");

            entity.HasOne(d => d.WydWzorzec).WithMany(p => p.WyDrukarkaDomyslnas)
                .HasForeignKey(d => d.WydWzorzecId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_wy_DrukarkaDomyslna_wy_Wzorzec");
        });

        modelBuilder.Entity<WyGrid>(entity =>
        {
            entity.HasKey(e => e.WgrId);

            entity.ToTable("wy_Grid");

            entity.Property(e => e.WgrId).HasColumnName("wgr_Id");
            entity.Property(e => e.WgrGridId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("wgr_GridId");
            entity.Property(e => e.WgrParametry)
                .HasColumnType("image")
                .HasColumnName("wgr_Parametry");
            entity.Property(e => e.WgrService).HasColumnName("wgr_Service");
            entity.Property(e => e.WgrUserId).HasColumnName("wgr_UserId");
        });

        modelBuilder.Entity<WyGrupa>(entity =>
        {
            entity.HasKey(e => e.WgrId);

            entity.ToTable("wy_Grupa");

            entity.Property(e => e.WgrId)
                .ValueGeneratedNever()
                .HasColumnName("wgr_Id");
            entity.Property(e => e.WgrCrm).HasColumnName("wgr_CRM");
            entity.Property(e => e.WgrMgratyfikant).HasColumnName("wgr_MGratyfikant");
            entity.Property(e => e.WgrNavireo).HasColumnName("wgr_Navireo");
            entity.Property(e => e.WgrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("wgr_Nazwa");
            entity.Property(e => e.WgrRachmistrz).HasColumnName("wgr_Rachmistrz");
            entity.Property(e => e.WgrSubiekt).HasColumnName("wgr_Subiekt");
            entity.Property(e => e.WgrUf).HasColumnName("wgr_UF");
        });

        modelBuilder.Entity<WyKodSterujacy>(entity =>
        {
            entity.HasKey(e => e.WprId);

            entity.ToTable("wy_KodSterujacy");

            entity.Property(e => e.WprId)
                .ValueGeneratedNever()
                .HasColumnName("wpr_Id");
            entity.Property(e => e.WprBoldOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_BoldOff");
            entity.Property(e => e.WprBoldOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_BoldOn");
            entity.Property(e => e.WprCpi10off)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI10Off");
            entity.Property(e => e.WprCpi10on)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI10On");
            entity.Property(e => e.WprCpi12off)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI12Off");
            entity.Property(e => e.WprCpi12on)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI12On");
            entity.Property(e => e.WprCpi15off)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI15Off");
            entity.Property(e => e.WprCpi15on)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI15On");
            entity.Property(e => e.WprCpi17off)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI17Off");
            entity.Property(e => e.WprCpi17on)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI17On");
            entity.Property(e => e.WprCpi20off)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI20Off");
            entity.Property(e => e.WprCpi20on)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_CPI20On");
            entity.Property(e => e.WprInt10LinesOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int10LinesOff");
            entity.Property(e => e.WprInt10LinesOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int10LinesOn");
            entity.Property(e => e.WprInt12LinesOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int12LinesOff");
            entity.Property(e => e.WprInt12LinesOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int12LinesOn");
            entity.Property(e => e.WprInt4LinesOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int4LinesOff");
            entity.Property(e => e.WprInt4LinesOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int4LinesOn");
            entity.Property(e => e.WprInt6LinesOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int6LinesOff");
            entity.Property(e => e.WprInt6LinesOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int6LinesOn");
            entity.Property(e => e.WprInt8LinesOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int8LinesOff");
            entity.Property(e => e.WprInt8LinesOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Int8LinesOn");
            entity.Property(e => e.WprItalicOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_ItalicOff");
            entity.Property(e => e.WprItalicOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_ItalicOn");
            entity.Property(e => e.WprMarginTopOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_MarginTopOff");
            entity.Property(e => e.WprMarginTopOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_MarginTopOn");
            entity.Property(e => e.WprNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_Nazwa");
            entity.Property(e => e.WprNlqoff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_NLQOff");
            entity.Property(e => e.WprNlqon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_NLQOn");
            entity.Property(e => e.WprPageEnd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_PageEnd");
            entity.Property(e => e.WprPageLenOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_PageLenOff");
            entity.Property(e => e.WprPageLenOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_PageLenOn");
            entity.Property(e => e.WprPageStart)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_PageStart");
            entity.Property(e => e.WprPerfLenOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_PerfLenOff");
            entity.Property(e => e.WprPerfLenOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_PerfLenOn");
            entity.Property(e => e.WprPrintInit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_PrintInit");
            entity.Property(e => e.WprResetOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_ResetOff");
            entity.Property(e => e.WprResetOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_ResetOn");
            entity.Property(e => e.WprStandard).HasColumnName("wpr_Standard");
            entity.Property(e => e.WprUnderlineOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_UnderlineOff");
            entity.Property(e => e.WprUnderlineOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_UnderlineOn");
            entity.Property(e => e.WprUserCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_UserCode");
            entity.Property(e => e.WprZwyklaOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_ZwyklaOff");
            entity.Property(e => e.WprZwyklaOn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wpr_ZwyklaOn");
        });

        modelBuilder.Entity<WyNaglowek>(entity =>
        {
            entity.HasKey(e => e.WnglId);

            entity.ToTable("wy_Naglowek");

            entity.Property(e => e.WnglId)
                .ValueGeneratedNever()
                .HasColumnName("wngl_Id");
            entity.Property(e => e.WnglDrukujLogo).HasColumnName("wngl_DrukujLogo");
            entity.Property(e => e.WnglLogo)
                .HasColumnType("image")
                .HasColumnName("wngl_Logo");
            entity.Property(e => e.WnglLogoSzerokosc).HasColumnName("wngl_LogoSzerokosc");
            entity.Property(e => e.WnglLogoWysokosc).HasColumnName("wngl_LogoWysokosc");
            entity.Property(e => e.WnglLogoX).HasColumnName("wngl_LogoX");
            entity.Property(e => e.WnglLogoY).HasColumnName("wngl_LogoY");
            entity.Property(e => e.WnglNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("wngl_Nazwa");
            entity.Property(e => e.WnglStandardowy).HasColumnName("wngl_Standardowy");
            entity.Property(e => e.WnglTresc)
                .HasColumnType("text")
                .HasColumnName("wngl_Tresc");
            entity.Property(e => e.WnglTrescSzerokosc)
                .HasDefaultValue(5000)
                .HasColumnName("wngl_TrescSzerokosc");
            entity.Property(e => e.WnglTrescX).HasColumnName("wngl_TrescX");
            entity.Property(e => e.WnglTrescY).HasColumnName("wngl_TrescY");
            entity.Property(e => e.WnglTypNaglowka).HasColumnName("wngl_TypNaglowka");
            entity.Property(e => e.WnglWysokosc).HasColumnName("wngl_Wysokosc");
        });

        modelBuilder.Entity<WyPlik>(entity =>
        {
            entity.HasKey(e => e.WplId);

            entity.ToTable("wy_Plik");

            entity.Property(e => e.WplId)
                .ValueGeneratedNever()
                .HasColumnName("wpl_Id");
            entity.Property(e => e.WplNazwaPliku)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wpl_NazwaPliku");
            entity.Property(e => e.WplNrStrony).HasColumnName("wpl_NrStrony");
            entity.Property(e => e.WplPlikRaportu)
                .HasColumnType("image")
                .HasColumnName("wpl_PlikRaportu");
            entity.Property(e => e.WplSkrotMd5)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("wpl_SkrotMD5");
            entity.Property(e => e.WplWersja).HasColumnName("wpl_Wersja");
            entity.Property(e => e.WplWzorzecId).HasColumnName("wpl_WzorzecId");
        });

        modelBuilder.Entity<WyPrzelewParam>(entity =>
        {
            entity.HasKey(e => e.WppId);

            entity.ToTable("wy_PrzelewParam");

            entity.Property(e => e.WppId)
                .ValueGeneratedNever()
                .HasColumnName("wpp_Id");
            entity.Property(e => e.WppAuto).HasColumnName("wpp_Auto");
            entity.Property(e => e.WppCzcionka)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("wpp_Czcionka");
            entity.Property(e => e.WppCzcionkaGrupa).HasColumnName("wpp_CzcionkaGrupa");
            entity.Property(e => e.WppCzcionkaRozmiar).HasColumnName("wpp_CzcionkaRozmiar");
            entity.Property(e => e.WppDrukarka)
                .HasMaxLength(260)
                .IsUnicode(false)
                .HasColumnName("wpp_Drukarka");
            entity.Property(e => e.WppOgranicznik)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("wpp_Ogranicznik");
            entity.Property(e => e.WppPokazujParametry).HasColumnName("wpp_PokazujParametry");
            entity.Property(e => e.WppStdDopasuj).HasColumnName("wpp_StdDopasuj");
            entity.Property(e => e.WppStdDrukujNaOryg).HasColumnName("wpp_StdDrukujNaOryg");
            entity.Property(e => e.WppStdDrukujSymbol).HasColumnName("wpp_StdDrukujSymbol");
            entity.Property(e => e.WppStdDrukujTypOperacji).HasColumnName("wpp_StdDrukujTypOperacji");
            entity.Property(e => e.WppStdForm).HasColumnName("wpp_StdForm");
            entity.Property(e => e.WppStdFormOryg).HasColumnName("wpp_StdFormOryg");
            entity.Property(e => e.WppStdNieDrukujDaty).HasColumnName("wpp_StdNieDrukujDaty");
            entity.Property(e => e.WppStdPrzesuniecieX).HasColumnName("wpp_StdPrzesuniecieX");
            entity.Property(e => e.WppStdPrzesuniecieY).HasColumnName("wpp_StdPrzesuniecieY");
            entity.Property(e => e.WppStdSkalaX).HasColumnName("wpp_StdSkalaX");
            entity.Property(e => e.WppStdSkalaY).HasColumnName("wpp_StdSkalaY");
            entity.Property(e => e.WppUsDopasuj).HasColumnName("wpp_UsDopasuj");
            entity.Property(e => e.WppUsDrukujNaOryg).HasColumnName("wpp_UsDrukujNaOryg");
            entity.Property(e => e.WppUsDrukujSymbol).HasColumnName("wpp_UsDrukujSymbol");
            entity.Property(e => e.WppUsDrukujTypOperacji).HasColumnName("wpp_UsDrukujTypOperacji");
            entity.Property(e => e.WppUsForm).HasColumnName("wpp_UsForm");
            entity.Property(e => e.WppUsFormOryg).HasColumnName("wpp_UsFormOryg");
            entity.Property(e => e.WppUsNieDrukujDaty).HasColumnName("wpp_UsNieDrukujDaty");
            entity.Property(e => e.WppUsPrzesuniecieX).HasColumnName("wpp_UsPrzesuniecieX");
            entity.Property(e => e.WppUsPrzesuniecieY).HasColumnName("wpp_UsPrzesuniecieY");
            entity.Property(e => e.WppUsSkalaX).HasColumnName("wpp_UsSkalaX");
            entity.Property(e => e.WppUsSkalaY).HasColumnName("wpp_UsSkalaY");
            entity.Property(e => e.WppZusDopasuj).HasColumnName("wpp_ZusDopasuj");
            entity.Property(e => e.WppZusDrukujNaOryg).HasColumnName("wpp_ZusDrukujNaOryg");
            entity.Property(e => e.WppZusDrukujSymbol).HasColumnName("wpp_ZusDrukujSymbol");
            entity.Property(e => e.WppZusDrukujTylkoCyfryOkRodzSkladek).HasColumnName("wpp_ZusDrukujTylkoCyfryOkRodzSkladek");
            entity.Property(e => e.WppZusForm).HasColumnName("wpp_ZusForm");
            entity.Property(e => e.WppZusFormOryg).HasColumnName("wpp_ZusFormOryg");
            entity.Property(e => e.WppZusNieDrukujNumeruRachunku).HasColumnName("wpp_ZusNieDrukujNumeruRachunku");
            entity.Property(e => e.WppZusPrzesuniecieX).HasColumnName("wpp_ZusPrzesuniecieX");
            entity.Property(e => e.WppZusPrzesuniecieY).HasColumnName("wpp_ZusPrzesuniecieY");
            entity.Property(e => e.WppZusSkalaX).HasColumnName("wpp_ZusSkalaX");
            entity.Property(e => e.WppZusSkalaY).HasColumnName("wpp_ZusSkalaY");
        });

        modelBuilder.Entity<WyStatusWydruku>(entity =>
        {
            entity.HasKey(e => e.WysId);

            entity.ToTable("wy_StatusWydruku");

            entity.Property(e => e.WysId)
                .ValueGeneratedNever()
                .HasColumnName("wys_Id");
            entity.Property(e => e.WysDataWydruku)
                .HasColumnType("datetime")
                .HasColumnName("wys_DataWydruku");
            entity.Property(e => e.WysIdObiektu).HasColumnName("wys_IdObiektu");
            entity.Property(e => e.WysStatus).HasColumnName("wys_Status");
            entity.Property(e => e.WysTypObiektu).HasColumnName("wys_TypObiektu");
        });

        modelBuilder.Entity<WyTekstowyParam>(entity =>
        {
            entity.HasKey(e => e.WtxId);

            entity.ToTable("wy_TekstowyParam");

            entity.Property(e => e.WtxId).HasColumnName("wtx_Id");
            entity.Property(e => e.WtxCpi)
                .HasDefaultValue(2)
                .HasColumnName("wtx_CPI");
            entity.Property(e => e.WtxDrukujLinie)
                .HasDefaultValue(true)
                .HasColumnName("wtx_DrukujLinie");
            entity.Property(e => e.WtxKodSterujacyId)
                .HasDefaultValue(1)
                .HasColumnName("wtx_KodSterujacyId");
            entity.Property(e => e.WtxLiczbaLinii)
                .HasDefaultValue(80)
                .HasColumnName("wtx_LiczbaLinii");
            entity.Property(e => e.WtxNazwaKomputera)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wtx_NazwaKomputera");
            entity.Property(e => e.WtxNlq).HasColumnName("wtx_NLQ");
            entity.Property(e => e.WtxPort)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wtx_Port");
            entity.Property(e => e.WtxStronaKodowa).HasColumnName("wtx_StronaKodowa");
            entity.Property(e => e.WtxZezwalajTylkoTekstowe).HasColumnName("wtx_ZezwalajTylkoTekstowe");
        });

        modelBuilder.Entity<WyTyp>(entity =>
        {
            entity.HasKey(e => e.WtpId);

            entity.ToTable("wy_Typ");

            entity.Property(e => e.WtpId)
                .ValueGeneratedNever()
                .HasColumnName("wtp_Id");
            entity.Property(e => e.WtpGrupaId).HasColumnName("wtp_GrupaId");
            entity.Property(e => e.WtpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wtp_Nazwa");
        });

        modelBuilder.Entity<WyWydrukParam>(entity =>
        {
            entity.HasKey(e => e.WpId).HasName("PK__wy_WydrukParam__51EEA1AF");

            entity.ToTable("wy_WydrukParam");

            entity.Property(e => e.WpId)
                .ValueGeneratedNever()
                .HasColumnName("wp_Id");
            entity.Property(e => e.WpEksportDowolnaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wp_EksportDowolnaNazwa");
            entity.Property(e => e.WpEksportNazwaTyp).HasColumnName("wp_EksportNazwaTyp");
            entity.Property(e => e.WpEksportNumerZnakiNiedozwoloneNa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("wp_EksportNumerZnakiNiedozwoloneNa");
            entity.Property(e => e.WpEksportPlikDowolnaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wp_EksportPlikDowolnaNazwa");
            entity.Property(e => e.WpEksportPlikNazwaTyp).HasColumnName("wp_EksportPlikNazwaTyp");
            entity.Property(e => e.WpEksportPlikNumerZnakiNiedozwoloneNa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("wp_EksportPlikNumerZnakiNiedozwoloneNa");
            entity.Property(e => e.WpParamEwidId).HasColumnName("wp_ParamEwidId");
            entity.Property(e => e.WpPodpisujDokumentyBiblioteki).HasColumnName("wp_PodpisujDokumentyBiblioteki");

            entity.HasOne(d => d.WpParamEwid).WithMany(p => p.WyWydrukParams)
                .HasForeignKey(d => d.WpParamEwidId)
                .HasConstraintName("FK_wy_WydrukParam_par__Ewid");
        });

        modelBuilder.Entity<WyWzDomyslny>(entity =>
        {
            entity.HasKey(e => e.WzdId);

            entity.ToTable("wy_WzDomyslny");

            entity.Property(e => e.WzdId)
                .ValueGeneratedNever()
                .HasColumnName("wzd_Id");
            entity.Property(e => e.WzdNazwaKomputera)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("wzd_NazwaKomputera");
            entity.Property(e => e.WzdTyp).HasColumnName("wzd_Typ");
            entity.Property(e => e.WzdWzorzecId).HasColumnName("wzd_WzorzecId");

            entity.HasOne(d => d.WzdWzorzec).WithMany(p => p.WyWzDomyslnies)
                .HasForeignKey(d => d.WzdWzorzecId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_wy_WzDomyslny_wy_Wzorzec");
        });

        modelBuilder.Entity<WyWzPowiazany>(entity =>
        {
            entity.HasKey(e => e.WpwId);

            entity.ToTable("wy_WzPowiazany");

            entity.Property(e => e.WpwId)
                .ValueGeneratedNever()
                .HasColumnName("wpw_Id");
            entity.Property(e => e.WpwDrukujKp).HasColumnName("wpw_DrukujKP");
            entity.Property(e => e.WpwDrukujKw).HasColumnName("wpw_DrukujKW");
            entity.Property(e => e.WpwDrukujOswDotPochodzeniaWegla).HasColumnName("wpw_DrukujOswDotPochodzeniaWegla");
            entity.Property(e => e.WpwDrukujPrzelew).HasColumnName("wpw_DrukujPrzelew");
            entity.Property(e => e.WpwDrukujPz).HasColumnName("wpw_DrukujPZ");
            entity.Property(e => e.WpwDrukujWz).HasColumnName("wpw_DrukujWZ");
            entity.Property(e => e.WpwDrukujZal).HasColumnName("wpw_DrukujZal");
            entity.Property(e => e.WpwIdWzorca).HasColumnName("wpw_IdWzorca");
            entity.Property(e => e.WpwIdWzorcaKp).HasColumnName("wpw_IdWzorcaKP");
            entity.Property(e => e.WpwIdWzorcaKw).HasColumnName("wpw_IdWzorcaKW");
            entity.Property(e => e.WpwIdWzorcaOswDotPochodzeniaWegla).HasColumnName("wpw_IdWzorcaOswDotPochodzeniaWegla");
            entity.Property(e => e.WpwIdWzorcaPz).HasColumnName("wpw_IdWzorcaPZ");
            entity.Property(e => e.WpwIdWzorcaWz).HasColumnName("wpw_IdWzorcaWZ");
            entity.Property(e => e.WpwIdWzorcaZal).HasColumnName("wpw_IdWzorcaZal");
            entity.Property(e => e.WpwLiczbaKopiiKp).HasColumnName("wpw_LiczbaKopiiKP");
            entity.Property(e => e.WpwLiczbaKopiiKw).HasColumnName("wpw_LiczbaKopiiKW");
            entity.Property(e => e.WpwLiczbaKopiiOswDotPochodzeniaWegla).HasColumnName("wpw_LiczbaKopiiOswDotPochodzeniaWegla");
            entity.Property(e => e.WpwLiczbaKopiiPrzelewu).HasColumnName("wpw_LiczbaKopiiPrzelewu");
            entity.Property(e => e.WpwLiczbaKopiiPz).HasColumnName("wpw_LiczbaKopiiPZ");
            entity.Property(e => e.WpwLiczbaKopiiWz).HasColumnName("wpw_LiczbaKopiiWZ");
            entity.Property(e => e.WpwLiczbaKopiiZal).HasColumnName("wpw_LiczbaKopiiZal");
        });

        modelBuilder.Entity<WyWzorzec>(entity =>
        {
            entity.HasKey(e => e.WzwId);

            entity.ToTable("wy_Wzorzec");

            entity.Property(e => e.WzwId)
                .ValueGeneratedNever()
                .HasColumnName("wzw_Id");
            entity.Property(e => e.WzwIloscKopii).HasColumnName("wzw_IloscKopii");
            entity.Property(e => e.WzwJezyk)
                .HasDefaultValue(21)
                .HasColumnName("wzw_Jezyk");
            entity.Property(e => e.WzwNaglowekRaportuId).HasColumnName("wzw_NaglowekRaportuId");
            entity.Property(e => e.WzwNaglowekStronyId).HasColumnName("wzw_NaglowekStronyId");
            entity.Property(e => e.WzwNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("wzw_Nazwa");
            entity.Property(e => e.WzwStatusNowosci).HasColumnName("wzw_StatusNowosci");
            entity.Property(e => e.WzwStopkaRaportuId).HasColumnName("wzw_StopkaRaportuId");
            entity.Property(e => e.WzwStopkaStronyId).HasColumnName("wzw_StopkaStronyId");
            entity.Property(e => e.WzwTyp).HasColumnName("wzw_Typ");
            entity.Property(e => e.WzwTypPliku).HasColumnName("wzw_TypPliku");
            entity.Property(e => e.WzwUkladStrony).HasColumnName("wzw_UkladStrony");
            entity.Property(e => e.WzwWersja)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wzw_Wersja");
            entity.Property(e => e.WzwWidoczny)
                .HasDefaultValue(true)
                .HasColumnName("wzw_Widoczny");
            entity.Property(e => e.WzwWysuwajStrone)
                .HasDefaultValue(true)
                .HasColumnName("wzw_WysuwajStrone");
            entity.Property(e => e.WzwZablokowany).HasColumnName("wzw_Zablokowany");
            entity.Property(e => e.WzwZrodlo).HasColumnName("wzw_Zrodlo");

            entity.HasOne(d => d.WzwNaglowekRaportu).WithMany(p => p.WyWzorzecWzwNaglowekRaportus)
                .HasForeignKey(d => d.WzwNaglowekRaportuId)
                .HasConstraintName("FK_wy_Wzorzec_wy_Naglowek");

            entity.HasOne(d => d.WzwNaglowekStrony).WithMany(p => p.WyWzorzecWzwNaglowekStronies)
                .HasForeignKey(d => d.WzwNaglowekStronyId)
                .HasConstraintName("FK_wy_Wzorzec_wy_Naglowek1");

            entity.HasOne(d => d.WzwStopkaRaportu).WithMany(p => p.WyWzorzecWzwStopkaRaportus)
                .HasForeignKey(d => d.WzwStopkaRaportuId)
                .HasConstraintName("FK_wy_Wzorzec_wy_Naglowek3");

            entity.HasOne(d => d.WzwStopkaStrony).WithMany(p => p.WyWzorzecWzwStopkaStronies)
                .HasForeignKey(d => d.WzwStopkaStronyId)
                .HasConstraintName("FK_wy_Wzorzec_wy_Naglowek2");

            entity.HasOne(d => d.WzwTypNavigation).WithMany(p => p.WyWzorzecs)
                .HasForeignKey(d => d.WzwTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_wy_Wzorzec_wy_Typ");

            entity.HasMany(d => d.PfIdUzytkownikas).WithMany(p => p.PfIdObiektus7)
                .UsingEntity<Dictionary<string, object>>(
                    "WyWzorzecProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_wy_WzorzecProfil_pd_Uzytkownik"),
                    l => l.HasOne<WyWzorzec>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_wy_WzorzecProfil_wy_Wzorzec"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("wy_WzorzecProfil");
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<WyWzorzecMagazyn>(entity =>
        {
            entity.HasKey(e => new { e.WzmTyp, e.WzmIdWzorca, e.WzmIdMagazynu });

            entity.ToTable("wy_WzorzecMagazyn");

            entity.Property(e => e.WzmTyp).HasColumnName("wzm_Typ");
            entity.Property(e => e.WzmIdWzorca).HasColumnName("wzm_IdWzorca");
            entity.Property(e => e.WzmIdMagazynu).HasColumnName("wzm_IdMagazynu");
        });

        modelBuilder.Entity<WyWzorzecUzytkownik>(entity =>
        {
            entity.HasKey(e => new { e.WzuTyp, e.WzuIdWzorca, e.WzuIdUzytkownika });

            entity.ToTable("wy_WzorzecUzytkownik");

            entity.Property(e => e.WzuTyp).HasColumnName("wzu_Typ");
            entity.Property(e => e.WzuIdWzorca).HasColumnName("wzu_IdWzorca");
            entity.Property(e => e.WzuIdUzytkownika).HasColumnName("wzu_IdUzytkownika");
        });

        modelBuilder.Entity<XemEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xem_Ewid");

            entity.HasIndex(e => e.EmxIdSource, "IX_xem_Ewid").IsClustered();

            entity.HasIndex(e => new { e.EmxIdSource, e.EmxEntry, e.EmxRank }, "IX_xem_Ewid_1");

            entity.HasIndex(e => e.EmxEntry, "IX_xem_Ewid_2");

            entity.Property(e => e.EmxEntry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("emx_Entry");
            entity.Property(e => e.EmxIdFrom).HasColumnName("emx_IdFrom");
            entity.Property(e => e.EmxIdSource).HasColumnName("emx_IdSource");
            entity.Property(e => e.EmxLevel).HasColumnName("emx_Level");
            entity.Property(e => e.EmxRank).HasColumnName("emx_Rank");
        });

        modelBuilder.Entity<XemSzum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xem_Szum");

            entity.Property(e => e.SzemId)
                .ValueGeneratedOnAdd()
                .HasColumnName("szem_Id");
            entity.Property(e => e.SzemItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("szem_Item");
        });

        modelBuilder.Entity<XinEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xin_Ewid");

            entity.Property(e => e.InxEntry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("inx_Entry");
            entity.Property(e => e.InxIdFrom).HasColumnName("inx_IdFrom");
            entity.Property(e => e.InxIdSource).HasColumnName("inx_IdSource");
            entity.Property(e => e.InxLevel).HasColumnName("inx_Level");
            entity.Property(e => e.InxRank).HasColumnName("inx_Rank");
        });

        modelBuilder.Entity<XinSzum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xin_Szum");

            entity.Property(e => e.SzinId)
                .ValueGeneratedOnAdd()
                .HasColumnName("szin_Id");
            entity.Property(e => e.SzinItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("szin_Item");
        });

        modelBuilder.Entity<XkhEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xkh_Ewid");

            entity.HasIndex(e => e.KhxIdSource, "IX_xkh_Ewid").IsClustered();

            entity.HasIndex(e => new { e.KhxIdSource, e.KhxEntry, e.KhxRank }, "IX_xkh_Ewid_1");

            entity.HasIndex(e => e.KhxEntry, "IX_xkh_Ewid_2");

            entity.Property(e => e.KhxEntry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("khx_Entry");
            entity.Property(e => e.KhxIdFrom).HasColumnName("khx_IdFrom");
            entity.Property(e => e.KhxIdSource).HasColumnName("khx_IdSource");
            entity.Property(e => e.KhxLevel).HasColumnName("khx_Level");
            entity.Property(e => e.KhxRank).HasColumnName("khx_Rank");
        });

        modelBuilder.Entity<XkhSzum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xkh_Szum");

            entity.HasIndex(e => e.SzkhItem, "IX_xkh_Szum")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.SzkhId)
                .ValueGeneratedOnAdd()
                .HasColumnName("szkh_Id");
            entity.Property(e => e.SzkhItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("szkh_Item");
        });

        modelBuilder.Entity<XpkEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xpk_Ewid");

            entity.HasIndex(e => e.PkxIdSource, "IX_xpk_Ewid").IsClustered();

            entity.Property(e => e.PkxEntry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pkx_Entry");
            entity.Property(e => e.PkxIdFrom).HasColumnName("pkx_IdFrom");
            entity.Property(e => e.PkxIdSource).HasColumnName("pkx_IdSource");
            entity.Property(e => e.PkxLevel).HasColumnName("pkx_Level");
            entity.Property(e => e.PkxRank).HasColumnName("pkx_Rank");
        });

        modelBuilder.Entity<XpkSzum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xpk_Szum");

            entity.HasIndex(e => e.SzpkItem, "IX_xpk_Szum")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.SzpkId)
                .ValueGeneratedOnAdd()
                .HasColumnName("szpk_Id");
            entity.Property(e => e.SzpkItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("szpk_Item");
        });

        modelBuilder.Entity<XprEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xpr_Ewid");

            entity.Property(e => e.PrxEntry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prx_Entry");
            entity.Property(e => e.PrxIdFrom).HasColumnName("prx_IdFrom");
            entity.Property(e => e.PrxIdSource).HasColumnName("prx_IdSource");
            entity.Property(e => e.PrxLevel).HasColumnName("prx_Level");
            entity.Property(e => e.PrxRank).HasColumnName("prx_Rank");
        });

        modelBuilder.Entity<XprSzum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xpr_Szum");

            entity.Property(e => e.SzprId)
                .ValueGeneratedOnAdd()
                .HasColumnName("szpr_Id");
            entity.Property(e => e.SzprItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("szpr_Item");
        });

        modelBuilder.Entity<XtwEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xtw_Ewid");

            entity.HasIndex(e => e.TwxIdSource, "IX_xtw_Ewid").IsClustered();

            entity.HasIndex(e => new { e.TwxIdSource, e.TwxEntry, e.TwxRank }, "IX_xtw_Ewid_1");

            entity.HasIndex(e => e.TwxEntry, "IX_xtw_Ewid_2");

            entity.Property(e => e.TwxEntry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("twx_Entry");
            entity.Property(e => e.TwxIdFrom).HasColumnName("twx_IdFrom");
            entity.Property(e => e.TwxIdSource).HasColumnName("twx_IdSource");
            entity.Property(e => e.TwxLevel).HasColumnName("twx_Level");
            entity.Property(e => e.TwxRank).HasColumnName("twx_Rank");
        });

        modelBuilder.Entity<XtwSzum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xtw_Szum");

            entity.HasIndex(e => e.SztwItem, "IX_xtw_Szum")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.SztwId)
                .ValueGeneratedOnAdd()
                .HasColumnName("sztw_Id");
            entity.Property(e => e.SztwItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sztw_Item");
        });

        modelBuilder.Entity<XwlEwid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xwl_Ewid");

            entity.Property(e => e.WlxEntry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wlx_Entry");
            entity.Property(e => e.WlxIdFrom).HasColumnName("wlx_IdFrom");
            entity.Property(e => e.WlxIdSource).HasColumnName("wlx_IdSource");
            entity.Property(e => e.WlxLevel).HasColumnName("wlx_Level");
            entity.Property(e => e.WlxRank).HasColumnName("wlx_Rank");
        });

        modelBuilder.Entity<XwlSzum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("xwl_Szum");

            entity.Property(e => e.SzwlId)
                .ValueGeneratedOnAdd()
                .HasColumnName("szwl_Id");
            entity.Property(e => e.SzwlItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("szwl_Item");
        });

        modelBuilder.Entity<ZdAlarmyRezerwacja>(entity =>
        {
            entity.HasKey(e => e.ZdrdId);

            entity.ToTable("zd_AlarmyRezerwacja");

            entity.Property(e => e.ZdrdId).HasColumnName("zdrd_Id");
            entity.Property(e => e.ZdrdData)
                .HasColumnType("datetime")
                .HasColumnName("zdrd_Data");
            entity.Property(e => e.ZdrdIdDzialania).HasColumnName("zdrd_IdDzialania");
            entity.Property(e => e.ZdrdInstancja)
                .HasMaxLength(100)
                .HasColumnName("zdrd_Instancja");

            entity.HasOne(d => d.ZdrdIdDzialaniaNavigation).WithMany(p => p.ZdAlarmyRezerwacjas)
                .HasForeignKey(d => d.ZdrdIdDzialania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zd_AlarmyRezerwacja_zd__Zadanie");
        });

        modelBuilder.Entity<ZdFaksParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zd_FaksParametr");

            entity.Property(e => e.ZdfpBezCzasu).HasColumnName("zdfp_BezCzasu");
            entity.Property(e => e.ZdfpBezCzasuW).HasColumnName("zdfp_BezCzasuW");
            entity.Property(e => e.ZdfpData).HasColumnName("zdfp_Data");
            entity.Property(e => e.ZdfpDataW).HasColumnName("zdfp_DataW");
            entity.Property(e => e.ZdfpFormaW).HasColumnName("zdfp_FormaW");
            entity.Property(e => e.ZdfpId).HasColumnName("zdfp_Id");
            entity.Property(e => e.ZdfpKierunek)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdfp_Kierunek");
            entity.Property(e => e.ZdfpKierunekW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdfp_KierunekW");
            entity.Property(e => e.ZdfpKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdfp_Kolor");
            entity.Property(e => e.ZdfpKolorW)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdfp_KolorW");
            entity.Property(e => e.ZdfpKotwicz).HasColumnName("zdfp_Kotwicz");
            entity.Property(e => e.ZdfpKotwiczW).HasColumnName("zdfp_KotwiczW");
            entity.Property(e => e.ZdfpParamEwidId).HasColumnName("zdfp_ParamEwidId");
            entity.Property(e => e.ZdfpPersonel)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdfp_Personel");
            entity.Property(e => e.ZdfpPersonelW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdfp_PersonelW");
            entity.Property(e => e.ZdfpPokazujWkalendarzu).HasColumnName("zdfp_PokazujWKalendarzu");
            entity.Property(e => e.ZdfpPokazujWkalendarzuW).HasColumnName("zdfp_PokazujWKalendarzuW");
            entity.Property(e => e.ZdfpPriorytet)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdfp_Priorytet");
            entity.Property(e => e.ZdfpPriorytetW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdfp_PriorytetW");
            entity.Property(e => e.ZdfpPrywatne).HasColumnName("zdfp_Prywatne");
            entity.Property(e => e.ZdfpPrywatneW).HasColumnName("zdfp_PrywatneW");
            entity.Property(e => e.ZdfpPrzypomnienie).HasColumnName("zdfp_Przypomnienie");
            entity.Property(e => e.ZdfpPrzypomnienieW).HasColumnName("zdfp_PrzypomnienieW");
            entity.Property(e => e.ZdfpRodzaj).HasColumnName("zdfp_Rodzaj");
            entity.Property(e => e.ZdfpRodzajW).HasColumnName("zdfp_RodzajW");
            entity.Property(e => e.ZdfpStatus)
                .HasDefaultValue(9)
                .HasColumnName("zdfp_Status");
            entity.Property(e => e.ZdfpStatusW)
                .HasDefaultValue(9)
                .HasColumnName("zdfp_StatusW");
            entity.Property(e => e.ZdfpUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdfp_Uwagi");
            entity.Property(e => e.ZdfpUwagiW)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdfp_UwagiW");
        });

        modelBuilder.Entity<ZdHistorium>(entity =>
        {
            entity.HasKey(e => e.ZdhId);

            entity.ToTable("zd_Historia");

            entity.Property(e => e.ZdhId)
                .ValueGeneratedNever()
                .HasColumnName("zdh_Id");
            entity.Property(e => e.ZdhData)
                .HasColumnType("datetime")
                .HasColumnName("zdh_Data");
            entity.Property(e => e.ZdhIdZadania).HasColumnName("zdh_IdZadania");
            entity.Property(e => e.ZdhOperator).HasColumnName("zdh_Operator");
            entity.Property(e => e.ZdhOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdh_Opis");
        });

        modelBuilder.Entity<ZdListParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zd_ListParametr");

            entity.Property(e => e.ZdlpBezCzasu).HasColumnName("zdlp_BezCzasu");
            entity.Property(e => e.ZdlpBezCzasuW).HasColumnName("zdlp_BezCzasuW");
            entity.Property(e => e.ZdlpData).HasColumnName("zdlp_Data");
            entity.Property(e => e.ZdlpDataW).HasColumnName("zdlp_DataW");
            entity.Property(e => e.ZdlpFormaW).HasColumnName("zdlp_FormaW");
            entity.Property(e => e.ZdlpId).HasColumnName("zdlp_Id");
            entity.Property(e => e.ZdlpKierunek)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdlp_Kierunek");
            entity.Property(e => e.ZdlpKierunekW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdlp_KierunekW");
            entity.Property(e => e.ZdlpKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdlp_Kolor");
            entity.Property(e => e.ZdlpKolorW)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdlp_KolorW");
            entity.Property(e => e.ZdlpKotwicz).HasColumnName("zdlp_Kotwicz");
            entity.Property(e => e.ZdlpKotwiczW).HasColumnName("zdlp_KotwiczW");
            entity.Property(e => e.ZdlpParamEwidId).HasColumnName("zdlp_ParamEwidId");
            entity.Property(e => e.ZdlpPersonel)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdlp_Personel");
            entity.Property(e => e.ZdlpPersonelW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdlp_PersonelW");
            entity.Property(e => e.ZdlpPokazujWkalendarzu).HasColumnName("zdlp_PokazujWKalendarzu");
            entity.Property(e => e.ZdlpPokazujWkalendarzuW).HasColumnName("zdlp_PokazujWKalendarzuW");
            entity.Property(e => e.ZdlpPriorytet)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdlp_Priorytet");
            entity.Property(e => e.ZdlpPriorytetW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdlp_PriorytetW");
            entity.Property(e => e.ZdlpPrywatne).HasColumnName("zdlp_Prywatne");
            entity.Property(e => e.ZdlpPrywatneW).HasColumnName("zdlp_PrywatneW");
            entity.Property(e => e.ZdlpPrzypomnienie).HasColumnName("zdlp_Przypomnienie");
            entity.Property(e => e.ZdlpPrzypomnienieW).HasColumnName("zdlp_PrzypomnienieW");
            entity.Property(e => e.ZdlpRodzaj).HasColumnName("zdlp_Rodzaj");
            entity.Property(e => e.ZdlpRodzajW).HasColumnName("zdlp_RodzajW");
            entity.Property(e => e.ZdlpStatus)
                .HasDefaultValue(9)
                .HasColumnName("zdlp_Status");
            entity.Property(e => e.ZdlpStatusW)
                .HasDefaultValue(9)
                .HasColumnName("zdlp_StatusW");
            entity.Property(e => e.ZdlpUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdlp_Uwagi");
            entity.Property(e => e.ZdlpUwagiW)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdlp_UwagiW");
        });

        modelBuilder.Entity<ZdNotatkaParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zd_NotatkaParametr");

            entity.Property(e => e.ZdnpData).HasColumnName("zdnp_Data");
            entity.Property(e => e.ZdnpDataW).HasColumnName("zdnp_DataW");
            entity.Property(e => e.ZdnpFormaW).HasColumnName("zdnp_FormaW");
            entity.Property(e => e.ZdnpId).HasColumnName("zdnp_Id");
            entity.Property(e => e.ZdnpKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdnp_Kolor");
            entity.Property(e => e.ZdnpKolorW)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdnp_KolorW");
            entity.Property(e => e.ZdnpKotwicz).HasColumnName("zdnp_Kotwicz");
            entity.Property(e => e.ZdnpKotwiczW).HasColumnName("zdnp_KotwiczW");
            entity.Property(e => e.ZdnpParamEwidId).HasColumnName("zdnp_ParamEwidId");
            entity.Property(e => e.ZdnpPersonel)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdnp_Personel");
            entity.Property(e => e.ZdnpPersonelW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdnp_PersonelW");
            entity.Property(e => e.ZdnpPokazujWkalendarzu).HasColumnName("zdnp_PokazujWKalendarzu");
            entity.Property(e => e.ZdnpPokazujWkalendarzuW).HasColumnName("zdnp_PokazujWKalendarzuW");
            entity.Property(e => e.ZdnpPriorytet)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdnp_Priorytet");
            entity.Property(e => e.ZdnpPriorytetW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdnp_PriorytetW");
            entity.Property(e => e.ZdnpRodzaj).HasColumnName("zdnp_Rodzaj");
            entity.Property(e => e.ZdnpRodzajW).HasColumnName("zdnp_RodzajW");
        });

        modelBuilder.Entity<ZdOpi>(entity =>
        {
            entity.HasKey(e => e.ZdoId);

            entity.ToTable("zd_Opis", tb => tb.HasTrigger("tr_ZdOpis_Updating"));

            entity.Property(e => e.ZdoId)
                .ValueGeneratedNever()
                .HasColumnName("zdo_Id");
            entity.Property(e => e.ZdoIdZadania).HasColumnName("zdo_IdZadania");
            entity.Property(e => e.ZdoOpis)
                .HasDefaultValue("")
                .HasColumnType("ntext")
                .HasColumnName("zdo_Opis");
            entity.Property(e => e.ZdoOpisTekst)
                .HasColumnType("ntext")
                .HasColumnName("zdo_OpisTekst");

            entity.HasOne(d => d.ZdoIdZadaniaNavigation).WithMany(p => p.ZdOpis)
                .HasForeignKey(d => d.ZdoIdZadania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zd_Opis_zd__Zadanie");
        });

        modelBuilder.Entity<ZdRozmowaIntParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zd_RozmowaIntParametr");

            entity.Property(e => e.ZdrpBezCzasu).HasColumnName("zdrp_BezCzasu");
            entity.Property(e => e.ZdrpBezCzasuW).HasColumnName("zdrp_BezCzasuW");
            entity.Property(e => e.ZdrpCzasTrwania).HasColumnName("zdrp_CzasTrwania");
            entity.Property(e => e.ZdrpCzasTrwaniaW).HasColumnName("zdrp_CzasTrwaniaW");
            entity.Property(e => e.ZdrpFormaW).HasColumnName("zdrp_FormaW");
            entity.Property(e => e.ZdrpId).HasColumnName("zdrp_Id");
            entity.Property(e => e.ZdrpKierunek)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdrp_Kierunek");
            entity.Property(e => e.ZdrpKierunekW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdrp_KierunekW");
            entity.Property(e => e.ZdrpKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdrp_Kolor");
            entity.Property(e => e.ZdrpKolorW)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdrp_KolorW");
            entity.Property(e => e.ZdrpKotwicz).HasColumnName("zdrp_Kotwicz");
            entity.Property(e => e.ZdrpKotwiczW).HasColumnName("zdrp_KotwiczW");
            entity.Property(e => e.ZdrpOpiekun)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdrp_Opiekun");
            entity.Property(e => e.ZdrpOpiekunW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdrp_OpiekunW");
            entity.Property(e => e.ZdrpParamEwidId).HasColumnName("zdrp_ParamEwidId");
            entity.Property(e => e.ZdrpPoczatek).HasColumnName("zdrp_Poczatek");
            entity.Property(e => e.ZdrpPoczatekW).HasColumnName("zdrp_PoczatekW");
            entity.Property(e => e.ZdrpPokazujWkalendarzu).HasColumnName("zdrp_PokazujWKalendarzu");
            entity.Property(e => e.ZdrpPokazujWkalendarzuW).HasColumnName("zdrp_PokazujWKalendarzuW");
            entity.Property(e => e.ZdrpPriorytet)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdrp_Priorytet");
            entity.Property(e => e.ZdrpPriorytetW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdrp_PriorytetW");
            entity.Property(e => e.ZdrpPrywatne).HasColumnName("zdrp_Prywatne");
            entity.Property(e => e.ZdrpPrywatneW).HasColumnName("zdrp_PrywatneW");
            entity.Property(e => e.ZdrpPrzypomnienie).HasColumnName("zdrp_Przypomnienie");
            entity.Property(e => e.ZdrpPrzypomnienieW).HasColumnName("zdrp_PrzypomnienieW");
            entity.Property(e => e.ZdrpRodzaj).HasColumnName("zdrp_Rodzaj");
            entity.Property(e => e.ZdrpRodzajW).HasColumnName("zdrp_RodzajW");
            entity.Property(e => e.ZdrpStatus)
                .HasDefaultValue(1)
                .HasColumnName("zdrp_Status");
            entity.Property(e => e.ZdrpStatusW)
                .HasDefaultValue(1)
                .HasColumnName("zdrp_StatusW");
            entity.Property(e => e.ZdrpUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdrp_Uwagi");
            entity.Property(e => e.ZdrpUwagiW)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdrp_UwagiW");
        });

        modelBuilder.Entity<ZdRozrachunek>(entity =>
        {
            entity.HasKey(e => e.ZdrId);

            entity.ToTable("zd_Rozrachunek", tb =>
                {
                    tb.HasTrigger("tr_ZdRozrachunek_Inserting");
                    tb.HasTrigger("tr_ZdRozrachunek_Updating");
                });

            entity.Property(e => e.ZdrId)
                .ValueGeneratedNever()
                .HasColumnName("zdr_Id");
            entity.Property(e => e.ZdrIdRozrachunku).HasColumnName("zdr_IdRozrachunku");
            entity.Property(e => e.ZdrIdZadania).HasColumnName("zdr_IdZadania");

            entity.HasOne(d => d.ZdrIdRozrachunkuNavigation).WithMany(p => p.ZdRozrachuneks)
                .HasForeignKey(d => d.ZdrIdRozrachunku)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zd_Rozrachunek_nz__Finanse");

            entity.HasOne(d => d.ZdrIdZadaniaNavigation).WithMany(p => p.ZdRozrachuneks)
                .HasForeignKey(d => d.ZdrIdZadania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zd_Rozrachunek_zd_Zadanie");
        });

        modelBuilder.Entity<ZdSpotkanieParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zd_SpotkanieParametr");

            entity.Property(e => e.ZdspBezCzasu).HasColumnName("zdsp_BezCzasu");
            entity.Property(e => e.ZdspBezCzasuW).HasColumnName("zdsp_BezCzasuW");
            entity.Property(e => e.ZdspCalyDzien).HasColumnName("zdsp_CalyDzien");
            entity.Property(e => e.ZdspCalyDzienW).HasColumnName("zdsp_CalyDzienW");
            entity.Property(e => e.ZdspCzasTrwania).HasColumnName("zdsp_CzasTrwania");
            entity.Property(e => e.ZdspCzasTrwaniaW).HasColumnName("zdsp_CzasTrwaniaW");
            entity.Property(e => e.ZdspFormaW).HasColumnName("zdsp_FormaW");
            entity.Property(e => e.ZdspId).HasColumnName("zdsp_Id");
            entity.Property(e => e.ZdspKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdsp_Kolor");
            entity.Property(e => e.ZdspKolorW)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdsp_KolorW");
            entity.Property(e => e.ZdspKotwicz).HasColumnName("zdsp_Kotwicz");
            entity.Property(e => e.ZdspKotwiczW).HasColumnName("zdsp_KotwiczW");
            entity.Property(e => e.ZdspOpiekun)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdsp_Opiekun");
            entity.Property(e => e.ZdspOpiekunW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdsp_OpiekunW");
            entity.Property(e => e.ZdspParamEwidId).HasColumnName("zdsp_ParamEwidId");
            entity.Property(e => e.ZdspPoczatek).HasColumnName("zdsp_Poczatek");
            entity.Property(e => e.ZdspPoczatekW).HasColumnName("zdsp_PoczatekW");
            entity.Property(e => e.ZdspPokazujWkalendarzu).HasColumnName("zdsp_PokazujWKalendarzu");
            entity.Property(e => e.ZdspPokazujWkalendarzuW).HasColumnName("zdsp_PokazujWKalendarzuW");
            entity.Property(e => e.ZdspPriorytet)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdsp_Priorytet");
            entity.Property(e => e.ZdspPriorytetW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdsp_PriorytetW");
            entity.Property(e => e.ZdspPrywatne).HasColumnName("zdsp_Prywatne");
            entity.Property(e => e.ZdspPrywatneW).HasColumnName("zdsp_PrywatneW");
            entity.Property(e => e.ZdspPrzypomnienie).HasColumnName("zdsp_Przypomnienie");
            entity.Property(e => e.ZdspPrzypomnienieW).HasColumnName("zdsp_PrzypomnienieW");
            entity.Property(e => e.ZdspRodzaj).HasColumnName("zdsp_Rodzaj");
            entity.Property(e => e.ZdspRodzajW).HasColumnName("zdsp_RodzajW");
            entity.Property(e => e.ZdspStatus)
                .HasDefaultValue(2)
                .HasColumnName("zdsp_Status");
            entity.Property(e => e.ZdspStatusW)
                .HasDefaultValue(2)
                .HasColumnName("zdsp_StatusW");
            entity.Property(e => e.ZdspUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdsp_Uwagi");
            entity.Property(e => e.ZdspUwagiW)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdsp_UwagiW");
        });

        modelBuilder.Entity<ZdTelefonParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zd_TelefonParametr");

            entity.Property(e => e.ZdtpBezCzasu).HasColumnName("zdtp_BezCzasu");
            entity.Property(e => e.ZdtpBezCzasuW).HasColumnName("zdtp_BezCzasuW");
            entity.Property(e => e.ZdtpCzasTrwania).HasColumnName("zdtp_CzasTrwania");
            entity.Property(e => e.ZdtpCzasTrwaniaW).HasColumnName("zdtp_CzasTrwaniaW");
            entity.Property(e => e.ZdtpFormaW).HasColumnName("zdtp_FormaW");
            entity.Property(e => e.ZdtpId).HasColumnName("zdtp_Id");
            entity.Property(e => e.ZdtpKierunek)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdtp_Kierunek");
            entity.Property(e => e.ZdtpKierunekW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdtp_KierunekW");
            entity.Property(e => e.ZdtpKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdtp_Kolor");
            entity.Property(e => e.ZdtpKolorW)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdtp_KolorW");
            entity.Property(e => e.ZdtpKotwicz).HasColumnName("zdtp_Kotwicz");
            entity.Property(e => e.ZdtpKotwiczW).HasColumnName("zdtp_KotwiczW");
            entity.Property(e => e.ZdtpOpiekun)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdtp_Opiekun");
            entity.Property(e => e.ZdtpOpiekunW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdtp_OpiekunW");
            entity.Property(e => e.ZdtpParamEwidId).HasColumnName("zdtp_ParamEwidId");
            entity.Property(e => e.ZdtpPoczatek).HasColumnName("zdtp_Poczatek");
            entity.Property(e => e.ZdtpPoczatekW).HasColumnName("zdtp_PoczatekW");
            entity.Property(e => e.ZdtpPokazujWkalendarzu).HasColumnName("zdtp_PokazujWKalendarzu");
            entity.Property(e => e.ZdtpPokazujWkalendarzuW).HasColumnName("zdtp_PokazujWKalendarzuW");
            entity.Property(e => e.ZdtpPriorytet)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdtp_Priorytet");
            entity.Property(e => e.ZdtpPriorytetW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdtp_PriorytetW");
            entity.Property(e => e.ZdtpPrywatne).HasColumnName("zdtp_Prywatne");
            entity.Property(e => e.ZdtpPrywatneW).HasColumnName("zdtp_PrywatneW");
            entity.Property(e => e.ZdtpPrzypomnienie).HasColumnName("zdtp_Przypomnienie");
            entity.Property(e => e.ZdtpPrzypomnienieW).HasColumnName("zdtp_PrzypomnienieW");
            entity.Property(e => e.ZdtpRodzaj).HasColumnName("zdtp_Rodzaj");
            entity.Property(e => e.ZdtpRodzajW).HasColumnName("zdtp_RodzajW");
            entity.Property(e => e.ZdtpStatus)
                .HasDefaultValue(1)
                .HasColumnName("zdtp_Status");
            entity.Property(e => e.ZdtpStatusW)
                .HasDefaultValue(1)
                .HasColumnName("zdtp_StatusW");
            entity.Property(e => e.ZdtpUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdtp_Uwagi");
            entity.Property(e => e.ZdtpUwagiW)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdtp_UwagiW");
        });

        modelBuilder.Entity<ZdUczestnik>(entity =>
        {
            entity.HasKey(e => e.ZdkId).HasName("PK_zd_Klient");

            entity.ToTable("zd_Uczestnik");

            entity.Property(e => e.ZdkId)
                .ValueGeneratedNever()
                .HasColumnName("zdk_Id");
            entity.Property(e => e.ZdkIdKlienta).HasColumnName("zdk_IdKlienta");
            entity.Property(e => e.ZdkIdZadania).HasColumnName("zdk_IdZadania");
            entity.Property(e => e.ZdkNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zdk_NastepnePrzypomnienie");
            entity.Property(e => e.ZdkPrzypomniane).HasColumnName("zdk_Przypomniane");
            entity.Property(e => e.ZdkRodzaj).HasColumnName("zdk_Rodzaj");
            entity.Property(e => e.ZdkWystapienieDoPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("zdk_WystapienieDoPrzypomnienia");

            entity.HasOne(d => d.ZdkIdKlientaNavigation).WithMany(p => p.ZdUczestniks)
                .HasForeignKey(d => d.ZdkIdKlienta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zd_Uczestnik_adr__Ewid");

            entity.HasOne(d => d.ZdkIdZadaniaNavigation).WithMany(p => p.ZdUczestniks)
                .HasForeignKey(d => d.ZdkIdZadania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zd_Klient_zd__Zadanie");
        });

        modelBuilder.Entity<ZdZadanie>(entity =>
        {
            entity.HasKey(e => e.ZdId);

            entity.ToTable("zd__Zadanie", tb =>
                {
                    tb.HasTrigger("tr_ZdZadanie_Inserting");
                    tb.HasTrigger("tr_ZdZadanie_Updating");
                });

            entity.Property(e => e.ZdId)
                .ValueGeneratedNever()
                .HasColumnName("zd_Id");
            entity.Property(e => e.ZdBezCzasu).HasColumnName("zd_BezCzasu");
            entity.Property(e => e.ZdCalyDzien).HasColumnName("zd_CalyDzien");
            entity.Property(e => e.ZdCoIle)
                .HasDefaultValue(1)
                .HasColumnName("zd_CoIle");
            entity.Property(e => e.ZdDefinicjaZlozona)
                .HasDefaultValue(false)
                .HasColumnName("zd_DefinicjaZlozona");
            entity.Property(e => e.ZdDluznik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_Dluznik");
            entity.Property(e => e.ZdDniTygodnia).HasColumnName("zd_DniTygodnia");
            entity.Property(e => e.ZdDokumentId).HasColumnName("zd_DokumentId");
            entity.Property(e => e.ZdDokumentPrzepisuj).HasColumnName("zd_DokumentPrzepisuj");
            entity.Property(e => e.ZdDokumentUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zd_DokumentUwagi");
            entity.Property(e => e.ZdDzienMiesiaca).HasColumnName("zd_DzienMiesiaca");
            entity.Property(e => e.ZdDzienPorzadek).HasColumnName("zd_DzienPorzadek");
            entity.Property(e => e.ZdDzienRodzaj).HasColumnName("zd_DzienRodzaj");
            entity.Property(e => e.ZdFormaDzialaniaWindykacyjnego).HasColumnName("zd_FormaDzialaniaWindykacyjnego");
            entity.Property(e => e.ZdIdZrodla).HasColumnName("zd_IdZrodla");
            entity.Property(e => e.ZdIlePowtorzen).HasColumnName("zd_IlePowtorzen");
            entity.Property(e => e.ZdInterwal).HasColumnName("zd_Interwal");
            entity.Property(e => e.ZdKiedyPrzypomnienie).HasColumnName("zd_KiedyPrzypomnienie");
            entity.Property(e => e.ZdKierunek).HasColumnName("zd_Kierunek");
            entity.Property(e => e.ZdKlasa).HasColumnName("zd_Klasa");
            entity.Property(e => e.ZdKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zd_Kolor");
            entity.Property(e => e.ZdKoniec)
                .HasColumnType("datetime")
                .HasColumnName("zd_Koniec");
            entity.Property(e => e.ZdKoniecPowtorzen)
                .HasColumnType("datetime")
                .HasColumnName("zd_KoniecPowtorzen");
            entity.Property(e => e.ZdKotwicz).HasColumnName("zd_Kotwicz");
            entity.Property(e => e.ZdLiczbaUczestnikowBezPersonelu).HasColumnName("zd_LiczbaUczestnikowBezPersonelu");
            entity.Property(e => e.ZdLiczbaUczestnikowWszystkich).HasColumnName("zd_LiczbaUczestnikowWszystkich");
            entity.Property(e => e.ZdLokalizacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("zd_Lokalizacja");
            entity.Property(e => e.ZdLokalizacjaMapy)
                .HasMaxLength(256)
                .HasColumnName("zd_LokalizacjaMapy");
            entity.Property(e => e.ZdMiesiac).HasColumnName("zd_Miesiac");
            entity.Property(e => e.ZdNastepnePrzypomnienie)
                .HasColumnType("datetime")
                .HasColumnName("zd_NastepnePrzypomnienie");
            entity.Property(e => e.ZdNotaOdsetkowa).HasColumnName("zd_NotaOdsetkowa");
            entity.Property(e => e.ZdNotatkaZakonczona).HasColumnName("zd_NotatkaZakonczona");
            entity.Property(e => e.ZdOpisPowtorzen)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zd_OpisPowtorzen");
            entity.Property(e => e.ZdPersonel).HasColumnName("zd_Personel");
            entity.Property(e => e.ZdPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("zd_Poczatek");
            entity.Property(e => e.ZdPoczatekZcyklu)
                .HasColumnType("datetime")
                .HasColumnName("zd_PoczatekZCyklu");
            entity.Property(e => e.ZdPodtyp).HasColumnName("zd_Podtyp");
            entity.Property(e => e.ZdPokazujWkalendarzu)
                .HasDefaultValue(false)
                .HasColumnName("zd_PokazujWKalendarzu");
            entity.Property(e => e.ZdPriorytet)
                .HasDefaultValue(2)
                .HasColumnName("zd_Priorytet");
            entity.Property(e => e.ZdPrywatne).HasColumnName("zd_Prywatne");
            entity.Property(e => e.ZdPrzypomniane).HasColumnName("zd_Przypomniane");
            entity.Property(e => e.ZdRezultat).HasColumnName("zd_Rezultat");
            entity.Property(e => e.ZdRobocze).HasColumnName("zd_Robocze");
            entity.Property(e => e.ZdRodzaj).HasColumnName("zd_Rodzaj");
            entity.Property(e => e.ZdRodzajPowtorzen).HasColumnName("zd_RodzajPowtorzen");
            entity.Property(e => e.ZdStatus).HasColumnName("zd_Status");
            entity.Property(e => e.ZdTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zd_Temat");
            entity.Property(e => e.ZdTransakcja).HasColumnName("zd_Transakcja");
            entity.Property(e => e.ZdUczestnicy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zd_Uczestnicy");
            entity.Property(e => e.ZdUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zd_Uwagi");
            entity.Property(e => e.ZdWezwanieDoZaplaty).HasColumnName("zd_WezwanieDoZaplaty");
            entity.Property(e => e.ZdWystapienieDoPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("zd_WystapienieDoPrzypomnienia");
            entity.Property(e => e.ZdWystawionyDokId).HasColumnName("zd_WystawionyDokId");
            entity.Property(e => e.ZdZlecenieId).HasColumnName("zd_ZlecenieId");

            entity.HasOne(d => d.ZdDokument).WithMany(p => p.ZdZadanies)
                .HasForeignKey(d => d.ZdDokumentId)
                .HasConstraintName("FK_zd__Zadanie_dok__Dokument");

            entity.HasOne(d => d.ZdNotaOdsetkowaNavigation).WithMany(p => p.ZdZadanies)
                .HasForeignKey(d => d.ZdNotaOdsetkowa)
                .HasConstraintName("FK_zd__Zadanie_nz__Finanse");

            entity.HasOne(d => d.ZdPersonelNavigation).WithMany(p => p.ZdZadanies)
                .HasForeignKey(d => d.ZdPersonel)
                .HasConstraintName("FK_zd__Zadanie_adr__Ewid");

            entity.HasOne(d => d.ZdWezwanieDoZaplatyNavigation).WithMany(p => p.ZdZadanies)
                .HasForeignKey(d => d.ZdWezwanieDoZaplaty)
                .HasConstraintName("FK_zd__Zadanie_zw__ZdarzenieWindykacyjne");
        });

        modelBuilder.Entity<ZdZadanieParametr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zd_ZadanieParametr");

            entity.Property(e => e.ZdzpBezCzasu).HasColumnName("zdzp_BezCzasu");
            entity.Property(e => e.ZdzpBezCzasuW).HasColumnName("zdzp_BezCzasuW");
            entity.Property(e => e.ZdzpCalyDzien).HasColumnName("zdzp_CalyDzien");
            entity.Property(e => e.ZdzpCalyDzienW).HasColumnName("zdzp_CalyDzienW");
            entity.Property(e => e.ZdzpCzasTrwania).HasColumnName("zdzp_CzasTrwania");
            entity.Property(e => e.ZdzpCzasTrwaniaW).HasColumnName("zdzp_CzasTrwaniaW");
            entity.Property(e => e.ZdzpFormaW).HasColumnName("zdzp_FormaW");
            entity.Property(e => e.ZdzpId).HasColumnName("zdzp_Id");
            entity.Property(e => e.ZdzpKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdzp_Kolor");
            entity.Property(e => e.ZdzpKolorW)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdzp_KolorW");
            entity.Property(e => e.ZdzpKotwicz).HasColumnName("zdzp_Kotwicz");
            entity.Property(e => e.ZdzpKotwiczW).HasColumnName("zdzp_KotwiczW");
            entity.Property(e => e.ZdzpOpiekun)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdzp_Opiekun");
            entity.Property(e => e.ZdzpOpiekunW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdzp_OpiekunW");
            entity.Property(e => e.ZdzpParamEwidId).HasColumnName("zdzp_ParamEwidId");
            entity.Property(e => e.ZdzpPoczatek).HasColumnName("zdzp_Poczatek");
            entity.Property(e => e.ZdzpPoczatekW).HasColumnName("zdzp_PoczatekW");
            entity.Property(e => e.ZdzpPokazujWkalendarzu).HasColumnName("zdzp_PokazujWKalendarzu");
            entity.Property(e => e.ZdzpPokazujWkalendarzuW).HasColumnName("zdzp_PokazujWKalendarzuW");
            entity.Property(e => e.ZdzpPriorytet)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdzp_Priorytet");
            entity.Property(e => e.ZdzpPriorytetW)
                .HasDefaultValue((byte)1)
                .HasColumnName("zdzp_PriorytetW");
            entity.Property(e => e.ZdzpPrywatne).HasColumnName("zdzp_Prywatne");
            entity.Property(e => e.ZdzpPrywatneW).HasColumnName("zdzp_PrywatneW");
            entity.Property(e => e.ZdzpPrzypomnienie).HasColumnName("zdzp_Przypomnienie");
            entity.Property(e => e.ZdzpPrzypomnienieW).HasColumnName("zdzp_PrzypomnienieW");
            entity.Property(e => e.ZdzpRodzaj).HasColumnName("zdzp_Rodzaj");
            entity.Property(e => e.ZdzpRodzajW).HasColumnName("zdzp_RodzajW");
            entity.Property(e => e.ZdzpStatus)
                .HasDefaultValue(2)
                .HasColumnName("zdzp_Status");
            entity.Property(e => e.ZdzpStatusW)
                .HasDefaultValue(2)
                .HasColumnName("zdzp_StatusW");
            entity.Property(e => e.ZdzpUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdzp_Uwagi");
            entity.Property(e => e.ZdzpUwagiW)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zdzp_UwagiW");
        });

        modelBuilder.Entity<ZlpParametryZlecen>(entity =>
        {
            entity.HasKey(e => e.ZlppId);

            entity.ToTable("zlp_ParametryZlecen");

            entity.Property(e => e.ZlppId)
                .ValueGeneratedNever()
                .HasColumnName("zlpp_Id");
            entity.Property(e => e.ZlppIdDomyslnegoFormatuNumeracji).HasColumnName("zlpp_IdDomyslnegoFormatuNumeracji");

            entity.HasOne(d => d.ZlppIdDomyslnegoFormatuNumeracjiNavigation).WithMany(p => p.ZlpParametryZlecens)
                .HasForeignKey(d => d.ZlppIdDomyslnegoFormatuNumeracji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zlp_ParametryZlecen_sl_FormatNumeracji");
        });

        modelBuilder.Entity<ZlpZlecenie>(entity =>
        {
            entity.HasKey(e => e.ZlpzId);

            entity.ToTable("zlp__Zlecenie");

            entity.Property(e => e.ZlpzId)
                .ValueGeneratedNever()
                .HasColumnName("zlpz_Id");
            entity.Property(e => e.ZlpzAnalityka)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("zlpz_Analityka");
            entity.Property(e => e.ZlpzDataPlanowanegoRozpoczeciaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataPlanowanegoRozpoczeciaZlecenia");
            entity.Property(e => e.ZlpzDataPlanowanegoZakonczeniaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataPlanowanegoZakonczeniaZlecenia");
            entity.Property(e => e.ZlpzDataRejestracjiZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRejestracjiZlecenia");
            entity.Property(e => e.ZlpzDataRzeczywistegoRozpoczeciaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRzeczywistegoRozpoczeciaZlecenia");
            entity.Property(e => e.ZlpzDataRzeczywistegoZakonczeniaZlecenia)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_DataRzeczywistegoZakonczeniaZlecenia");
            entity.Property(e => e.ZlpzIdKontrahenta).HasColumnName("zlpz_IdKontrahenta");
            entity.Property(e => e.ZlpzMpk).HasColumnName("zlpz_MPK");
            entity.Property(e => e.ZlpzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zlpz_Nazwa");
            entity.Property(e => e.ZlpzNumerZlecenia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("zlpz_NumerZlecenia");
            entity.Property(e => e.ZlpzOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zlpz_Opis");
            entity.Property(e => e.ZlpzStatusZlecenia).HasColumnName("zlpz_StatusZlecenia");
            entity.Property(e => e.ZlpzTerminWykonania)
                .HasColumnType("datetime")
                .HasColumnName("zlpz_TerminWykonania");

            entity.HasOne(d => d.ZlpzIdKontrahentaNavigation).WithMany(p => p.ZlpZlecenies)
                .HasForeignKey(d => d.ZlpzIdKontrahenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zlp__Zlecenie_kh__Kontrahent");

            entity.HasOne(d => d.ZlpzMpkNavigation).WithMany(p => p.ZlpZlecenies)
                .HasForeignKey(d => d.ZlpzMpk)
                .HasConstraintName("FK_zlp__Zlecenie_st_MPK");
        });

        modelBuilder.Entity<ZpkKsiega>(entity =>
        {
            entity.HasKey(e => e.ZpkId);

            entity.ToTable("zpk__Ksiega");

            entity.Property(e => e.ZpkId)
                .ValueGeneratedNever()
                .HasColumnName("zpk_Id");
            entity.Property(e => e.ZpkBilansOtwarcia).HasColumnName("zpk_BilansOtwarcia");
            entity.Property(e => e.ZpkDataZdarzenia)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("zpk_DataZdarzenia");
            entity.Property(e => e.ZpkDataZdarzeniaGospodarczego)
                .HasColumnType("datetime")
                .HasColumnName("zpk_DataZdarzeniaGospodarczego");
            entity.Property(e => e.ZpkDochodWolny).HasColumnName("zpk_DochodWolny");
            entity.Property(e => e.ZpkIdDokImport).HasColumnName("zpk_IdDokImport");
            entity.Property(e => e.ZpkIdObiektu).HasColumnName("zpk_IdObiektu");
            entity.Property(e => e.ZpkIdRoku).HasColumnName("zpk_IdRoku");
            entity.Property(e => e.ZpkImportPochodzenie).HasColumnName("zpk_ImportPochodzenie");
            entity.Property(e => e.ZpkImportowany).HasColumnName("zpk_Importowany");
            entity.Property(e => e.ZpkKategoriaId).HasColumnName("zpk_KategoriaId");
            entity.Property(e => e.ZpkKhId).HasColumnName("zpk_KhId");
            entity.Property(e => e.ZpkKhKodPocztowy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_KhKodPocztowy");
            entity.Property(e => e.ZpkKhMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_KhMiasto");
            entity.Property(e => e.ZpkKhNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_KhNazwa");
            entity.Property(e => e.ZpkKhNazwaPelna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_KhNazwaPelna");
            entity.Property(e => e.ZpkKhNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_KhNIP");
            entity.Property(e => e.ZpkKhSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_KhSymbol");
            entity.Property(e => e.ZpkKhUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_KhUlica");
            entity.Property(e => e.ZpkKorektaSn).HasColumnName("zpk_KorektaSN");
            entity.Property(e => e.ZpkKosztyPozostale)
                .HasColumnType("money")
                .HasColumnName("zpk_KosztyPozostale");
            entity.Property(e => e.ZpkKosztyUp)
                .HasColumnType("money")
                .HasColumnName("zpk_KosztyUP");
            entity.Property(e => e.ZpkNrDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_NrDokumentu");
            entity.Property(e => e.ZpkNumerKseF)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("zpk_NumerKSeF");
            entity.Property(e => e.ZpkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_Opis");
            entity.Property(e => e.ZpkPrzychodDzialNieodpl)
                .HasColumnType("money")
                .HasColumnName("zpk_PrzychodDzialNieodpl");
            entity.Property(e => e.ZpkPrzychodPozostale)
                .HasColumnType("money")
                .HasColumnName("zpk_PrzychodPozostale");
            entity.Property(e => e.ZpkPrzychodRazem)
                .HasComputedColumnSql("(([zpk_PrzychodDzialNieodpl]+[zpk_PrzychodSpTowIUsl])+[zpk_PrzychodPozostale])", false)
                .HasColumnType("money")
                .HasColumnName("zpk_PrzychodRazem");
            entity.Property(e => e.ZpkPrzychodRodzaj).HasColumnName("zpk_PrzychodRodzaj");
            entity.Property(e => e.ZpkPrzychodSpTowIusl)
                .HasColumnType("money")
                .HasColumnName("zpk_PrzychodSpTowIUsl");
            entity.Property(e => e.ZpkRodzaj).HasColumnName("zpk_Rodzaj");
            entity.Property(e => e.ZpkTypDokImport).HasColumnName("zpk_TypDokImport");
            entity.Property(e => e.ZpkTypObiektu).HasColumnName("zpk_TypObiektu");
            entity.Property(e => e.ZpkUniewazniony).HasColumnName("zpk_Uniewazniony");
            entity.Property(e => e.ZpkUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zpk_Uwagi");
            entity.Property(e => e.ZpkWydDochZwol).HasColumnName("zpk_WydDochZwol");
            entity.Property(e => e.ZpkWydDochZwolLataUb).HasColumnName("zpk_WydDochZwolLataUb");

            entity.HasOne(d => d.ZpkKategoria).WithMany(p => p.ZpkKsiegas)
                .HasForeignKey(d => d.ZpkKategoriaId)
                .HasConstraintName("FK_zpk__Ksiega_sl_Kategoria");

            entity.HasOne(d => d.ZpkKh).WithMany(p => p.ZpkKsiegas)
                .HasForeignKey(d => d.ZpkKhId)
                .HasConstraintName("FK_zpk__Ksiega_kh__Kontrahent");
        });

        modelBuilder.Entity<ZpkParametr>(entity =>
        {
            entity.HasKey(e => e.ZpkpId);

            entity.ToTable("zpk_Parametr");

            entity.Property(e => e.ZpkpId)
                .ValueGeneratedNever()
                .HasColumnName("zpkp_Id");
            entity.Property(e => e.ZpkpBrakKontrahenta).HasColumnName("zpkp_BrakKontrahenta");
            entity.Property(e => e.ZpkpKontrolaNumeru)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_KontrolaNumeru");
            entity.Property(e => e.ZpkpPrzepiszArt17)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszArt17");
            entity.Property(e => e.ZpkpPrzepiszBo)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszBO");
            entity.Property(e => e.ZpkpPrzepiszBowolny)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszBOWolny");
            entity.Property(e => e.ZpkpPrzepiszData)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszData");
            entity.Property(e => e.ZpkpPrzepiszDataGosp)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszDataGosp");
            entity.Property(e => e.ZpkpPrzepiszKatId)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszKatId");
            entity.Property(e => e.ZpkpPrzepiszOpis)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszOpis");
            entity.Property(e => e.ZpkpPrzepiszVat)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszVat");
            entity.Property(e => e.ZpkpPrzepiszWydDochZwol)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszWydDochZwol");
            entity.Property(e => e.ZpkpPrzepiszWydDochZwolLataub)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzepiszWydDochZwolLataub");
            entity.Property(e => e.ZpkpPrzeszpiszKhId)
                .HasDefaultValue(true)
                .HasColumnName("zpkp_PrzeszpiszKhId");
        });

        modelBuilder.Entity<ZsCechaZ>(entity =>
        {
            entity.HasKey(e => e.CzId).HasName("PK_zs_Cecha");

            entity.ToTable("zs_CechaZs");

            entity.Property(e => e.CzId)
                .ValueGeneratedNever()
                .HasColumnName("cz_Id");
            entity.Property(e => e.CzIdCecha).HasColumnName("cz_IdCecha");
            entity.Property(e => e.CzIdZs).HasColumnName("cz_IdZs");

            entity.HasOne(d => d.CzIdCechaNavigation).WithMany(p => p.ZsCechaZs)
                .HasForeignKey(d => d.CzIdCecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zs_CechaZs_sl_CechaZs");

            entity.HasOne(d => d.CzIdZsNavigation).WithMany(p => p.ZsCechaZs)
                .HasForeignKey(d => d.CzIdZs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zs_CechaZs_zs__Zasob");
        });

        modelBuilder.Entity<ZsRezerwacja>(entity =>
        {
            entity.HasKey(e => e.ZsrId);

            entity.ToTable("zs_Rezerwacja");

            entity.Property(e => e.ZsrId)
                .ValueGeneratedNever()
                .HasColumnName("zsr_Id");
            entity.Property(e => e.ZsrIdPersonel).HasColumnName("zsr_IdPersonel");
            entity.Property(e => e.ZsrIdZasobu).HasColumnName("zsr_IdZasobu");
            entity.Property(e => e.ZsrKlienci)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zsr_Klienci");
            entity.Property(e => e.ZsrKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("zsr_Kolor");
            entity.Property(e => e.ZsrKolorZasobu).HasColumnName("zsr_KolorZasobu");
            entity.Property(e => e.ZsrKoniec)
                .HasColumnType("datetime")
                .HasColumnName("zsr_Koniec");
            entity.Property(e => e.ZsrPoczatek)
                .HasColumnType("datetime")
                .HasColumnName("zsr_Poczatek");
            entity.Property(e => e.ZsrTemat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zsr_Temat");
            entity.Property(e => e.ZsrUwagi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("zsr_Uwagi");

            entity.HasOne(d => d.ZsrIdPersonelNavigation).WithMany(p => p.ZsRezerwacjas)
                .HasForeignKey(d => d.ZsrIdPersonel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zs_Rezerwacja_pd_Uzytkownik");

            entity.HasOne(d => d.ZsrIdZasobuNavigation).WithMany(p => p.ZsRezerwacjas)
                .HasForeignKey(d => d.ZsrIdZasobu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zs_Rezerwacja_zs__Zasob");
        });

        modelBuilder.Entity<ZsRezerwacjaUczestnik>(entity =>
        {
            entity.HasKey(e => e.ZsruId).HasName("PK_zs_Klient");

            entity.ToTable("zs_RezerwacjaUczestnik");

            entity.Property(e => e.ZsruId)
                .ValueGeneratedNever()
                .HasColumnName("zsru_Id");
            entity.Property(e => e.ZsruIdKlienta).HasColumnName("zsru_IdKlienta");
            entity.Property(e => e.ZsruIdRezerwacji).HasColumnName("zsru_IdRezerwacji");

            entity.HasOne(d => d.ZsruIdKlientaNavigation).WithMany(p => p.ZsRezerwacjaUczestniks)
                .HasForeignKey(d => d.ZsruIdKlienta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zs_RezerwacjaUczestnik_adr__Ewid");

            entity.HasOne(d => d.ZsruIdRezerwacjiNavigation).WithMany(p => p.ZsRezerwacjaUczestniks)
                .HasForeignKey(d => d.ZsruIdRezerwacji)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zs_Klient_zs_Rezerwacja");
        });

        modelBuilder.Entity<ZsZasob>(entity =>
        {
            entity.HasKey(e => e.ZsId);

            entity.ToTable("zs__Zasob");

            entity.Property(e => e.ZsId)
                .ValueGeneratedNever()
                .HasColumnName("zs_Id");
            entity.Property(e => e.ZsCharakterystyka)
                .HasColumnType("text")
                .HasColumnName("zs_Charakterystyka");
            entity.Property(e => e.ZsIdPersonel).HasColumnName("zs_IdPersonel");
            entity.Property(e => e.ZsIdRodzaj).HasColumnName("zs_IdRodzaj");
            entity.Property(e => e.ZsKolor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("zs_Kolor");
            entity.Property(e => e.ZsNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zs_Nazwa");
            entity.Property(e => e.ZsNrInwRej)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zs_NrInwRej");
            entity.Property(e => e.ZsOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zs_Opis");
            entity.Property(e => e.ZsSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("zs_Symbol");
            entity.Property(e => e.ZsZablokowany).HasColumnName("zs_Zablokowany");

            entity.HasOne(d => d.ZsIdPersonelNavigation).WithMany(p => p.ZsZasobs)
                .HasForeignKey(d => d.ZsIdPersonel)
                .HasConstraintName("FK_zs__Zasob_pd_Uzytkownik");

            entity.HasOne(d => d.ZsIdRodzajNavigation).WithMany(p => p.ZsZasobs)
                .HasForeignKey(d => d.ZsIdRodzaj)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zs__Zasob_sl_RodzajZasobu");
        });

        modelBuilder.Entity<ZsZdjecieZ>(entity =>
        {
            entity.HasKey(e => e.ZdjId);

            entity.ToTable("zs_ZdjecieZs");

            entity.Property(e => e.ZdjId)
                .ValueGeneratedNever()
                .HasColumnName("zdj_Id");
            entity.Property(e => e.ZdjGlowne).HasColumnName("zdj_Glowne");
            entity.Property(e => e.ZdjIdZasob).HasColumnName("zdj_IdZasob");
            entity.Property(e => e.ZdjZdjecie)
                .HasColumnType("image")
                .HasColumnName("zdj_Zdjecie");

            entity.HasOne(d => d.ZdjIdZasobNavigation).WithMany(p => p.ZsZdjecieZs)
                .HasForeignKey(d => d.ZdjIdZasob)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zs_ZdjecieZs_zs__Zasob");
        });

        modelBuilder.Entity<ZstEwid>(entity =>
        {
            entity.HasKey(e => e.ZstId);

            entity.ToTable("zst__Ewid", tb => tb.HasTrigger("tr_zst__Ewid_AfterDelete"));

            entity.Property(e => e.ZstId)
                .ValueGeneratedNever()
                .HasColumnName("zst_Id");
            entity.Property(e => e.ZstDataUzycia)
                .HasColumnType("datetime")
                .HasColumnName("zst_DataUzycia");
            entity.Property(e => e.ZstDll)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zst_Dll");
            entity.Property(e => e.ZstIdKategorii).HasColumnName("zst_IdKategorii");
            entity.Property(e => e.ZstIkona).HasColumnName("zst_Ikona");
            entity.Property(e => e.ZstNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zst_Nazwa");
            entity.Property(e => e.ZstOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zst_Opis");
            entity.Property(e => e.ZstProgFlagi).HasColumnName("zst_ProgFlagi");
            entity.Property(e => e.ZstProgId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zst_ProgId");
            entity.Property(e => e.ZstStatusNowosci).HasColumnName("zst_StatusNowosci");
            entity.Property(e => e.ZstTresc)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("zst_Tresc");
            entity.Property(e => e.ZstTrescDefiniowalne)
                .HasColumnType("image")
                .HasColumnName("zst_TrescDefiniowalne");
            entity.Property(e => e.ZstTyp).HasColumnName("zst_Typ");
            entity.Property(e => e.ZstUser).HasColumnName("zst_User");

            entity.HasOne(d => d.ZstIdKategoriiNavigation).WithMany(p => p.ZstEwids)
                .HasForeignKey(d => d.ZstIdKategorii)
                .HasConstraintName("FK_zst__Ewid_sl_KategoriaZestawien");

            entity.HasMany(d => d.PfIdUzytkownikas).WithMany(p => p.PfIdObiektus8)
                .UsingEntity<Dictionary<string, object>>(
                    "ZstEwidProfil",
                    r => r.HasOne<PdUzytkownik>().WithMany()
                        .HasForeignKey("PfIdUzytkownika")
                        .HasConstraintName("FK_zst_EwidProfil_pd_Uzytkownik"),
                    l => l.HasOne<ZstEwid>().WithMany()
                        .HasForeignKey("PfIdObiektu")
                        .HasConstraintName("FK_zst_EwidProfil_zst__Ewid"),
                    j =>
                    {
                        j.HasKey("PfIdObiektu", "PfIdUzytkownika");
                        j.ToTable("zst_EwidProfil");
                        j.IndexerProperty<int>("PfIdObiektu").HasColumnName("pf_IdObiektu");
                        j.IndexerProperty<int>("PfIdUzytkownika").HasColumnName("pf_IdUzytkownika");
                    });
        });

        modelBuilder.Entity<ZstTemp>(entity =>
        {
            entity.HasKey(e => e.ZsmId);

            entity.ToTable("zst_Temp");

            entity.Property(e => e.ZsmId).HasColumnName("zsm_Id");
            entity.Property(e => e.ZsmZawartosc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("zsm_Zawartosc");
        });

        modelBuilder.Entity<ZstWlasneXml>(entity =>
        {
            entity.HasKey(e => e.ZstxId);

            entity.ToTable("zst_WlasneXML");

            entity.Property(e => e.ZstxId)
                .ValueGeneratedNever()
                .HasColumnName("zstx_Id");
            entity.Property(e => e.ZstxDefSciezka)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zstx_DefSciezka");
            entity.Property(e => e.ZstxDefinicja)
                .HasColumnType("image")
                .HasColumnName("zstx_Definicja");
            entity.Property(e => e.ZstxPlikWynikHtm)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zstx_PlikWynikHTM");
            entity.Property(e => e.ZstxPlikWynikXml)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zstx_PlikWynikXML");
            entity.Property(e => e.ZstxTranSciezka)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zstx_TranSciezka");
            entity.Property(e => e.ZstxTransformacja)
                .HasColumnType("image")
                .HasColumnName("zstx_Transformacja");
            entity.Property(e => e.ZstxZapiszWynikHtm).HasColumnName("zstx_ZapiszWynikHTM");
            entity.Property(e => e.ZstxZapiszWynikXml).HasColumnName("zstx_ZapiszWynikXML");
            entity.Property(e => e.ZstxZestId).HasColumnName("zstx_ZestId");

            entity.HasOne(d => d.ZstxZest).WithMany(p => p.ZstWlasneXmls)
                .HasForeignKey(d => d.ZstxZestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zst_WlasneXML_zst__Ewid");
        });

        modelBuilder.Entity<ZwRozrachunek>(entity =>
        {
            entity.HasKey(e => e.ZwrId);

            entity.ToTable("zw_Rozrachunek");

            entity.Property(e => e.ZwrId)
                .ValueGeneratedNever()
                .HasColumnName("zwr_Id");
            entity.Property(e => e.ZwrDataPowstania)
                .HasColumnType("datetime")
                .HasColumnName("zwr_DataPowstania");
            entity.Property(e => e.ZwrIdRoz).HasColumnName("zwr_idRoz");
            entity.Property(e => e.ZwrIdZw).HasColumnName("zwr_idZW");
            entity.Property(e => e.ZwrNalPierwotna)
                .HasColumnType("money")
                .HasColumnName("zwr_NalPierwotna");
            entity.Property(e => e.ZwrNalPierwotnaWaluta)
                .HasColumnType("money")
                .HasColumnName("zwr_NalPierwotnaWaluta");
            entity.Property(e => e.ZwrNalWaluta)
                .HasColumnType("money")
                .HasColumnName("zwr_NalWaluta");
            entity.Property(e => e.ZwrNaleznosc)
                .HasColumnType("money")
                .HasColumnName("zwr_Naleznosc");
            entity.Property(e => e.ZwrNumerPelny)
                .HasMaxLength(144)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zwr_NumerPelny");
            entity.Property(e => e.ZwrOdsetki)
                .HasColumnType("money")
                .HasColumnName("zwr_Odsetki");
            entity.Property(e => e.ZwrSpoznienie).HasColumnName("zwr_Spoznienie");
            entity.Property(e => e.ZwrStatus).HasColumnName("zwr_Status");
            entity.Property(e => e.ZwrStopaOdsetek)
                .HasColumnType("money")
                .HasColumnName("zwr_StopaOdsetek");
            entity.Property(e => e.ZwrTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("zwr_TerminPlatnosci");
            entity.Property(e => e.ZwrTxtWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("zwr_TxtWaluta");
            entity.Property(e => e.ZwrTypOdsetek).HasColumnName("zwr_TypOdsetek");

            entity.HasOne(d => d.ZwrIdRozNavigation).WithMany(p => p.ZwRozrachuneks)
                .HasForeignKey(d => d.ZwrIdRoz)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zw_Rozrachunek_nz__Finanse");

            entity.HasOne(d => d.ZwrIdZwNavigation).WithMany(p => p.ZwRozrachuneks)
                .HasForeignKey(d => d.ZwrIdZw)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zw_Rozrachunek_zw__ZdarzenieWindykacyjne");
        });

        modelBuilder.Entity<ZwZdarzenieWindykacyjne>(entity =>
        {
            entity.HasKey(e => e.ZwzId);

            entity.ToTable("zw__ZdarzenieWindykacyjne");

            entity.Property(e => e.ZwzId)
                .ValueGeneratedNever()
                .HasColumnName("zwz_Id");
            entity.Property(e => e.ZwzDataWystawieniaWezwania)
                .HasColumnType("datetime")
                .HasColumnName("zwz_DataWystawieniaWezwania");
            entity.Property(e => e.ZwzIdDluznika).HasColumnName("zwz_IdDluznika");
            entity.Property(e => e.ZwzIdHistAdr).HasColumnName("zwz_IdHistAdr");
            entity.Property(e => e.ZwzIdRachunekBankowy).HasColumnName("zwz_IdRachunekBankowy");
            entity.Property(e => e.ZwzIdWystawil).HasColumnName("zwz_IdWystawil");
            entity.Property(e => e.ZwzOdsetkiNaDzien)
                .HasColumnType("datetime")
                .HasColumnName("zwz_OdsetkiNaDzien");
            entity.Property(e => e.ZwzOpisWezwania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zwz_OpisWezwania");
            entity.Property(e => e.ZwzTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("zwz_TerminPlatnosci");
            entity.Property(e => e.ZwzTypDluznika).HasColumnName("zwz_TypDluznika");
            entity.Property(e => e.ZwzTypWezwania).HasColumnName("zwz_TypWezwania");
            entity.Property(e => e.ZwzWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("zwz_Waluta");
            entity.Property(e => e.ZwzWartoscNaleznosci)
                .HasColumnType("money")
                .HasColumnName("zwz_WartoscNaleznosci");
            entity.Property(e => e.ZwzWartoscOdsetek)
                .HasColumnType("money")
                .HasColumnName("zwz_WartoscOdsetek");

            entity.HasOne(d => d.ZwzIdRachunekBankowyNavigation).WithMany(p => p.ZwZdarzenieWindykacyjnes)
                .HasForeignKey(d => d.ZwzIdRachunekBankowy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zw__ZdarzenieWindykacyjne_rb__RachBankowy");

            entity.HasOne(d => d.ZwzIdWystawilNavigation).WithMany(p => p.ZwZdarzenieWindykacyjnes)
                .HasForeignKey(d => d.ZwzIdWystawil)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zw__ZdarzenieWindykacyjne_pd_Uzytkownik");

            entity.HasOne(d => d.ZwzTypWezwaniaNavigation).WithMany(p => p.ZwZdarzenieWindykacyjnes)
                .HasForeignKey(d => d.ZwzTypWezwania)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_zw__ZdarzenieWindykacyjne_sl_FormaDzialaniaWindykacyjnego");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
